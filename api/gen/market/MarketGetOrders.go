// Code generated by https://github.com/defany/govk. DO NOT EDIT.

package requests

import (
	"github.com/defany/govk/api"
	"github.com/defany/govk/api/gen/models"
)

// MarketGetOrders ...
type MarketGetOrdersRequest api.Params

func NewMarketGetOrdersRequest() MarketGetOrdersRequest {
	params := make(MarketGetOrdersRequest, 7)
	return params
}

func (m MarketGetOrdersRequest) WithOffset(m_offset int) MarketGetOrdersRequest{
	m["offset"] = m_offset
	return m
}

func (m MarketGetOrdersRequest) WithCount(m_count int) MarketGetOrdersRequest{
	m["count"] = m_count
	return m
}

func (m MarketGetOrdersRequest) WithExtended(m_extended bool) MarketGetOrdersRequest{
	m["extended"] = m_extended
	return m
}

func (m MarketGetOrdersRequest) WithDateFrom(m_date_from string) MarketGetOrdersRequest{
	m["date_from"] = m_date_from
	return m
}

func (m MarketGetOrdersRequest) WithDateTo(m_date_to string) MarketGetOrdersRequest{
	m["date_to"] = m_date_to
	return m
}

func (m MarketGetOrdersRequest) Params() api.Params {
	return api.Params(m)
}

// May execute with listed access token types:
//    [ user ]
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/market.getOrders
func (m *Market) MarketGetOrders(params ...api.MethodParams) (resp models.MarketGetOrdersResponse, err error) {
	req := api.NewRequest[models.MarketGetOrdersResponse](m.api)

	res, err := req.Execute("market.getOrders", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MarketGetOrdersExtended ...
// May execute with listed access token types:
//    [ user ]
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/market.getOrders
func (m *Market) MarketGetOrdersExtended(params ...api.MethodParams) (resp models.MarketGetOrdersExtendedResponse, err error) {
	req := api.NewRequest[models.MarketGetOrdersExtendedResponse](m.api)

	res, err := req.Execute("market.getOrders", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

