// Code generated by https://github.com/defany/govk. DO NOT EDIT.

package requests

import (
	"github.com/defany/govk/api"
	"github.com/defany/govk/api/gen/models"
)

type Market struct {
	api *api.API
}

func NewMarket(api *api.API) *Market {
	return &Market{
		api: api,
	}
}

// MarketAdd Ads a new item to the market.
type MarketAddRequest api.Params

func NewMarketAddRequest() MarketAddRequest {
	params := make(MarketAddRequest, 16)
	return params
}

func (m MarketAddRequest) WithOwnerId(m_owner_id int) MarketAddRequest {
	m["owner_id"] = m_owner_id
	return m
}

func (m MarketAddRequest) WithName(m_name string) MarketAddRequest {
	m["name"] = m_name
	return m
}

func (m MarketAddRequest) WithDescription(m_description string) MarketAddRequest {
	m["description"] = m_description
	return m
}

func (m MarketAddRequest) WithCategoryId(m_category_id int) MarketAddRequest {
	m["category_id"] = m_category_id
	return m
}

func (m MarketAddRequest) WithPrice(m_price float64) MarketAddRequest {
	m["price"] = m_price
	return m
}

func (m MarketAddRequest) WithOldPrice(m_old_price float64) MarketAddRequest {
	m["old_price"] = m_old_price
	return m
}

func (m MarketAddRequest) WithDeleted(m_deleted bool) MarketAddRequest {
	m["deleted"] = m_deleted
	return m
}

func (m MarketAddRequest) WithMainPhotoId(m_main_photo_id int) MarketAddRequest {
	m["main_photo_id"] = m_main_photo_id
	return m
}

func (m MarketAddRequest) WithPhotoIds(m_photo_ids []int) MarketAddRequest {
	m["photo_ids"] = m_photo_ids
	return m
}

func (m MarketAddRequest) WithUrl(m_url string) MarketAddRequest {
	m["url"] = m_url
	return m
}

func (m MarketAddRequest) WithDimensionWidth(m_dimension_width int) MarketAddRequest {
	m["dimension_width"] = m_dimension_width
	return m
}

func (m MarketAddRequest) WithDimensionHeight(m_dimension_height int) MarketAddRequest {
	m["dimension_height"] = m_dimension_height
	return m
}

func (m MarketAddRequest) WithDimensionLength(m_dimension_length int) MarketAddRequest {
	m["dimension_length"] = m_dimension_length
	return m
}

func (m MarketAddRequest) WithWeight(m_weight int) MarketAddRequest {
	m["weight"] = m_weight
	return m
}

func (m MarketAddRequest) WithSku(m_sku string) MarketAddRequest {
	m["sku"] = m_sku
	return m
}

func (m MarketAddRequest) Params() api.Params {
	return api.Params(m)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_AccessMarket, Error_MarketTooManyItems, Error_MarketItemHasBadLinks, Error_MarketVariantNotFound, Error_MarketPropertyNotFound, Error_MarketGroupingItemsMustHaveDistinctProperties, Error_MarketGroupingMustContainMoreThanOneItem, Error_MarketPhotosCropInvalidFormat, Error_MarketPhotosCropOverflow, Error_MarketPhotosCropSizeTooLow, Error_MarketNotEnabled ]
//
// https://dev.vk.com/method/market.add
func (m *Market) MarketAdd(params ...api.MethodParams) (resp models.MarketAddResponse, err error) {
	req := api.NewRequest[models.MarketAddResponse](m.api)

	res, err := req.Execute("market.add", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MarketAddAlbum Creates new collection of items
type MarketAddAlbumRequest api.Params

func NewMarketAddAlbumRequest() MarketAddAlbumRequest {
	params := make(MarketAddAlbumRequest, 6)
	return params
}

func (m MarketAddAlbumRequest) WithOwnerId(m_owner_id int) MarketAddAlbumRequest {
	m["owner_id"] = m_owner_id
	return m
}

func (m MarketAddAlbumRequest) WithTitle(m_title string) MarketAddAlbumRequest {
	m["title"] = m_title
	return m
}

func (m MarketAddAlbumRequest) WithPhotoId(m_photo_id int) MarketAddAlbumRequest {
	m["photo_id"] = m_photo_id
	return m
}

func (m MarketAddAlbumRequest) WithMainAlbum(m_main_album bool) MarketAddAlbumRequest {
	m["main_album"] = m_main_album
	return m
}

func (m MarketAddAlbumRequest) WithIsHidden(m_is_hidden bool) MarketAddAlbumRequest {
	m["is_hidden"] = m_is_hidden
	return m
}

func (m MarketAddAlbumRequest) Params() api.Params {
	return api.Params(m)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_MarketTooManyAlbums, Error_MarketNotEnabled, Error_MarketAlbumMainHidden ]
//
// https://dev.vk.com/method/market.addAlbum
func (m *Market) MarketAddAlbum(params ...api.MethodParams) (resp models.MarketAddAlbumResponse, err error) {
	req := api.NewRequest[models.MarketAddAlbumResponse](m.api)

	res, err := req.Execute("market.addAlbum", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MarketAddToAlbum Adds an item to one or multiple collections.
type MarketAddToAlbumRequest api.Params

func NewMarketAddToAlbumRequest() MarketAddToAlbumRequest {
	params := make(MarketAddToAlbumRequest, 4)
	return params
}

func (m MarketAddToAlbumRequest) WithOwnerId(m_owner_id int) MarketAddToAlbumRequest {
	m["owner_id"] = m_owner_id
	return m
}

func (m MarketAddToAlbumRequest) WithItemIds(m_item_ids []int) MarketAddToAlbumRequest {
	m["item_ids"] = m_item_ids
	return m
}

func (m MarketAddToAlbumRequest) WithAlbumIds(m_album_ids []int) MarketAddToAlbumRequest {
	m["album_ids"] = m_album_ids
	return m
}

func (m MarketAddToAlbumRequest) Params() api.Params {
	return api.Params(m)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_MarketAlbumNotFound, Error_MarketNotEnabled, Error_MarketItemNotFound, Error_MarketTooManyItemsInAlbum, Error_MarketItemAlreadyAdded ]
//
// https://dev.vk.com/method/market.addToAlbum
func (m *Market) MarketAddToAlbum(params ...api.MethodParams) (resp models.BaseOkResponse, err error) {
	req := api.NewRequest[models.BaseOkResponse](m.api)

	res, err := req.Execute("market.addToAlbum", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MarketCreateComment Creates a new comment for an item.
type MarketCreateCommentRequest api.Params

func NewMarketCreateCommentRequest() MarketCreateCommentRequest {
	params := make(MarketCreateCommentRequest, 9)
	return params
}

func (m MarketCreateCommentRequest) WithOwnerId(m_owner_id int) MarketCreateCommentRequest {
	m["owner_id"] = m_owner_id
	return m
}

func (m MarketCreateCommentRequest) WithItemId(m_item_id int) MarketCreateCommentRequest {
	m["item_id"] = m_item_id
	return m
}

func (m MarketCreateCommentRequest) WithMessage(m_message string) MarketCreateCommentRequest {
	m["message"] = m_message
	return m
}

func (m MarketCreateCommentRequest) WithAttachments(m_attachments []string) MarketCreateCommentRequest {
	m["attachments"] = m_attachments
	return m
}

func (m MarketCreateCommentRequest) WithFromGroup(m_from_group bool) MarketCreateCommentRequest {
	m["from_group"] = m_from_group
	return m
}

func (m MarketCreateCommentRequest) WithReplyToComment(m_reply_to_comment int) MarketCreateCommentRequest {
	m["reply_to_comment"] = m_reply_to_comment
	return m
}

func (m MarketCreateCommentRequest) WithStickerId(m_sticker_id int) MarketCreateCommentRequest {
	m["sticker_id"] = m_sticker_id
	return m
}

func (m MarketCreateCommentRequest) WithGuid(m_guid string) MarketCreateCommentRequest {
	m["guid"] = m_guid
	return m
}

func (m MarketCreateCommentRequest) Params() api.Params {
	return api.Params(m)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/market.createComment
func (m *Market) MarketCreateComment(params ...api.MethodParams) (resp models.MarketCreateCommentResponse, err error) {
	req := api.NewRequest[models.MarketCreateCommentResponse](m.api)

	res, err := req.Execute("market.createComment", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MarketDelete Deletes an item.
type MarketDeleteRequest api.Params

func NewMarketDeleteRequest() MarketDeleteRequest {
	params := make(MarketDeleteRequest, 3)
	return params
}

func (m MarketDeleteRequest) WithOwnerId(m_owner_id int) MarketDeleteRequest {
	m["owner_id"] = m_owner_id
	return m
}

func (m MarketDeleteRequest) WithItemId(m_item_id int) MarketDeleteRequest {
	m["item_id"] = m_item_id
	return m
}

func (m MarketDeleteRequest) Params() api.Params {
	return api.Params(m)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_AccessMarket, Error_MarketNotEnabled ]
//
// https://dev.vk.com/method/market.delete
func (m *Market) MarketDelete(params ...api.MethodParams) (resp models.BaseOkResponse, err error) {
	req := api.NewRequest[models.BaseOkResponse](m.api)

	res, err := req.Execute("market.delete", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MarketDeleteAlbum Deletes a collection of items.
type MarketDeleteAlbumRequest api.Params

func NewMarketDeleteAlbumRequest() MarketDeleteAlbumRequest {
	params := make(MarketDeleteAlbumRequest, 3)
	return params
}

func (m MarketDeleteAlbumRequest) WithOwnerId(m_owner_id int) MarketDeleteAlbumRequest {
	m["owner_id"] = m_owner_id
	return m
}

func (m MarketDeleteAlbumRequest) WithAlbumId(m_album_id int) MarketDeleteAlbumRequest {
	m["album_id"] = m_album_id
	return m
}

func (m MarketDeleteAlbumRequest) Params() api.Params {
	return api.Params(m)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_MarketAlbumNotFound, Error_MarketNotEnabled ]
//
// https://dev.vk.com/method/market.deleteAlbum
func (m *Market) MarketDeleteAlbum(params ...api.MethodParams) (resp models.BaseOkResponse, err error) {
	req := api.NewRequest[models.BaseOkResponse](m.api)

	res, err := req.Execute("market.deleteAlbum", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MarketDeleteComment Deletes an item's comment
type MarketDeleteCommentRequest api.Params

func NewMarketDeleteCommentRequest() MarketDeleteCommentRequest {
	params := make(MarketDeleteCommentRequest, 3)
	return params
}

func (m MarketDeleteCommentRequest) WithOwnerId(m_owner_id int) MarketDeleteCommentRequest {
	m["owner_id"] = m_owner_id
	return m
}

func (m MarketDeleteCommentRequest) WithCommentId(m_comment_id int) MarketDeleteCommentRequest {
	m["comment_id"] = m_comment_id
	return m
}

func (m MarketDeleteCommentRequest) Params() api.Params {
	return api.Params(m)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/market.deleteComment
func (m *Market) MarketDeleteComment(params ...api.MethodParams) (resp models.MarketDeleteCommentResponse, err error) {
	req := api.NewRequest[models.MarketDeleteCommentResponse](m.api)

	res, err := req.Execute("market.deleteComment", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MarketEdit Edits an item.
type MarketEditRequest api.Params

func NewMarketEditRequest() MarketEditRequest {
	params := make(MarketEditRequest, 17)
	return params
}

func (m MarketEditRequest) WithOwnerId(m_owner_id int) MarketEditRequest {
	m["owner_id"] = m_owner_id
	return m
}

func (m MarketEditRequest) WithItemId(m_item_id int) MarketEditRequest {
	m["item_id"] = m_item_id
	return m
}

func (m MarketEditRequest) WithName(m_name string) MarketEditRequest {
	m["name"] = m_name
	return m
}

func (m MarketEditRequest) WithDescription(m_description string) MarketEditRequest {
	m["description"] = m_description
	return m
}

func (m MarketEditRequest) WithCategoryId(m_category_id int) MarketEditRequest {
	m["category_id"] = m_category_id
	return m
}

func (m MarketEditRequest) WithPrice(m_price float64) MarketEditRequest {
	m["price"] = m_price
	return m
}

func (m MarketEditRequest) WithOldPrice(m_old_price float64) MarketEditRequest {
	m["old_price"] = m_old_price
	return m
}

func (m MarketEditRequest) WithDeleted(m_deleted bool) MarketEditRequest {
	m["deleted"] = m_deleted
	return m
}

func (m MarketEditRequest) WithMainPhotoId(m_main_photo_id int) MarketEditRequest {
	m["main_photo_id"] = m_main_photo_id
	return m
}

func (m MarketEditRequest) WithPhotoIds(m_photo_ids []int) MarketEditRequest {
	m["photo_ids"] = m_photo_ids
	return m
}

func (m MarketEditRequest) WithUrl(m_url string) MarketEditRequest {
	m["url"] = m_url
	return m
}

func (m MarketEditRequest) WithDimensionWidth(m_dimension_width int) MarketEditRequest {
	m["dimension_width"] = m_dimension_width
	return m
}

func (m MarketEditRequest) WithDimensionHeight(m_dimension_height int) MarketEditRequest {
	m["dimension_height"] = m_dimension_height
	return m
}

func (m MarketEditRequest) WithDimensionLength(m_dimension_length int) MarketEditRequest {
	m["dimension_length"] = m_dimension_length
	return m
}

func (m MarketEditRequest) WithWeight(m_weight int) MarketEditRequest {
	m["weight"] = m_weight
	return m
}

func (m MarketEditRequest) WithSku(m_sku string) MarketEditRequest {
	m["sku"] = m_sku
	return m
}

func (m MarketEditRequest) Params() api.Params {
	return api.Params(m)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_AccessMarket, Error_MarketItemNotFound, Error_MarketItemHasBadLinks, Error_MarketGroupingItemsWithDifferentProperties, Error_MarketGroupingAlreadyHasSuchVariant, Error_MarketPhotosCropInvalidFormat, Error_MarketPhotosCropOverflow, Error_MarketPhotosCropSizeTooLow, Error_MarketNotEnabled ]
//
// https://dev.vk.com/method/market.edit
func (m *Market) MarketEdit(params ...api.MethodParams) (resp models.BaseOkResponse, err error) {
	req := api.NewRequest[models.BaseOkResponse](m.api)

	res, err := req.Execute("market.edit", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MarketEditAlbum Edits a collection of items
type MarketEditAlbumRequest api.Params

func NewMarketEditAlbumRequest() MarketEditAlbumRequest {
	params := make(MarketEditAlbumRequest, 7)
	return params
}

func (m MarketEditAlbumRequest) WithOwnerId(m_owner_id int) MarketEditAlbumRequest {
	m["owner_id"] = m_owner_id
	return m
}

func (m MarketEditAlbumRequest) WithAlbumId(m_album_id int) MarketEditAlbumRequest {
	m["album_id"] = m_album_id
	return m
}

func (m MarketEditAlbumRequest) WithTitle(m_title string) MarketEditAlbumRequest {
	m["title"] = m_title
	return m
}

func (m MarketEditAlbumRequest) WithPhotoId(m_photo_id int) MarketEditAlbumRequest {
	m["photo_id"] = m_photo_id
	return m
}

func (m MarketEditAlbumRequest) WithMainAlbum(m_main_album bool) MarketEditAlbumRequest {
	m["main_album"] = m_main_album
	return m
}

func (m MarketEditAlbumRequest) WithIsHidden(m_is_hidden bool) MarketEditAlbumRequest {
	m["is_hidden"] = m_is_hidden
	return m
}

func (m MarketEditAlbumRequest) Params() api.Params {
	return api.Params(m)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_MarketAlbumNotFound, Error_MarketNotEnabled, Error_MarketAlbumMainHidden ]
//
// https://dev.vk.com/method/market.editAlbum
func (m *Market) MarketEditAlbum(params ...api.MethodParams) (resp models.BaseOkResponse, err error) {
	req := api.NewRequest[models.BaseOkResponse](m.api)

	res, err := req.Execute("market.editAlbum", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MarketEditComment Chages item comment's text
type MarketEditCommentRequest api.Params

func NewMarketEditCommentRequest() MarketEditCommentRequest {
	params := make(MarketEditCommentRequest, 5)
	return params
}

func (m MarketEditCommentRequest) WithOwnerId(m_owner_id int) MarketEditCommentRequest {
	m["owner_id"] = m_owner_id
	return m
}

func (m MarketEditCommentRequest) WithCommentId(m_comment_id int) MarketEditCommentRequest {
	m["comment_id"] = m_comment_id
	return m
}

func (m MarketEditCommentRequest) WithMessage(m_message string) MarketEditCommentRequest {
	m["message"] = m_message
	return m
}

func (m MarketEditCommentRequest) WithAttachments(m_attachments []string) MarketEditCommentRequest {
	m["attachments"] = m_attachments
	return m
}

func (m MarketEditCommentRequest) Params() api.Params {
	return api.Params(m)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/market.editComment
func (m *Market) MarketEditComment(params ...api.MethodParams) (resp models.BaseOkResponse, err error) {
	req := api.NewRequest[models.BaseOkResponse](m.api)

	res, err := req.Execute("market.editComment", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MarketEditOrder Edit order
type MarketEditOrderRequest api.Params

func NewMarketEditOrderRequest() MarketEditOrderRequest {
	params := make(MarketEditOrderRequest, 12)
	return params
}

func (m MarketEditOrderRequest) WithUserId(m_user_id int) MarketEditOrderRequest {
	m["user_id"] = m_user_id
	return m
}

func (m MarketEditOrderRequest) WithOrderId(m_order_id int) MarketEditOrderRequest {
	m["order_id"] = m_order_id
	return m
}

func (m MarketEditOrderRequest) WithMerchantComment(m_merchant_comment string) MarketEditOrderRequest {
	m["merchant_comment"] = m_merchant_comment
	return m
}

func (m MarketEditOrderRequest) WithStatus(m_status int) MarketEditOrderRequest {
	m["status"] = m_status
	return m
}

func (m MarketEditOrderRequest) WithTrackNumber(m_track_number string) MarketEditOrderRequest {
	m["track_number"] = m_track_number
	return m
}

func (m MarketEditOrderRequest) WithPaymentStatus(m_payment_status string) MarketEditOrderRequest {
	m["payment_status"] = m_payment_status
	return m
}

func (m MarketEditOrderRequest) WithDeliveryPrice(m_delivery_price int) MarketEditOrderRequest {
	m["delivery_price"] = m_delivery_price
	return m
}

func (m MarketEditOrderRequest) WithWidth(m_width int) MarketEditOrderRequest {
	m["width"] = m_width
	return m
}

func (m MarketEditOrderRequest) WithLength(m_length int) MarketEditOrderRequest {
	m["length"] = m_length
	return m
}

func (m MarketEditOrderRequest) WithHeight(m_height int) MarketEditOrderRequest {
	m["height"] = m_height
	return m
}

func (m MarketEditOrderRequest) WithWeight(m_weight int) MarketEditOrderRequest {
	m["weight"] = m_weight
	return m
}

func (m MarketEditOrderRequest) Params() api.Params {
	return api.Params(m)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_MarketOrdersNoCartItems, Error_MarketInvalidDimensions, Error_MarketCantChangeVkpayStatus ]
//
// https://dev.vk.com/method/market.editOrder
func (m *Market) MarketEditOrder(params ...api.MethodParams) (resp models.BaseOkResponse, err error) {
	req := api.NewRequest[models.BaseOkResponse](m.api)

	res, err := req.Execute("market.editOrder", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MarketGet Returns items list for a community.
type MarketGetRequest api.Params

func NewMarketGetRequest() MarketGetRequest {
	params := make(MarketGetRequest, 11)
	return params
}

func (m MarketGetRequest) WithOwnerId(m_owner_id int) MarketGetRequest {
	m["owner_id"] = m_owner_id
	return m
}

func (m MarketGetRequest) WithAlbumId(m_album_id int) MarketGetRequest {
	m["album_id"] = m_album_id
	return m
}

func (m MarketGetRequest) WithCount(m_count int) MarketGetRequest {
	m["count"] = m_count
	return m
}

func (m MarketGetRequest) WithOffset(m_offset int) MarketGetRequest {
	m["offset"] = m_offset
	return m
}

func (m MarketGetRequest) WithExtended(m_extended bool) MarketGetRequest {
	m["extended"] = m_extended
	return m
}

func (m MarketGetRequest) WithDateFrom(m_date_from string) MarketGetRequest {
	m["date_from"] = m_date_from
	return m
}

func (m MarketGetRequest) WithDateTo(m_date_to string) MarketGetRequest {
	m["date_to"] = m_date_to
	return m
}

func (m MarketGetRequest) WithNeedVariants(m_need_variants bool) MarketGetRequest {
	m["need_variants"] = m_need_variants
	return m
}

func (m MarketGetRequest) WithWithDisabled(m_with_disabled bool) MarketGetRequest {
	m["with_disabled"] = m_with_disabled
	return m
}

func (m MarketGetRequest) Params() api.Params {
	return api.Params(m)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/market.get
func (m *Market) MarketGet(params ...api.MethodParams) (resp models.MarketGetResponse, err error) {
	req := api.NewRequest[models.MarketGetResponse](m.api)

	res, err := req.Execute("market.get", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MarketGetExtended Returns items list for a community.
// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/market.get
func (m *Market) MarketGetExtended(params ...api.MethodParams) (resp models.MarketGetExtendedResponse, err error) {
	req := api.NewRequest[models.MarketGetExtendedResponse](m.api)

	res, err := req.Execute("market.get", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MarketGetAlbumById Returns items album's data
type MarketGetAlbumByIdRequest api.Params

func NewMarketGetAlbumByIdRequest() MarketGetAlbumByIdRequest {
	params := make(MarketGetAlbumByIdRequest, 3)
	return params
}

func (m MarketGetAlbumByIdRequest) WithOwnerId(m_owner_id int) MarketGetAlbumByIdRequest {
	m["owner_id"] = m_owner_id
	return m
}

func (m MarketGetAlbumByIdRequest) WithAlbumIds(m_album_ids []int) MarketGetAlbumByIdRequest {
	m["album_ids"] = m_album_ids
	return m
}

func (m MarketGetAlbumByIdRequest) Params() api.Params {
	return api.Params(m)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/market.getAlbumById
func (m *Market) MarketGetAlbumById(params ...api.MethodParams) (resp models.MarketGetAlbumByIdResponse, err error) {
	req := api.NewRequest[models.MarketGetAlbumByIdResponse](m.api)

	res, err := req.Execute("market.getAlbumById", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MarketGetAlbums Returns community's market collections list.
type MarketGetAlbumsRequest api.Params

func NewMarketGetAlbumsRequest() MarketGetAlbumsRequest {
	params := make(MarketGetAlbumsRequest, 4)
	return params
}

func (m MarketGetAlbumsRequest) WithOwnerId(m_owner_id int) MarketGetAlbumsRequest {
	m["owner_id"] = m_owner_id
	return m
}

func (m MarketGetAlbumsRequest) WithOffset(m_offset int) MarketGetAlbumsRequest {
	m["offset"] = m_offset
	return m
}

func (m MarketGetAlbumsRequest) WithCount(m_count int) MarketGetAlbumsRequest {
	m["count"] = m_count
	return m
}

func (m MarketGetAlbumsRequest) Params() api.Params {
	return api.Params(m)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/market.getAlbums
func (m *Market) MarketGetAlbums(params ...api.MethodParams) (resp models.MarketGetAlbumsResponse, err error) {
	req := api.NewRequest[models.MarketGetAlbumsResponse](m.api)

	res, err := req.Execute("market.getAlbums", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MarketGetById Returns information about market items by their ids.
type MarketGetByIdRequest api.Params

func NewMarketGetByIdRequest() MarketGetByIdRequest {
	params := make(MarketGetByIdRequest, 4)
	return params
}

func (m MarketGetByIdRequest) WithItemIds(m_item_ids []string) MarketGetByIdRequest {
	m["item_ids"] = m_item_ids
	return m
}

func (m MarketGetByIdRequest) WithExtended(m_extended bool) MarketGetByIdRequest {
	m["extended"] = m_extended
	return m
}

func (m MarketGetByIdRequest) Params() api.Params {
	return api.Params(m)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/market.getById
func (m *Market) MarketGetById(params ...api.MethodParams) (resp models.MarketGetByIdResponse, err error) {
	req := api.NewRequest[models.MarketGetByIdResponse](m.api)

	res, err := req.Execute("market.getById", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MarketGetByIdExtended Returns information about market items by their ids.
// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/market.getById
func (m *Market) MarketGetByIdExtended(params ...api.MethodParams) (resp models.MarketGetByIdExtendedResponse, err error) {
	req := api.NewRequest[models.MarketGetByIdExtendedResponse](m.api)

	res, err := req.Execute("market.getById", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MarketGetCategories Returns a list of market categories.
type MarketGetCategoriesRequest api.Params

func NewMarketGetCategoriesRequest() MarketGetCategoriesRequest {
	params := make(MarketGetCategoriesRequest, 3)
	return params
}

func (m MarketGetCategoriesRequest) WithCount(m_count int) MarketGetCategoriesRequest {
	m["count"] = m_count
	return m
}

func (m MarketGetCategoriesRequest) WithOffset(m_offset int) MarketGetCategoriesRequest {
	m["offset"] = m_offset
	return m
}

func (m MarketGetCategoriesRequest) Params() api.Params {
	return api.Params(m)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/market.getCategories
func (m *Market) MarketGetCategories(params ...api.MethodParams) (resp models.MarketGetCategoriesResponse, err error) {
	req := api.NewRequest[models.MarketGetCategoriesResponse](m.api)

	res, err := req.Execute("market.getCategories", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MarketGetComments Returns comments list for an item.
type MarketGetCommentsRequest api.Params

func NewMarketGetCommentsRequest() MarketGetCommentsRequest {
	params := make(MarketGetCommentsRequest, 10)
	return params
}

func (m MarketGetCommentsRequest) WithOwnerId(m_owner_id int) MarketGetCommentsRequest {
	m["owner_id"] = m_owner_id
	return m
}

func (m MarketGetCommentsRequest) WithItemId(m_item_id int) MarketGetCommentsRequest {
	m["item_id"] = m_item_id
	return m
}

func (m MarketGetCommentsRequest) WithNeedLikes(m_need_likes bool) MarketGetCommentsRequest {
	m["need_likes"] = m_need_likes
	return m
}

func (m MarketGetCommentsRequest) WithStartCommentId(m_start_comment_id int) MarketGetCommentsRequest {
	m["start_comment_id"] = m_start_comment_id
	return m
}

func (m MarketGetCommentsRequest) WithOffset(m_offset int) MarketGetCommentsRequest {
	m["offset"] = m_offset
	return m
}

func (m MarketGetCommentsRequest) WithCount(m_count int) MarketGetCommentsRequest {
	m["count"] = m_count
	return m
}

func (m MarketGetCommentsRequest) WithSort(m_sort string) MarketGetCommentsRequest {
	m["sort"] = m_sort
	return m
}

func (m MarketGetCommentsRequest) WithExtended(m_extended bool) MarketGetCommentsRequest {
	m["extended"] = m_extended
	return m
}

func (m MarketGetCommentsRequest) WithFields(m_fields []models.UsersFields) MarketGetCommentsRequest {
	m["fields"] = m_fields
	return m
}

func (m MarketGetCommentsRequest) Params() api.Params {
	return api.Params(m)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_MarketCommentsClosed ]
//
// https://dev.vk.com/method/market.getComments
func (m *Market) MarketGetComments(params ...api.MethodParams) (resp models.MarketGetCommentsResponse, err error) {
	req := api.NewRequest[models.MarketGetCommentsResponse](m.api)

	res, err := req.Execute("market.getComments", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MarketGetGroupOrders Get market orders
type MarketGetGroupOrdersRequest api.Params

func NewMarketGetGroupOrdersRequest() MarketGetGroupOrdersRequest {
	params := make(MarketGetGroupOrdersRequest, 4)
	return params
}

func (m MarketGetGroupOrdersRequest) WithGroupId(m_group_id int) MarketGetGroupOrdersRequest {
	m["group_id"] = m_group_id
	return m
}

func (m MarketGetGroupOrdersRequest) WithOffset(m_offset int) MarketGetGroupOrdersRequest {
	m["offset"] = m_offset
	return m
}

func (m MarketGetGroupOrdersRequest) WithCount(m_count int) MarketGetGroupOrdersRequest {
	m["count"] = m_count
	return m
}

func (m MarketGetGroupOrdersRequest) Params() api.Params {
	return api.Params(m)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_MarketExtendedNotEnabled ]
//
// https://dev.vk.com/method/market.getGroupOrders
func (m *Market) MarketGetGroupOrders(params ...api.MethodParams) (resp models.MarketGetGroupOrdersResponse, err error) {
	req := api.NewRequest[models.MarketGetGroupOrdersResponse](m.api)

	res, err := req.Execute("market.getGroupOrders", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MarketGetOrderById Get order
type MarketGetOrderByIdRequest api.Params

func NewMarketGetOrderByIdRequest() MarketGetOrderByIdRequest {
	params := make(MarketGetOrderByIdRequest, 4)
	return params
}

func (m MarketGetOrderByIdRequest) WithUserId(m_user_id int) MarketGetOrderByIdRequest {
	m["user_id"] = m_user_id
	return m
}

func (m MarketGetOrderByIdRequest) WithOrderId(m_order_id int) MarketGetOrderByIdRequest {
	m["order_id"] = m_order_id
	return m
}

func (m MarketGetOrderByIdRequest) WithExtended(m_extended bool) MarketGetOrderByIdRequest {
	m["extended"] = m_extended
	return m
}

func (m MarketGetOrderByIdRequest) Params() api.Params {
	return api.Params(m)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/market.getOrderById
func (m *Market) MarketGetOrderById(params ...api.MethodParams) (resp models.MarketGetOrderByIdResponse, err error) {
	req := api.NewRequest[models.MarketGetOrderByIdResponse](m.api)

	res, err := req.Execute("market.getOrderById", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MarketGetOrderItems Get market items in the order
type MarketGetOrderItemsRequest api.Params

func NewMarketGetOrderItemsRequest() MarketGetOrderItemsRequest {
	params := make(MarketGetOrderItemsRequest, 5)
	return params
}

func (m MarketGetOrderItemsRequest) WithUserId(m_user_id int) MarketGetOrderItemsRequest {
	m["user_id"] = m_user_id
	return m
}

func (m MarketGetOrderItemsRequest) WithOrderId(m_order_id int) MarketGetOrderItemsRequest {
	m["order_id"] = m_order_id
	return m
}

func (m MarketGetOrderItemsRequest) WithOffset(m_offset int) MarketGetOrderItemsRequest {
	m["offset"] = m_offset
	return m
}

func (m MarketGetOrderItemsRequest) WithCount(m_count int) MarketGetOrderItemsRequest {
	m["count"] = m_count
	return m
}

func (m MarketGetOrderItemsRequest) Params() api.Params {
	return api.Params(m)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/market.getOrderItems
func (m *Market) MarketGetOrderItems(params ...api.MethodParams) (resp models.MarketGetOrderItemsResponse, err error) {
	req := api.NewRequest[models.MarketGetOrderItemsResponse](m.api)

	res, err := req.Execute("market.getOrderItems", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MarketGetOrders ...
type MarketGetOrdersRequest api.Params

func NewMarketGetOrdersRequest() MarketGetOrdersRequest {
	params := make(MarketGetOrdersRequest, 7)
	return params
}

func (m MarketGetOrdersRequest) WithOffset(m_offset int) MarketGetOrdersRequest {
	m["offset"] = m_offset
	return m
}

func (m MarketGetOrdersRequest) WithCount(m_count int) MarketGetOrdersRequest {
	m["count"] = m_count
	return m
}

func (m MarketGetOrdersRequest) WithExtended(m_extended bool) MarketGetOrdersRequest {
	m["extended"] = m_extended
	return m
}

func (m MarketGetOrdersRequest) WithDateFrom(m_date_from string) MarketGetOrdersRequest {
	m["date_from"] = m_date_from
	return m
}

func (m MarketGetOrdersRequest) WithDateTo(m_date_to string) MarketGetOrdersRequest {
	m["date_to"] = m_date_to
	return m
}

func (m MarketGetOrdersRequest) Params() api.Params {
	return api.Params(m)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/market.getOrders
func (m *Market) MarketGetOrders(params ...api.MethodParams) (resp models.MarketGetOrdersResponse, err error) {
	req := api.NewRequest[models.MarketGetOrdersResponse](m.api)

	res, err := req.Execute("market.getOrders", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MarketGetOrdersExtended ...
// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/market.getOrders
func (m *Market) MarketGetOrdersExtended(params ...api.MethodParams) (resp models.MarketGetOrdersExtendedResponse, err error) {
	req := api.NewRequest[models.MarketGetOrdersExtendedResponse](m.api)

	res, err := req.Execute("market.getOrders", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MarketRemoveFromAlbum Removes an item from one or multiple collections.
type MarketRemoveFromAlbumRequest api.Params

func NewMarketRemoveFromAlbumRequest() MarketRemoveFromAlbumRequest {
	params := make(MarketRemoveFromAlbumRequest, 4)
	return params
}

func (m MarketRemoveFromAlbumRequest) WithOwnerId(m_owner_id int) MarketRemoveFromAlbumRequest {
	m["owner_id"] = m_owner_id
	return m
}

func (m MarketRemoveFromAlbumRequest) WithItemId(m_item_id int) MarketRemoveFromAlbumRequest {
	m["item_id"] = m_item_id
	return m
}

func (m MarketRemoveFromAlbumRequest) WithAlbumIds(m_album_ids []int) MarketRemoveFromAlbumRequest {
	m["album_ids"] = m_album_ids
	return m
}

func (m MarketRemoveFromAlbumRequest) Params() api.Params {
	return api.Params(m)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_MarketAlbumNotFound, Error_MarketItemNotFound, Error_MarketNotEnabled ]
//
// https://dev.vk.com/method/market.removeFromAlbum
func (m *Market) MarketRemoveFromAlbum(params ...api.MethodParams) (resp models.BaseOkResponse, err error) {
	req := api.NewRequest[models.BaseOkResponse](m.api)

	res, err := req.Execute("market.removeFromAlbum", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MarketReorderAlbums Reorders the collections list.
type MarketReorderAlbumsRequest api.Params

func NewMarketReorderAlbumsRequest() MarketReorderAlbumsRequest {
	params := make(MarketReorderAlbumsRequest, 5)
	return params
}

func (m MarketReorderAlbumsRequest) WithOwnerId(m_owner_id int) MarketReorderAlbumsRequest {
	m["owner_id"] = m_owner_id
	return m
}

func (m MarketReorderAlbumsRequest) WithAlbumId(m_album_id int) MarketReorderAlbumsRequest {
	m["album_id"] = m_album_id
	return m
}

func (m MarketReorderAlbumsRequest) WithBefore(m_before int) MarketReorderAlbumsRequest {
	m["before"] = m_before
	return m
}

func (m MarketReorderAlbumsRequest) WithAfter(m_after int) MarketReorderAlbumsRequest {
	m["after"] = m_after
	return m
}

func (m MarketReorderAlbumsRequest) Params() api.Params {
	return api.Params(m)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_AccessMarket, Error_MarketAlbumNotFound, Error_MarketNotEnabled ]
//
// https://dev.vk.com/method/market.reorderAlbums
func (m *Market) MarketReorderAlbums(params ...api.MethodParams) (resp models.BaseOkResponse, err error) {
	req := api.NewRequest[models.BaseOkResponse](m.api)

	res, err := req.Execute("market.reorderAlbums", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MarketReorderItems Changes item place in a collection.
type MarketReorderItemsRequest api.Params

func NewMarketReorderItemsRequest() MarketReorderItemsRequest {
	params := make(MarketReorderItemsRequest, 6)
	return params
}

func (m MarketReorderItemsRequest) WithOwnerId(m_owner_id int) MarketReorderItemsRequest {
	m["owner_id"] = m_owner_id
	return m
}

func (m MarketReorderItemsRequest) WithAlbumId(m_album_id int) MarketReorderItemsRequest {
	m["album_id"] = m_album_id
	return m
}

func (m MarketReorderItemsRequest) WithItemId(m_item_id int) MarketReorderItemsRequest {
	m["item_id"] = m_item_id
	return m
}

func (m MarketReorderItemsRequest) WithBefore(m_before int) MarketReorderItemsRequest {
	m["before"] = m_before
	return m
}

func (m MarketReorderItemsRequest) WithAfter(m_after int) MarketReorderItemsRequest {
	m["after"] = m_after
	return m
}

func (m MarketReorderItemsRequest) Params() api.Params {
	return api.Params(m)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_AccessMarket, Error_MarketAlbumNotFound, Error_MarketItemNotFound, Error_MarketNotEnabled ]
//
// https://dev.vk.com/method/market.reorderItems
func (m *Market) MarketReorderItems(params ...api.MethodParams) (resp models.BaseOkResponse, err error) {
	req := api.NewRequest[models.BaseOkResponse](m.api)

	res, err := req.Execute("market.reorderItems", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MarketReport Sends a complaint to the item.
type MarketReportRequest api.Params

func NewMarketReportRequest() MarketReportRequest {
	params := make(MarketReportRequest, 4)
	return params
}

func (m MarketReportRequest) WithOwnerId(m_owner_id int) MarketReportRequest {
	m["owner_id"] = m_owner_id
	return m
}

func (m MarketReportRequest) WithItemId(m_item_id int) MarketReportRequest {
	m["item_id"] = m_item_id
	return m
}

func (m MarketReportRequest) WithReason(m_reason int) MarketReportRequest {
	m["reason"] = m_reason
	return m
}

func (m MarketReportRequest) Params() api.Params {
	return api.Params(m)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/market.report
func (m *Market) MarketReport(params ...api.MethodParams) (resp models.BaseOkResponse, err error) {
	req := api.NewRequest[models.BaseOkResponse](m.api)

	res, err := req.Execute("market.report", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MarketReportComment Sends a complaint to the item's comment.
type MarketReportCommentRequest api.Params

func NewMarketReportCommentRequest() MarketReportCommentRequest {
	params := make(MarketReportCommentRequest, 4)
	return params
}

func (m MarketReportCommentRequest) WithOwnerId(m_owner_id int) MarketReportCommentRequest {
	m["owner_id"] = m_owner_id
	return m
}

func (m MarketReportCommentRequest) WithCommentId(m_comment_id int) MarketReportCommentRequest {
	m["comment_id"] = m_comment_id
	return m
}

func (m MarketReportCommentRequest) WithReason(m_reason int) MarketReportCommentRequest {
	m["reason"] = m_reason
	return m
}

func (m MarketReportCommentRequest) Params() api.Params {
	return api.Params(m)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/market.reportComment
func (m *Market) MarketReportComment(params ...api.MethodParams) (resp models.BaseOkResponse, err error) {
	req := api.NewRequest[models.BaseOkResponse](m.api)

	res, err := req.Execute("market.reportComment", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MarketRestore Restores recently deleted item
type MarketRestoreRequest api.Params

func NewMarketRestoreRequest() MarketRestoreRequest {
	params := make(MarketRestoreRequest, 3)
	return params
}

func (m MarketRestoreRequest) WithOwnerId(m_owner_id int) MarketRestoreRequest {
	m["owner_id"] = m_owner_id
	return m
}

func (m MarketRestoreRequest) WithItemId(m_item_id int) MarketRestoreRequest {
	m["item_id"] = m_item_id
	return m
}

func (m MarketRestoreRequest) Params() api.Params {
	return api.Params(m)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_AccessMarket, Error_MarketRestoreTooLate, Error_MarketNotEnabled ]
//
// https://dev.vk.com/method/market.restore
func (m *Market) MarketRestore(params ...api.MethodParams) (resp models.BaseOkResponse, err error) {
	req := api.NewRequest[models.BaseOkResponse](m.api)

	res, err := req.Execute("market.restore", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MarketRestoreComment Restores a recently deleted comment
type MarketRestoreCommentRequest api.Params

func NewMarketRestoreCommentRequest() MarketRestoreCommentRequest {
	params := make(MarketRestoreCommentRequest, 3)
	return params
}

func (m MarketRestoreCommentRequest) WithOwnerId(m_owner_id int) MarketRestoreCommentRequest {
	m["owner_id"] = m_owner_id
	return m
}

func (m MarketRestoreCommentRequest) WithCommentId(m_comment_id int) MarketRestoreCommentRequest {
	m["comment_id"] = m_comment_id
	return m
}

func (m MarketRestoreCommentRequest) Params() api.Params {
	return api.Params(m)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/market.restoreComment
func (m *Market) MarketRestoreComment(params ...api.MethodParams) (resp models.MarketRestoreCommentResponse, err error) {
	req := api.NewRequest[models.MarketRestoreCommentResponse](m.api)

	res, err := req.Execute("market.restoreComment", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MarketSearch Searches market items in a community's catalog
type MarketSearchRequest api.Params

func NewMarketSearchRequest() MarketSearchRequest {
	params := make(MarketSearchRequest, 14)
	return params
}

func (m MarketSearchRequest) WithOwnerId(m_owner_id int) MarketSearchRequest {
	m["owner_id"] = m_owner_id
	return m
}

func (m MarketSearchRequest) WithAlbumId(m_album_id int) MarketSearchRequest {
	m["album_id"] = m_album_id
	return m
}

func (m MarketSearchRequest) WithQ(m_q string) MarketSearchRequest {
	m["q"] = m_q
	return m
}

func (m MarketSearchRequest) WithPriceFrom(m_price_from int) MarketSearchRequest {
	m["price_from"] = m_price_from
	return m
}

func (m MarketSearchRequest) WithPriceTo(m_price_to int) MarketSearchRequest {
	m["price_to"] = m_price_to
	return m
}

func (m MarketSearchRequest) WithSort(m_sort int) MarketSearchRequest {
	m["sort"] = m_sort
	return m
}

func (m MarketSearchRequest) WithRev(m_rev int) MarketSearchRequest {
	m["rev"] = m_rev
	return m
}

func (m MarketSearchRequest) WithOffset(m_offset int) MarketSearchRequest {
	m["offset"] = m_offset
	return m
}

func (m MarketSearchRequest) WithCount(m_count int) MarketSearchRequest {
	m["count"] = m_count
	return m
}

func (m MarketSearchRequest) WithExtended(m_extended bool) MarketSearchRequest {
	m["extended"] = m_extended
	return m
}

func (m MarketSearchRequest) WithStatus(m_status []int) MarketSearchRequest {
	m["status"] = m_status
	return m
}

func (m MarketSearchRequest) WithNeedVariants(m_need_variants bool) MarketSearchRequest {
	m["need_variants"] = m_need_variants
	return m
}

func (m MarketSearchRequest) Params() api.Params {
	return api.Params(m)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/market.search
func (m *Market) MarketSearch(params ...api.MethodParams) (resp models.MarketSearchResponse, err error) {
	req := api.NewRequest[models.MarketSearchResponse](m.api)

	res, err := req.Execute("market.search", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MarketSearchExtended Searches market items in a community's catalog
// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/market.search
func (m *Market) MarketSearchExtended(params ...api.MethodParams) (resp models.MarketSearchExtendedResponse, err error) {
	req := api.NewRequest[models.MarketSearchExtendedResponse](m.api)

	res, err := req.Execute("market.search", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MarketSearchItems ...
type MarketSearchItemsRequest api.Params

func NewMarketSearchItemsRequest() MarketSearchItemsRequest {
	params := make(MarketSearchItemsRequest, 11)
	return params
}

func (m MarketSearchItemsRequest) WithQ(m_q string) MarketSearchItemsRequest {
	m["q"] = m_q
	return m
}

func (m MarketSearchItemsRequest) WithOffset(m_offset int) MarketSearchItemsRequest {
	m["offset"] = m_offset
	return m
}

func (m MarketSearchItemsRequest) WithCount(m_count int) MarketSearchItemsRequest {
	m["count"] = m_count
	return m
}

func (m MarketSearchItemsRequest) WithCategoryId(m_category_id int) MarketSearchItemsRequest {
	m["category_id"] = m_category_id
	return m
}

func (m MarketSearchItemsRequest) WithPriceFrom(m_price_from int) MarketSearchItemsRequest {
	m["price_from"] = m_price_from
	return m
}

func (m MarketSearchItemsRequest) WithPriceTo(m_price_to int) MarketSearchItemsRequest {
	m["price_to"] = m_price_to
	return m
}

func (m MarketSearchItemsRequest) WithSortBy(m_sort_by int) MarketSearchItemsRequest {
	m["sort_by"] = m_sort_by
	return m
}

func (m MarketSearchItemsRequest) WithSortDirection(m_sort_direction int) MarketSearchItemsRequest {
	m["sort_direction"] = m_sort_direction
	return m
}

func (m MarketSearchItemsRequest) WithCountry(m_country int) MarketSearchItemsRequest {
	m["country"] = m_country
	return m
}

func (m MarketSearchItemsRequest) WithCity(m_city int) MarketSearchItemsRequest {
	m["city"] = m_city
	return m
}

func (m MarketSearchItemsRequest) Params() api.Params {
	return api.Params(m)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/market.searchItems
func (m *Market) MarketSearchItems(params ...api.MethodParams) (resp models.MarketSearchResponse, err error) {
	req := api.NewRequest[models.MarketSearchResponse](m.api)

	res, err := req.Execute("market.searchItems", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}
