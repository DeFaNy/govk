// Code generated by https://github.com/defany/govk. DO NOT EDIT.

package requests

import (
	"github.com/defany/govk/api"
	"github.com/defany/govk/api/gen/models"
)

// SecureSetCounter Sets a counter which is shown to the user in bold in the left menu.
type SecureSetCounterRequest api.Params

func NewSecureSetCounterRequest() SecureSetCounterRequest {
	params := make(SecureSetCounterRequest, 5)
	return params
}

func (s SecureSetCounterRequest) WithCounters(s_counters []string) SecureSetCounterRequest{
	s["counters"] = s_counters
	return s
}

func (s SecureSetCounterRequest) WithUserId(s_user_id int) SecureSetCounterRequest{
	s["user_id"] = s_user_id
	return s
}

func (s SecureSetCounterRequest) WithCounter(s_counter int) SecureSetCounterRequest{
	s["counter"] = s_counter
	return s
}

func (s SecureSetCounterRequest) WithIncrement(s_increment bool) SecureSetCounterRequest{
	s["increment"] = s_increment
	return s
}

func (s SecureSetCounterRequest) Params() api.Params {
	return api.Params(s)
}

// May execute with listed access token types:
//    [ service ]
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/secure.setCounter
func (s *Secure) SecureSetCounter(params ...api.MethodParams) (resp models.BaseBoolResponse, err error) {
	req := api.NewRequest[models.BaseBoolResponse](s.api)

	res, err := req.Execute("secure.setCounter", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// SecureSetCounterCounters Sets a counter which is shown to the user in bold in the left menu.
type SecureSetCounterCountersRequest api.Params

func NewSecureSetCounterCountersRequest() SecureSetCounterCountersRequest {
	params := make(SecureSetCounterCountersRequest, 5)
	return params
}

func (s SecureSetCounterCountersRequest) WithCounters(s_counters []string) SecureSetCounterCountersRequest{
	s["counters"] = s_counters
	return s
}

func (s SecureSetCounterCountersRequest) WithUserId(s_user_id int) SecureSetCounterCountersRequest{
	s["user_id"] = s_user_id
	return s
}

func (s SecureSetCounterCountersRequest) WithCounter(s_counter int) SecureSetCounterCountersRequest{
	s["counter"] = s_counter
	return s
}

func (s SecureSetCounterCountersRequest) WithIncrement(s_increment bool) SecureSetCounterCountersRequest{
	s["increment"] = s_increment
	return s
}

func (s SecureSetCounterCountersRequest) Params() api.Params {
	return api.Params(s)
}

// May execute with listed access token types:
//    [ service ]
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/secure.setCounter
func (s *Secure) SecureSetCounterCounters(params ...api.MethodParams) (resp models.SecureSetCounterArrayResponse, err error) {
	req := api.NewRequest[models.SecureSetCounterArrayResponse](s.api)

	res, err := req.Execute("secure.setCounter", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// SecureSetCounterNotSecure Sets a counter which is shown to the user in bold in the left menu.
type SecureSetCounterNotSecureRequest api.Params

func NewSecureSetCounterNotSecureRequest() SecureSetCounterNotSecureRequest {
	params := make(SecureSetCounterNotSecureRequest, 5)
	return params
}

func (s SecureSetCounterNotSecureRequest) WithCounters(s_counters []string) SecureSetCounterNotSecureRequest{
	s["counters"] = s_counters
	return s
}

func (s SecureSetCounterNotSecureRequest) WithUserId(s_user_id int) SecureSetCounterNotSecureRequest{
	s["user_id"] = s_user_id
	return s
}

func (s SecureSetCounterNotSecureRequest) WithCounter(s_counter int) SecureSetCounterNotSecureRequest{
	s["counter"] = s_counter
	return s
}

func (s SecureSetCounterNotSecureRequest) WithIncrement(s_increment bool) SecureSetCounterNotSecureRequest{
	s["increment"] = s_increment
	return s
}

func (s SecureSetCounterNotSecureRequest) Params() api.Params {
	return api.Params(s)
}

// May execute with listed access token types:
//    [ service ]
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/secure.setCounter
func (s *Secure) SecureSetCounterNotSecure(params ...api.MethodParams) (resp models.BaseBoolResponse, err error) {
	req := api.NewRequest[models.BaseBoolResponse](s.api)

	res, err := req.Execute("setCounter", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

