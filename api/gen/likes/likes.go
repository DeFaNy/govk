// Code generated by https://github.com/defany/govk. DO NOT EDIT.

package requests

import (
	"github.com/defany/govk/api"
	"github.com/defany/govk/api/gen/models"
)

type Likes struct {
	api *api.API
}

func NewLikes(api *api.API) *Likes {
	return &Likes{
		api: api,
	}
}

// LikesAdd Adds the specified object to the 'Likes' list of the current user.
type LikesAddRequest api.Params

func NewLikesAddRequest() LikesAddRequest {
	params := make(LikesAddRequest, 5)
	return params
}

func (l LikesAddRequest) WithType(l_type models.LikesType) LikesAddRequest {
	l["type"] = l_type
	return l
}

func (l LikesAddRequest) WithOwnerId(l_owner_id int) LikesAddRequest {
	l["owner_id"] = l_owner_id
	return l
}

func (l LikesAddRequest) WithItemId(l_item_id int) LikesAddRequest {
	l["item_id"] = l_item_id
	return l
}

func (l LikesAddRequest) WithAccessKey(l_access_key string) LikesAddRequest {
	l["access_key"] = l_access_key
	return l
}

func (l LikesAddRequest) Params() api.Params {
	return api.Params(l)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_LikesReactionCanNotBeApplied ]
//
// https://dev.vk.com/method/likes.add
func (l *Likes) LikesAdd(params ...api.MethodParams) (resp models.LikesAddResponse, err error) {
	req := api.NewRequest[models.LikesAddResponse](l.api)

	res, err := req.Execute("likes.add", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// LikesDelete Deletes the specified object from the 'Likes' list of the current user.
type LikesDeleteRequest api.Params

func NewLikesDeleteRequest() LikesDeleteRequest {
	params := make(LikesDeleteRequest, 5)
	return params
}

func (l LikesDeleteRequest) WithType(l_type models.LikesType) LikesDeleteRequest {
	l["type"] = l_type
	return l
}

func (l LikesDeleteRequest) WithOwnerId(l_owner_id int) LikesDeleteRequest {
	l["owner_id"] = l_owner_id
	return l
}

func (l LikesDeleteRequest) WithItemId(l_item_id int) LikesDeleteRequest {
	l["item_id"] = l_item_id
	return l
}

func (l LikesDeleteRequest) WithAccessKey(l_access_key string) LikesDeleteRequest {
	l["access_key"] = l_access_key
	return l
}

func (l LikesDeleteRequest) Params() api.Params {
	return api.Params(l)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/likes.delete
func (l *Likes) LikesDelete(params ...api.MethodParams) (resp models.LikesDeleteResponse, err error) {
	req := api.NewRequest[models.LikesDeleteResponse](l.api)

	res, err := req.Execute("likes.delete", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// LikesGetList Returns a list of IDs of users who added the specified object to their 'Likes' list.
type LikesGetListRequest api.Params

func NewLikesGetListRequest() LikesGetListRequest {
	params := make(LikesGetListRequest, 12)
	return params
}

func (l LikesGetListRequest) WithType(l_type models.LikesType) LikesGetListRequest {
	l["type"] = l_type
	return l
}

func (l LikesGetListRequest) WithOwnerId(l_owner_id int) LikesGetListRequest {
	l["owner_id"] = l_owner_id
	return l
}

func (l LikesGetListRequest) WithItemId(l_item_id int) LikesGetListRequest {
	l["item_id"] = l_item_id
	return l
}

func (l LikesGetListRequest) WithPageUrl(l_page_url string) LikesGetListRequest {
	l["page_url"] = l_page_url
	return l
}

func (l LikesGetListRequest) WithFilter(l_filter string) LikesGetListRequest {
	l["filter"] = l_filter
	return l
}

func (l LikesGetListRequest) WithFriendsOnly(l_friends_only int) LikesGetListRequest {
	l["friends_only"] = l_friends_only
	return l
}

func (l LikesGetListRequest) WithExtended(l_extended bool) LikesGetListRequest {
	l["extended"] = l_extended
	return l
}

func (l LikesGetListRequest) WithOffset(l_offset int) LikesGetListRequest {
	l["offset"] = l_offset
	return l
}

func (l LikesGetListRequest) WithCount(l_count int) LikesGetListRequest {
	l["count"] = l_count
	return l
}

func (l LikesGetListRequest) WithSkipOwn(l_skip_own bool) LikesGetListRequest {
	l["skip_own"] = l_skip_own
	return l
}

func (l LikesGetListRequest) Params() api.Params {
	return api.Params(l)
}

// May execute with listed access token types:
//
//	[ user, service ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_LikesReactionCanNotBeApplied ]
//
// https://dev.vk.com/method/likes.getList
func (l *Likes) LikesGetList(params ...api.MethodParams) (resp models.LikesGetListResponse, err error) {
	req := api.NewRequest[models.LikesGetListResponse](l.api)

	res, err := req.Execute("likes.getList", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// LikesGetListExtended Returns a list of IDs of users who added the specified object to their 'Likes' list.
// May execute with listed access token types:
//
//	[ user, service ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_LikesReactionCanNotBeApplied ]
//
// https://dev.vk.com/method/likes.getList
func (l *Likes) LikesGetListExtended(params ...api.MethodParams) (resp models.LikesGetListExtendedResponse, err error) {
	req := api.NewRequest[models.LikesGetListExtendedResponse](l.api)

	res, err := req.Execute("likes.getList", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// LikesIsLiked Checks for the object in the 'Likes' list of the specified user.
type LikesIsLikedRequest api.Params

func NewLikesIsLikedRequest() LikesIsLikedRequest {
	params := make(LikesIsLikedRequest, 5)
	return params
}

func (l LikesIsLikedRequest) WithUserId(l_user_id int) LikesIsLikedRequest {
	l["user_id"] = l_user_id
	return l
}

func (l LikesIsLikedRequest) WithType(l_type models.LikesType) LikesIsLikedRequest {
	l["type"] = l_type
	return l
}

func (l LikesIsLikedRequest) WithOwnerId(l_owner_id int) LikesIsLikedRequest {
	l["owner_id"] = l_owner_id
	return l
}

func (l LikesIsLikedRequest) WithItemId(l_item_id int) LikesIsLikedRequest {
	l["item_id"] = l_item_id
	return l
}

func (l LikesIsLikedRequest) Params() api.Params {
	return api.Params(l)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/likes.isLiked
func (l *Likes) LikesIsLiked(params ...api.MethodParams) (resp models.LikesIsLikedResponse, err error) {
	req := api.NewRequest[models.LikesIsLikedResponse](l.api)

	res, err := req.Execute("likes.isLiked", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}
