// Code generated by https://github.com/defany/govk. DO NOT EDIT.

package requests

import (
	"github.com/defany/govk/api"
	"github.com/defany/govk/api/gen/models"
)

type Groups struct {
	api *api.API
}

func NewGroups(api *api.API) *Groups {
	return &Groups{
		api: api,
	}
}

// GroupsAddAddress ...
type GroupsAddAddressRequest api.Params

func NewGroupsAddAddressRequest() GroupsAddAddressRequest {
	params := make(GroupsAddAddressRequest, 14)
	return params
}

func (g GroupsAddAddressRequest) WithGroupId(g_group_id int) GroupsAddAddressRequest {
	g["group_id"] = g_group_id
	return g
}

func (g GroupsAddAddressRequest) WithTitle(g_title string) GroupsAddAddressRequest {
	g["title"] = g_title
	return g
}

func (g GroupsAddAddressRequest) WithAddress(g_address string) GroupsAddAddressRequest {
	g["address"] = g_address
	return g
}

func (g GroupsAddAddressRequest) WithAdditionalAddress(g_additional_address string) GroupsAddAddressRequest {
	g["additional_address"] = g_additional_address
	return g
}

func (g GroupsAddAddressRequest) WithCountryId(g_country_id int) GroupsAddAddressRequest {
	g["country_id"] = g_country_id
	return g
}

func (g GroupsAddAddressRequest) WithCityId(g_city_id int) GroupsAddAddressRequest {
	g["city_id"] = g_city_id
	return g
}

func (g GroupsAddAddressRequest) WithMetroId(g_metro_id int) GroupsAddAddressRequest {
	g["metro_id"] = g_metro_id
	return g
}

func (g GroupsAddAddressRequest) WithLatitude(g_latitude float64) GroupsAddAddressRequest {
	g["latitude"] = g_latitude
	return g
}

func (g GroupsAddAddressRequest) WithLongitude(g_longitude float64) GroupsAddAddressRequest {
	g["longitude"] = g_longitude
	return g
}

func (g GroupsAddAddressRequest) WithPhone(g_phone string) GroupsAddAddressRequest {
	g["phone"] = g_phone
	return g
}

func (g GroupsAddAddressRequest) WithWorkInfoStatus(g_work_info_status models.GroupsAddressWorkInfoStatus) GroupsAddAddressRequest {
	g["work_info_status"] = g_work_info_status
	return g
}

func (g GroupsAddAddressRequest) WithTimetable(g_timetable string) GroupsAddAddressRequest {
	g["timetable"] = g_timetable
	return g
}

func (g GroupsAddAddressRequest) WithIsMainAddress(g_is_main_address bool) GroupsAddAddressRequest {
	g["is_main_address"] = g_is_main_address
	return g
}

func (g GroupsAddAddressRequest) Params() api.Params {
	return api.Params(g)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_AccessGroups, Error_NotFound, Error_GroupTooManyAddresses ]
//
// https://dev.vk.com/method/groups.addAddress
func (g *Groups) GroupsAddAddress(params ...api.MethodParams) (resp models.GroupsAddAddressResponse, err error) {
	req := api.NewRequest[models.GroupsAddAddressResponse](g.api)

	res, err := req.Execute("groups.addAddress", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// GroupsAddCallbackServer ...
type GroupsAddCallbackServerRequest api.Params

func NewGroupsAddCallbackServerRequest() GroupsAddCallbackServerRequest {
	params := make(GroupsAddCallbackServerRequest, 5)
	return params
}

func (g GroupsAddCallbackServerRequest) WithGroupId(g_group_id int) GroupsAddCallbackServerRequest {
	g["group_id"] = g_group_id
	return g
}

func (g GroupsAddCallbackServerRequest) WithUrl(g_url string) GroupsAddCallbackServerRequest {
	g["url"] = g_url
	return g
}

func (g GroupsAddCallbackServerRequest) WithTitle(g_title string) GroupsAddCallbackServerRequest {
	g["title"] = g_title
	return g
}

func (g GroupsAddCallbackServerRequest) WithSecretKey(g_secret_key string) GroupsAddCallbackServerRequest {
	g["secret_key"] = g_secret_key
	return g
}

func (g GroupsAddCallbackServerRequest) Params() api.Params {
	return api.Params(g)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_CallbackApiServersLimit ]
//
// https://dev.vk.com/method/groups.addCallbackServer
func (g *Groups) GroupsAddCallbackServer(params ...api.MethodParams) (resp models.GroupsAddCallbackServerResponse, err error) {
	req := api.NewRequest[models.GroupsAddCallbackServerResponse](g.api)

	res, err := req.Execute("groups.addCallbackServer", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// GroupsAddLink Allows to add a link to the community.
type GroupsAddLinkRequest api.Params

func NewGroupsAddLinkRequest() GroupsAddLinkRequest {
	params := make(GroupsAddLinkRequest, 4)
	return params
}

func (g GroupsAddLinkRequest) WithGroupId(g_group_id int) GroupsAddLinkRequest {
	g["group_id"] = g_group_id
	return g
}

func (g GroupsAddLinkRequest) WithLink(g_link string) GroupsAddLinkRequest {
	g["link"] = g_link
	return g
}

func (g GroupsAddLinkRequest) WithText(g_text string) GroupsAddLinkRequest {
	g["text"] = g_text
	return g
}

func (g GroupsAddLinkRequest) Params() api.Params {
	return api.Params(g)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/groups.addLink
func (g *Groups) GroupsAddLink(params ...api.MethodParams) (resp models.GroupsAddLinkResponse, err error) {
	req := api.NewRequest[models.GroupsAddLinkResponse](g.api)

	res, err := req.Execute("groups.addLink", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// GroupsApproveRequest Allows to approve join request to the community.
type GroupsApproveRequestRequest api.Params

func NewGroupsApproveRequestRequest() GroupsApproveRequestRequest {
	params := make(GroupsApproveRequestRequest, 3)
	return params
}

func (g GroupsApproveRequestRequest) WithGroupId(g_group_id int) GroupsApproveRequestRequest {
	g["group_id"] = g_group_id
	return g
}

func (g GroupsApproveRequestRequest) WithUserId(g_user_id int) GroupsApproveRequestRequest {
	g["user_id"] = g_user_id
	return g
}

func (g GroupsApproveRequestRequest) Params() api.Params {
	return api.Params(g)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_Limits ]
//
// https://dev.vk.com/method/groups.approveRequest
func (g *Groups) GroupsApproveRequest(params ...api.MethodParams) (resp models.BaseOkResponse, err error) {
	req := api.NewRequest[models.BaseOkResponse](g.api)

	res, err := req.Execute("groups.approveRequest", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// GroupsBan ...
type GroupsBanRequest api.Params

func NewGroupsBanRequest() GroupsBanRequest {
	params := make(GroupsBanRequest, 7)
	return params
}

func (g GroupsBanRequest) WithGroupId(g_group_id int) GroupsBanRequest {
	g["group_id"] = g_group_id
	return g
}

func (g GroupsBanRequest) WithOwnerId(g_owner_id int) GroupsBanRequest {
	g["owner_id"] = g_owner_id
	return g
}

func (g GroupsBanRequest) WithEndDate(g_end_date int) GroupsBanRequest {
	g["end_date"] = g_end_date
	return g
}

func (g GroupsBanRequest) WithReason(g_reason int) GroupsBanRequest {
	g["reason"] = g_reason
	return g
}

func (g GroupsBanRequest) WithComment(g_comment string) GroupsBanRequest {
	g["comment"] = g_comment
	return g
}

func (g GroupsBanRequest) WithCommentVisible(g_comment_visible bool) GroupsBanRequest {
	g["comment_visible"] = g_comment_visible
	return g
}

func (g GroupsBanRequest) Params() api.Params {
	return api.Params(g)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/groups.ban
func (g *Groups) GroupsBan(params ...api.MethodParams) (resp models.BaseOkResponse, err error) {
	req := api.NewRequest[models.BaseOkResponse](g.api)

	res, err := req.Execute("groups.ban", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// GroupsCreate Creates a new community.
type GroupsCreateRequest api.Params

func NewGroupsCreateRequest() GroupsCreateRequest {
	params := make(GroupsCreateRequest, 7)
	return params
}

func (g GroupsCreateRequest) WithTitle(g_title string) GroupsCreateRequest {
	g["title"] = g_title
	return g
}

func (g GroupsCreateRequest) WithDescription(g_description string) GroupsCreateRequest {
	g["description"] = g_description
	return g
}

func (g GroupsCreateRequest) WithType(g_type string) GroupsCreateRequest {
	g["type"] = g_type
	return g
}

func (g GroupsCreateRequest) WithPublicCategory(g_public_category int) GroupsCreateRequest {
	g["public_category"] = g_public_category
	return g
}

func (g GroupsCreateRequest) WithPublicSubcategory(g_public_subcategory int) GroupsCreateRequest {
	g["public_subcategory"] = g_public_subcategory
	return g
}

func (g GroupsCreateRequest) WithSubtype(g_subtype int) GroupsCreateRequest {
	g["subtype"] = g_subtype
	return g
}

func (g GroupsCreateRequest) Params() api.Params {
	return api.Params(g)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_Limits ]
//
// https://dev.vk.com/method/groups.create
func (g *Groups) GroupsCreate(params ...api.MethodParams) (resp models.GroupsCreateResponse, err error) {
	req := api.NewRequest[models.GroupsCreateResponse](g.api)

	res, err := req.Execute("groups.create", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// GroupsDeleteAddress ...
type GroupsDeleteAddressRequest api.Params

func NewGroupsDeleteAddressRequest() GroupsDeleteAddressRequest {
	params := make(GroupsDeleteAddressRequest, 3)
	return params
}

func (g GroupsDeleteAddressRequest) WithGroupId(g_group_id int) GroupsDeleteAddressRequest {
	g["group_id"] = g_group_id
	return g
}

func (g GroupsDeleteAddressRequest) WithAddressId(g_address_id int) GroupsDeleteAddressRequest {
	g["address_id"] = g_address_id
	return g
}

func (g GroupsDeleteAddressRequest) Params() api.Params {
	return api.Params(g)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_AccessGroups, Error_NotFound ]
//
// https://dev.vk.com/method/groups.deleteAddress
func (g *Groups) GroupsDeleteAddress(params ...api.MethodParams) (resp models.BaseOkResponse, err error) {
	req := api.NewRequest[models.BaseOkResponse](g.api)

	res, err := req.Execute("groups.deleteAddress", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// GroupsDeleteCallbackServer ...
type GroupsDeleteCallbackServerRequest api.Params

func NewGroupsDeleteCallbackServerRequest() GroupsDeleteCallbackServerRequest {
	params := make(GroupsDeleteCallbackServerRequest, 3)
	return params
}

func (g GroupsDeleteCallbackServerRequest) WithGroupId(g_group_id int) GroupsDeleteCallbackServerRequest {
	g["group_id"] = g_group_id
	return g
}

func (g GroupsDeleteCallbackServerRequest) WithServerId(g_server_id int) GroupsDeleteCallbackServerRequest {
	g["server_id"] = g_server_id
	return g
}

func (g GroupsDeleteCallbackServerRequest) Params() api.Params {
	return api.Params(g)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_NotFound ]
//
// https://dev.vk.com/method/groups.deleteCallbackServer
func (g *Groups) GroupsDeleteCallbackServer(params ...api.MethodParams) (resp models.BaseOkResponse, err error) {
	req := api.NewRequest[models.BaseOkResponse](g.api)

	res, err := req.Execute("groups.deleteCallbackServer", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// GroupsDeleteLink Allows to delete a link from the community.
type GroupsDeleteLinkRequest api.Params

func NewGroupsDeleteLinkRequest() GroupsDeleteLinkRequest {
	params := make(GroupsDeleteLinkRequest, 3)
	return params
}

func (g GroupsDeleteLinkRequest) WithGroupId(g_group_id int) GroupsDeleteLinkRequest {
	g["group_id"] = g_group_id
	return g
}

func (g GroupsDeleteLinkRequest) WithLinkId(g_link_id int) GroupsDeleteLinkRequest {
	g["link_id"] = g_link_id
	return g
}

func (g GroupsDeleteLinkRequest) Params() api.Params {
	return api.Params(g)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/groups.deleteLink
func (g *Groups) GroupsDeleteLink(params ...api.MethodParams) (resp models.BaseOkResponse, err error) {
	req := api.NewRequest[models.BaseOkResponse](g.api)

	res, err := req.Execute("groups.deleteLink", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// GroupsDisableOnline ...
type GroupsDisableOnlineRequest api.Params

func NewGroupsDisableOnlineRequest() GroupsDisableOnlineRequest {
	params := make(GroupsDisableOnlineRequest, 2)
	return params
}

func (g GroupsDisableOnlineRequest) WithGroupId(g_group_id int) GroupsDisableOnlineRequest {
	g["group_id"] = g_group_id
	return g
}

func (g GroupsDisableOnlineRequest) Params() api.Params {
	return api.Params(g)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/groups.disableOnline
func (g *Groups) GroupsDisableOnline(params ...api.MethodParams) (resp models.BaseOkResponse, err error) {
	req := api.NewRequest[models.BaseOkResponse](g.api)

	res, err := req.Execute("groups.disableOnline", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// GroupsEdit Edits a community.
type GroupsEditRequest api.Params

func NewGroupsEditRequest() GroupsEditRequest {
	params := make(GroupsEditRequest, 46)
	return params
}

func (g GroupsEditRequest) WithGroupId(g_group_id int) GroupsEditRequest {
	g["group_id"] = g_group_id
	return g
}

func (g GroupsEditRequest) WithTitle(g_title string) GroupsEditRequest {
	g["title"] = g_title
	return g
}

func (g GroupsEditRequest) WithDescription(g_description string) GroupsEditRequest {
	g["description"] = g_description
	return g
}

func (g GroupsEditRequest) WithScreenName(g_screen_name string) GroupsEditRequest {
	g["screen_name"] = g_screen_name
	return g
}

func (g GroupsEditRequest) WithAccess(g_access models.GroupsGroupAccess) GroupsEditRequest {
	g["access"] = g_access
	return g
}

func (g GroupsEditRequest) WithWebsite(g_website string) GroupsEditRequest {
	g["website"] = g_website
	return g
}

func (g GroupsEditRequest) WithSubject(g_subject models.GroupsGroupSubject) GroupsEditRequest {
	g["subject"] = g_subject
	return g
}

func (g GroupsEditRequest) WithEmail(g_email string) GroupsEditRequest {
	g["email"] = g_email
	return g
}

func (g GroupsEditRequest) WithPhone(g_phone string) GroupsEditRequest {
	g["phone"] = g_phone
	return g
}

func (g GroupsEditRequest) WithRss(g_rss string) GroupsEditRequest {
	g["rss"] = g_rss
	return g
}

func (g GroupsEditRequest) WithEventStartDate(g_event_start_date int) GroupsEditRequest {
	g["event_start_date"] = g_event_start_date
	return g
}

func (g GroupsEditRequest) WithEventFinishDate(g_event_finish_date int) GroupsEditRequest {
	g["event_finish_date"] = g_event_finish_date
	return g
}

func (g GroupsEditRequest) WithEventGroupId(g_event_group_id int) GroupsEditRequest {
	g["event_group_id"] = g_event_group_id
	return g
}

func (g GroupsEditRequest) WithPublicCategory(g_public_category int) GroupsEditRequest {
	g["public_category"] = g_public_category
	return g
}

func (g GroupsEditRequest) WithPublicSubcategory(g_public_subcategory int) GroupsEditRequest {
	g["public_subcategory"] = g_public_subcategory
	return g
}

func (g GroupsEditRequest) WithPublicDate(g_public_date string) GroupsEditRequest {
	g["public_date"] = g_public_date
	return g
}

func (g GroupsEditRequest) WithWall(g_wall models.GroupsGroupWall) GroupsEditRequest {
	g["wall"] = g_wall
	return g
}

func (g GroupsEditRequest) WithTopics(g_topics models.GroupsGroupTopics) GroupsEditRequest {
	g["topics"] = g_topics
	return g
}

func (g GroupsEditRequest) WithPhotos(g_photos models.GroupsGroupPhotos) GroupsEditRequest {
	g["photos"] = g_photos
	return g
}

func (g GroupsEditRequest) WithVideo(g_video models.GroupsGroupVideo) GroupsEditRequest {
	g["video"] = g_video
	return g
}

func (g GroupsEditRequest) WithAudio(g_audio models.GroupsGroupAudio) GroupsEditRequest {
	g["audio"] = g_audio
	return g
}

func (g GroupsEditRequest) WithLinks(g_links bool) GroupsEditRequest {
	g["links"] = g_links
	return g
}

func (g GroupsEditRequest) WithEvents(g_events bool) GroupsEditRequest {
	g["events"] = g_events
	return g
}

func (g GroupsEditRequest) WithPlaces(g_places bool) GroupsEditRequest {
	g["places"] = g_places
	return g
}

func (g GroupsEditRequest) WithContacts(g_contacts bool) GroupsEditRequest {
	g["contacts"] = g_contacts
	return g
}

func (g GroupsEditRequest) WithDocs(g_docs models.GroupsGroupDocs) GroupsEditRequest {
	g["docs"] = g_docs
	return g
}

func (g GroupsEditRequest) WithWiki(g_wiki models.GroupsGroupWiki) GroupsEditRequest {
	g["wiki"] = g_wiki
	return g
}

func (g GroupsEditRequest) WithMessages(g_messages bool) GroupsEditRequest {
	g["messages"] = g_messages
	return g
}

func (g GroupsEditRequest) WithArticles(g_articles bool) GroupsEditRequest {
	g["articles"] = g_articles
	return g
}

func (g GroupsEditRequest) WithAddresses(g_addresses bool) GroupsEditRequest {
	g["addresses"] = g_addresses
	return g
}

func (g GroupsEditRequest) WithAgeLimits(g_age_limits models.GroupsGroupAgeLimits) GroupsEditRequest {
	g["age_limits"] = g_age_limits
	return g
}

func (g GroupsEditRequest) WithMarket(g_market bool) GroupsEditRequest {
	g["market"] = g_market
	return g
}

func (g GroupsEditRequest) WithMarketComments(g_market_comments bool) GroupsEditRequest {
	g["market_comments"] = g_market_comments
	return g
}

func (g GroupsEditRequest) WithMarketCountry(g_market_country []int) GroupsEditRequest {
	g["market_country"] = g_market_country
	return g
}

func (g GroupsEditRequest) WithMarketCity(g_market_city []int) GroupsEditRequest {
	g["market_city"] = g_market_city
	return g
}

func (g GroupsEditRequest) WithMarketCurrency(g_market_currency models.GroupsGroupMarketCurrency) GroupsEditRequest {
	g["market_currency"] = g_market_currency
	return g
}

func (g GroupsEditRequest) WithMarketContact(g_market_contact int) GroupsEditRequest {
	g["market_contact"] = g_market_contact
	return g
}

func (g GroupsEditRequest) WithMarketWiki(g_market_wiki int) GroupsEditRequest {
	g["market_wiki"] = g_market_wiki
	return g
}

func (g GroupsEditRequest) WithObsceneFilter(g_obscene_filter bool) GroupsEditRequest {
	g["obscene_filter"] = g_obscene_filter
	return g
}

func (g GroupsEditRequest) WithObsceneStopwords(g_obscene_stopwords bool) GroupsEditRequest {
	g["obscene_stopwords"] = g_obscene_stopwords
	return g
}

func (g GroupsEditRequest) WithObsceneWords(g_obscene_words []string) GroupsEditRequest {
	g["obscene_words"] = g_obscene_words
	return g
}

func (g GroupsEditRequest) WithMainSection(g_main_section int) GroupsEditRequest {
	g["main_section"] = g_main_section
	return g
}

func (g GroupsEditRequest) WithSecondarySection(g_secondary_section int) GroupsEditRequest {
	g["secondary_section"] = g_secondary_section
	return g
}

func (g GroupsEditRequest) WithCountry(g_country int) GroupsEditRequest {
	g["country"] = g_country
	return g
}

func (g GroupsEditRequest) WithCity(g_city int) GroupsEditRequest {
	g["city"] = g_city
	return g
}

func (g GroupsEditRequest) Params() api.Params {
	return api.Params(g)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_InvalidAddress ]
//
// https://dev.vk.com/method/groups.edit
func (g *Groups) GroupsEdit(params ...api.MethodParams) (resp models.BaseOkResponse, err error) {
	req := api.NewRequest[models.BaseOkResponse](g.api)

	res, err := req.Execute("groups.edit", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// GroupsEditAddress ...
type GroupsEditAddressRequest api.Params

func NewGroupsEditAddressRequest() GroupsEditAddressRequest {
	params := make(GroupsEditAddressRequest, 15)
	return params
}

func (g GroupsEditAddressRequest) WithGroupId(g_group_id int) GroupsEditAddressRequest {
	g["group_id"] = g_group_id
	return g
}

func (g GroupsEditAddressRequest) WithAddressId(g_address_id int) GroupsEditAddressRequest {
	g["address_id"] = g_address_id
	return g
}

func (g GroupsEditAddressRequest) WithTitle(g_title string) GroupsEditAddressRequest {
	g["title"] = g_title
	return g
}

func (g GroupsEditAddressRequest) WithAddress(g_address string) GroupsEditAddressRequest {
	g["address"] = g_address
	return g
}

func (g GroupsEditAddressRequest) WithAdditionalAddress(g_additional_address string) GroupsEditAddressRequest {
	g["additional_address"] = g_additional_address
	return g
}

func (g GroupsEditAddressRequest) WithCountryId(g_country_id int) GroupsEditAddressRequest {
	g["country_id"] = g_country_id
	return g
}

func (g GroupsEditAddressRequest) WithCityId(g_city_id int) GroupsEditAddressRequest {
	g["city_id"] = g_city_id
	return g
}

func (g GroupsEditAddressRequest) WithMetroId(g_metro_id int) GroupsEditAddressRequest {
	g["metro_id"] = g_metro_id
	return g
}

func (g GroupsEditAddressRequest) WithLatitude(g_latitude float64) GroupsEditAddressRequest {
	g["latitude"] = g_latitude
	return g
}

func (g GroupsEditAddressRequest) WithLongitude(g_longitude float64) GroupsEditAddressRequest {
	g["longitude"] = g_longitude
	return g
}

func (g GroupsEditAddressRequest) WithPhone(g_phone string) GroupsEditAddressRequest {
	g["phone"] = g_phone
	return g
}

func (g GroupsEditAddressRequest) WithWorkInfoStatus(g_work_info_status models.GroupsAddressWorkInfoStatus) GroupsEditAddressRequest {
	g["work_info_status"] = g_work_info_status
	return g
}

func (g GroupsEditAddressRequest) WithTimetable(g_timetable string) GroupsEditAddressRequest {
	g["timetable"] = g_timetable
	return g
}

func (g GroupsEditAddressRequest) WithIsMainAddress(g_is_main_address bool) GroupsEditAddressRequest {
	g["is_main_address"] = g_is_main_address
	return g
}

func (g GroupsEditAddressRequest) Params() api.Params {
	return api.Params(g)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_AccessGroups, Error_NotFound, Error_GroupTooManyAddresses ]
//
// https://dev.vk.com/method/groups.editAddress
func (g *Groups) GroupsEditAddress(params ...api.MethodParams) (resp models.GroupsEditAddressResponse, err error) {
	req := api.NewRequest[models.GroupsEditAddressResponse](g.api)

	res, err := req.Execute("groups.editAddress", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// GroupsEditCallbackServer ...
type GroupsEditCallbackServerRequest api.Params

func NewGroupsEditCallbackServerRequest() GroupsEditCallbackServerRequest {
	params := make(GroupsEditCallbackServerRequest, 6)
	return params
}

func (g GroupsEditCallbackServerRequest) WithGroupId(g_group_id int) GroupsEditCallbackServerRequest {
	g["group_id"] = g_group_id
	return g
}

func (g GroupsEditCallbackServerRequest) WithServerId(g_server_id int) GroupsEditCallbackServerRequest {
	g["server_id"] = g_server_id
	return g
}

func (g GroupsEditCallbackServerRequest) WithUrl(g_url string) GroupsEditCallbackServerRequest {
	g["url"] = g_url
	return g
}

func (g GroupsEditCallbackServerRequest) WithTitle(g_title string) GroupsEditCallbackServerRequest {
	g["title"] = g_title
	return g
}

func (g GroupsEditCallbackServerRequest) WithSecretKey(g_secret_key string) GroupsEditCallbackServerRequest {
	g["secret_key"] = g_secret_key
	return g
}

func (g GroupsEditCallbackServerRequest) Params() api.Params {
	return api.Params(g)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_NotFound ]
//
// https://dev.vk.com/method/groups.editCallbackServer
func (g *Groups) GroupsEditCallbackServer(params ...api.MethodParams) (resp models.BaseOkResponse, err error) {
	req := api.NewRequest[models.BaseOkResponse](g.api)

	res, err := req.Execute("groups.editCallbackServer", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// GroupsEditLink Allows to edit a link in the community.
type GroupsEditLinkRequest api.Params

func NewGroupsEditLinkRequest() GroupsEditLinkRequest {
	params := make(GroupsEditLinkRequest, 4)
	return params
}

func (g GroupsEditLinkRequest) WithGroupId(g_group_id int) GroupsEditLinkRequest {
	g["group_id"] = g_group_id
	return g
}

func (g GroupsEditLinkRequest) WithLinkId(g_link_id int) GroupsEditLinkRequest {
	g["link_id"] = g_link_id
	return g
}

func (g GroupsEditLinkRequest) WithText(g_text string) GroupsEditLinkRequest {
	g["text"] = g_text
	return g
}

func (g GroupsEditLinkRequest) Params() api.Params {
	return api.Params(g)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/groups.editLink
func (g *Groups) GroupsEditLink(params ...api.MethodParams) (resp models.BaseOkResponse, err error) {
	req := api.NewRequest[models.BaseOkResponse](g.api)

	res, err := req.Execute("groups.editLink", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// GroupsEditManager Allows to add, remove or edit the community manager.
type GroupsEditManagerRequest api.Params

func NewGroupsEditManagerRequest() GroupsEditManagerRequest {
	params := make(GroupsEditManagerRequest, 8)
	return params
}

func (g GroupsEditManagerRequest) WithGroupId(g_group_id int) GroupsEditManagerRequest {
	g["group_id"] = g_group_id
	return g
}

func (g GroupsEditManagerRequest) WithUserId(g_user_id int) GroupsEditManagerRequest {
	g["user_id"] = g_user_id
	return g
}

func (g GroupsEditManagerRequest) WithRole(g_role models.GroupsGroupRole) GroupsEditManagerRequest {
	g["role"] = g_role
	return g
}

func (g GroupsEditManagerRequest) WithIsContact(g_is_contact bool) GroupsEditManagerRequest {
	g["is_contact"] = g_is_contact
	return g
}

func (g GroupsEditManagerRequest) WithContactPosition(g_contact_position string) GroupsEditManagerRequest {
	g["contact_position"] = g_contact_position
	return g
}

func (g GroupsEditManagerRequest) WithContactPhone(g_contact_phone string) GroupsEditManagerRequest {
	g["contact_phone"] = g_contact_phone
	return g
}

func (g GroupsEditManagerRequest) WithContactEmail(g_contact_email string) GroupsEditManagerRequest {
	g["contact_email"] = g_contact_email
	return g
}

func (g GroupsEditManagerRequest) Params() api.Params {
	return api.Params(g)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_GroupChangeCreator, Error_GroupNotInClub, Error_GroupTooManyOfficers, Error_GroupNeed2fa, Error_GroupHostNeed2fa ]
//
// https://dev.vk.com/method/groups.editManager
func (g *Groups) GroupsEditManager(params ...api.MethodParams) (resp models.BaseOkResponse, err error) {
	req := api.NewRequest[models.BaseOkResponse](g.api)

	res, err := req.Execute("groups.editManager", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// GroupsEnableOnline ...
type GroupsEnableOnlineRequest api.Params

func NewGroupsEnableOnlineRequest() GroupsEnableOnlineRequest {
	params := make(GroupsEnableOnlineRequest, 2)
	return params
}

func (g GroupsEnableOnlineRequest) WithGroupId(g_group_id int) GroupsEnableOnlineRequest {
	g["group_id"] = g_group_id
	return g
}

func (g GroupsEnableOnlineRequest) Params() api.Params {
	return api.Params(g)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/groups.enableOnline
func (g *Groups) GroupsEnableOnline(params ...api.MethodParams) (resp models.BaseOkResponse, err error) {
	req := api.NewRequest[models.BaseOkResponse](g.api)

	res, err := req.Execute("groups.enableOnline", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// GroupsGet Returns a list of the communities to which a user belongs.
type GroupsGetRequest api.Params

func NewGroupsGetRequest() GroupsGetRequest {
	params := make(GroupsGetRequest, 8)
	return params
}

func (g GroupsGetRequest) WithUserId(g_user_id int) GroupsGetRequest {
	g["user_id"] = g_user_id
	return g
}

func (g GroupsGetRequest) WithExtended(g_extended bool) GroupsGetRequest {
	g["extended"] = g_extended
	return g
}

func (g GroupsGetRequest) WithFilter(g_filter []models.GroupsFilter) GroupsGetRequest {
	g["filter"] = g_filter
	return g
}

func (g GroupsGetRequest) WithFields(g_fields []models.GroupsFields) GroupsGetRequest {
	g["fields"] = g_fields
	return g
}

func (g GroupsGetRequest) WithOffset(g_offset int) GroupsGetRequest {
	g["offset"] = g_offset
	return g
}

func (g GroupsGetRequest) WithCount(g_count int) GroupsGetRequest {
	g["count"] = g_count
	return g
}

func (g GroupsGetRequest) Params() api.Params {
	return api.Params(g)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_AccessGroups ]
//
// https://dev.vk.com/method/groups.get
func (g *Groups) GroupsGet(params ...api.MethodParams) (resp models.GroupsGetResponse, err error) {
	req := api.NewRequest[models.GroupsGetResponse](g.api)

	res, err := req.Execute("groups.get", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// GroupsGetExtended Returns a list of the communities to which a user belongs.
// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_AccessGroups ]
//
// https://dev.vk.com/method/groups.get
func (g *Groups) GroupsGetExtended(params ...api.MethodParams) (resp models.GroupsGetObjectExtendedResponse, err error) {
	req := api.NewRequest[models.GroupsGetObjectExtendedResponse](g.api)

	res, err := req.Execute("groups.get", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// GroupsGetAddresses Returns a list of community addresses.
type GroupsGetAddressesRequest api.Params

func NewGroupsGetAddressesRequest() GroupsGetAddressesRequest {
	params := make(GroupsGetAddressesRequest, 8)
	return params
}

func (g GroupsGetAddressesRequest) WithGroupId(g_group_id int) GroupsGetAddressesRequest {
	g["group_id"] = g_group_id
	return g
}

func (g GroupsGetAddressesRequest) WithAddressIds(g_address_ids []int) GroupsGetAddressesRequest {
	g["address_ids"] = g_address_ids
	return g
}

func (g GroupsGetAddressesRequest) WithLatitude(g_latitude float64) GroupsGetAddressesRequest {
	g["latitude"] = g_latitude
	return g
}

func (g GroupsGetAddressesRequest) WithLongitude(g_longitude float64) GroupsGetAddressesRequest {
	g["longitude"] = g_longitude
	return g
}

func (g GroupsGetAddressesRequest) WithOffset(g_offset int) GroupsGetAddressesRequest {
	g["offset"] = g_offset
	return g
}

func (g GroupsGetAddressesRequest) WithCount(g_count int) GroupsGetAddressesRequest {
	g["count"] = g_count
	return g
}

func (g GroupsGetAddressesRequest) WithFields(g_fields []models.AddressesFields) GroupsGetAddressesRequest {
	g["fields"] = g_fields
	return g
}

func (g GroupsGetAddressesRequest) Params() api.Params {
	return api.Params(g)
}

// May execute with listed access token types:
//
//	[ user, service ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_ParamGroupId, Error_AccessGroups ]
//
// https://dev.vk.com/method/groups.getAddresses
func (g *Groups) GroupsGetAddresses(params ...api.MethodParams) (resp models.GroupsGetAddressesResponse, err error) {
	req := api.NewRequest[models.GroupsGetAddressesResponse](g.api)

	res, err := req.Execute("groups.getAddresses", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// GroupsGetBanned Returns a list of users on a community blacklist.
type GroupsGetBannedRequest api.Params

func NewGroupsGetBannedRequest() GroupsGetBannedRequest {
	params := make(GroupsGetBannedRequest, 6)
	return params
}

func (g GroupsGetBannedRequest) WithGroupId(g_group_id int) GroupsGetBannedRequest {
	g["group_id"] = g_group_id
	return g
}

func (g GroupsGetBannedRequest) WithOffset(g_offset int) GroupsGetBannedRequest {
	g["offset"] = g_offset
	return g
}

func (g GroupsGetBannedRequest) WithCount(g_count int) GroupsGetBannedRequest {
	g["count"] = g_count
	return g
}

func (g GroupsGetBannedRequest) WithFields(g_fields []models.BaseUserGroupFields) GroupsGetBannedRequest {
	g["fields"] = g_fields
	return g
}

func (g GroupsGetBannedRequest) WithOwnerId(g_owner_id int) GroupsGetBannedRequest {
	g["owner_id"] = g_owner_id
	return g
}

func (g GroupsGetBannedRequest) Params() api.Params {
	return api.Params(g)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_NotFound ]
//
// https://dev.vk.com/method/groups.getBanned
func (g *Groups) GroupsGetBanned(params ...api.MethodParams) (resp models.GroupsGetBannedResponse, err error) {
	req := api.NewRequest[models.GroupsGetBannedResponse](g.api)

	res, err := req.Execute("groups.getBanned", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// GroupsGetById Returns information about communities by their IDs.
type GroupsGetByIdRequest api.Params

func NewGroupsGetByIdRequest() GroupsGetByIdRequest {
	params := make(GroupsGetByIdRequest, 4)
	return params
}

func (g GroupsGetByIdRequest) WithGroupIds(g_group_ids []string) GroupsGetByIdRequest {
	g["group_ids"] = g_group_ids
	return g
}

func (g GroupsGetByIdRequest) WithGroupId(g_group_id string) GroupsGetByIdRequest {
	g["group_id"] = g_group_id
	return g
}

func (g GroupsGetByIdRequest) WithFields(g_fields []models.GroupsFields) GroupsGetByIdRequest {
	g["fields"] = g_fields
	return g
}

func (g GroupsGetByIdRequest) Params() api.Params {
	return api.Params(g)
}

// May execute with listed access token types:
//
//	[ user, group, service ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/groups.getById
func (g *Groups) GroupsGetById(params ...api.MethodParams) (resp models.GroupsGetByIdObjectLegacyResponse, err error) {
	req := api.NewRequest[models.GroupsGetByIdObjectLegacyResponse](g.api)

	res, err := req.Execute("groups.getById", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// GroupsGetCallbackConfirmationCode Returns Callback API confirmation code for the community.
type GroupsGetCallbackConfirmationCodeRequest api.Params

func NewGroupsGetCallbackConfirmationCodeRequest() GroupsGetCallbackConfirmationCodeRequest {
	params := make(GroupsGetCallbackConfirmationCodeRequest, 2)
	return params
}

func (g GroupsGetCallbackConfirmationCodeRequest) WithGroupId(g_group_id int) GroupsGetCallbackConfirmationCodeRequest {
	g["group_id"] = g_group_id
	return g
}

func (g GroupsGetCallbackConfirmationCodeRequest) Params() api.Params {
	return api.Params(g)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/groups.getCallbackConfirmationCode
func (g *Groups) GroupsGetCallbackConfirmationCode(params ...api.MethodParams) (resp models.GroupsGetCallbackConfirmationCodeResponse, err error) {
	req := api.NewRequest[models.GroupsGetCallbackConfirmationCodeResponse](g.api)

	res, err := req.Execute("groups.getCallbackConfirmationCode", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// GroupsGetCallbackServers ...
type GroupsGetCallbackServersRequest api.Params

func NewGroupsGetCallbackServersRequest() GroupsGetCallbackServersRequest {
	params := make(GroupsGetCallbackServersRequest, 3)
	return params
}

func (g GroupsGetCallbackServersRequest) WithGroupId(g_group_id int) GroupsGetCallbackServersRequest {
	g["group_id"] = g_group_id
	return g
}

func (g GroupsGetCallbackServersRequest) WithServerIds(g_server_ids []int) GroupsGetCallbackServersRequest {
	g["server_ids"] = g_server_ids
	return g
}

func (g GroupsGetCallbackServersRequest) Params() api.Params {
	return api.Params(g)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/groups.getCallbackServers
func (g *Groups) GroupsGetCallbackServers(params ...api.MethodParams) (resp models.GroupsGetCallbackServersResponse, err error) {
	req := api.NewRequest[models.GroupsGetCallbackServersResponse](g.api)

	res, err := req.Execute("groups.getCallbackServers", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// GroupsGetCallbackSettings Returns [vk.com/dev/callback_api|Callback API] notifications settings.
type GroupsGetCallbackSettingsRequest api.Params

func NewGroupsGetCallbackSettingsRequest() GroupsGetCallbackSettingsRequest {
	params := make(GroupsGetCallbackSettingsRequest, 3)
	return params
}

func (g GroupsGetCallbackSettingsRequest) WithGroupId(g_group_id int) GroupsGetCallbackSettingsRequest {
	g["group_id"] = g_group_id
	return g
}

func (g GroupsGetCallbackSettingsRequest) WithServerId(g_server_id int) GroupsGetCallbackSettingsRequest {
	g["server_id"] = g_server_id
	return g
}

func (g GroupsGetCallbackSettingsRequest) Params() api.Params {
	return api.Params(g)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_NotFound ]
//
// https://dev.vk.com/method/groups.getCallbackSettings
func (g *Groups) GroupsGetCallbackSettings(params ...api.MethodParams) (resp models.GroupsGetCallbackSettingsResponse, err error) {
	req := api.NewRequest[models.GroupsGetCallbackSettingsResponse](g.api)

	res, err := req.Execute("groups.getCallbackSettings", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// GroupsGetCatalog Returns communities list for a catalog category.
type GroupsGetCatalogRequest api.Params

func NewGroupsGetCatalogRequest() GroupsGetCatalogRequest {
	params := make(GroupsGetCatalogRequest, 3)
	return params
}

func (g GroupsGetCatalogRequest) WithCategoryId(g_category_id int) GroupsGetCatalogRequest {
	g["category_id"] = g_category_id
	return g
}

func (g GroupsGetCatalogRequest) WithSubcategoryId(g_subcategory_id int) GroupsGetCatalogRequest {
	g["subcategory_id"] = g_subcategory_id
	return g
}

func (g GroupsGetCatalogRequest) Params() api.Params {
	return api.Params(g)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_CommunitiesCatalogDisabled, Error_CommunitiesCategoriesDisabled ]
//
// https://dev.vk.com/method/groups.getCatalog
func (g *Groups) GroupsGetCatalog(params ...api.MethodParams) (resp models.GroupsGetCatalogResponse, err error) {
	req := api.NewRequest[models.GroupsGetCatalogResponse](g.api)

	res, err := req.Execute("groups.getCatalog", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// GroupsGetCatalogInfo Returns categories list for communities catalog
type GroupsGetCatalogInfoRequest api.Params

func NewGroupsGetCatalogInfoRequest() GroupsGetCatalogInfoRequest {
	params := make(GroupsGetCatalogInfoRequest, 4)
	return params
}

func (g GroupsGetCatalogInfoRequest) WithExtended(g_extended bool) GroupsGetCatalogInfoRequest {
	g["extended"] = g_extended
	return g
}

func (g GroupsGetCatalogInfoRequest) WithSubcategories(g_subcategories bool) GroupsGetCatalogInfoRequest {
	g["subcategories"] = g_subcategories
	return g
}

func (g GroupsGetCatalogInfoRequest) Params() api.Params {
	return api.Params(g)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/groups.getCatalogInfo
func (g *Groups) GroupsGetCatalogInfo(params ...api.MethodParams) (resp models.GroupsGetCatalogInfoResponse, err error) {
	req := api.NewRequest[models.GroupsGetCatalogInfoResponse](g.api)

	res, err := req.Execute("groups.getCatalogInfo", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// GroupsGetCatalogInfoExtended Returns categories list for communities catalog
// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/groups.getCatalogInfo
func (g *Groups) GroupsGetCatalogInfoExtended(params ...api.MethodParams) (resp models.GroupsGetCatalogInfoExtendedResponse, err error) {
	req := api.NewRequest[models.GroupsGetCatalogInfoExtendedResponse](g.api)

	res, err := req.Execute("groups.getCatalogInfo", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// GroupsGetInvitedUsers Returns invited users list of a community
type GroupsGetInvitedUsersRequest api.Params

func NewGroupsGetInvitedUsersRequest() GroupsGetInvitedUsersRequest {
	params := make(GroupsGetInvitedUsersRequest, 6)
	return params
}

func (g GroupsGetInvitedUsersRequest) WithGroupId(g_group_id int) GroupsGetInvitedUsersRequest {
	g["group_id"] = g_group_id
	return g
}

func (g GroupsGetInvitedUsersRequest) WithOffset(g_offset int) GroupsGetInvitedUsersRequest {
	g["offset"] = g_offset
	return g
}

func (g GroupsGetInvitedUsersRequest) WithCount(g_count int) GroupsGetInvitedUsersRequest {
	g["count"] = g_count
	return g
}

func (g GroupsGetInvitedUsersRequest) WithFields(g_fields []models.UsersFields) GroupsGetInvitedUsersRequest {
	g["fields"] = g_fields
	return g
}

func (g GroupsGetInvitedUsersRequest) WithNameCase(g_name_case string) GroupsGetInvitedUsersRequest {
	g["name_case"] = g_name_case
	return g
}

func (g GroupsGetInvitedUsersRequest) Params() api.Params {
	return api.Params(g)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/groups.getInvitedUsers
func (g *Groups) GroupsGetInvitedUsers(params ...api.MethodParams) (resp models.GroupsGetInvitedUsersResponse, err error) {
	req := api.NewRequest[models.GroupsGetInvitedUsersResponse](g.api)

	res, err := req.Execute("groups.getInvitedUsers", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// GroupsGetInvites Returns a list of invitations to join communities and events.
type GroupsGetInvitesRequest api.Params

func NewGroupsGetInvitesRequest() GroupsGetInvitesRequest {
	params := make(GroupsGetInvitesRequest, 5)
	return params
}

func (g GroupsGetInvitesRequest) WithOffset(g_offset int) GroupsGetInvitesRequest {
	g["offset"] = g_offset
	return g
}

func (g GroupsGetInvitesRequest) WithCount(g_count int) GroupsGetInvitesRequest {
	g["count"] = g_count
	return g
}

func (g GroupsGetInvitesRequest) WithExtended(g_extended bool) GroupsGetInvitesRequest {
	g["extended"] = g_extended
	return g
}

func (g GroupsGetInvitesRequest) Params() api.Params {
	return api.Params(g)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/groups.getInvites
func (g *Groups) GroupsGetInvites(params ...api.MethodParams) (resp models.GroupsGetInvitesResponse, err error) {
	req := api.NewRequest[models.GroupsGetInvitesResponse](g.api)

	res, err := req.Execute("groups.getInvites", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// GroupsGetInvitesExtended Returns a list of invitations to join communities and events.
// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/groups.getInvites
func (g *Groups) GroupsGetInvitesExtended(params ...api.MethodParams) (resp models.GroupsGetInvitesExtendedResponse, err error) {
	req := api.NewRequest[models.GroupsGetInvitesExtendedResponse](g.api)

	res, err := req.Execute("groups.getInvites", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// GroupsGetLongPollServer Returns the data needed to query a Long Poll server for events
type GroupsGetLongPollServerRequest api.Params

func NewGroupsGetLongPollServerRequest() GroupsGetLongPollServerRequest {
	params := make(GroupsGetLongPollServerRequest, 2)
	return params
}

func (g GroupsGetLongPollServerRequest) WithGroupId(g_group_id int) GroupsGetLongPollServerRequest {
	g["group_id"] = g_group_id
	return g
}

func (g GroupsGetLongPollServerRequest) Params() api.Params {
	return api.Params(g)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/groups.getLongPollServer
func (g *Groups) GroupsGetLongPollServer(params ...api.MethodParams) (resp models.GroupsGetLongPollServerResponse, err error) {
	req := api.NewRequest[models.GroupsGetLongPollServerResponse](g.api)

	res, err := req.Execute("groups.getLongPollServer", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// GroupsGetLongPollSettings Returns Long Poll notification settings
type GroupsGetLongPollSettingsRequest api.Params

func NewGroupsGetLongPollSettingsRequest() GroupsGetLongPollSettingsRequest {
	params := make(GroupsGetLongPollSettingsRequest, 2)
	return params
}

func (g GroupsGetLongPollSettingsRequest) WithGroupId(g_group_id int) GroupsGetLongPollSettingsRequest {
	g["group_id"] = g_group_id
	return g
}

func (g GroupsGetLongPollSettingsRequest) Params() api.Params {
	return api.Params(g)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/groups.getLongPollSettings
func (g *Groups) GroupsGetLongPollSettings(params ...api.MethodParams) (resp models.GroupsGetLongPollSettingsResponse, err error) {
	req := api.NewRequest[models.GroupsGetLongPollSettingsResponse](g.api)

	res, err := req.Execute("groups.getLongPollSettings", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// GroupsGetMembers Returns a list of community members.
type GroupsGetMembersRequest api.Params

func NewGroupsGetMembersRequest() GroupsGetMembersRequest {
	params := make(GroupsGetMembersRequest, 7)
	return params
}

func (g GroupsGetMembersRequest) WithGroupId(g_group_id string) GroupsGetMembersRequest {
	g["group_id"] = g_group_id
	return g
}

func (g GroupsGetMembersRequest) WithSort(g_sort string) GroupsGetMembersRequest {
	g["sort"] = g_sort
	return g
}

func (g GroupsGetMembersRequest) WithOffset(g_offset int) GroupsGetMembersRequest {
	g["offset"] = g_offset
	return g
}

func (g GroupsGetMembersRequest) WithCount(g_count int) GroupsGetMembersRequest {
	g["count"] = g_count
	return g
}

func (g GroupsGetMembersRequest) WithFields(g_fields []models.UsersFields) GroupsGetMembersRequest {
	g["fields"] = g_fields
	return g
}

func (g GroupsGetMembersRequest) WithFilter(g_filter string) GroupsGetMembersRequest {
	g["filter"] = g_filter
	return g
}

func (g GroupsGetMembersRequest) Params() api.Params {
	return api.Params(g)
}

// May execute with listed access token types:
//
//	[ user, group, service ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_ParamGroupId ]
//
// https://dev.vk.com/method/groups.getMembers
func (g *Groups) GroupsGetMembers(params ...api.MethodParams) (resp models.GroupsGetMembersResponse, err error) {
	req := api.NewRequest[models.GroupsGetMembersResponse](g.api)

	res, err := req.Execute("groups.getMembers", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// GroupsGetRequests Returns a list of requests to the community.
type GroupsGetRequestsRequest api.Params

func NewGroupsGetRequestsRequest() GroupsGetRequestsRequest {
	params := make(GroupsGetRequestsRequest, 5)
	return params
}

func (g GroupsGetRequestsRequest) WithGroupId(g_group_id int) GroupsGetRequestsRequest {
	g["group_id"] = g_group_id
	return g
}

func (g GroupsGetRequestsRequest) WithOffset(g_offset int) GroupsGetRequestsRequest {
	g["offset"] = g_offset
	return g
}

func (g GroupsGetRequestsRequest) WithCount(g_count int) GroupsGetRequestsRequest {
	g["count"] = g_count
	return g
}

func (g GroupsGetRequestsRequest) WithFields(g_fields []models.UsersFields) GroupsGetRequestsRequest {
	g["fields"] = g_fields
	return g
}

func (g GroupsGetRequestsRequest) Params() api.Params {
	return api.Params(g)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/groups.getRequests
func (g *Groups) GroupsGetRequests(params ...api.MethodParams) (resp models.GroupsGetRequestsResponse, err error) {
	req := api.NewRequest[models.GroupsGetRequestsResponse](g.api)

	res, err := req.Execute("groups.getRequests", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// GroupsGetSettings Returns community settings.
type GroupsGetSettingsRequest api.Params

func NewGroupsGetSettingsRequest() GroupsGetSettingsRequest {
	params := make(GroupsGetSettingsRequest, 2)
	return params
}

func (g GroupsGetSettingsRequest) WithGroupId(g_group_id int) GroupsGetSettingsRequest {
	g["group_id"] = g_group_id
	return g
}

func (g GroupsGetSettingsRequest) Params() api.Params {
	return api.Params(g)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/groups.getSettings
func (g *Groups) GroupsGetSettings(params ...api.MethodParams) (resp models.GroupsGetSettingsResponse, err error) {
	req := api.NewRequest[models.GroupsGetSettingsResponse](g.api)

	res, err := req.Execute("groups.getSettings", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// GroupsGetTagList List of group's tags
type GroupsGetTagListRequest api.Params

func NewGroupsGetTagListRequest() GroupsGetTagListRequest {
	params := make(GroupsGetTagListRequest, 2)
	return params
}

func (g GroupsGetTagListRequest) WithGroupId(g_group_id int) GroupsGetTagListRequest {
	g["group_id"] = g_group_id
	return g
}

func (g GroupsGetTagListRequest) Params() api.Params {
	return api.Params(g)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/groups.getTagList
func (g *Groups) GroupsGetTagList(params ...api.MethodParams) (resp models.GroupsGetTagListResponse, err error) {
	req := api.NewRequest[models.GroupsGetTagListResponse](g.api)

	res, err := req.Execute("groups.getTagList", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// GroupsGetTokenPermissions ...
// May execute with listed access token types:
//
//	[ group ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/groups.getTokenPermissions
func (g *Groups) GroupsGetTokenPermissions(params ...api.MethodParams) (resp models.GroupsGetTokenPermissionsResponse, err error) {
	req := api.NewRequest[models.GroupsGetTokenPermissionsResponse](g.api)

	res, err := req.Execute("groups.getTokenPermissions", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// GroupsInvite Allows to invite friends to the community.
type GroupsInviteRequest api.Params

func NewGroupsInviteRequest() GroupsInviteRequest {
	params := make(GroupsInviteRequest, 3)
	return params
}

func (g GroupsInviteRequest) WithGroupId(g_group_id int) GroupsInviteRequest {
	g["group_id"] = g_group_id
	return g
}

func (g GroupsInviteRequest) WithUserId(g_user_id int) GroupsInviteRequest {
	g["user_id"] = g_user_id
	return g
}

func (g GroupsInviteRequest) Params() api.Params {
	return api.Params(g)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_Limits ]
//
// https://dev.vk.com/method/groups.invite
func (g *Groups) GroupsInvite(params ...api.MethodParams) (resp models.BaseOkResponse, err error) {
	req := api.NewRequest[models.BaseOkResponse](g.api)

	res, err := req.Execute("groups.invite", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// GroupsIsMember Returns information specifying whether a user is a member of a community.
type GroupsIsMemberRequest api.Params

func NewGroupsIsMemberRequest() GroupsIsMemberRequest {
	params := make(GroupsIsMemberRequest, 6)
	return params
}

func (g GroupsIsMemberRequest) WithGroupId(g_group_id string) GroupsIsMemberRequest {
	g["group_id"] = g_group_id
	return g
}

func (g GroupsIsMemberRequest) WithUserId(g_user_id int) GroupsIsMemberRequest {
	g["user_id"] = g_user_id
	return g
}

func (g GroupsIsMemberRequest) WithUserIds(g_user_ids []int) GroupsIsMemberRequest {
	g["user_ids"] = g_user_ids
	return g
}

func (g GroupsIsMemberRequest) WithExtended(g_extended bool) GroupsIsMemberRequest {
	g["extended"] = g_extended
	return g
}

func (g GroupsIsMemberRequest) Params() api.Params {
	return api.Params(g)
}

// May execute with listed access token types:
//
//	[ user, group, service ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/groups.isMember
func (g *Groups) GroupsIsMember(params ...api.MethodParams) (resp models.GroupsIsMemberResponse, err error) {
	req := api.NewRequest[models.GroupsIsMemberResponse](g.api)

	res, err := req.Execute("groups.isMember", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// GroupsIsMemberExtended Returns information specifying whether a user is a member of a community.
// May execute with listed access token types:
//
//	[ user, group, service ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/groups.isMember
func (g *Groups) GroupsIsMemberExtended(params ...api.MethodParams) (resp models.GroupsIsMemberExtendedResponse, err error) {
	req := api.NewRequest[models.GroupsIsMemberExtendedResponse](g.api)

	res, err := req.Execute("groups.isMember", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// GroupsIsMemberUserIDs Returns information specifying whether a user is a member of a community.
type GroupsIsMemberUserIDsRequest api.Params

func NewGroupsIsMemberUserIDsRequest() GroupsIsMemberUserIDsRequest {
	params := make(GroupsIsMemberUserIDsRequest, 6)
	return params
}

func (g GroupsIsMemberUserIDsRequest) WithGroupId(g_group_id string) GroupsIsMemberUserIDsRequest {
	g["group_id"] = g_group_id
	return g
}

func (g GroupsIsMemberUserIDsRequest) WithUserId(g_user_id int) GroupsIsMemberUserIDsRequest {
	g["user_id"] = g_user_id
	return g
}

func (g GroupsIsMemberUserIDsRequest) WithUserIds(g_user_ids []int) GroupsIsMemberUserIDsRequest {
	g["user_ids"] = g_user_ids
	return g
}

func (g GroupsIsMemberUserIDsRequest) WithExtended(g_extended bool) GroupsIsMemberUserIDsRequest {
	g["extended"] = g_extended
	return g
}

func (g GroupsIsMemberUserIDsRequest) Params() api.Params {
	return api.Params(g)
}

// May execute with listed access token types:
//
//	[ user, group, service ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/groups.isMember
func (g *Groups) GroupsIsMemberUserIDs(params ...api.MethodParams) (resp models.GroupsIsMemberUserIdsResponse, err error) {
	req := api.NewRequest[models.GroupsIsMemberUserIdsResponse](g.api)

	res, err := req.Execute("groups.isMember", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// GroupsIsMemberExtendedUserIDs Returns information specifying whether a user is a member of a community.
// May execute with listed access token types:
//
//	[ user, group, service ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/groups.isMember
func (g *Groups) GroupsIsMemberExtendedUserIDs(params ...api.MethodParams) (resp models.GroupsIsMemberUserIdsExtendedResponse, err error) {
	req := api.NewRequest[models.GroupsIsMemberUserIdsExtendedResponse](g.api)

	res, err := req.Execute("groups.isMember", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// GroupsJoin With this method you can join the group or public page, and also confirm your participation in an event.
type GroupsJoinRequest api.Params

func NewGroupsJoinRequest() GroupsJoinRequest {
	params := make(GroupsJoinRequest, 3)
	return params
}

func (g GroupsJoinRequest) WithGroupId(g_group_id int) GroupsJoinRequest {
	g["group_id"] = g_group_id
	return g
}

func (g GroupsJoinRequest) WithNotSure(g_not_sure string) GroupsJoinRequest {
	g["not_sure"] = g_not_sure
	return g
}

func (g GroupsJoinRequest) Params() api.Params {
	return api.Params(g)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_Limits, Error_GroupInviteLinksNotValid ]
//
// https://dev.vk.com/method/groups.join
func (g *Groups) GroupsJoin(params ...api.MethodParams) (resp models.BaseOkResponse, err error) {
	req := api.NewRequest[models.BaseOkResponse](g.api)

	res, err := req.Execute("groups.join", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// GroupsLeave With this method you can leave a group, public page, or event.
type GroupsLeaveRequest api.Params

func NewGroupsLeaveRequest() GroupsLeaveRequest {
	params := make(GroupsLeaveRequest, 2)
	return params
}

func (g GroupsLeaveRequest) WithGroupId(g_group_id int) GroupsLeaveRequest {
	g["group_id"] = g_group_id
	return g
}

func (g GroupsLeaveRequest) Params() api.Params {
	return api.Params(g)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_ClientUpdateNeeded ]
//
// https://dev.vk.com/method/groups.leave
func (g *Groups) GroupsLeave(params ...api.MethodParams) (resp models.BaseOkResponse, err error) {
	req := api.NewRequest[models.BaseOkResponse](g.api)

	res, err := req.Execute("groups.leave", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// GroupsRemoveUser Removes a user from the community.
type GroupsRemoveUserRequest api.Params

func NewGroupsRemoveUserRequest() GroupsRemoveUserRequest {
	params := make(GroupsRemoveUserRequest, 3)
	return params
}

func (g GroupsRemoveUserRequest) WithGroupId(g_group_id int) GroupsRemoveUserRequest {
	g["group_id"] = g_group_id
	return g
}

func (g GroupsRemoveUserRequest) WithUserId(g_user_id int) GroupsRemoveUserRequest {
	g["user_id"] = g_user_id
	return g
}

func (g GroupsRemoveUserRequest) Params() api.Params {
	return api.Params(g)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/groups.removeUser
func (g *Groups) GroupsRemoveUser(params ...api.MethodParams) (resp models.BaseOkResponse, err error) {
	req := api.NewRequest[models.BaseOkResponse](g.api)

	res, err := req.Execute("groups.removeUser", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// GroupsReorderLink Allows to reorder links in the community.
type GroupsReorderLinkRequest api.Params

func NewGroupsReorderLinkRequest() GroupsReorderLinkRequest {
	params := make(GroupsReorderLinkRequest, 4)
	return params
}

func (g GroupsReorderLinkRequest) WithGroupId(g_group_id int) GroupsReorderLinkRequest {
	g["group_id"] = g_group_id
	return g
}

func (g GroupsReorderLinkRequest) WithLinkId(g_link_id int) GroupsReorderLinkRequest {
	g["link_id"] = g_link_id
	return g
}

func (g GroupsReorderLinkRequest) WithAfter(g_after int) GroupsReorderLinkRequest {
	g["after"] = g_after
	return g
}

func (g GroupsReorderLinkRequest) Params() api.Params {
	return api.Params(g)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/groups.reorderLink
func (g *Groups) GroupsReorderLink(params ...api.MethodParams) (resp models.BaseOkResponse, err error) {
	req := api.NewRequest[models.BaseOkResponse](g.api)

	res, err := req.Execute("groups.reorderLink", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// GroupsSearch Returns a list of communities matching the search criteria.
type GroupsSearchRequest api.Params

func NewGroupsSearchRequest() GroupsSearchRequest {
	params := make(GroupsSearchRequest, 10)
	return params
}

func (g GroupsSearchRequest) WithQ(g_q string) GroupsSearchRequest {
	g["q"] = g_q
	return g
}

func (g GroupsSearchRequest) WithType(g_type string) GroupsSearchRequest {
	g["type"] = g_type
	return g
}

func (g GroupsSearchRequest) WithCountryId(g_country_id int) GroupsSearchRequest {
	g["country_id"] = g_country_id
	return g
}

func (g GroupsSearchRequest) WithCityId(g_city_id int) GroupsSearchRequest {
	g["city_id"] = g_city_id
	return g
}

func (g GroupsSearchRequest) WithFuture(g_future bool) GroupsSearchRequest {
	g["future"] = g_future
	return g
}

func (g GroupsSearchRequest) WithMarket(g_market bool) GroupsSearchRequest {
	g["market"] = g_market
	return g
}

func (g GroupsSearchRequest) WithSort(g_sort int) GroupsSearchRequest {
	g["sort"] = g_sort
	return g
}

func (g GroupsSearchRequest) WithOffset(g_offset int) GroupsSearchRequest {
	g["offset"] = g_offset
	return g
}

func (g GroupsSearchRequest) WithCount(g_count int) GroupsSearchRequest {
	g["count"] = g_count
	return g
}

func (g GroupsSearchRequest) Params() api.Params {
	return api.Params(g)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/groups.search
func (g *Groups) GroupsSearch(params ...api.MethodParams) (resp models.GroupsSearchResponse, err error) {
	req := api.NewRequest[models.GroupsSearchResponse](g.api)

	res, err := req.Execute("groups.search", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// GroupsSetCallbackSettings Allow to set notifications settings for group.
type GroupsSetCallbackSettingsRequest api.Params

func NewGroupsSetCallbackSettingsRequest() GroupsSetCallbackSettingsRequest {
	params := make(GroupsSetCallbackSettingsRequest, 56)
	return params
}

func (g GroupsSetCallbackSettingsRequest) WithGroupId(g_group_id int) GroupsSetCallbackSettingsRequest {
	g["group_id"] = g_group_id
	return g
}

func (g GroupsSetCallbackSettingsRequest) WithServerId(g_server_id int) GroupsSetCallbackSettingsRequest {
	g["server_id"] = g_server_id
	return g
}

func (g GroupsSetCallbackSettingsRequest) WithApiVersion(g_api_version string) GroupsSetCallbackSettingsRequest {
	g["api_version"] = g_api_version
	return g
}

func (g GroupsSetCallbackSettingsRequest) WithMessageNew(g_message_new bool) GroupsSetCallbackSettingsRequest {
	g["message_new"] = g_message_new
	return g
}

func (g GroupsSetCallbackSettingsRequest) WithMessageReply(g_message_reply bool) GroupsSetCallbackSettingsRequest {
	g["message_reply"] = g_message_reply
	return g
}

func (g GroupsSetCallbackSettingsRequest) WithMessageAllow(g_message_allow bool) GroupsSetCallbackSettingsRequest {
	g["message_allow"] = g_message_allow
	return g
}

func (g GroupsSetCallbackSettingsRequest) WithMessageEdit(g_message_edit bool) GroupsSetCallbackSettingsRequest {
	g["message_edit"] = g_message_edit
	return g
}

func (g GroupsSetCallbackSettingsRequest) WithMessageDeny(g_message_deny bool) GroupsSetCallbackSettingsRequest {
	g["message_deny"] = g_message_deny
	return g
}

func (g GroupsSetCallbackSettingsRequest) WithMessageTypingState(g_message_typing_state bool) GroupsSetCallbackSettingsRequest {
	g["message_typing_state"] = g_message_typing_state
	return g
}

func (g GroupsSetCallbackSettingsRequest) WithPhotoNew(g_photo_new bool) GroupsSetCallbackSettingsRequest {
	g["photo_new"] = g_photo_new
	return g
}

func (g GroupsSetCallbackSettingsRequest) WithAudioNew(g_audio_new bool) GroupsSetCallbackSettingsRequest {
	g["audio_new"] = g_audio_new
	return g
}

func (g GroupsSetCallbackSettingsRequest) WithVideoNew(g_video_new bool) GroupsSetCallbackSettingsRequest {
	g["video_new"] = g_video_new
	return g
}

func (g GroupsSetCallbackSettingsRequest) WithWallReplyNew(g_wall_reply_new bool) GroupsSetCallbackSettingsRequest {
	g["wall_reply_new"] = g_wall_reply_new
	return g
}

func (g GroupsSetCallbackSettingsRequest) WithWallReplyEdit(g_wall_reply_edit bool) GroupsSetCallbackSettingsRequest {
	g["wall_reply_edit"] = g_wall_reply_edit
	return g
}

func (g GroupsSetCallbackSettingsRequest) WithWallReplyDelete(g_wall_reply_delete bool) GroupsSetCallbackSettingsRequest {
	g["wall_reply_delete"] = g_wall_reply_delete
	return g
}

func (g GroupsSetCallbackSettingsRequest) WithWallReplyRestore(g_wall_reply_restore bool) GroupsSetCallbackSettingsRequest {
	g["wall_reply_restore"] = g_wall_reply_restore
	return g
}

func (g GroupsSetCallbackSettingsRequest) WithWallPostNew(g_wall_post_new bool) GroupsSetCallbackSettingsRequest {
	g["wall_post_new"] = g_wall_post_new
	return g
}

func (g GroupsSetCallbackSettingsRequest) WithWallRepost(g_wall_repost bool) GroupsSetCallbackSettingsRequest {
	g["wall_repost"] = g_wall_repost
	return g
}

func (g GroupsSetCallbackSettingsRequest) WithBoardPostNew(g_board_post_new bool) GroupsSetCallbackSettingsRequest {
	g["board_post_new"] = g_board_post_new
	return g
}

func (g GroupsSetCallbackSettingsRequest) WithBoardPostEdit(g_board_post_edit bool) GroupsSetCallbackSettingsRequest {
	g["board_post_edit"] = g_board_post_edit
	return g
}

func (g GroupsSetCallbackSettingsRequest) WithBoardPostRestore(g_board_post_restore bool) GroupsSetCallbackSettingsRequest {
	g["board_post_restore"] = g_board_post_restore
	return g
}

func (g GroupsSetCallbackSettingsRequest) WithBoardPostDelete(g_board_post_delete bool) GroupsSetCallbackSettingsRequest {
	g["board_post_delete"] = g_board_post_delete
	return g
}

func (g GroupsSetCallbackSettingsRequest) WithPhotoCommentNew(g_photo_comment_new bool) GroupsSetCallbackSettingsRequest {
	g["photo_comment_new"] = g_photo_comment_new
	return g
}

func (g GroupsSetCallbackSettingsRequest) WithPhotoCommentEdit(g_photo_comment_edit bool) GroupsSetCallbackSettingsRequest {
	g["photo_comment_edit"] = g_photo_comment_edit
	return g
}

func (g GroupsSetCallbackSettingsRequest) WithPhotoCommentDelete(g_photo_comment_delete bool) GroupsSetCallbackSettingsRequest {
	g["photo_comment_delete"] = g_photo_comment_delete
	return g
}

func (g GroupsSetCallbackSettingsRequest) WithPhotoCommentRestore(g_photo_comment_restore bool) GroupsSetCallbackSettingsRequest {
	g["photo_comment_restore"] = g_photo_comment_restore
	return g
}

func (g GroupsSetCallbackSettingsRequest) WithVideoCommentNew(g_video_comment_new bool) GroupsSetCallbackSettingsRequest {
	g["video_comment_new"] = g_video_comment_new
	return g
}

func (g GroupsSetCallbackSettingsRequest) WithVideoCommentEdit(g_video_comment_edit bool) GroupsSetCallbackSettingsRequest {
	g["video_comment_edit"] = g_video_comment_edit
	return g
}

func (g GroupsSetCallbackSettingsRequest) WithVideoCommentDelete(g_video_comment_delete bool) GroupsSetCallbackSettingsRequest {
	g["video_comment_delete"] = g_video_comment_delete
	return g
}

func (g GroupsSetCallbackSettingsRequest) WithVideoCommentRestore(g_video_comment_restore bool) GroupsSetCallbackSettingsRequest {
	g["video_comment_restore"] = g_video_comment_restore
	return g
}

func (g GroupsSetCallbackSettingsRequest) WithMarketCommentNew(g_market_comment_new bool) GroupsSetCallbackSettingsRequest {
	g["market_comment_new"] = g_market_comment_new
	return g
}

func (g GroupsSetCallbackSettingsRequest) WithMarketCommentEdit(g_market_comment_edit bool) GroupsSetCallbackSettingsRequest {
	g["market_comment_edit"] = g_market_comment_edit
	return g
}

func (g GroupsSetCallbackSettingsRequest) WithMarketCommentDelete(g_market_comment_delete bool) GroupsSetCallbackSettingsRequest {
	g["market_comment_delete"] = g_market_comment_delete
	return g
}

func (g GroupsSetCallbackSettingsRequest) WithMarketCommentRestore(g_market_comment_restore bool) GroupsSetCallbackSettingsRequest {
	g["market_comment_restore"] = g_market_comment_restore
	return g
}

func (g GroupsSetCallbackSettingsRequest) WithMarketOrderNew(g_market_order_new bool) GroupsSetCallbackSettingsRequest {
	g["market_order_new"] = g_market_order_new
	return g
}

func (g GroupsSetCallbackSettingsRequest) WithMarketOrderEdit(g_market_order_edit bool) GroupsSetCallbackSettingsRequest {
	g["market_order_edit"] = g_market_order_edit
	return g
}

func (g GroupsSetCallbackSettingsRequest) WithPollVoteNew(g_poll_vote_new bool) GroupsSetCallbackSettingsRequest {
	g["poll_vote_new"] = g_poll_vote_new
	return g
}

func (g GroupsSetCallbackSettingsRequest) WithGroupJoin(g_group_join bool) GroupsSetCallbackSettingsRequest {
	g["group_join"] = g_group_join
	return g
}

func (g GroupsSetCallbackSettingsRequest) WithGroupLeave(g_group_leave bool) GroupsSetCallbackSettingsRequest {
	g["group_leave"] = g_group_leave
	return g
}

func (g GroupsSetCallbackSettingsRequest) WithGroupChangeSettings(g_group_change_settings bool) GroupsSetCallbackSettingsRequest {
	g["group_change_settings"] = g_group_change_settings
	return g
}

func (g GroupsSetCallbackSettingsRequest) WithGroupChangePhoto(g_group_change_photo bool) GroupsSetCallbackSettingsRequest {
	g["group_change_photo"] = g_group_change_photo
	return g
}

func (g GroupsSetCallbackSettingsRequest) WithGroupOfficersEdit(g_group_officers_edit bool) GroupsSetCallbackSettingsRequest {
	g["group_officers_edit"] = g_group_officers_edit
	return g
}

func (g GroupsSetCallbackSettingsRequest) WithUserBlock(g_user_block bool) GroupsSetCallbackSettingsRequest {
	g["user_block"] = g_user_block
	return g
}

func (g GroupsSetCallbackSettingsRequest) WithUserUnblock(g_user_unblock bool) GroupsSetCallbackSettingsRequest {
	g["user_unblock"] = g_user_unblock
	return g
}

func (g GroupsSetCallbackSettingsRequest) WithLeadFormsNew(g_lead_forms_new bool) GroupsSetCallbackSettingsRequest {
	g["lead_forms_new"] = g_lead_forms_new
	return g
}

func (g GroupsSetCallbackSettingsRequest) WithLikeAdd(g_like_add bool) GroupsSetCallbackSettingsRequest {
	g["like_add"] = g_like_add
	return g
}

func (g GroupsSetCallbackSettingsRequest) WithLikeRemove(g_like_remove bool) GroupsSetCallbackSettingsRequest {
	g["like_remove"] = g_like_remove
	return g
}

func (g GroupsSetCallbackSettingsRequest) WithMessageEvent(g_message_event bool) GroupsSetCallbackSettingsRequest {
	g["message_event"] = g_message_event
	return g
}

func (g GroupsSetCallbackSettingsRequest) WithDonutSubscriptionCreate(g_donut_subscription_create bool) GroupsSetCallbackSettingsRequest {
	g["donut_subscription_create"] = g_donut_subscription_create
	return g
}

func (g GroupsSetCallbackSettingsRequest) WithDonutSubscriptionProlonged(g_donut_subscription_prolonged bool) GroupsSetCallbackSettingsRequest {
	g["donut_subscription_prolonged"] = g_donut_subscription_prolonged
	return g
}

func (g GroupsSetCallbackSettingsRequest) WithDonutSubscriptionCancelled(g_donut_subscription_cancelled bool) GroupsSetCallbackSettingsRequest {
	g["donut_subscription_cancelled"] = g_donut_subscription_cancelled
	return g
}

func (g GroupsSetCallbackSettingsRequest) WithDonutSubscriptionPriceChanged(g_donut_subscription_price_changed bool) GroupsSetCallbackSettingsRequest {
	g["donut_subscription_price_changed"] = g_donut_subscription_price_changed
	return g
}

func (g GroupsSetCallbackSettingsRequest) WithDonutSubscriptionExpired(g_donut_subscription_expired bool) GroupsSetCallbackSettingsRequest {
	g["donut_subscription_expired"] = g_donut_subscription_expired
	return g
}

func (g GroupsSetCallbackSettingsRequest) WithDonutMoneyWithdraw(g_donut_money_withdraw bool) GroupsSetCallbackSettingsRequest {
	g["donut_money_withdraw"] = g_donut_money_withdraw
	return g
}

func (g GroupsSetCallbackSettingsRequest) WithDonutMoneyWithdrawError(g_donut_money_withdraw_error bool) GroupsSetCallbackSettingsRequest {
	g["donut_money_withdraw_error"] = g_donut_money_withdraw_error
	return g
}

func (g GroupsSetCallbackSettingsRequest) Params() api.Params {
	return api.Params(g)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_NotFound ]
//
// https://dev.vk.com/method/groups.setCallbackSettings
func (g *Groups) GroupsSetCallbackSettings(params ...api.MethodParams) (resp models.BaseOkResponse, err error) {
	req := api.NewRequest[models.BaseOkResponse](g.api)

	res, err := req.Execute("groups.setCallbackSettings", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// GroupsSetLongPollSettings Sets Long Poll notification settings
type GroupsSetLongPollSettingsRequest api.Params

func NewGroupsSetLongPollSettingsRequest() GroupsSetLongPollSettingsRequest {
	params := make(GroupsSetLongPollSettingsRequest, 53)
	return params
}

func (g GroupsSetLongPollSettingsRequest) WithGroupId(g_group_id int) GroupsSetLongPollSettingsRequest {
	g["group_id"] = g_group_id
	return g
}

func (g GroupsSetLongPollSettingsRequest) WithEnabled(g_enabled bool) GroupsSetLongPollSettingsRequest {
	g["enabled"] = g_enabled
	return g
}

func (g GroupsSetLongPollSettingsRequest) WithApiVersion(g_api_version string) GroupsSetLongPollSettingsRequest {
	g["api_version"] = g_api_version
	return g
}

func (g GroupsSetLongPollSettingsRequest) WithMessageNew(g_message_new bool) GroupsSetLongPollSettingsRequest {
	g["message_new"] = g_message_new
	return g
}

func (g GroupsSetLongPollSettingsRequest) WithMessageReply(g_message_reply bool) GroupsSetLongPollSettingsRequest {
	g["message_reply"] = g_message_reply
	return g
}

func (g GroupsSetLongPollSettingsRequest) WithMessageAllow(g_message_allow bool) GroupsSetLongPollSettingsRequest {
	g["message_allow"] = g_message_allow
	return g
}

func (g GroupsSetLongPollSettingsRequest) WithMessageDeny(g_message_deny bool) GroupsSetLongPollSettingsRequest {
	g["message_deny"] = g_message_deny
	return g
}

func (g GroupsSetLongPollSettingsRequest) WithMessageEdit(g_message_edit bool) GroupsSetLongPollSettingsRequest {
	g["message_edit"] = g_message_edit
	return g
}

func (g GroupsSetLongPollSettingsRequest) WithMessageTypingState(g_message_typing_state bool) GroupsSetLongPollSettingsRequest {
	g["message_typing_state"] = g_message_typing_state
	return g
}

func (g GroupsSetLongPollSettingsRequest) WithPhotoNew(g_photo_new bool) GroupsSetLongPollSettingsRequest {
	g["photo_new"] = g_photo_new
	return g
}

func (g GroupsSetLongPollSettingsRequest) WithAudioNew(g_audio_new bool) GroupsSetLongPollSettingsRequest {
	g["audio_new"] = g_audio_new
	return g
}

func (g GroupsSetLongPollSettingsRequest) WithVideoNew(g_video_new bool) GroupsSetLongPollSettingsRequest {
	g["video_new"] = g_video_new
	return g
}

func (g GroupsSetLongPollSettingsRequest) WithWallReplyNew(g_wall_reply_new bool) GroupsSetLongPollSettingsRequest {
	g["wall_reply_new"] = g_wall_reply_new
	return g
}

func (g GroupsSetLongPollSettingsRequest) WithWallReplyEdit(g_wall_reply_edit bool) GroupsSetLongPollSettingsRequest {
	g["wall_reply_edit"] = g_wall_reply_edit
	return g
}

func (g GroupsSetLongPollSettingsRequest) WithWallReplyDelete(g_wall_reply_delete bool) GroupsSetLongPollSettingsRequest {
	g["wall_reply_delete"] = g_wall_reply_delete
	return g
}

func (g GroupsSetLongPollSettingsRequest) WithWallReplyRestore(g_wall_reply_restore bool) GroupsSetLongPollSettingsRequest {
	g["wall_reply_restore"] = g_wall_reply_restore
	return g
}

func (g GroupsSetLongPollSettingsRequest) WithWallPostNew(g_wall_post_new bool) GroupsSetLongPollSettingsRequest {
	g["wall_post_new"] = g_wall_post_new
	return g
}

func (g GroupsSetLongPollSettingsRequest) WithWallRepost(g_wall_repost bool) GroupsSetLongPollSettingsRequest {
	g["wall_repost"] = g_wall_repost
	return g
}

func (g GroupsSetLongPollSettingsRequest) WithBoardPostNew(g_board_post_new bool) GroupsSetLongPollSettingsRequest {
	g["board_post_new"] = g_board_post_new
	return g
}

func (g GroupsSetLongPollSettingsRequest) WithBoardPostEdit(g_board_post_edit bool) GroupsSetLongPollSettingsRequest {
	g["board_post_edit"] = g_board_post_edit
	return g
}

func (g GroupsSetLongPollSettingsRequest) WithBoardPostRestore(g_board_post_restore bool) GroupsSetLongPollSettingsRequest {
	g["board_post_restore"] = g_board_post_restore
	return g
}

func (g GroupsSetLongPollSettingsRequest) WithBoardPostDelete(g_board_post_delete bool) GroupsSetLongPollSettingsRequest {
	g["board_post_delete"] = g_board_post_delete
	return g
}

func (g GroupsSetLongPollSettingsRequest) WithPhotoCommentNew(g_photo_comment_new bool) GroupsSetLongPollSettingsRequest {
	g["photo_comment_new"] = g_photo_comment_new
	return g
}

func (g GroupsSetLongPollSettingsRequest) WithPhotoCommentEdit(g_photo_comment_edit bool) GroupsSetLongPollSettingsRequest {
	g["photo_comment_edit"] = g_photo_comment_edit
	return g
}

func (g GroupsSetLongPollSettingsRequest) WithPhotoCommentDelete(g_photo_comment_delete bool) GroupsSetLongPollSettingsRequest {
	g["photo_comment_delete"] = g_photo_comment_delete
	return g
}

func (g GroupsSetLongPollSettingsRequest) WithPhotoCommentRestore(g_photo_comment_restore bool) GroupsSetLongPollSettingsRequest {
	g["photo_comment_restore"] = g_photo_comment_restore
	return g
}

func (g GroupsSetLongPollSettingsRequest) WithVideoCommentNew(g_video_comment_new bool) GroupsSetLongPollSettingsRequest {
	g["video_comment_new"] = g_video_comment_new
	return g
}

func (g GroupsSetLongPollSettingsRequest) WithVideoCommentEdit(g_video_comment_edit bool) GroupsSetLongPollSettingsRequest {
	g["video_comment_edit"] = g_video_comment_edit
	return g
}

func (g GroupsSetLongPollSettingsRequest) WithVideoCommentDelete(g_video_comment_delete bool) GroupsSetLongPollSettingsRequest {
	g["video_comment_delete"] = g_video_comment_delete
	return g
}

func (g GroupsSetLongPollSettingsRequest) WithVideoCommentRestore(g_video_comment_restore bool) GroupsSetLongPollSettingsRequest {
	g["video_comment_restore"] = g_video_comment_restore
	return g
}

func (g GroupsSetLongPollSettingsRequest) WithMarketCommentNew(g_market_comment_new bool) GroupsSetLongPollSettingsRequest {
	g["market_comment_new"] = g_market_comment_new
	return g
}

func (g GroupsSetLongPollSettingsRequest) WithMarketCommentEdit(g_market_comment_edit bool) GroupsSetLongPollSettingsRequest {
	g["market_comment_edit"] = g_market_comment_edit
	return g
}

func (g GroupsSetLongPollSettingsRequest) WithMarketCommentDelete(g_market_comment_delete bool) GroupsSetLongPollSettingsRequest {
	g["market_comment_delete"] = g_market_comment_delete
	return g
}

func (g GroupsSetLongPollSettingsRequest) WithMarketCommentRestore(g_market_comment_restore bool) GroupsSetLongPollSettingsRequest {
	g["market_comment_restore"] = g_market_comment_restore
	return g
}

func (g GroupsSetLongPollSettingsRequest) WithPollVoteNew(g_poll_vote_new bool) GroupsSetLongPollSettingsRequest {
	g["poll_vote_new"] = g_poll_vote_new
	return g
}

func (g GroupsSetLongPollSettingsRequest) WithGroupJoin(g_group_join bool) GroupsSetLongPollSettingsRequest {
	g["group_join"] = g_group_join
	return g
}

func (g GroupsSetLongPollSettingsRequest) WithGroupLeave(g_group_leave bool) GroupsSetLongPollSettingsRequest {
	g["group_leave"] = g_group_leave
	return g
}

func (g GroupsSetLongPollSettingsRequest) WithGroupChangeSettings(g_group_change_settings bool) GroupsSetLongPollSettingsRequest {
	g["group_change_settings"] = g_group_change_settings
	return g
}

func (g GroupsSetLongPollSettingsRequest) WithGroupChangePhoto(g_group_change_photo bool) GroupsSetLongPollSettingsRequest {
	g["group_change_photo"] = g_group_change_photo
	return g
}

func (g GroupsSetLongPollSettingsRequest) WithGroupOfficersEdit(g_group_officers_edit bool) GroupsSetLongPollSettingsRequest {
	g["group_officers_edit"] = g_group_officers_edit
	return g
}

func (g GroupsSetLongPollSettingsRequest) WithUserBlock(g_user_block bool) GroupsSetLongPollSettingsRequest {
	g["user_block"] = g_user_block
	return g
}

func (g GroupsSetLongPollSettingsRequest) WithUserUnblock(g_user_unblock bool) GroupsSetLongPollSettingsRequest {
	g["user_unblock"] = g_user_unblock
	return g
}

func (g GroupsSetLongPollSettingsRequest) WithLikeAdd(g_like_add bool) GroupsSetLongPollSettingsRequest {
	g["like_add"] = g_like_add
	return g
}

func (g GroupsSetLongPollSettingsRequest) WithLikeRemove(g_like_remove bool) GroupsSetLongPollSettingsRequest {
	g["like_remove"] = g_like_remove
	return g
}

func (g GroupsSetLongPollSettingsRequest) WithMessageEvent(g_message_event bool) GroupsSetLongPollSettingsRequest {
	g["message_event"] = g_message_event
	return g
}

func (g GroupsSetLongPollSettingsRequest) WithDonutSubscriptionCreate(g_donut_subscription_create bool) GroupsSetLongPollSettingsRequest {
	g["donut_subscription_create"] = g_donut_subscription_create
	return g
}

func (g GroupsSetLongPollSettingsRequest) WithDonutSubscriptionProlonged(g_donut_subscription_prolonged bool) GroupsSetLongPollSettingsRequest {
	g["donut_subscription_prolonged"] = g_donut_subscription_prolonged
	return g
}

func (g GroupsSetLongPollSettingsRequest) WithDonutSubscriptionCancelled(g_donut_subscription_cancelled bool) GroupsSetLongPollSettingsRequest {
	g["donut_subscription_cancelled"] = g_donut_subscription_cancelled
	return g
}

func (g GroupsSetLongPollSettingsRequest) WithDonutSubscriptionPriceChanged(g_donut_subscription_price_changed bool) GroupsSetLongPollSettingsRequest {
	g["donut_subscription_price_changed"] = g_donut_subscription_price_changed
	return g
}

func (g GroupsSetLongPollSettingsRequest) WithDonutSubscriptionExpired(g_donut_subscription_expired bool) GroupsSetLongPollSettingsRequest {
	g["donut_subscription_expired"] = g_donut_subscription_expired
	return g
}

func (g GroupsSetLongPollSettingsRequest) WithDonutMoneyWithdraw(g_donut_money_withdraw bool) GroupsSetLongPollSettingsRequest {
	g["donut_money_withdraw"] = g_donut_money_withdraw
	return g
}

func (g GroupsSetLongPollSettingsRequest) WithDonutMoneyWithdrawError(g_donut_money_withdraw_error bool) GroupsSetLongPollSettingsRequest {
	g["donut_money_withdraw_error"] = g_donut_money_withdraw_error
	return g
}

func (g GroupsSetLongPollSettingsRequest) Params() api.Params {
	return api.Params(g)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/groups.setLongPollSettings
func (g *Groups) GroupsSetLongPollSettings(params ...api.MethodParams) (resp models.BaseOkResponse, err error) {
	req := api.NewRequest[models.BaseOkResponse](g.api)

	res, err := req.Execute("groups.setLongPollSettings", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// GroupsSetSettings ...
type GroupsSetSettingsRequest api.Params

func NewGroupsSetSettingsRequest() GroupsSetSettingsRequest {
	params := make(GroupsSetSettingsRequest, 6)
	return params
}

func (g GroupsSetSettingsRequest) WithGroupId(g_group_id int) GroupsSetSettingsRequest {
	g["group_id"] = g_group_id
	return g
}

func (g GroupsSetSettingsRequest) WithMessages(g_messages bool) GroupsSetSettingsRequest {
	g["messages"] = g_messages
	return g
}

func (g GroupsSetSettingsRequest) WithBotsCapabilities(g_bots_capabilities bool) GroupsSetSettingsRequest {
	g["bots_capabilities"] = g_bots_capabilities
	return g
}

func (g GroupsSetSettingsRequest) WithBotsStartButton(g_bots_start_button bool) GroupsSetSettingsRequest {
	g["bots_start_button"] = g_bots_start_button
	return g
}

func (g GroupsSetSettingsRequest) WithBotsAddToChat(g_bots_add_to_chat bool) GroupsSetSettingsRequest {
	g["bots_add_to_chat"] = g_bots_add_to_chat
	return g
}

func (g GroupsSetSettingsRequest) Params() api.Params {
	return api.Params(g)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/groups.setSettings
func (g *Groups) GroupsSetSettings(params ...api.MethodParams) (resp models.BaseOkResponse, err error) {
	req := api.NewRequest[models.BaseOkResponse](g.api)

	res, err := req.Execute("groups.setSettings", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// GroupsSetUserNote In order to save note about group participant
type GroupsSetUserNoteRequest api.Params

func NewGroupsSetUserNoteRequest() GroupsSetUserNoteRequest {
	params := make(GroupsSetUserNoteRequest, 4)
	return params
}

func (g GroupsSetUserNoteRequest) WithGroupId(g_group_id int) GroupsSetUserNoteRequest {
	g["group_id"] = g_group_id
	return g
}

func (g GroupsSetUserNoteRequest) WithUserId(g_user_id int) GroupsSetUserNoteRequest {
	g["user_id"] = g_user_id
	return g
}

func (g GroupsSetUserNoteRequest) WithNote(g_note string) GroupsSetUserNoteRequest {
	g["note"] = g_note
	return g
}

func (g GroupsSetUserNoteRequest) Params() api.Params {
	return api.Params(g)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/groups.setUserNote
func (g *Groups) GroupsSetUserNote(params ...api.MethodParams) (resp models.BaseBoolResponse, err error) {
	req := api.NewRequest[models.BaseBoolResponse](g.api)

	res, err := req.Execute("groups.setUserNote", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// GroupsTagAdd Add new group's tag
type GroupsTagAddRequest api.Params

func NewGroupsTagAddRequest() GroupsTagAddRequest {
	params := make(GroupsTagAddRequest, 4)
	return params
}

func (g GroupsTagAddRequest) WithGroupId(g_group_id int) GroupsTagAddRequest {
	g["group_id"] = g_group_id
	return g
}

func (g GroupsTagAddRequest) WithTagName(g_tag_name string) GroupsTagAddRequest {
	g["tag_name"] = g_tag_name
	return g
}

func (g GroupsTagAddRequest) WithTagColor(g_tag_color string) GroupsTagAddRequest {
	g["tag_color"] = g_tag_color
	return g
}

func (g GroupsTagAddRequest) Params() api.Params {
	return api.Params(g)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/groups.tagAdd
func (g *Groups) GroupsTagAdd(params ...api.MethodParams) (resp models.BaseBoolResponse, err error) {
	req := api.NewRequest[models.BaseBoolResponse](g.api)

	res, err := req.Execute("groups.tagAdd", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// GroupsTagBind Bind or unbind group's tag to user
type GroupsTagBindRequest api.Params

func NewGroupsTagBindRequest() GroupsTagBindRequest {
	params := make(GroupsTagBindRequest, 5)
	return params
}

func (g GroupsTagBindRequest) WithGroupId(g_group_id int) GroupsTagBindRequest {
	g["group_id"] = g_group_id
	return g
}

func (g GroupsTagBindRequest) WithTagId(g_tag_id int) GroupsTagBindRequest {
	g["tag_id"] = g_tag_id
	return g
}

func (g GroupsTagBindRequest) WithUserId(g_user_id int) GroupsTagBindRequest {
	g["user_id"] = g_user_id
	return g
}

func (g GroupsTagBindRequest) WithAct(g_act string) GroupsTagBindRequest {
	g["act"] = g_act
	return g
}

func (g GroupsTagBindRequest) Params() api.Params {
	return api.Params(g)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/groups.tagBind
func (g *Groups) GroupsTagBind(params ...api.MethodParams) (resp models.BaseBoolResponse, err error) {
	req := api.NewRequest[models.BaseBoolResponse](g.api)

	res, err := req.Execute("groups.tagBind", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// GroupsTagDelete Delete group's tag
type GroupsTagDeleteRequest api.Params

func NewGroupsTagDeleteRequest() GroupsTagDeleteRequest {
	params := make(GroupsTagDeleteRequest, 3)
	return params
}

func (g GroupsTagDeleteRequest) WithGroupId(g_group_id int) GroupsTagDeleteRequest {
	g["group_id"] = g_group_id
	return g
}

func (g GroupsTagDeleteRequest) WithTagId(g_tag_id int) GroupsTagDeleteRequest {
	g["tag_id"] = g_tag_id
	return g
}

func (g GroupsTagDeleteRequest) Params() api.Params {
	return api.Params(g)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/groups.tagDelete
func (g *Groups) GroupsTagDelete(params ...api.MethodParams) (resp models.BaseBoolResponse, err error) {
	req := api.NewRequest[models.BaseBoolResponse](g.api)

	res, err := req.Execute("groups.tagDelete", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// GroupsTagUpdate Update group's tag
type GroupsTagUpdateRequest api.Params

func NewGroupsTagUpdateRequest() GroupsTagUpdateRequest {
	params := make(GroupsTagUpdateRequest, 4)
	return params
}

func (g GroupsTagUpdateRequest) WithGroupId(g_group_id int) GroupsTagUpdateRequest {
	g["group_id"] = g_group_id
	return g
}

func (g GroupsTagUpdateRequest) WithTagId(g_tag_id int) GroupsTagUpdateRequest {
	g["tag_id"] = g_tag_id
	return g
}

func (g GroupsTagUpdateRequest) WithTagName(g_tag_name string) GroupsTagUpdateRequest {
	g["tag_name"] = g_tag_name
	return g
}

func (g GroupsTagUpdateRequest) Params() api.Params {
	return api.Params(g)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/groups.tagUpdate
func (g *Groups) GroupsTagUpdate(params ...api.MethodParams) (resp models.BaseBoolResponse, err error) {
	req := api.NewRequest[models.BaseBoolResponse](g.api)

	res, err := req.Execute("groups.tagUpdate", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// GroupsToggleMarket ...
type GroupsToggleMarketRequest api.Params

func NewGroupsToggleMarketRequest() GroupsToggleMarketRequest {
	params := make(GroupsToggleMarketRequest, 4)
	return params
}

func (g GroupsToggleMarketRequest) WithGroupId(g_group_id int) GroupsToggleMarketRequest {
	g["group_id"] = g_group_id
	return g
}

func (g GroupsToggleMarketRequest) WithState(g_state models.GroupsMarketState) GroupsToggleMarketRequest {
	g["state"] = g_state
	return g
}

func (g GroupsToggleMarketRequest) WithRef(g_ref string) GroupsToggleMarketRequest {
	g["ref"] = g_ref
	return g
}

func (g GroupsToggleMarketRequest) Params() api.Params {
	return api.Params(g)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_MarketShopAlreadyEnabled, Error_MarketShopAlreadyDisabled ]
//
// https://dev.vk.com/method/groups.toggleMarket
func (g *Groups) GroupsToggleMarket(params ...api.MethodParams) (resp models.BaseOkResponse, err error) {
	req := api.NewRequest[models.BaseOkResponse](g.api)

	res, err := req.Execute("groups.toggleMarket", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// GroupsUnban ...
type GroupsUnbanRequest api.Params

func NewGroupsUnbanRequest() GroupsUnbanRequest {
	params := make(GroupsUnbanRequest, 3)
	return params
}

func (g GroupsUnbanRequest) WithGroupId(g_group_id int) GroupsUnbanRequest {
	g["group_id"] = g_group_id
	return g
}

func (g GroupsUnbanRequest) WithOwnerId(g_owner_id int) GroupsUnbanRequest {
	g["owner_id"] = g_owner_id
	return g
}

func (g GroupsUnbanRequest) Params() api.Params {
	return api.Params(g)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/groups.unban
func (g *Groups) GroupsUnban(params ...api.MethodParams) (resp models.BaseOkResponse, err error) {
	req := api.NewRequest[models.BaseOkResponse](g.api)

	res, err := req.Execute("groups.unban", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}
