// Code generated by https://github.com/defany/govk. DO NOT EDIT.

package requests

import (
	"github.com/defany/govk/api"
	"github.com/defany/govk/api/gen/models"
)

// GroupsIsMember Returns information specifying whether a user is a member of a community.
type GroupsIsMemberRequest api.Params

func NewGroupsIsMemberRequest() GroupsIsMemberRequest {
	params := make(GroupsIsMemberRequest, 6)
	return params
}

func (g GroupsIsMemberRequest) WithGroupId(g_group_id string) GroupsIsMemberRequest{
	g["group_id"] = g_group_id
	return g
}

func (g GroupsIsMemberRequest) WithUserId(g_user_id int) GroupsIsMemberRequest{
	g["user_id"] = g_user_id
	return g
}

func (g GroupsIsMemberRequest) WithUserIds(g_user_ids []int) GroupsIsMemberRequest{
	g["user_ids"] = g_user_ids
	return g
}

func (g GroupsIsMemberRequest) WithExtended(g_extended bool) GroupsIsMemberRequest{
	g["extended"] = g_extended
	return g
}

func (g GroupsIsMemberRequest) Params() api.Params {
	return api.Params(g)
}

// May execute with listed access token types:
//    [ user, group, service ]
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/groups.isMember
func (g *Groups) GroupsIsMember(params ...api.MethodParams) (resp models.GroupsIsMemberResponse, err error) {
	req := api.NewRequest[models.GroupsIsMemberResponse](g.api)

	res, err := req.Execute("groups.isMember", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// GroupsIsMemberExtended Returns information specifying whether a user is a member of a community.
// May execute with listed access token types:
//    [ user, group, service ]
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/groups.isMember
func (g *Groups) GroupsIsMemberExtended(params ...api.MethodParams) (resp models.GroupsIsMemberExtendedResponse, err error) {
	req := api.NewRequest[models.GroupsIsMemberExtendedResponse](g.api)

	res, err := req.Execute("groups.isMember", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// GroupsIsMemberUserIDs Returns information specifying whether a user is a member of a community.
type GroupsIsMemberUserIDsRequest api.Params

func NewGroupsIsMemberUserIDsRequest() GroupsIsMemberUserIDsRequest {
	params := make(GroupsIsMemberUserIDsRequest, 6)
	return params
}

func (g GroupsIsMemberUserIDsRequest) WithGroupId(g_group_id string) GroupsIsMemberUserIDsRequest{
	g["group_id"] = g_group_id
	return g
}

func (g GroupsIsMemberUserIDsRequest) WithUserId(g_user_id int) GroupsIsMemberUserIDsRequest{
	g["user_id"] = g_user_id
	return g
}

func (g GroupsIsMemberUserIDsRequest) WithUserIds(g_user_ids []int) GroupsIsMemberUserIDsRequest{
	g["user_ids"] = g_user_ids
	return g
}

func (g GroupsIsMemberUserIDsRequest) WithExtended(g_extended bool) GroupsIsMemberUserIDsRequest{
	g["extended"] = g_extended
	return g
}

func (g GroupsIsMemberUserIDsRequest) Params() api.Params {
	return api.Params(g)
}

// May execute with listed access token types:
//    [ user, group, service ]
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/groups.isMember
func (g *Groups) GroupsIsMemberUserIDs(params ...api.MethodParams) (resp models.GroupsIsMemberUserIdsResponse, err error) {
	req := api.NewRequest[models.GroupsIsMemberUserIdsResponse](g.api)

	res, err := req.Execute("groups.isMember", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// GroupsIsMemberExtendedUserIDs Returns information specifying whether a user is a member of a community.
// May execute with listed access token types:
//    [ user, group, service ]
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/groups.isMember
func (g *Groups) GroupsIsMemberExtendedUserIDs(params ...api.MethodParams) (resp models.GroupsIsMemberUserIdsExtendedResponse, err error) {
	req := api.NewRequest[models.GroupsIsMemberUserIdsExtendedResponse](g.api)

	res, err := req.Execute("groups.isMember", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

