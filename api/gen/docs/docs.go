// Code generated by https://github.com/defany/govk. DO NOT EDIT.

package requests

import (
	"github.com/defany/govk/api"
	"github.com/defany/govk/api/gen/models"
)

type Docs struct {
	api *api.API
}

func NewDocs(api *api.API) *Docs {
	return &Docs{
		api: api,
	}
}

// DocsAdd Copies a document to a user's or community's document list.
type DocsAddRequest api.Params

func NewDocsAddRequest() DocsAddRequest {
	params := make(DocsAddRequest, 4)
	return params
}

func (d DocsAddRequest) WithOwnerId(d_owner_id int) DocsAddRequest {
	d["owner_id"] = d_owner_id
	return d
}

func (d DocsAddRequest) WithDocId(d_doc_id int) DocsAddRequest {
	d["doc_id"] = d_doc_id
	return d
}

func (d DocsAddRequest) WithAccessKey(d_access_key string) DocsAddRequest {
	d["access_key"] = d_access_key
	return d
}

func (d DocsAddRequest) Params() api.Params {
	return api.Params(d)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/docs.add
func (d *Docs) DocsAdd(params ...api.MethodParams) (resp models.DocsAddResponse, err error) {
	req := api.NewRequest[models.DocsAddResponse](d.api)

	res, err := req.Execute("docs.add", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// DocsDelete Deletes a user or community document.
type DocsDeleteRequest api.Params

func NewDocsDeleteRequest() DocsDeleteRequest {
	params := make(DocsDeleteRequest, 3)
	return params
}

func (d DocsDeleteRequest) WithOwnerId(d_owner_id int) DocsDeleteRequest {
	d["owner_id"] = d_owner_id
	return d
}

func (d DocsDeleteRequest) WithDocId(d_doc_id int) DocsDeleteRequest {
	d["doc_id"] = d_doc_id
	return d
}

func (d DocsDeleteRequest) Params() api.Params {
	return api.Params(d)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_ParamDocDeleteAccess, Error_ParamDocId ]
//
// https://dev.vk.com/method/docs.delete
func (d *Docs) DocsDelete(params ...api.MethodParams) (resp models.BaseOkResponse, err error) {
	req := api.NewRequest[models.BaseOkResponse](d.api)

	res, err := req.Execute("docs.delete", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// DocsEdit Edits a document.
type DocsEditRequest api.Params

func NewDocsEditRequest() DocsEditRequest {
	params := make(DocsEditRequest, 5)
	return params
}

func (d DocsEditRequest) WithOwnerId(d_owner_id int) DocsEditRequest {
	d["owner_id"] = d_owner_id
	return d
}

func (d DocsEditRequest) WithDocId(d_doc_id int) DocsEditRequest {
	d["doc_id"] = d_doc_id
	return d
}

func (d DocsEditRequest) WithTitle(d_title string) DocsEditRequest {
	d["title"] = d_title
	return d
}

func (d DocsEditRequest) WithTags(d_tags []string) DocsEditRequest {
	d["tags"] = d_tags
	return d
}

func (d DocsEditRequest) Params() api.Params {
	return api.Params(d)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_ParamDocAccess, Error_ParamDocId, Error_ParamDocTitle ]
//
// https://dev.vk.com/method/docs.edit
func (d *Docs) DocsEdit(params ...api.MethodParams) (resp models.BaseOkResponse, err error) {
	req := api.NewRequest[models.BaseOkResponse](d.api)

	res, err := req.Execute("docs.edit", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// DocsGet Returns detailed information about user or community documents.
type DocsGetRequest api.Params

func NewDocsGetRequest() DocsGetRequest {
	params := make(DocsGetRequest, 6)
	return params
}

func (d DocsGetRequest) WithCount(d_count int) DocsGetRequest {
	d["count"] = d_count
	return d
}

func (d DocsGetRequest) WithOffset(d_offset int) DocsGetRequest {
	d["offset"] = d_offset
	return d
}

func (d DocsGetRequest) WithType(d_type int) DocsGetRequest {
	d["type"] = d_type
	return d
}

func (d DocsGetRequest) WithOwnerId(d_owner_id int) DocsGetRequest {
	d["owner_id"] = d_owner_id
	return d
}

func (d DocsGetRequest) WithReturnTags(d_return_tags bool) DocsGetRequest {
	d["return_tags"] = d_return_tags
	return d
}

func (d DocsGetRequest) Params() api.Params {
	return api.Params(d)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/docs.get
func (d *Docs) DocsGet(params ...api.MethodParams) (resp models.DocsGetResponse, err error) {
	req := api.NewRequest[models.DocsGetResponse](d.api)

	res, err := req.Execute("docs.get", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// DocsGetById Returns information about documents by their IDs.
type DocsGetByIdRequest api.Params

func NewDocsGetByIdRequest() DocsGetByIdRequest {
	params := make(DocsGetByIdRequest, 3)
	return params
}

func (d DocsGetByIdRequest) WithDocs(d_docs []string) DocsGetByIdRequest {
	d["docs"] = d_docs
	return d
}

func (d DocsGetByIdRequest) WithReturnTags(d_return_tags bool) DocsGetByIdRequest {
	d["return_tags"] = d_return_tags
	return d
}

func (d DocsGetByIdRequest) Params() api.Params {
	return api.Params(d)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/docs.getById
func (d *Docs) DocsGetById(params ...api.MethodParams) (resp models.DocsGetByIdResponse, err error) {
	req := api.NewRequest[models.DocsGetByIdResponse](d.api)

	res, err := req.Execute("docs.getById", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// DocsGetMessagesUploadServer Returns the server address for document upload.
type DocsGetMessagesUploadServerRequest api.Params

func NewDocsGetMessagesUploadServerRequest() DocsGetMessagesUploadServerRequest {
	params := make(DocsGetMessagesUploadServerRequest, 3)
	return params
}

func (d DocsGetMessagesUploadServerRequest) WithType(d_type string) DocsGetMessagesUploadServerRequest {
	d["type"] = d_type
	return d
}

func (d DocsGetMessagesUploadServerRequest) WithPeerId(d_peer_id int) DocsGetMessagesUploadServerRequest {
	d["peer_id"] = d_peer_id
	return d
}

func (d DocsGetMessagesUploadServerRequest) Params() api.Params {
	return api.Params(d)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_MessagesDenySend ]
//
// https://dev.vk.com/method/docs.getMessagesUploadServer
func (d *Docs) DocsGetMessagesUploadServer(params ...api.MethodParams) (resp models.DocsGetUploadServerResponse, err error) {
	req := api.NewRequest[models.DocsGetUploadServerResponse](d.api)

	res, err := req.Execute("docs.getMessagesUploadServer", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// DocsGetTypes Returns documents types available for current user.
type DocsGetTypesRequest api.Params

func NewDocsGetTypesRequest() DocsGetTypesRequest {
	params := make(DocsGetTypesRequest, 2)
	return params
}

func (d DocsGetTypesRequest) WithOwnerId(d_owner_id int) DocsGetTypesRequest {
	d["owner_id"] = d_owner_id
	return d
}

func (d DocsGetTypesRequest) Params() api.Params {
	return api.Params(d)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/docs.getTypes
func (d *Docs) DocsGetTypes(params ...api.MethodParams) (resp models.DocsGetTypesResponse, err error) {
	req := api.NewRequest[models.DocsGetTypesResponse](d.api)

	res, err := req.Execute("docs.getTypes", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// DocsGetUploadServer Returns the server address for document upload.
type DocsGetUploadServerRequest api.Params

func NewDocsGetUploadServerRequest() DocsGetUploadServerRequest {
	params := make(DocsGetUploadServerRequest, 2)
	return params
}

func (d DocsGetUploadServerRequest) WithGroupId(d_group_id int) DocsGetUploadServerRequest {
	d["group_id"] = d_group_id
	return d
}

func (d DocsGetUploadServerRequest) Params() api.Params {
	return api.Params(d)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/docs.getUploadServer
func (d *Docs) DocsGetUploadServer(params ...api.MethodParams) (resp models.DocsGetUploadServerResponse, err error) {
	req := api.NewRequest[models.DocsGetUploadServerResponse](d.api)

	res, err := req.Execute("docs.getUploadServer", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// DocsGetWallUploadServer Returns the server address for document upload onto a user's or community's wall.
type DocsGetWallUploadServerRequest api.Params

func NewDocsGetWallUploadServerRequest() DocsGetWallUploadServerRequest {
	params := make(DocsGetWallUploadServerRequest, 2)
	return params
}

func (d DocsGetWallUploadServerRequest) WithGroupId(d_group_id int) DocsGetWallUploadServerRequest {
	d["group_id"] = d_group_id
	return d
}

func (d DocsGetWallUploadServerRequest) Params() api.Params {
	return api.Params(d)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/docs.getWallUploadServer
func (d *Docs) DocsGetWallUploadServer(params ...api.MethodParams) (resp models.BaseGetUploadServerResponse, err error) {
	req := api.NewRequest[models.BaseGetUploadServerResponse](d.api)

	res, err := req.Execute("docs.getWallUploadServer", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// DocsSave Saves a document after [vk.com/dev/upload_files_2|uploading it to a server].
type DocsSaveRequest api.Params

func NewDocsSaveRequest() DocsSaveRequest {
	params := make(DocsSaveRequest, 5)
	return params
}

func (d DocsSaveRequest) WithFile(d_file string) DocsSaveRequest {
	d["file"] = d_file
	return d
}

func (d DocsSaveRequest) WithTitle(d_title string) DocsSaveRequest {
	d["title"] = d_title
	return d
}

func (d DocsSaveRequest) WithTags(d_tags string) DocsSaveRequest {
	d["tags"] = d_tags
	return d
}

func (d DocsSaveRequest) WithReturnTags(d_return_tags bool) DocsSaveRequest {
	d["return_tags"] = d_return_tags
	return d
}

func (d DocsSaveRequest) Params() api.Params {
	return api.Params(d)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_SaveFile ]
//
// https://dev.vk.com/method/docs.save
func (d *Docs) DocsSave(params ...api.MethodParams) (resp models.DocsSaveResponse, err error) {
	req := api.NewRequest[models.DocsSaveResponse](d.api)

	res, err := req.Execute("docs.save", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// DocsSearch Returns a list of documents matching the search criteria.
type DocsSearchRequest api.Params

func NewDocsSearchRequest() DocsSearchRequest {
	params := make(DocsSearchRequest, 6)
	return params
}

func (d DocsSearchRequest) WithQ(d_q string) DocsSearchRequest {
	d["q"] = d_q
	return d
}

func (d DocsSearchRequest) WithSearchOwn(d_search_own bool) DocsSearchRequest {
	d["search_own"] = d_search_own
	return d
}

func (d DocsSearchRequest) WithCount(d_count int) DocsSearchRequest {
	d["count"] = d_count
	return d
}

func (d DocsSearchRequest) WithOffset(d_offset int) DocsSearchRequest {
	d["offset"] = d_offset
	return d
}

func (d DocsSearchRequest) WithReturnTags(d_return_tags bool) DocsSearchRequest {
	d["return_tags"] = d_return_tags
	return d
}

func (d DocsSearchRequest) Params() api.Params {
	return api.Params(d)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/docs.search
func (d *Docs) DocsSearch(params ...api.MethodParams) (resp models.DocsSearchResponse, err error) {
	req := api.NewRequest[models.DocsSearchResponse](d.api)

	res, err := req.Execute("docs.search", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}
