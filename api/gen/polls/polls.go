// Code generated by https://github.com/defany/govk. DO NOT EDIT.

package requests

import (
	"github.com/defany/govk/api"
	"github.com/defany/govk/api/gen/models"
)

type Polls struct {
	api *api.API
}

func NewPolls(api *api.API) *Polls {
	return &Polls{
		api: api,
	}
}

// PollsAddVote Adds the current user's vote to the selected answer in the poll.
type PollsAddVoteRequest api.Params

func NewPollsAddVoteRequest() PollsAddVoteRequest {
	params := make(PollsAddVoteRequest, 5)
	return params
}

func (p PollsAddVoteRequest) WithOwnerId(p_owner_id int) PollsAddVoteRequest {
	p["owner_id"] = p_owner_id
	return p
}

func (p PollsAddVoteRequest) WithPollId(p_poll_id int) PollsAddVoteRequest {
	p["poll_id"] = p_poll_id
	return p
}

func (p PollsAddVoteRequest) WithAnswerIds(p_answer_ids []int) PollsAddVoteRequest {
	p["answer_ids"] = p_answer_ids
	return p
}

func (p PollsAddVoteRequest) WithIsBoard(p_is_board bool) PollsAddVoteRequest {
	p["is_board"] = p_is_board
	return p
}

func (p PollsAddVoteRequest) Params() api.Params {
	return api.Params(p)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_PollsAccess, Error_PollsAnswerId, Error_PollsPollId ]
//
// https://dev.vk.com/method/polls.addVote
func (p *Polls) PollsAddVote(params ...api.MethodParams) (resp models.PollsAddVoteResponse, err error) {
	req := api.NewRequest[models.PollsAddVoteResponse](p.api)

	res, err := req.Execute("polls.addVote", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// PollsCreate Creates polls that can be attached to the users' or communities' posts.
type PollsCreateRequest api.Params

func NewPollsCreateRequest() PollsCreateRequest {
	params := make(PollsCreateRequest, 11)
	return params
}

func (p PollsCreateRequest) WithQuestion(p_question string) PollsCreateRequest {
	p["question"] = p_question
	return p
}

func (p PollsCreateRequest) WithIsAnonymous(p_is_anonymous bool) PollsCreateRequest {
	p["is_anonymous"] = p_is_anonymous
	return p
}

func (p PollsCreateRequest) WithIsMultiple(p_is_multiple bool) PollsCreateRequest {
	p["is_multiple"] = p_is_multiple
	return p
}

func (p PollsCreateRequest) WithEndDate(p_end_date int) PollsCreateRequest {
	p["end_date"] = p_end_date
	return p
}

func (p PollsCreateRequest) WithOwnerId(p_owner_id int) PollsCreateRequest {
	p["owner_id"] = p_owner_id
	return p
}

func (p PollsCreateRequest) WithAppId(p_app_id int) PollsCreateRequest {
	p["app_id"] = p_app_id
	return p
}

func (p PollsCreateRequest) WithAddAnswers(p_add_answers string) PollsCreateRequest {
	p["add_answers"] = p_add_answers
	return p
}

func (p PollsCreateRequest) WithPhotoId(p_photo_id int) PollsCreateRequest {
	p["photo_id"] = p_photo_id
	return p
}

func (p PollsCreateRequest) WithBackgroundId(p_background_id int) PollsCreateRequest {
	p["background_id"] = p_background_id
	return p
}

func (p PollsCreateRequest) WithDisableUnvote(p_disable_unvote bool) PollsCreateRequest {
	p["disable_unvote"] = p_disable_unvote
	return p
}

func (p PollsCreateRequest) Params() api.Params {
	return api.Params(p)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/polls.create
func (p *Polls) PollsCreate(params ...api.MethodParams) (resp models.PollsCreateResponse, err error) {
	req := api.NewRequest[models.PollsCreateResponse](p.api)

	res, err := req.Execute("polls.create", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// PollsDeleteVote Deletes the current user's vote from the selected answer in the poll.
type PollsDeleteVoteRequest api.Params

func NewPollsDeleteVoteRequest() PollsDeleteVoteRequest {
	params := make(PollsDeleteVoteRequest, 5)
	return params
}

func (p PollsDeleteVoteRequest) WithOwnerId(p_owner_id int) PollsDeleteVoteRequest {
	p["owner_id"] = p_owner_id
	return p
}

func (p PollsDeleteVoteRequest) WithPollId(p_poll_id int) PollsDeleteVoteRequest {
	p["poll_id"] = p_poll_id
	return p
}

func (p PollsDeleteVoteRequest) WithAnswerId(p_answer_id int) PollsDeleteVoteRequest {
	p["answer_id"] = p_answer_id
	return p
}

func (p PollsDeleteVoteRequest) WithIsBoard(p_is_board bool) PollsDeleteVoteRequest {
	p["is_board"] = p_is_board
	return p
}

func (p PollsDeleteVoteRequest) Params() api.Params {
	return api.Params(p)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_PollsAccess, Error_PollsAnswerId, Error_PollsPollId ]
//
// https://dev.vk.com/method/polls.deleteVote
func (p *Polls) PollsDeleteVote(params ...api.MethodParams) (resp models.PollsDeleteVoteResponse, err error) {
	req := api.NewRequest[models.PollsDeleteVoteResponse](p.api)

	res, err := req.Execute("polls.deleteVote", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// PollsEdit Edits created polls
type PollsEditRequest api.Params

func NewPollsEditRequest() PollsEditRequest {
	params := make(PollsEditRequest, 10)
	return params
}

func (p PollsEditRequest) WithOwnerId(p_owner_id int) PollsEditRequest {
	p["owner_id"] = p_owner_id
	return p
}

func (p PollsEditRequest) WithPollId(p_poll_id int) PollsEditRequest {
	p["poll_id"] = p_poll_id
	return p
}

func (p PollsEditRequest) WithQuestion(p_question string) PollsEditRequest {
	p["question"] = p_question
	return p
}

func (p PollsEditRequest) WithAddAnswers(p_add_answers string) PollsEditRequest {
	p["add_answers"] = p_add_answers
	return p
}

func (p PollsEditRequest) WithEditAnswers(p_edit_answers string) PollsEditRequest {
	p["edit_answers"] = p_edit_answers
	return p
}

func (p PollsEditRequest) WithDeleteAnswers(p_delete_answers string) PollsEditRequest {
	p["delete_answers"] = p_delete_answers
	return p
}

func (p PollsEditRequest) WithEndDate(p_end_date int) PollsEditRequest {
	p["end_date"] = p_end_date
	return p
}

func (p PollsEditRequest) WithPhotoId(p_photo_id int) PollsEditRequest {
	p["photo_id"] = p_photo_id
	return p
}

func (p PollsEditRequest) WithBackgroundId(p_background_id int) PollsEditRequest {
	p["background_id"] = p_background_id
	return p
}

func (p PollsEditRequest) Params() api.Params {
	return api.Params(p)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/polls.edit
func (p *Polls) PollsEdit(params ...api.MethodParams) (resp models.BaseOkResponse, err error) {
	req := api.NewRequest[models.BaseOkResponse](p.api)

	res, err := req.Execute("polls.edit", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// PollsGetBackgrounds ...
// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/polls.getBackgrounds
func (p *Polls) PollsGetBackgrounds(params ...api.MethodParams) (resp models.PollsGetBackgroundsResponse, err error) {
	req := api.NewRequest[models.PollsGetBackgroundsResponse](p.api)

	res, err := req.Execute("polls.getBackgrounds", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// PollsGetById Returns detailed information about a poll by its ID.
type PollsGetByIdRequest api.Params

func NewPollsGetByIdRequest() PollsGetByIdRequest {
	params := make(PollsGetByIdRequest, 8)
	return params
}

func (p PollsGetByIdRequest) WithOwnerId(p_owner_id int) PollsGetByIdRequest {
	p["owner_id"] = p_owner_id
	return p
}

func (p PollsGetByIdRequest) WithIsBoard(p_is_board bool) PollsGetByIdRequest {
	p["is_board"] = p_is_board
	return p
}

func (p PollsGetByIdRequest) WithPollId(p_poll_id int) PollsGetByIdRequest {
	p["poll_id"] = p_poll_id
	return p
}

func (p PollsGetByIdRequest) WithExtended(p_extended bool) PollsGetByIdRequest {
	p["extended"] = p_extended
	return p
}

func (p PollsGetByIdRequest) WithFriendsCount(p_friends_count int) PollsGetByIdRequest {
	p["friends_count"] = p_friends_count
	return p
}

func (p PollsGetByIdRequest) WithFields(p_fields []string) PollsGetByIdRequest {
	p["fields"] = p_fields
	return p
}

func (p PollsGetByIdRequest) WithNameCase(p_name_case string) PollsGetByIdRequest {
	p["name_case"] = p_name_case
	return p
}

func (p PollsGetByIdRequest) Params() api.Params {
	return api.Params(p)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_PollsAccess ]
//
// https://dev.vk.com/method/polls.getById
func (p *Polls) PollsGetById(params ...api.MethodParams) (resp models.PollsGetByIdResponse, err error) {
	req := api.NewRequest[models.PollsGetByIdResponse](p.api)

	res, err := req.Execute("polls.getById", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// PollsGetPhotoUploadServer ...
type PollsGetPhotoUploadServerRequest api.Params

func NewPollsGetPhotoUploadServerRequest() PollsGetPhotoUploadServerRequest {
	params := make(PollsGetPhotoUploadServerRequest, 2)
	return params
}

func (p PollsGetPhotoUploadServerRequest) WithOwnerId(p_owner_id int) PollsGetPhotoUploadServerRequest {
	p["owner_id"] = p_owner_id
	return p
}

func (p PollsGetPhotoUploadServerRequest) Params() api.Params {
	return api.Params(p)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/polls.getPhotoUploadServer
func (p *Polls) PollsGetPhotoUploadServer(params ...api.MethodParams) (resp models.BaseGetUploadServerResponse, err error) {
	req := api.NewRequest[models.BaseGetUploadServerResponse](p.api)

	res, err := req.Execute("polls.getPhotoUploadServer", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// PollsGetVoters Returns a list of IDs of users who selected specific answers in the poll.
type PollsGetVotersRequest api.Params

func NewPollsGetVotersRequest() PollsGetVotersRequest {
	params := make(PollsGetVotersRequest, 10)
	return params
}

func (p PollsGetVotersRequest) WithOwnerId(p_owner_id int) PollsGetVotersRequest {
	p["owner_id"] = p_owner_id
	return p
}

func (p PollsGetVotersRequest) WithPollId(p_poll_id int) PollsGetVotersRequest {
	p["poll_id"] = p_poll_id
	return p
}

func (p PollsGetVotersRequest) WithAnswerIds(p_answer_ids []int) PollsGetVotersRequest {
	p["answer_ids"] = p_answer_ids
	return p
}

func (p PollsGetVotersRequest) WithIsBoard(p_is_board bool) PollsGetVotersRequest {
	p["is_board"] = p_is_board
	return p
}

func (p PollsGetVotersRequest) WithFriendsOnly(p_friends_only bool) PollsGetVotersRequest {
	p["friends_only"] = p_friends_only
	return p
}

func (p PollsGetVotersRequest) WithOffset(p_offset int) PollsGetVotersRequest {
	p["offset"] = p_offset
	return p
}

func (p PollsGetVotersRequest) WithCount(p_count int) PollsGetVotersRequest {
	p["count"] = p_count
	return p
}

func (p PollsGetVotersRequest) WithFields(p_fields []models.UsersFields) PollsGetVotersRequest {
	p["fields"] = p_fields
	return p
}

func (p PollsGetVotersRequest) WithNameCase(p_name_case string) PollsGetVotersRequest {
	p["name_case"] = p_name_case
	return p
}

func (p PollsGetVotersRequest) Params() api.Params {
	return api.Params(p)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_PollsAccess, Error_PollsAnswerId, Error_PollsPollId, Error_PollsAccessWithoutVote ]
//
// https://dev.vk.com/method/polls.getVoters
func (p *Polls) PollsGetVoters(params ...api.MethodParams) (resp models.PollsGetVotersResponse, err error) {
	req := api.NewRequest[models.PollsGetVotersResponse](p.api)

	res, err := req.Execute("polls.getVoters", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// PollsSavePhoto ...
type PollsSavePhotoRequest api.Params

func NewPollsSavePhotoRequest() PollsSavePhotoRequest {
	params := make(PollsSavePhotoRequest, 3)
	return params
}

func (p PollsSavePhotoRequest) WithPhoto(p_photo string) PollsSavePhotoRequest {
	p["photo"] = p_photo
	return p
}

func (p PollsSavePhotoRequest) WithHash(p_hash string) PollsSavePhotoRequest {
	p["hash"] = p_hash
	return p
}

func (p PollsSavePhotoRequest) Params() api.Params {
	return api.Params(p)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_ParamPhoto ]
//
// https://dev.vk.com/method/polls.savePhoto
func (p *Polls) PollsSavePhoto(params ...api.MethodParams) (resp models.PollsSavePhotoResponse, err error) {
	req := api.NewRequest[models.PollsSavePhotoResponse](p.api)

	res, err := req.Execute("polls.savePhoto", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}
