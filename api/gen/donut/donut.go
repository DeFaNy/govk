// Code generated by https://github.com/defany/govk. DO NOT EDIT.

package requests

import (
	"github.com/defany/govk/api"
	"github.com/defany/govk/api/gen/models"
)

type Donut struct {
	api *api.API
}

func NewDonut(api *api.API) *Donut {
	return &Donut{
		api: api,
	}
}

// DonutGetFriends ...
type DonutGetFriendsRequest api.Params

func NewDonutGetFriendsRequest() DonutGetFriendsRequest {
	params := make(DonutGetFriendsRequest, 5)
	return params
}

func (d DonutGetFriendsRequest) WithOwnerId(d_owner_id int) DonutGetFriendsRequest {
	d["owner_id"] = d_owner_id
	return d
}

func (d DonutGetFriendsRequest) WithOffset(d_offset int) DonutGetFriendsRequest {
	d["offset"] = d_offset
	return d
}

func (d DonutGetFriendsRequest) WithCount(d_count int) DonutGetFriendsRequest {
	d["count"] = d_count
	return d
}

func (d DonutGetFriendsRequest) WithFields(d_fields []string) DonutGetFriendsRequest {
	d["fields"] = d_fields
	return d
}

func (d DonutGetFriendsRequest) Params() api.Params {
	return api.Params(d)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/donut.getFriends
func (d *Donut) DonutGetFriends(params ...api.MethodParams) (resp models.GroupsGetMembersFieldsResponse, err error) {
	req := api.NewRequest[models.GroupsGetMembersFieldsResponse](d.api)

	res, err := req.Execute("donut.getFriends", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// DonutGetSubscription ...
type DonutGetSubscriptionRequest api.Params

func NewDonutGetSubscriptionRequest() DonutGetSubscriptionRequest {
	params := make(DonutGetSubscriptionRequest, 2)
	return params
}

func (d DonutGetSubscriptionRequest) WithOwnerId(d_owner_id int) DonutGetSubscriptionRequest {
	d["owner_id"] = d_owner_id
	return d
}

func (d DonutGetSubscriptionRequest) Params() api.Params {
	return api.Params(d)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_NotFound ]
//
// https://dev.vk.com/method/donut.getSubscription
func (d *Donut) DonutGetSubscription(params ...api.MethodParams) (resp models.DonutGetSubscriptionResponse, err error) {
	req := api.NewRequest[models.DonutGetSubscriptionResponse](d.api)

	res, err := req.Execute("donut.getSubscription", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// DonutGetSubscriptions Returns a list of user's VK Donut subscriptions.
type DonutGetSubscriptionsRequest api.Params

func NewDonutGetSubscriptionsRequest() DonutGetSubscriptionsRequest {
	params := make(DonutGetSubscriptionsRequest, 4)
	return params
}

func (d DonutGetSubscriptionsRequest) WithFields(d_fields []models.BaseUserGroupFields) DonutGetSubscriptionsRequest {
	d["fields"] = d_fields
	return d
}

func (d DonutGetSubscriptionsRequest) WithOffset(d_offset int) DonutGetSubscriptionsRequest {
	d["offset"] = d_offset
	return d
}

func (d DonutGetSubscriptionsRequest) WithCount(d_count int) DonutGetSubscriptionsRequest {
	d["count"] = d_count
	return d
}

func (d DonutGetSubscriptionsRequest) Params() api.Params {
	return api.Params(d)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/donut.getSubscriptions
func (d *Donut) DonutGetSubscriptions(params ...api.MethodParams) (resp models.DonutGetSubscriptionsResponse, err error) {
	req := api.NewRequest[models.DonutGetSubscriptionsResponse](d.api)

	res, err := req.Execute("donut.getSubscriptions", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// DonutIsDon ...
type DonutIsDonRequest api.Params

func NewDonutIsDonRequest() DonutIsDonRequest {
	params := make(DonutIsDonRequest, 2)
	return params
}

func (d DonutIsDonRequest) WithOwnerId(d_owner_id int) DonutIsDonRequest {
	d["owner_id"] = d_owner_id
	return d
}

func (d DonutIsDonRequest) Params() api.Params {
	return api.Params(d)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/donut.isDon
func (d *Donut) DonutIsDon(params ...api.MethodParams) (resp models.BaseBoolResponse, err error) {
	req := api.NewRequest[models.BaseBoolResponse](d.api)

	res, err := req.Execute("donut.isDon", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}
