// Code generated by https://github.com/defany/govk. DO NOT EDIT.

package requests

import (
	"github.com/defany/govk/api"
	"github.com/defany/govk/api/gen/models"
)

type Store struct {
	api *api.API
}

func NewStore(api *api.API) *Store {
	return &Store{
		api: api,
	}
}

// StoreAddStickersToFavorite Adds given sticker IDs to the list of user's favorite stickers
type StoreAddStickersToFavoriteRequest api.Params

func NewStoreAddStickersToFavoriteRequest() StoreAddStickersToFavoriteRequest {
	params := make(StoreAddStickersToFavoriteRequest, 2)
	return params
}

func (s StoreAddStickersToFavoriteRequest) WithStickerIds(s_sticker_ids []int) StoreAddStickersToFavoriteRequest {
	s["sticker_ids"] = s_sticker_ids
	return s
}

func (s StoreAddStickersToFavoriteRequest) Params() api.Params {
	return api.Params(s)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_StickersNotPurchased, Error_StickersTooManyFavorites ]
//
// https://dev.vk.com/method/store.addStickersToFavorite
func (s *Store) StoreAddStickersToFavorite(params ...api.MethodParams) (resp models.BaseOkResponse, err error) {
	req := api.NewRequest[models.BaseOkResponse](s.api)

	res, err := req.Execute("store.addStickersToFavorite", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// StoreGetFavoriteStickers ...
// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/store.getFavoriteStickers
func (s *Store) StoreGetFavoriteStickers(params ...api.MethodParams) (resp models.StoreGetFavoriteStickersResponse, err error) {
	req := api.NewRequest[models.StoreGetFavoriteStickersResponse](s.api)

	res, err := req.Execute("store.getFavoriteStickers", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// StoreGetProducts ...
type StoreGetProductsRequest api.Params

func NewStoreGetProductsRequest() StoreGetProductsRequest {
	params := make(StoreGetProductsRequest, 7)
	return params
}

func (s StoreGetProductsRequest) WithType(s_type string) StoreGetProductsRequest {
	s["type"] = s_type
	return s
}

func (s StoreGetProductsRequest) WithMerchant(s_merchant string) StoreGetProductsRequest {
	s["merchant"] = s_merchant
	return s
}

func (s StoreGetProductsRequest) WithSection(s_section string) StoreGetProductsRequest {
	s["section"] = s_section
	return s
}

func (s StoreGetProductsRequest) WithProductIds(s_product_ids []int) StoreGetProductsRequest {
	s["product_ids"] = s_product_ids
	return s
}

func (s StoreGetProductsRequest) WithFilters(s_filters []string) StoreGetProductsRequest {
	s["filters"] = s_filters
	return s
}

func (s StoreGetProductsRequest) WithExtended(s_extended bool) StoreGetProductsRequest {
	s["extended"] = s_extended
	return s
}

func (s StoreGetProductsRequest) Params() api.Params {
	return api.Params(s)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/store.getProducts
func (s *Store) StoreGetProducts(params ...api.MethodParams) (resp models.StoreGetProductsResponse, err error) {
	req := api.NewRequest[models.StoreGetProductsResponse](s.api)

	res, err := req.Execute("store.getProducts", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// StoreGetStickersKeywords ...
type StoreGetStickersKeywordsRequest api.Params

func NewStoreGetStickersKeywordsRequest() StoreGetStickersKeywordsRequest {
	params := make(StoreGetStickersKeywordsRequest, 6)
	return params
}

func (s StoreGetStickersKeywordsRequest) WithStickersIds(s_stickers_ids []int) StoreGetStickersKeywordsRequest {
	s["stickers_ids"] = s_stickers_ids
	return s
}

func (s StoreGetStickersKeywordsRequest) WithProductsIds(s_products_ids []int) StoreGetStickersKeywordsRequest {
	s["products_ids"] = s_products_ids
	return s
}

func (s StoreGetStickersKeywordsRequest) WithAliases(s_aliases bool) StoreGetStickersKeywordsRequest {
	s["aliases"] = s_aliases
	return s
}

func (s StoreGetStickersKeywordsRequest) WithAllProducts(s_all_products bool) StoreGetStickersKeywordsRequest {
	s["all_products"] = s_all_products
	return s
}

func (s StoreGetStickersKeywordsRequest) WithNeedStickers(s_need_stickers bool) StoreGetStickersKeywordsRequest {
	s["need_stickers"] = s_need_stickers
	return s
}

func (s StoreGetStickersKeywordsRequest) Params() api.Params {
	return api.Params(s)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/store.getStickersKeywords
func (s *Store) StoreGetStickersKeywords(params ...api.MethodParams) (resp models.StoreGetStickersKeywordsResponse, err error) {
	req := api.NewRequest[models.StoreGetStickersKeywordsResponse](s.api)

	res, err := req.Execute("store.getStickersKeywords", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// StoreRemoveStickersFromFavorite Removes given sticker IDs from the list of user's favorite stickers
type StoreRemoveStickersFromFavoriteRequest api.Params

func NewStoreRemoveStickersFromFavoriteRequest() StoreRemoveStickersFromFavoriteRequest {
	params := make(StoreRemoveStickersFromFavoriteRequest, 2)
	return params
}

func (s StoreRemoveStickersFromFavoriteRequest) WithStickerIds(s_sticker_ids []int) StoreRemoveStickersFromFavoriteRequest {
	s["sticker_ids"] = s_sticker_ids
	return s
}

func (s StoreRemoveStickersFromFavoriteRequest) Params() api.Params {
	return api.Params(s)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_StickersNotFavorite ]
//
// https://dev.vk.com/method/store.removeStickersFromFavorite
func (s *Store) StoreRemoveStickersFromFavorite(params ...api.MethodParams) (resp models.BaseOkResponse, err error) {
	req := api.NewRequest[models.BaseOkResponse](s.api)

	res, err := req.Execute("store.removeStickersFromFavorite", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}
