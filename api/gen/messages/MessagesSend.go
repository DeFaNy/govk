// Code generated by https://github.com/defany/govk. DO NOT EDIT.

package requests

import (
	"github.com/defany/govk/api"
	"github.com/defany/govk/api/gen/models"
)

// MessagesSend Sends a message.
type MessagesSendRequest api.Params

func NewMessagesSendRequest() MessagesSendRequest {
	params := make(MessagesSendRequest, 25)
	return params
}

func (m MessagesSendRequest) WithUserId(m_user_id int) MessagesSendRequest{
	m["user_id"] = m_user_id
	return m
}

func (m MessagesSendRequest) WithRandomId(m_random_id int) MessagesSendRequest{
	m["random_id"] = m_random_id
	return m
}

func (m MessagesSendRequest) WithPeerId(m_peer_id int) MessagesSendRequest{
	m["peer_id"] = m_peer_id
	return m
}

func (m MessagesSendRequest) WithPeerIds(m_peer_ids []int) MessagesSendRequest{
	m["peer_ids"] = m_peer_ids
	return m
}

func (m MessagesSendRequest) WithDomain(m_domain string) MessagesSendRequest{
	m["domain"] = m_domain
	return m
}

func (m MessagesSendRequest) WithChatId(m_chat_id int) MessagesSendRequest{
	m["chat_id"] = m_chat_id
	return m
}

func (m MessagesSendRequest) WithUserIds(m_user_ids []int) MessagesSendRequest{
	m["user_ids"] = m_user_ids
	return m
}

func (m MessagesSendRequest) WithMessage(m_message string) MessagesSendRequest{
	m["message"] = m_message
	return m
}

func (m MessagesSendRequest) WithLat(m_lat float64) MessagesSendRequest{
	m["lat"] = m_lat
	return m
}

func (m MessagesSendRequest) WithLong(m_long float64) MessagesSendRequest{
	m["long"] = m_long
	return m
}

func (m MessagesSendRequest) WithAttachment(m_attachment string) MessagesSendRequest{
	m["attachment"] = m_attachment
	return m
}

func (m MessagesSendRequest) WithReplyTo(m_reply_to int) MessagesSendRequest{
	m["reply_to"] = m_reply_to
	return m
}

func (m MessagesSendRequest) WithForwardMessages(m_forward_messages []int) MessagesSendRequest{
	m["forward_messages"] = m_forward_messages
	return m
}

func (m MessagesSendRequest) WithForward(m_forward models.MessagesForward) MessagesSendRequest{
	m["forward"] = m_forward
	return m
}

func (m MessagesSendRequest) WithStickerId(m_sticker_id int) MessagesSendRequest{
	m["sticker_id"] = m_sticker_id
	return m
}

func (m MessagesSendRequest) WithGroupId(m_group_id int) MessagesSendRequest{
	m["group_id"] = m_group_id
	return m
}

func (m MessagesSendRequest) WithKeyboard(m_keyboard models.MessagesKeyboard) MessagesSendRequest{
	m["keyboard"] = m_keyboard
	return m
}

func (m MessagesSendRequest) WithTemplate(m_template string) MessagesSendRequest{
	m["template"] = m_template
	return m
}

func (m MessagesSendRequest) WithPayload(m_payload string) MessagesSendRequest{
	m["payload"] = m_payload
	return m
}

func (m MessagesSendRequest) WithContentSource(m_content_source string) MessagesSendRequest{
	m["content_source"] = m_content_source
	return m
}

func (m MessagesSendRequest) WithDontParseLinks(m_dont_parse_links bool) MessagesSendRequest{
	m["dont_parse_links"] = m_dont_parse_links
	return m
}

func (m MessagesSendRequest) WithDisableMentions(m_disable_mentions bool) MessagesSendRequest{
	m["disable_mentions"] = m_disable_mentions
	return m
}

func (m MessagesSendRequest) WithIntent(m_intent string) MessagesSendRequest{
	m["intent"] = m_intent
	return m
}

func (m MessagesSendRequest) WithSubscribeId(m_subscribe_id int) MessagesSendRequest{
	m["subscribe_id"] = m_subscribe_id
	return m
}

func (m MessagesSendRequest) Params() api.Params {
	return api.Params(m)
}

// May execute with listed access token types:
//    [ user, group ]
// When executing method, may return one of global or with listed codes API errors:
//    [ Error_MessagesUserBlocked, Error_MessagesDenySend, Error_MessagesPrivacy, Error_MessagesTooLongMessage, Error_MessagesTooLongForwards, Error_MessagesCantFwd, Error_MessagesChatUserNoAccess, Error_MessagesKeyboardInvalid, Error_MessagesChatBotFeature, Error_MessagesContactNotFound, Error_MessagesTooManyPosts, Error_MessagesIntentCantUse, Error_MessagesIntentLimitOverflow, Error_MessagesChatUnsupported, Error_MessagesChatDisabled, Error_MessagesChatNotAdmin, Error_MessagesPeerBlockedReasonByTime, Error_NotFound, Error_MessagesUserNotDon, Error_MessagesMessageCannotBeForwarded ]
//
// https://dev.vk.com/method/messages.send
func (m *Messages) MessagesSend(params ...api.MethodParams) (resp models.MessagesSendResponse, err error) {
	req := api.NewRequest[models.MessagesSendResponse](m.api)

	res, err := req.Execute("messages.send", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MessagesSendUserIDs Sends a message.
type MessagesSendUserIDsRequest api.Params

func NewMessagesSendUserIDsRequest() MessagesSendUserIDsRequest {
	params := make(MessagesSendUserIDsRequest, 25)
	return params
}

func (m MessagesSendUserIDsRequest) WithUserId(m_user_id int) MessagesSendUserIDsRequest{
	m["user_id"] = m_user_id
	return m
}

func (m MessagesSendUserIDsRequest) WithRandomId(m_random_id int) MessagesSendUserIDsRequest{
	m["random_id"] = m_random_id
	return m
}

func (m MessagesSendUserIDsRequest) WithPeerId(m_peer_id int) MessagesSendUserIDsRequest{
	m["peer_id"] = m_peer_id
	return m
}

func (m MessagesSendUserIDsRequest) WithPeerIds(m_peer_ids []int) MessagesSendUserIDsRequest{
	m["peer_ids"] = m_peer_ids
	return m
}

func (m MessagesSendUserIDsRequest) WithDomain(m_domain string) MessagesSendUserIDsRequest{
	m["domain"] = m_domain
	return m
}

func (m MessagesSendUserIDsRequest) WithChatId(m_chat_id int) MessagesSendUserIDsRequest{
	m["chat_id"] = m_chat_id
	return m
}

func (m MessagesSendUserIDsRequest) WithUserIds(m_user_ids []int) MessagesSendUserIDsRequest{
	m["user_ids"] = m_user_ids
	return m
}

func (m MessagesSendUserIDsRequest) WithMessage(m_message string) MessagesSendUserIDsRequest{
	m["message"] = m_message
	return m
}

func (m MessagesSendUserIDsRequest) WithLat(m_lat float64) MessagesSendUserIDsRequest{
	m["lat"] = m_lat
	return m
}

func (m MessagesSendUserIDsRequest) WithLong(m_long float64) MessagesSendUserIDsRequest{
	m["long"] = m_long
	return m
}

func (m MessagesSendUserIDsRequest) WithAttachment(m_attachment string) MessagesSendUserIDsRequest{
	m["attachment"] = m_attachment
	return m
}

func (m MessagesSendUserIDsRequest) WithReplyTo(m_reply_to int) MessagesSendUserIDsRequest{
	m["reply_to"] = m_reply_to
	return m
}

func (m MessagesSendUserIDsRequest) WithForwardMessages(m_forward_messages []int) MessagesSendUserIDsRequest{
	m["forward_messages"] = m_forward_messages
	return m
}

func (m MessagesSendUserIDsRequest) WithForward(m_forward models.MessagesForward) MessagesSendUserIDsRequest{
	m["forward"] = m_forward
	return m
}

func (m MessagesSendUserIDsRequest) WithStickerId(m_sticker_id int) MessagesSendUserIDsRequest{
	m["sticker_id"] = m_sticker_id
	return m
}

func (m MessagesSendUserIDsRequest) WithGroupId(m_group_id int) MessagesSendUserIDsRequest{
	m["group_id"] = m_group_id
	return m
}

func (m MessagesSendUserIDsRequest) WithKeyboard(m_keyboard models.MessagesKeyboard) MessagesSendUserIDsRequest{
	m["keyboard"] = m_keyboard
	return m
}

func (m MessagesSendUserIDsRequest) WithTemplate(m_template string) MessagesSendUserIDsRequest{
	m["template"] = m_template
	return m
}

func (m MessagesSendUserIDsRequest) WithPayload(m_payload string) MessagesSendUserIDsRequest{
	m["payload"] = m_payload
	return m
}

func (m MessagesSendUserIDsRequest) WithContentSource(m_content_source string) MessagesSendUserIDsRequest{
	m["content_source"] = m_content_source
	return m
}

func (m MessagesSendUserIDsRequest) WithDontParseLinks(m_dont_parse_links bool) MessagesSendUserIDsRequest{
	m["dont_parse_links"] = m_dont_parse_links
	return m
}

func (m MessagesSendUserIDsRequest) WithDisableMentions(m_disable_mentions bool) MessagesSendUserIDsRequest{
	m["disable_mentions"] = m_disable_mentions
	return m
}

func (m MessagesSendUserIDsRequest) WithIntent(m_intent string) MessagesSendUserIDsRequest{
	m["intent"] = m_intent
	return m
}

func (m MessagesSendUserIDsRequest) WithSubscribeId(m_subscribe_id int) MessagesSendUserIDsRequest{
	m["subscribe_id"] = m_subscribe_id
	return m
}

func (m MessagesSendUserIDsRequest) Params() api.Params {
	return api.Params(m)
}

// May execute with listed access token types:
//    [ user, group ]
// When executing method, may return one of global or with listed codes API errors:
//    [ Error_MessagesUserBlocked, Error_MessagesDenySend, Error_MessagesPrivacy, Error_MessagesTooLongMessage, Error_MessagesTooLongForwards, Error_MessagesCantFwd, Error_MessagesChatUserNoAccess, Error_MessagesKeyboardInvalid, Error_MessagesChatBotFeature, Error_MessagesContactNotFound, Error_MessagesTooManyPosts, Error_MessagesIntentCantUse, Error_MessagesIntentLimitOverflow, Error_MessagesChatUnsupported, Error_MessagesChatDisabled, Error_MessagesChatNotAdmin, Error_MessagesPeerBlockedReasonByTime, Error_NotFound, Error_MessagesUserNotDon, Error_MessagesMessageCannotBeForwarded ]
//
// https://dev.vk.com/method/messages.send
func (m *Messages) MessagesSendUserIDs(params ...api.MethodParams) (resp models.MessagesSendUserIdsResponse, err error) {
	req := api.NewRequest[models.MessagesSendUserIdsResponse](m.api)

	res, err := req.Execute("messages.send", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

