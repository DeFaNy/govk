// Code generated by https://github.com/defany/govk. DO NOT EDIT.

package requests

import (
	"github.com/defany/govk/api"
	"github.com/defany/govk/api/gen/models"
)

type Messages struct {
	api *api.API
}

func NewMessages(api *api.API) *Messages {
	return &Messages{
		api: api,
	}
}

// MessagesAddChatUser Adds a new user to a chat.
type MessagesAddChatUserRequest api.Params

func NewMessagesAddChatUserRequest() MessagesAddChatUserRequest {
	params := make(MessagesAddChatUserRequest, 4)
	return params
}

func (m MessagesAddChatUserRequest) WithChatId(m_chat_id int) MessagesAddChatUserRequest {
	m["chat_id"] = m_chat_id
	return m
}

func (m MessagesAddChatUserRequest) WithUserId(m_user_id int) MessagesAddChatUserRequest {
	m["user_id"] = m_user_id
	return m
}

func (m MessagesAddChatUserRequest) WithVisibleMessagesCount(m_visible_messages_count int) MessagesAddChatUserRequest {
	m["visible_messages_count"] = m_visible_messages_count
	return m
}

func (m MessagesAddChatUserRequest) Params() api.Params {
	return api.Params(m)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_Limits, Error_MessagesChatNotAdmin, Error_MessagesMessageRequestAlreadySent, Error_MessagesContactNotFound, Error_MessagesChatDisabled, Error_MessagesMemberAccessToGroupDenied, Error_MessagesChatUnsupported, Error_MessagesGroupPeerAccess ]
//
// https://dev.vk.com/method/messages.addChatUser
func (m *Messages) MessagesAddChatUser(params ...api.MethodParams) (resp models.BaseOkResponse, err error) {
	req := api.NewRequest[models.BaseOkResponse](m.api)

	res, err := req.Execute("messages.addChatUser", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MessagesAllowMessagesFromGroup Allows sending messages from community to the current user.
type MessagesAllowMessagesFromGroupRequest api.Params

func NewMessagesAllowMessagesFromGroupRequest() MessagesAllowMessagesFromGroupRequest {
	params := make(MessagesAllowMessagesFromGroupRequest, 3)
	return params
}

func (m MessagesAllowMessagesFromGroupRequest) WithGroupId(m_group_id int) MessagesAllowMessagesFromGroupRequest {
	m["group_id"] = m_group_id
	return m
}

func (m MessagesAllowMessagesFromGroupRequest) WithKey(m_key string) MessagesAllowMessagesFromGroupRequest {
	m["key"] = m_key
	return m
}

func (m MessagesAllowMessagesFromGroupRequest) Params() api.Params {
	return api.Params(m)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_MessagesIntentCantUse ]
//
// https://dev.vk.com/method/messages.allowMessagesFromGroup
func (m *Messages) MessagesAllowMessagesFromGroup(params ...api.MethodParams) (resp models.BaseOkResponse, err error) {
	req := api.NewRequest[models.BaseOkResponse](m.api)

	res, err := req.Execute("messages.allowMessagesFromGroup", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MessagesCreateChat Creates a chat with several participants.
type MessagesCreateChatRequest api.Params

func NewMessagesCreateChatRequest() MessagesCreateChatRequest {
	params := make(MessagesCreateChatRequest, 4)
	return params
}

func (m MessagesCreateChatRequest) WithUserIds(m_user_ids []int) MessagesCreateChatRequest {
	m["user_ids"] = m_user_ids
	return m
}

func (m MessagesCreateChatRequest) WithTitle(m_title string) MessagesCreateChatRequest {
	m["title"] = m_title
	return m
}

func (m MessagesCreateChatRequest) WithGroupId(m_group_id int) MessagesCreateChatRequest {
	m["group_id"] = m_group_id
	return m
}

func (m MessagesCreateChatRequest) Params() api.Params {
	return api.Params(m)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_MessagesContactNotFound ]
//
// https://dev.vk.com/method/messages.createChat
func (m *Messages) MessagesCreateChat(params ...api.MethodParams) (resp models.MessagesCreateChatResponse, err error) {
	req := api.NewRequest[models.MessagesCreateChatResponse](m.api)

	res, err := req.Execute("messages.createChat", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MessagesDelete Deletes one or more messages.
type MessagesDeleteRequest api.Params

func NewMessagesDeleteRequest() MessagesDeleteRequest {
	params := make(MessagesDeleteRequest, 7)
	return params
}

func (m MessagesDeleteRequest) WithMessageIds(m_message_ids []int) MessagesDeleteRequest {
	m["message_ids"] = m_message_ids
	return m
}

func (m MessagesDeleteRequest) WithSpam(m_spam bool) MessagesDeleteRequest {
	m["spam"] = m_spam
	return m
}

func (m MessagesDeleteRequest) WithGroupId(m_group_id int) MessagesDeleteRequest {
	m["group_id"] = m_group_id
	return m
}

func (m MessagesDeleteRequest) WithDeleteForAll(m_delete_for_all bool) MessagesDeleteRequest {
	m["delete_for_all"] = m_delete_for_all
	return m
}

func (m MessagesDeleteRequest) WithPeerId(m_peer_id int) MessagesDeleteRequest {
	m["peer_id"] = m_peer_id
	return m
}

func (m MessagesDeleteRequest) WithCmids(m_cmids []int) MessagesDeleteRequest {
	m["cmids"] = m_cmids
	return m
}

func (m MessagesDeleteRequest) Params() api.Params {
	return api.Params(m)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_MessagesCantDeleteForAll ]
//
// https://dev.vk.com/method/messages.delete
func (m *Messages) MessagesDelete(params ...api.MethodParams) (resp models.MessagesDeleteResponse, err error) {
	req := api.NewRequest[models.MessagesDeleteResponse](m.api)

	res, err := req.Execute("messages.delete", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MessagesDeleteChatPhoto Deletes a chat's cover picture.
type MessagesDeleteChatPhotoRequest api.Params

func NewMessagesDeleteChatPhotoRequest() MessagesDeleteChatPhotoRequest {
	params := make(MessagesDeleteChatPhotoRequest, 3)
	return params
}

func (m MessagesDeleteChatPhotoRequest) WithChatId(m_chat_id int) MessagesDeleteChatPhotoRequest {
	m["chat_id"] = m_chat_id
	return m
}

func (m MessagesDeleteChatPhotoRequest) WithGroupId(m_group_id int) MessagesDeleteChatPhotoRequest {
	m["group_id"] = m_group_id
	return m
}

func (m MessagesDeleteChatPhotoRequest) Params() api.Params {
	return api.Params(m)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_MessagesChatNotAdmin, Error_MessagesChatDisabled ]
//
// https://dev.vk.com/method/messages.deleteChatPhoto
func (m *Messages) MessagesDeleteChatPhoto(params ...api.MethodParams) (resp models.MessagesDeleteChatPhotoResponse, err error) {
	req := api.NewRequest[models.MessagesDeleteChatPhotoResponse](m.api)

	res, err := req.Execute("messages.deleteChatPhoto", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MessagesDeleteConversation Deletes all private messages in a conversation.
type MessagesDeleteConversationRequest api.Params

func NewMessagesDeleteConversationRequest() MessagesDeleteConversationRequest {
	params := make(MessagesDeleteConversationRequest, 4)
	return params
}

func (m MessagesDeleteConversationRequest) WithUserId(m_user_id int) MessagesDeleteConversationRequest {
	m["user_id"] = m_user_id
	return m
}

func (m MessagesDeleteConversationRequest) WithPeerId(m_peer_id int) MessagesDeleteConversationRequest {
	m["peer_id"] = m_peer_id
	return m
}

func (m MessagesDeleteConversationRequest) WithGroupId(m_group_id int) MessagesDeleteConversationRequest {
	m["group_id"] = m_group_id
	return m
}

func (m MessagesDeleteConversationRequest) Params() api.Params {
	return api.Params(m)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_MessagesContactNotFound ]
//
// https://dev.vk.com/method/messages.deleteConversation
func (m *Messages) MessagesDeleteConversation(params ...api.MethodParams) (resp models.MessagesDeleteConversationResponse, err error) {
	req := api.NewRequest[models.MessagesDeleteConversationResponse](m.api)

	res, err := req.Execute("messages.deleteConversation", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MessagesDenyMessagesFromGroup Denies sending message from community to the current user.
type MessagesDenyMessagesFromGroupRequest api.Params

func NewMessagesDenyMessagesFromGroupRequest() MessagesDenyMessagesFromGroupRequest {
	params := make(MessagesDenyMessagesFromGroupRequest, 2)
	return params
}

func (m MessagesDenyMessagesFromGroupRequest) WithGroupId(m_group_id int) MessagesDenyMessagesFromGroupRequest {
	m["group_id"] = m_group_id
	return m
}

func (m MessagesDenyMessagesFromGroupRequest) Params() api.Params {
	return api.Params(m)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/messages.denyMessagesFromGroup
func (m *Messages) MessagesDenyMessagesFromGroup(params ...api.MethodParams) (resp models.BaseOkResponse, err error) {
	req := api.NewRequest[models.BaseOkResponse](m.api)

	res, err := req.Execute("messages.denyMessagesFromGroup", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MessagesEdit Edits the message.
type MessagesEditRequest api.Params

func NewMessagesEditRequest() MessagesEditRequest {
	params := make(MessagesEditRequest, 15)
	return params
}

func (m MessagesEditRequest) WithPeerId(m_peer_id int) MessagesEditRequest {
	m["peer_id"] = m_peer_id
	return m
}

func (m MessagesEditRequest) WithMessage(m_message string) MessagesEditRequest {
	m["message"] = m_message
	return m
}

func (m MessagesEditRequest) WithLat(m_lat float64) MessagesEditRequest {
	m["lat"] = m_lat
	return m
}

func (m MessagesEditRequest) WithLong(m_long float64) MessagesEditRequest {
	m["long"] = m_long
	return m
}

func (m MessagesEditRequest) WithAttachment(m_attachment string) MessagesEditRequest {
	m["attachment"] = m_attachment
	return m
}

func (m MessagesEditRequest) WithKeepForwardMessages(m_keep_forward_messages bool) MessagesEditRequest {
	m["keep_forward_messages"] = m_keep_forward_messages
	return m
}

func (m MessagesEditRequest) WithKeepSnippets(m_keep_snippets bool) MessagesEditRequest {
	m["keep_snippets"] = m_keep_snippets
	return m
}

func (m MessagesEditRequest) WithGroupId(m_group_id int) MessagesEditRequest {
	m["group_id"] = m_group_id
	return m
}

func (m MessagesEditRequest) WithDontParseLinks(m_dont_parse_links bool) MessagesEditRequest {
	m["dont_parse_links"] = m_dont_parse_links
	return m
}

func (m MessagesEditRequest) WithDisableMentions(m_disable_mentions bool) MessagesEditRequest {
	m["disable_mentions"] = m_disable_mentions
	return m
}

func (m MessagesEditRequest) WithMessageId(m_message_id int) MessagesEditRequest {
	m["message_id"] = m_message_id
	return m
}

func (m MessagesEditRequest) WithConversationMessageId(m_conversation_message_id int) MessagesEditRequest {
	m["conversation_message_id"] = m_conversation_message_id
	return m
}

func (m MessagesEditRequest) WithTemplate(m_template string) MessagesEditRequest {
	m["template"] = m_template
	return m
}

func (m MessagesEditRequest) WithKeyboard(m_keyboard string) MessagesEditRequest {
	m["keyboard"] = m_keyboard
	return m
}

func (m MessagesEditRequest) Params() api.Params {
	return api.Params(m)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_MessagesDenySend, Error_MessagesEditExpired, Error_MessagesTooBig, Error_MessagesEditKindDisallowed, Error_MessagesTooLongMessage, Error_MessagesChatUserNoAccess, Error_MessagesKeyboardInvalid, Error_MessagesTooManyPosts, Error_MessagesChatUnsupported, Error_MessagesChatBotFeature, Error_MessagesCantEditPinnedYet ]
//
// https://dev.vk.com/method/messages.edit
func (m *Messages) MessagesEdit(params ...api.MethodParams) (resp models.MessagesEditResponse, err error) {
	req := api.NewRequest[models.MessagesEditResponse](m.api)

	res, err := req.Execute("messages.edit", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MessagesEditChat Edits the title of a chat.
type MessagesEditChatRequest api.Params

func NewMessagesEditChatRequest() MessagesEditChatRequest {
	params := make(MessagesEditChatRequest, 3)
	return params
}

func (m MessagesEditChatRequest) WithChatId(m_chat_id int) MessagesEditChatRequest {
	m["chat_id"] = m_chat_id
	return m
}

func (m MessagesEditChatRequest) WithTitle(m_title string) MessagesEditChatRequest {
	m["title"] = m_title
	return m
}

func (m MessagesEditChatRequest) Params() api.Params {
	return api.Params(m)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_MessagesChatNotAdmin, Error_MessagesChatDisabled, Error_MessagesChatUnsupported ]
//
// https://dev.vk.com/method/messages.editChat
func (m *Messages) MessagesEditChat(params ...api.MethodParams) (resp models.BaseOkResponse, err error) {
	req := api.NewRequest[models.BaseOkResponse](m.api)

	res, err := req.Execute("messages.editChat", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MessagesGetByConversationMessageId Returns messages by their IDs within the conversation.
type MessagesGetByConversationMessageIdRequest api.Params

func NewMessagesGetByConversationMessageIdRequest() MessagesGetByConversationMessageIdRequest {
	params := make(MessagesGetByConversationMessageIdRequest, 7)
	return params
}

func (m MessagesGetByConversationMessageIdRequest) WithPeerId(m_peer_id int) MessagesGetByConversationMessageIdRequest {
	m["peer_id"] = m_peer_id
	return m
}

func (m MessagesGetByConversationMessageIdRequest) WithConversationMessageIds(m_conversation_message_ids []int) MessagesGetByConversationMessageIdRequest {
	m["conversation_message_ids"] = m_conversation_message_ids
	return m
}

func (m MessagesGetByConversationMessageIdRequest) WithExtended(m_extended bool) MessagesGetByConversationMessageIdRequest {
	m["extended"] = m_extended
	return m
}

func (m MessagesGetByConversationMessageIdRequest) WithFields(m_fields []models.UsersFields) MessagesGetByConversationMessageIdRequest {
	m["fields"] = m_fields
	return m
}

func (m MessagesGetByConversationMessageIdRequest) WithGroupId(m_group_id int) MessagesGetByConversationMessageIdRequest {
	m["group_id"] = m_group_id
	return m
}

func (m MessagesGetByConversationMessageIdRequest) Params() api.Params {
	return api.Params(m)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/messages.getByConversationMessageId
func (m *Messages) MessagesGetByConversationMessageId(params ...api.MethodParams) (resp models.MessagesGetByConversationMessageIdResponse, err error) {
	req := api.NewRequest[models.MessagesGetByConversationMessageIdResponse](m.api)

	res, err := req.Execute("messages.getByConversationMessageId", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MessagesGetByConversationMessageIdExtended Returns messages by their IDs within the conversation.
// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/messages.getByConversationMessageId
func (m *Messages) MessagesGetByConversationMessageIdExtended(params ...api.MethodParams) (resp models.MessagesGetByConversationMessageIdExtendedResponse, err error) {
	req := api.NewRequest[models.MessagesGetByConversationMessageIdExtendedResponse](m.api)

	res, err := req.Execute("messages.getByConversationMessageId", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MessagesGetById Returns messages by their IDs.
type MessagesGetByIdRequest api.Params

func NewMessagesGetByIdRequest() MessagesGetByIdRequest {
	params := make(MessagesGetByIdRequest, 7)
	return params
}

func (m MessagesGetByIdRequest) WithMessageIds(m_message_ids []int) MessagesGetByIdRequest {
	m["message_ids"] = m_message_ids
	return m
}

func (m MessagesGetByIdRequest) WithPreviewLength(m_preview_length int) MessagesGetByIdRequest {
	m["preview_length"] = m_preview_length
	return m
}

func (m MessagesGetByIdRequest) WithExtended(m_extended bool) MessagesGetByIdRequest {
	m["extended"] = m_extended
	return m
}

func (m MessagesGetByIdRequest) WithFields(m_fields []models.UsersFields) MessagesGetByIdRequest {
	m["fields"] = m_fields
	return m
}

func (m MessagesGetByIdRequest) WithGroupId(m_group_id int) MessagesGetByIdRequest {
	m["group_id"] = m_group_id
	return m
}

func (m MessagesGetByIdRequest) Params() api.Params {
	return api.Params(m)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/messages.getById
func (m *Messages) MessagesGetById(params ...api.MethodParams) (resp models.MessagesGetByIdResponse, err error) {
	req := api.NewRequest[models.MessagesGetByIdResponse](m.api)

	res, err := req.Execute("messages.getById", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MessagesGetByIdExtended Returns messages by their IDs.
// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/messages.getById
func (m *Messages) MessagesGetByIdExtended(params ...api.MethodParams) (resp models.MessagesGetByIdExtendedResponse, err error) {
	req := api.NewRequest[models.MessagesGetByIdExtendedResponse](m.api)

	res, err := req.Execute("messages.getById", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MessagesGetChatPreview ...
type MessagesGetChatPreviewRequest api.Params

func NewMessagesGetChatPreviewRequest() MessagesGetChatPreviewRequest {
	params := make(MessagesGetChatPreviewRequest, 4)
	return params
}

func (m MessagesGetChatPreviewRequest) WithPeerId(m_peer_id int) MessagesGetChatPreviewRequest {
	m["peer_id"] = m_peer_id
	return m
}

func (m MessagesGetChatPreviewRequest) WithLink(m_link string) MessagesGetChatPreviewRequest {
	m["link"] = m_link
	return m
}

func (m MessagesGetChatPreviewRequest) WithFields(m_fields []models.UsersFields) MessagesGetChatPreviewRequest {
	m["fields"] = m_fields
	return m
}

func (m MessagesGetChatPreviewRequest) Params() api.Params {
	return api.Params(m)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_MessagesChatUserNoAccess ]
//
// https://dev.vk.com/method/messages.getChatPreview
func (m *Messages) MessagesGetChatPreview(params ...api.MethodParams) (resp models.MessagesGetChatPreviewResponse, err error) {
	req := api.NewRequest[models.MessagesGetChatPreviewResponse](m.api)

	res, err := req.Execute("messages.getChatPreview", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MessagesGetConversationMembers Returns a list of IDs of users participating in a chat.
type MessagesGetConversationMembersRequest api.Params

func NewMessagesGetConversationMembersRequest() MessagesGetConversationMembersRequest {
	params := make(MessagesGetConversationMembersRequest, 4)
	return params
}

func (m MessagesGetConversationMembersRequest) WithPeerId(m_peer_id int) MessagesGetConversationMembersRequest {
	m["peer_id"] = m_peer_id
	return m
}

func (m MessagesGetConversationMembersRequest) WithFields(m_fields []models.UsersFields) MessagesGetConversationMembersRequest {
	m["fields"] = m_fields
	return m
}

func (m MessagesGetConversationMembersRequest) WithGroupId(m_group_id int) MessagesGetConversationMembersRequest {
	m["group_id"] = m_group_id
	return m
}

func (m MessagesGetConversationMembersRequest) Params() api.Params {
	return api.Params(m)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_MessagesChatUserNoAccess ]
//
// https://dev.vk.com/method/messages.getConversationMembers
func (m *Messages) MessagesGetConversationMembers(params ...api.MethodParams) (resp models.MessagesGetConversationMembersResponse, err error) {
	req := api.NewRequest[models.MessagesGetConversationMembersResponse](m.api)

	res, err := req.Execute("messages.getConversationMembers", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MessagesGetConversations Returns a list of the current user's conversations.
type MessagesGetConversationsRequest api.Params

func NewMessagesGetConversationsRequest() MessagesGetConversationsRequest {
	params := make(MessagesGetConversationsRequest, 8)
	return params
}

func (m MessagesGetConversationsRequest) WithOffset(m_offset int) MessagesGetConversationsRequest {
	m["offset"] = m_offset
	return m
}

func (m MessagesGetConversationsRequest) WithCount(m_count int) MessagesGetConversationsRequest {
	m["count"] = m_count
	return m
}

func (m MessagesGetConversationsRequest) WithFilter(m_filter string) MessagesGetConversationsRequest {
	m["filter"] = m_filter
	return m
}

func (m MessagesGetConversationsRequest) WithExtended(m_extended bool) MessagesGetConversationsRequest {
	m["extended"] = m_extended
	return m
}

func (m MessagesGetConversationsRequest) WithStartMessageId(m_start_message_id int) MessagesGetConversationsRequest {
	m["start_message_id"] = m_start_message_id
	return m
}

func (m MessagesGetConversationsRequest) WithFields(m_fields []models.BaseUserGroupFields) MessagesGetConversationsRequest {
	m["fields"] = m_fields
	return m
}

func (m MessagesGetConversationsRequest) WithGroupId(m_group_id int) MessagesGetConversationsRequest {
	m["group_id"] = m_group_id
	return m
}

func (m MessagesGetConversationsRequest) Params() api.Params {
	return api.Params(m)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_MessagesChatNotExist, Error_MessagesContactNotFound, Error_MessagesChatUserNoAccess ]
//
// https://dev.vk.com/method/messages.getConversations
func (m *Messages) MessagesGetConversations(params ...api.MethodParams) (resp models.MessagesGetConversationsResponse, err error) {
	req := api.NewRequest[models.MessagesGetConversationsResponse](m.api)

	res, err := req.Execute("messages.getConversations", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MessagesGetConversationsById Returns conversations by their IDs
type MessagesGetConversationsByIdRequest api.Params

func NewMessagesGetConversationsByIdRequest() MessagesGetConversationsByIdRequest {
	params := make(MessagesGetConversationsByIdRequest, 6)
	return params
}

func (m MessagesGetConversationsByIdRequest) WithPeerIds(m_peer_ids []int) MessagesGetConversationsByIdRequest {
	m["peer_ids"] = m_peer_ids
	return m
}

func (m MessagesGetConversationsByIdRequest) WithExtended(m_extended bool) MessagesGetConversationsByIdRequest {
	m["extended"] = m_extended
	return m
}

func (m MessagesGetConversationsByIdRequest) WithFields(m_fields []models.BaseUserGroupFields) MessagesGetConversationsByIdRequest {
	m["fields"] = m_fields
	return m
}

func (m MessagesGetConversationsByIdRequest) WithGroupId(m_group_id int) MessagesGetConversationsByIdRequest {
	m["group_id"] = m_group_id
	return m
}

func (m MessagesGetConversationsByIdRequest) Params() api.Params {
	return api.Params(m)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_MessagesChatNotExist, Error_MessagesChatUserNoAccess, Error_MessagesContactNotFound ]
//
// https://dev.vk.com/method/messages.getConversationsById
func (m *Messages) MessagesGetConversationsById(params ...api.MethodParams) (resp models.MessagesGetConversationsByIdResponse, err error) {
	req := api.NewRequest[models.MessagesGetConversationsByIdResponse](m.api)

	res, err := req.Execute("messages.getConversationsById", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MessagesGetConversationsByIdExtended Returns conversations by their IDs
// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_MessagesChatNotExist, Error_MessagesChatUserNoAccess, Error_MessagesContactNotFound ]
//
// https://dev.vk.com/method/messages.getConversationsById
func (m *Messages) MessagesGetConversationsByIdExtended(params ...api.MethodParams) (resp models.MessagesGetConversationsByIdExtendedResponse, err error) {
	req := api.NewRequest[models.MessagesGetConversationsByIdExtendedResponse](m.api)

	res, err := req.Execute("messages.getConversationsById", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MessagesGetHistory Returns message history for the specified user or group chat.
type MessagesGetHistoryRequest api.Params

func NewMessagesGetHistoryRequest() MessagesGetHistoryRequest {
	params := make(MessagesGetHistoryRequest, 11)
	return params
}

func (m MessagesGetHistoryRequest) WithOffset(m_offset int) MessagesGetHistoryRequest {
	m["offset"] = m_offset
	return m
}

func (m MessagesGetHistoryRequest) WithCount(m_count int) MessagesGetHistoryRequest {
	m["count"] = m_count
	return m
}

func (m MessagesGetHistoryRequest) WithUserId(m_user_id int) MessagesGetHistoryRequest {
	m["user_id"] = m_user_id
	return m
}

func (m MessagesGetHistoryRequest) WithPeerId(m_peer_id int) MessagesGetHistoryRequest {
	m["peer_id"] = m_peer_id
	return m
}

func (m MessagesGetHistoryRequest) WithStartMessageId(m_start_message_id int) MessagesGetHistoryRequest {
	m["start_message_id"] = m_start_message_id
	return m
}

func (m MessagesGetHistoryRequest) WithRev(m_rev int) MessagesGetHistoryRequest {
	m["rev"] = m_rev
	return m
}

func (m MessagesGetHistoryRequest) WithExtended(m_extended bool) MessagesGetHistoryRequest {
	m["extended"] = m_extended
	return m
}

func (m MessagesGetHistoryRequest) WithFields(m_fields []models.UsersFields) MessagesGetHistoryRequest {
	m["fields"] = m_fields
	return m
}

func (m MessagesGetHistoryRequest) WithGroupId(m_group_id int) MessagesGetHistoryRequest {
	m["group_id"] = m_group_id
	return m
}

func (m MessagesGetHistoryRequest) Params() api.Params {
	return api.Params(m)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_MessagesContactNotFound ]
//
// https://dev.vk.com/method/messages.getHistory
func (m *Messages) MessagesGetHistory(params ...api.MethodParams) (resp models.MessagesGetHistoryResponse, err error) {
	req := api.NewRequest[models.MessagesGetHistoryResponse](m.api)

	res, err := req.Execute("messages.getHistory", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MessagesGetHistoryExtended Returns message history for the specified user or group chat.
// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_MessagesContactNotFound ]
//
// https://dev.vk.com/method/messages.getHistory
func (m *Messages) MessagesGetHistoryExtended(params ...api.MethodParams) (resp models.MessagesGetHistoryExtendedResponse, err error) {
	req := api.NewRequest[models.MessagesGetHistoryExtendedResponse](m.api)

	res, err := req.Execute("messages.getHistory", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MessagesGetHistoryAttachments Returns media files from the dialog or group chat.
type MessagesGetHistoryAttachmentsRequest api.Params

func NewMessagesGetHistoryAttachmentsRequest() MessagesGetHistoryAttachmentsRequest {
	params := make(MessagesGetHistoryAttachmentsRequest, 10)
	return params
}

func (m MessagesGetHistoryAttachmentsRequest) WithPeerId(m_peer_id int) MessagesGetHistoryAttachmentsRequest {
	m["peer_id"] = m_peer_id
	return m
}

func (m MessagesGetHistoryAttachmentsRequest) WithMediaType(m_media_type string) MessagesGetHistoryAttachmentsRequest {
	m["media_type"] = m_media_type
	return m
}

func (m MessagesGetHistoryAttachmentsRequest) WithStartFrom(m_start_from string) MessagesGetHistoryAttachmentsRequest {
	m["start_from"] = m_start_from
	return m
}

func (m MessagesGetHistoryAttachmentsRequest) WithCount(m_count int) MessagesGetHistoryAttachmentsRequest {
	m["count"] = m_count
	return m
}

func (m MessagesGetHistoryAttachmentsRequest) WithPhotoSizes(m_photo_sizes bool) MessagesGetHistoryAttachmentsRequest {
	m["photo_sizes"] = m_photo_sizes
	return m
}

func (m MessagesGetHistoryAttachmentsRequest) WithFields(m_fields []models.UsersFields) MessagesGetHistoryAttachmentsRequest {
	m["fields"] = m_fields
	return m
}

func (m MessagesGetHistoryAttachmentsRequest) WithGroupId(m_group_id int) MessagesGetHistoryAttachmentsRequest {
	m["group_id"] = m_group_id
	return m
}

func (m MessagesGetHistoryAttachmentsRequest) WithPreserveOrder(m_preserve_order bool) MessagesGetHistoryAttachmentsRequest {
	m["preserve_order"] = m_preserve_order
	return m
}

func (m MessagesGetHistoryAttachmentsRequest) WithMaxForwardsLevel(m_max_forwards_level int) MessagesGetHistoryAttachmentsRequest {
	m["max_forwards_level"] = m_max_forwards_level
	return m
}

func (m MessagesGetHistoryAttachmentsRequest) Params() api.Params {
	return api.Params(m)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/messages.getHistoryAttachments
func (m *Messages) MessagesGetHistoryAttachments(params ...api.MethodParams) (resp models.MessagesGetHistoryAttachmentsResponse, err error) {
	req := api.NewRequest[models.MessagesGetHistoryAttachmentsResponse](m.api)

	res, err := req.Execute("messages.getHistoryAttachments", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MessagesGetImportantMessages Returns a list of user's important messages.
type MessagesGetImportantMessagesRequest api.Params

func NewMessagesGetImportantMessagesRequest() MessagesGetImportantMessagesRequest {
	params := make(MessagesGetImportantMessagesRequest, 9)
	return params
}

func (m MessagesGetImportantMessagesRequest) WithCount(m_count int) MessagesGetImportantMessagesRequest {
	m["count"] = m_count
	return m
}

func (m MessagesGetImportantMessagesRequest) WithOffset(m_offset int) MessagesGetImportantMessagesRequest {
	m["offset"] = m_offset
	return m
}

func (m MessagesGetImportantMessagesRequest) WithStartMessageId(m_start_message_id int) MessagesGetImportantMessagesRequest {
	m["start_message_id"] = m_start_message_id
	return m
}

func (m MessagesGetImportantMessagesRequest) WithPreviewLength(m_preview_length int) MessagesGetImportantMessagesRequest {
	m["preview_length"] = m_preview_length
	return m
}

func (m MessagesGetImportantMessagesRequest) WithFields(m_fields []models.BaseUserGroupFields) MessagesGetImportantMessagesRequest {
	m["fields"] = m_fields
	return m
}

func (m MessagesGetImportantMessagesRequest) WithExtended(m_extended bool) MessagesGetImportantMessagesRequest {
	m["extended"] = m_extended
	return m
}

func (m MessagesGetImportantMessagesRequest) WithGroupId(m_group_id int) MessagesGetImportantMessagesRequest {
	m["group_id"] = m_group_id
	return m
}

func (m MessagesGetImportantMessagesRequest) Params() api.Params {
	return api.Params(m)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/messages.getImportantMessages
func (m *Messages) MessagesGetImportantMessages(params ...api.MethodParams) (resp models.MessagesGetImportantMessagesResponse, err error) {
	req := api.NewRequest[models.MessagesGetImportantMessagesResponse](m.api)

	res, err := req.Execute("messages.getImportantMessages", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MessagesGetImportantMessagesExtended Returns a list of user's important messages.
// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/messages.getImportantMessages
func (m *Messages) MessagesGetImportantMessagesExtended(params ...api.MethodParams) (resp models.MessagesGetImportantMessagesExtendedResponse, err error) {
	req := api.NewRequest[models.MessagesGetImportantMessagesExtendedResponse](m.api)

	res, err := req.Execute("messages.getImportantMessages", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MessagesGetIntentUsers ...
type MessagesGetIntentUsersRequest api.Params

func NewMessagesGetIntentUsersRequest() MessagesGetIntentUsersRequest {
	params := make(MessagesGetIntentUsersRequest, 8)
	return params
}

func (m MessagesGetIntentUsersRequest) WithIntent(m_intent string) MessagesGetIntentUsersRequest {
	m["intent"] = m_intent
	return m
}

func (m MessagesGetIntentUsersRequest) WithSubscribeId(m_subscribe_id int) MessagesGetIntentUsersRequest {
	m["subscribe_id"] = m_subscribe_id
	return m
}

func (m MessagesGetIntentUsersRequest) WithOffset(m_offset int) MessagesGetIntentUsersRequest {
	m["offset"] = m_offset
	return m
}

func (m MessagesGetIntentUsersRequest) WithCount(m_count int) MessagesGetIntentUsersRequest {
	m["count"] = m_count
	return m
}

func (m MessagesGetIntentUsersRequest) WithExtended(m_extended bool) MessagesGetIntentUsersRequest {
	m["extended"] = m_extended
	return m
}

func (m MessagesGetIntentUsersRequest) WithNameCase(m_name_case []string) MessagesGetIntentUsersRequest {
	m["name_case"] = m_name_case
	return m
}

func (m MessagesGetIntentUsersRequest) WithFields(m_fields []string) MessagesGetIntentUsersRequest {
	m["fields"] = m_fields
	return m
}

func (m MessagesGetIntentUsersRequest) Params() api.Params {
	return api.Params(m)
}

// May execute with listed access token types:
//
//	[ group ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_MessagesIntentCantUse ]
//
// https://dev.vk.com/method/messages.getIntentUsers
func (m *Messages) MessagesGetIntentUsers(params ...api.MethodParams) (resp models.MessagesGetIntentUsersResponse, err error) {
	req := api.NewRequest[models.MessagesGetIntentUsersResponse](m.api)

	res, err := req.Execute("messages.getIntentUsers", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MessagesGetInviteLink ...
type MessagesGetInviteLinkRequest api.Params

func NewMessagesGetInviteLinkRequest() MessagesGetInviteLinkRequest {
	params := make(MessagesGetInviteLinkRequest, 4)
	return params
}

func (m MessagesGetInviteLinkRequest) WithPeerId(m_peer_id int) MessagesGetInviteLinkRequest {
	m["peer_id"] = m_peer_id
	return m
}

func (m MessagesGetInviteLinkRequest) WithReset(m_reset bool) MessagesGetInviteLinkRequest {
	m["reset"] = m_reset
	return m
}

func (m MessagesGetInviteLinkRequest) WithGroupId(m_group_id int) MessagesGetInviteLinkRequest {
	m["group_id"] = m_group_id
	return m
}

func (m MessagesGetInviteLinkRequest) Params() api.Params {
	return api.Params(m)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_MessagesCantSeeInviteLink, Error_MessagesCantChangeInviteLink ]
//
// https://dev.vk.com/method/messages.getInviteLink
func (m *Messages) MessagesGetInviteLink(params ...api.MethodParams) (resp models.MessagesGetInviteLinkResponse, err error) {
	req := api.NewRequest[models.MessagesGetInviteLinkResponse](m.api)

	res, err := req.Execute("messages.getInviteLink", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MessagesGetLastActivity Returns a user's current status and date of last activity.
type MessagesGetLastActivityRequest api.Params

func NewMessagesGetLastActivityRequest() MessagesGetLastActivityRequest {
	params := make(MessagesGetLastActivityRequest, 2)
	return params
}

func (m MessagesGetLastActivityRequest) WithUserId(m_user_id int) MessagesGetLastActivityRequest {
	m["user_id"] = m_user_id
	return m
}

func (m MessagesGetLastActivityRequest) Params() api.Params {
	return api.Params(m)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/messages.getLastActivity
func (m *Messages) MessagesGetLastActivity(params ...api.MethodParams) (resp models.MessagesGetLastActivityResponse, err error) {
	req := api.NewRequest[models.MessagesGetLastActivityResponse](m.api)

	res, err := req.Execute("messages.getLastActivity", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MessagesGetLongPollHistory Returns updates in user's private messages.
type MessagesGetLongPollHistoryRequest api.Params

func NewMessagesGetLongPollHistoryRequest() MessagesGetLongPollHistoryRequest {
	params := make(MessagesGetLongPollHistoryRequest, 14)
	return params
}

func (m MessagesGetLongPollHistoryRequest) WithTs(m_ts int) MessagesGetLongPollHistoryRequest {
	m["ts"] = m_ts
	return m
}

func (m MessagesGetLongPollHistoryRequest) WithPts(m_pts int) MessagesGetLongPollHistoryRequest {
	m["pts"] = m_pts
	return m
}

func (m MessagesGetLongPollHistoryRequest) WithPreviewLength(m_preview_length int) MessagesGetLongPollHistoryRequest {
	m["preview_length"] = m_preview_length
	return m
}

func (m MessagesGetLongPollHistoryRequest) WithOnlines(m_onlines bool) MessagesGetLongPollHistoryRequest {
	m["onlines"] = m_onlines
	return m
}

func (m MessagesGetLongPollHistoryRequest) WithFields(m_fields []models.UsersFields) MessagesGetLongPollHistoryRequest {
	m["fields"] = m_fields
	return m
}

func (m MessagesGetLongPollHistoryRequest) WithEventsLimit(m_events_limit int) MessagesGetLongPollHistoryRequest {
	m["events_limit"] = m_events_limit
	return m
}

func (m MessagesGetLongPollHistoryRequest) WithMsgsLimit(m_msgs_limit int) MessagesGetLongPollHistoryRequest {
	m["msgs_limit"] = m_msgs_limit
	return m
}

func (m MessagesGetLongPollHistoryRequest) WithMaxMsgId(m_max_msg_id int) MessagesGetLongPollHistoryRequest {
	m["max_msg_id"] = m_max_msg_id
	return m
}

func (m MessagesGetLongPollHistoryRequest) WithGroupId(m_group_id int) MessagesGetLongPollHistoryRequest {
	m["group_id"] = m_group_id
	return m
}

func (m MessagesGetLongPollHistoryRequest) WithLpVersion(m_lp_version int) MessagesGetLongPollHistoryRequest {
	m["lp_version"] = m_lp_version
	return m
}

func (m MessagesGetLongPollHistoryRequest) WithLastN(m_last_n int) MessagesGetLongPollHistoryRequest {
	m["last_n"] = m_last_n
	return m
}

func (m MessagesGetLongPollHistoryRequest) WithCredentials(m_credentials bool) MessagesGetLongPollHistoryRequest {
	m["credentials"] = m_credentials
	return m
}

func (m MessagesGetLongPollHistoryRequest) WithExtended(m_extended bool) MessagesGetLongPollHistoryRequest {
	m["extended"] = m_extended
	return m
}

func (m MessagesGetLongPollHistoryRequest) Params() api.Params {
	return api.Params(m)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_MessagesTooOldPts, Error_MessagesTooNewPts, Error_Timeout ]
//
// https://dev.vk.com/method/messages.getLongPollHistory
func (m *Messages) MessagesGetLongPollHistory(params ...api.MethodParams) (resp models.MessagesGetLongPollHistoryResponse, err error) {
	req := api.NewRequest[models.MessagesGetLongPollHistoryResponse](m.api)

	res, err := req.Execute("messages.getLongPollHistory", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MessagesGetLongPollServer Returns data required for connection to a Long Poll server.
type MessagesGetLongPollServerRequest api.Params

func NewMessagesGetLongPollServerRequest() MessagesGetLongPollServerRequest {
	params := make(MessagesGetLongPollServerRequest, 4)
	return params
}

func (m MessagesGetLongPollServerRequest) WithNeedPts(m_need_pts bool) MessagesGetLongPollServerRequest {
	m["need_pts"] = m_need_pts
	return m
}

func (m MessagesGetLongPollServerRequest) WithGroupId(m_group_id int) MessagesGetLongPollServerRequest {
	m["group_id"] = m_group_id
	return m
}

func (m MessagesGetLongPollServerRequest) WithLpVersion(m_lp_version int) MessagesGetLongPollServerRequest {
	m["lp_version"] = m_lp_version
	return m
}

func (m MessagesGetLongPollServerRequest) Params() api.Params {
	return api.Params(m)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/messages.getLongPollServer
func (m *Messages) MessagesGetLongPollServer(params ...api.MethodParams) (resp models.MessagesGetLongPollServerResponse, err error) {
	req := api.NewRequest[models.MessagesGetLongPollServerResponse](m.api)

	res, err := req.Execute("messages.getLongPollServer", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MessagesIsMessagesFromGroupAllowed Returns information whether sending messages from the community to current user is allowed.
type MessagesIsMessagesFromGroupAllowedRequest api.Params

func NewMessagesIsMessagesFromGroupAllowedRequest() MessagesIsMessagesFromGroupAllowedRequest {
	params := make(MessagesIsMessagesFromGroupAllowedRequest, 3)
	return params
}

func (m MessagesIsMessagesFromGroupAllowedRequest) WithGroupId(m_group_id int) MessagesIsMessagesFromGroupAllowedRequest {
	m["group_id"] = m_group_id
	return m
}

func (m MessagesIsMessagesFromGroupAllowedRequest) WithUserId(m_user_id int) MessagesIsMessagesFromGroupAllowedRequest {
	m["user_id"] = m_user_id
	return m
}

func (m MessagesIsMessagesFromGroupAllowedRequest) Params() api.Params {
	return api.Params(m)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_MessagesIntentCantUse ]
//
// https://dev.vk.com/method/messages.isMessagesFromGroupAllowed
func (m *Messages) MessagesIsMessagesFromGroupAllowed(params ...api.MethodParams) (resp models.MessagesIsMessagesFromGroupAllowedResponse, err error) {
	req := api.NewRequest[models.MessagesIsMessagesFromGroupAllowedResponse](m.api)

	res, err := req.Execute("messages.isMessagesFromGroupAllowed", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MessagesJoinChatByInviteLink ...
type MessagesJoinChatByInviteLinkRequest api.Params

func NewMessagesJoinChatByInviteLinkRequest() MessagesJoinChatByInviteLinkRequest {
	params := make(MessagesJoinChatByInviteLinkRequest, 2)
	return params
}

func (m MessagesJoinChatByInviteLinkRequest) WithLink(m_link string) MessagesJoinChatByInviteLinkRequest {
	m["link"] = m_link
	return m
}

func (m MessagesJoinChatByInviteLinkRequest) Params() api.Params {
	return api.Params(m)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_MessagesChatUserNoAccess, Error_Limits ]
//
// https://dev.vk.com/method/messages.joinChatByInviteLink
func (m *Messages) MessagesJoinChatByInviteLink(params ...api.MethodParams) (resp models.MessagesJoinChatByInviteLinkResponse, err error) {
	req := api.NewRequest[models.MessagesJoinChatByInviteLinkResponse](m.api)

	res, err := req.Execute("messages.joinChatByInviteLink", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MessagesMarkAsAnsweredConversation Marks and unmarks conversations as unanswered.
type MessagesMarkAsAnsweredConversationRequest api.Params

func NewMessagesMarkAsAnsweredConversationRequest() MessagesMarkAsAnsweredConversationRequest {
	params := make(MessagesMarkAsAnsweredConversationRequest, 4)
	return params
}

func (m MessagesMarkAsAnsweredConversationRequest) WithPeerId(m_peer_id int) MessagesMarkAsAnsweredConversationRequest {
	m["peer_id"] = m_peer_id
	return m
}

func (m MessagesMarkAsAnsweredConversationRequest) WithAnswered(m_answered bool) MessagesMarkAsAnsweredConversationRequest {
	m["answered"] = m_answered
	return m
}

func (m MessagesMarkAsAnsweredConversationRequest) WithGroupId(m_group_id int) MessagesMarkAsAnsweredConversationRequest {
	m["group_id"] = m_group_id
	return m
}

func (m MessagesMarkAsAnsweredConversationRequest) Params() api.Params {
	return api.Params(m)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/messages.markAsAnsweredConversation
func (m *Messages) MessagesMarkAsAnsweredConversation(params ...api.MethodParams) (resp models.BaseOkResponse, err error) {
	req := api.NewRequest[models.BaseOkResponse](m.api)

	res, err := req.Execute("messages.markAsAnsweredConversation", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MessagesMarkAsImportant Marks and unmarks messages as important (starred).
type MessagesMarkAsImportantRequest api.Params

func NewMessagesMarkAsImportantRequest() MessagesMarkAsImportantRequest {
	params := make(MessagesMarkAsImportantRequest, 3)
	return params
}

func (m MessagesMarkAsImportantRequest) WithMessageIds(m_message_ids []int) MessagesMarkAsImportantRequest {
	m["message_ids"] = m_message_ids
	return m
}

func (m MessagesMarkAsImportantRequest) WithImportant(m_important int) MessagesMarkAsImportantRequest {
	m["important"] = m_important
	return m
}

func (m MessagesMarkAsImportantRequest) Params() api.Params {
	return api.Params(m)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/messages.markAsImportant
func (m *Messages) MessagesMarkAsImportant(params ...api.MethodParams) (resp models.MessagesMarkAsImportantResponse, err error) {
	req := api.NewRequest[models.MessagesMarkAsImportantResponse](m.api)

	res, err := req.Execute("messages.markAsImportant", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MessagesMarkAsImportantConversation Marks and unmarks conversations as important.
type MessagesMarkAsImportantConversationRequest api.Params

func NewMessagesMarkAsImportantConversationRequest() MessagesMarkAsImportantConversationRequest {
	params := make(MessagesMarkAsImportantConversationRequest, 4)
	return params
}

func (m MessagesMarkAsImportantConversationRequest) WithPeerId(m_peer_id int) MessagesMarkAsImportantConversationRequest {
	m["peer_id"] = m_peer_id
	return m
}

func (m MessagesMarkAsImportantConversationRequest) WithImportant(m_important bool) MessagesMarkAsImportantConversationRequest {
	m["important"] = m_important
	return m
}

func (m MessagesMarkAsImportantConversationRequest) WithGroupId(m_group_id int) MessagesMarkAsImportantConversationRequest {
	m["group_id"] = m_group_id
	return m
}

func (m MessagesMarkAsImportantConversationRequest) Params() api.Params {
	return api.Params(m)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/messages.markAsImportantConversation
func (m *Messages) MessagesMarkAsImportantConversation(params ...api.MethodParams) (resp models.BaseOkResponse, err error) {
	req := api.NewRequest[models.BaseOkResponse](m.api)

	res, err := req.Execute("messages.markAsImportantConversation", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MessagesMarkAsRead Marks messages as read.
type MessagesMarkAsReadRequest api.Params

func NewMessagesMarkAsReadRequest() MessagesMarkAsReadRequest {
	params := make(MessagesMarkAsReadRequest, 6)
	return params
}

func (m MessagesMarkAsReadRequest) WithMessageIds(m_message_ids []int) MessagesMarkAsReadRequest {
	m["message_ids"] = m_message_ids
	return m
}

func (m MessagesMarkAsReadRequest) WithPeerId(m_peer_id int) MessagesMarkAsReadRequest {
	m["peer_id"] = m_peer_id
	return m
}

func (m MessagesMarkAsReadRequest) WithStartMessageId(m_start_message_id int) MessagesMarkAsReadRequest {
	m["start_message_id"] = m_start_message_id
	return m
}

func (m MessagesMarkAsReadRequest) WithGroupId(m_group_id int) MessagesMarkAsReadRequest {
	m["group_id"] = m_group_id
	return m
}

func (m MessagesMarkAsReadRequest) WithMarkConversationAsRead(m_mark_conversation_as_read bool) MessagesMarkAsReadRequest {
	m["mark_conversation_as_read"] = m_mark_conversation_as_read
	return m
}

func (m MessagesMarkAsReadRequest) Params() api.Params {
	return api.Params(m)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/messages.markAsRead
func (m *Messages) MessagesMarkAsRead(params ...api.MethodParams) (resp models.BaseOkResponse, err error) {
	req := api.NewRequest[models.BaseOkResponse](m.api)

	res, err := req.Execute("messages.markAsRead", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MessagesPin Pin a message.
type MessagesPinRequest api.Params

func NewMessagesPinRequest() MessagesPinRequest {
	params := make(MessagesPinRequest, 4)
	return params
}

func (m MessagesPinRequest) WithPeerId(m_peer_id int) MessagesPinRequest {
	m["peer_id"] = m_peer_id
	return m
}

func (m MessagesPinRequest) WithMessageId(m_message_id int) MessagesPinRequest {
	m["message_id"] = m_message_id
	return m
}

func (m MessagesPinRequest) WithConversationMessageId(m_conversation_message_id int) MessagesPinRequest {
	m["conversation_message_id"] = m_conversation_message_id
	return m
}

func (m MessagesPinRequest) Params() api.Params {
	return api.Params(m)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_MessagesChatNotAdmin, Error_MessagesCantPinOneTimeStory, Error_MessagesCantPinExpiringMessage ]
//
// https://dev.vk.com/method/messages.pin
func (m *Messages) MessagesPin(params ...api.MethodParams) (resp models.MessagesPinResponse, err error) {
	req := api.NewRequest[models.MessagesPinResponse](m.api)

	res, err := req.Execute("messages.pin", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MessagesRemoveChatUser Allows the current user to leave a chat or, if the current user started the chat, allows the user to remove another user from the chat.
type MessagesRemoveChatUserRequest api.Params

func NewMessagesRemoveChatUserRequest() MessagesRemoveChatUserRequest {
	params := make(MessagesRemoveChatUserRequest, 4)
	return params
}

func (m MessagesRemoveChatUserRequest) WithChatId(m_chat_id int) MessagesRemoveChatUserRequest {
	m["chat_id"] = m_chat_id
	return m
}

func (m MessagesRemoveChatUserRequest) WithUserId(m_user_id int) MessagesRemoveChatUserRequest {
	m["user_id"] = m_user_id
	return m
}

func (m MessagesRemoveChatUserRequest) WithMemberId(m_member_id int) MessagesRemoveChatUserRequest {
	m["member_id"] = m_member_id
	return m
}

func (m MessagesRemoveChatUserRequest) Params() api.Params {
	return api.Params(m)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_MessagesChatNotAdmin, Error_MessagesChatUserNotInChat, Error_MessagesContactNotFound, Error_MessagesChatDisabled, Error_MessagesChatUnsupported ]
//
// https://dev.vk.com/method/messages.removeChatUser
func (m *Messages) MessagesRemoveChatUser(params ...api.MethodParams) (resp models.BaseOkResponse, err error) {
	req := api.NewRequest[models.BaseOkResponse](m.api)

	res, err := req.Execute("messages.removeChatUser", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MessagesRestore Restores a deleted message.
type MessagesRestoreRequest api.Params

func NewMessagesRestoreRequest() MessagesRestoreRequest {
	params := make(MessagesRestoreRequest, 3)
	return params
}

func (m MessagesRestoreRequest) WithMessageId(m_message_id int) MessagesRestoreRequest {
	m["message_id"] = m_message_id
	return m
}

func (m MessagesRestoreRequest) WithGroupId(m_group_id int) MessagesRestoreRequest {
	m["group_id"] = m_group_id
	return m
}

func (m MessagesRestoreRequest) Params() api.Params {
	return api.Params(m)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/messages.restore
func (m *Messages) MessagesRestore(params ...api.MethodParams) (resp models.BaseOkResponse, err error) {
	req := api.NewRequest[models.BaseOkResponse](m.api)

	res, err := req.Execute("messages.restore", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MessagesSearch Returns a list of the current user's private messages that match search criteria.
type MessagesSearchRequest api.Params

func NewMessagesSearchRequest() MessagesSearchRequest {
	params := make(MessagesSearchRequest, 11)
	return params
}

func (m MessagesSearchRequest) WithQ(m_q string) MessagesSearchRequest {
	m["q"] = m_q
	return m
}

func (m MessagesSearchRequest) WithPeerId(m_peer_id int) MessagesSearchRequest {
	m["peer_id"] = m_peer_id
	return m
}

func (m MessagesSearchRequest) WithDate(m_date int) MessagesSearchRequest {
	m["date"] = m_date
	return m
}

func (m MessagesSearchRequest) WithPreviewLength(m_preview_length int) MessagesSearchRequest {
	m["preview_length"] = m_preview_length
	return m
}

func (m MessagesSearchRequest) WithOffset(m_offset int) MessagesSearchRequest {
	m["offset"] = m_offset
	return m
}

func (m MessagesSearchRequest) WithCount(m_count int) MessagesSearchRequest {
	m["count"] = m_count
	return m
}

func (m MessagesSearchRequest) WithExtended(m_extended bool) MessagesSearchRequest {
	m["extended"] = m_extended
	return m
}

func (m MessagesSearchRequest) WithFields(m_fields []string) MessagesSearchRequest {
	m["fields"] = m_fields
	return m
}

func (m MessagesSearchRequest) WithGroupId(m_group_id int) MessagesSearchRequest {
	m["group_id"] = m_group_id
	return m
}

func (m MessagesSearchRequest) Params() api.Params {
	return api.Params(m)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/messages.search
func (m *Messages) MessagesSearch(params ...api.MethodParams) (resp models.MessagesSearchResponse, err error) {
	req := api.NewRequest[models.MessagesSearchResponse](m.api)

	res, err := req.Execute("messages.search", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MessagesSearchExtended Returns a list of the current user's private messages that match search criteria.
// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/messages.search
func (m *Messages) MessagesSearchExtended(params ...api.MethodParams) (resp models.MessagesSearchExtendedResponse, err error) {
	req := api.NewRequest[models.MessagesSearchExtendedResponse](m.api)

	res, err := req.Execute("messages.search", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MessagesSearchConversations Returns a list of the current user's conversations that match search criteria.
type MessagesSearchConversationsRequest api.Params

func NewMessagesSearchConversationsRequest() MessagesSearchConversationsRequest {
	params := make(MessagesSearchConversationsRequest, 7)
	return params
}

func (m MessagesSearchConversationsRequest) WithQ(m_q string) MessagesSearchConversationsRequest {
	m["q"] = m_q
	return m
}

func (m MessagesSearchConversationsRequest) WithCount(m_count int) MessagesSearchConversationsRequest {
	m["count"] = m_count
	return m
}

func (m MessagesSearchConversationsRequest) WithExtended(m_extended bool) MessagesSearchConversationsRequest {
	m["extended"] = m_extended
	return m
}

func (m MessagesSearchConversationsRequest) WithFields(m_fields []models.UsersFields) MessagesSearchConversationsRequest {
	m["fields"] = m_fields
	return m
}

func (m MessagesSearchConversationsRequest) WithGroupId(m_group_id int) MessagesSearchConversationsRequest {
	m["group_id"] = m_group_id
	return m
}

func (m MessagesSearchConversationsRequest) Params() api.Params {
	return api.Params(m)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/messages.searchConversations
func (m *Messages) MessagesSearchConversations(params ...api.MethodParams) (resp models.MessagesSearchConversationsResponse, err error) {
	req := api.NewRequest[models.MessagesSearchConversationsResponse](m.api)

	res, err := req.Execute("messages.searchConversations", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MessagesSearchConversationsExtended Returns a list of the current user's conversations that match search criteria.
// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/messages.searchConversations
func (m *Messages) MessagesSearchConversationsExtended(params ...api.MethodParams) (resp models.MessagesSearchConversationsExtendedResponse, err error) {
	req := api.NewRequest[models.MessagesSearchConversationsExtendedResponse](m.api)

	res, err := req.Execute("messages.searchConversations", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MessagesSend Sends a message.
type MessagesSendRequest api.Params

func NewMessagesSendRequest() MessagesSendRequest {
	params := make(MessagesSendRequest, 25)
	return params
}

func (m MessagesSendRequest) WithUserId(m_user_id int) MessagesSendRequest {
	m["user_id"] = m_user_id
	return m
}

func (m MessagesSendRequest) WithRandomId(m_random_id int) MessagesSendRequest {
	m["random_id"] = m_random_id
	return m
}

func (m MessagesSendRequest) WithPeerId(m_peer_id int) MessagesSendRequest {
	m["peer_id"] = m_peer_id
	return m
}

func (m MessagesSendRequest) WithPeerIds(m_peer_ids []int) MessagesSendRequest {
	m["peer_ids"] = m_peer_ids
	return m
}

func (m MessagesSendRequest) WithDomain(m_domain string) MessagesSendRequest {
	m["domain"] = m_domain
	return m
}

func (m MessagesSendRequest) WithChatId(m_chat_id int) MessagesSendRequest {
	m["chat_id"] = m_chat_id
	return m
}

func (m MessagesSendRequest) WithUserIds(m_user_ids []int) MessagesSendRequest {
	m["user_ids"] = m_user_ids
	return m
}

func (m MessagesSendRequest) WithMessage(m_message string) MessagesSendRequest {
	m["message"] = m_message
	return m
}

func (m MessagesSendRequest) WithLat(m_lat float64) MessagesSendRequest {
	m["lat"] = m_lat
	return m
}

func (m MessagesSendRequest) WithLong(m_long float64) MessagesSendRequest {
	m["long"] = m_long
	return m
}

func (m MessagesSendRequest) WithAttachment(m_attachment string) MessagesSendRequest {
	m["attachment"] = m_attachment
	return m
}

func (m MessagesSendRequest) WithReplyTo(m_reply_to int) MessagesSendRequest {
	m["reply_to"] = m_reply_to
	return m
}

func (m MessagesSendRequest) WithForwardMessages(m_forward_messages []int) MessagesSendRequest {
	m["forward_messages"] = m_forward_messages
	return m
}

func (m MessagesSendRequest) WithForward(m_forward models.MessagesForward) MessagesSendRequest {
	m["forward"] = m_forward
	return m
}

func (m MessagesSendRequest) WithStickerId(m_sticker_id int) MessagesSendRequest {
	m["sticker_id"] = m_sticker_id
	return m
}

func (m MessagesSendRequest) WithGroupId(m_group_id int) MessagesSendRequest {
	m["group_id"] = m_group_id
	return m
}

func (m MessagesSendRequest) WithKeyboard(m_keyboard models.MessagesKeyboard) MessagesSendRequest {
	m["keyboard"] = m_keyboard
	return m
}

func (m MessagesSendRequest) WithTemplate(m_template string) MessagesSendRequest {
	m["template"] = m_template
	return m
}

func (m MessagesSendRequest) WithPayload(m_payload string) MessagesSendRequest {
	m["payload"] = m_payload
	return m
}

func (m MessagesSendRequest) WithContentSource(m_content_source string) MessagesSendRequest {
	m["content_source"] = m_content_source
	return m
}

func (m MessagesSendRequest) WithDontParseLinks(m_dont_parse_links bool) MessagesSendRequest {
	m["dont_parse_links"] = m_dont_parse_links
	return m
}

func (m MessagesSendRequest) WithDisableMentions(m_disable_mentions bool) MessagesSendRequest {
	m["disable_mentions"] = m_disable_mentions
	return m
}

func (m MessagesSendRequest) WithIntent(m_intent string) MessagesSendRequest {
	m["intent"] = m_intent
	return m
}

func (m MessagesSendRequest) WithSubscribeId(m_subscribe_id int) MessagesSendRequest {
	m["subscribe_id"] = m_subscribe_id
	return m
}

func (m MessagesSendRequest) Params() api.Params {
	return api.Params(m)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_MessagesUserBlocked, Error_MessagesDenySend, Error_MessagesPrivacy, Error_MessagesTooLongMessage, Error_MessagesTooLongForwards, Error_MessagesCantFwd, Error_MessagesChatUserNoAccess, Error_MessagesKeyboardInvalid, Error_MessagesChatBotFeature, Error_MessagesContactNotFound, Error_MessagesTooManyPosts, Error_MessagesIntentCantUse, Error_MessagesIntentLimitOverflow, Error_MessagesChatUnsupported, Error_MessagesChatDisabled, Error_MessagesChatNotAdmin, Error_MessagesPeerBlockedReasonByTime, Error_NotFound, Error_MessagesUserNotDon, Error_MessagesMessageCannotBeForwarded ]
//
// https://dev.vk.com/method/messages.send
func (m *Messages) MessagesSend(params ...api.MethodParams) (resp models.MessagesSendResponse, err error) {
	req := api.NewRequest[models.MessagesSendResponse](m.api)

	res, err := req.Execute("messages.send", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MessagesSendUserIDs Sends a message.
type MessagesSendUserIDsRequest api.Params

func NewMessagesSendUserIDsRequest() MessagesSendUserIDsRequest {
	params := make(MessagesSendUserIDsRequest, 25)
	return params
}

func (m MessagesSendUserIDsRequest) WithUserId(m_user_id int) MessagesSendUserIDsRequest {
	m["user_id"] = m_user_id
	return m
}

func (m MessagesSendUserIDsRequest) WithRandomId(m_random_id int) MessagesSendUserIDsRequest {
	m["random_id"] = m_random_id
	return m
}

func (m MessagesSendUserIDsRequest) WithPeerId(m_peer_id int) MessagesSendUserIDsRequest {
	m["peer_id"] = m_peer_id
	return m
}

func (m MessagesSendUserIDsRequest) WithPeerIds(m_peer_ids []int) MessagesSendUserIDsRequest {
	m["peer_ids"] = m_peer_ids
	return m
}

func (m MessagesSendUserIDsRequest) WithDomain(m_domain string) MessagesSendUserIDsRequest {
	m["domain"] = m_domain
	return m
}

func (m MessagesSendUserIDsRequest) WithChatId(m_chat_id int) MessagesSendUserIDsRequest {
	m["chat_id"] = m_chat_id
	return m
}

func (m MessagesSendUserIDsRequest) WithUserIds(m_user_ids []int) MessagesSendUserIDsRequest {
	m["user_ids"] = m_user_ids
	return m
}

func (m MessagesSendUserIDsRequest) WithMessage(m_message string) MessagesSendUserIDsRequest {
	m["message"] = m_message
	return m
}

func (m MessagesSendUserIDsRequest) WithLat(m_lat float64) MessagesSendUserIDsRequest {
	m["lat"] = m_lat
	return m
}

func (m MessagesSendUserIDsRequest) WithLong(m_long float64) MessagesSendUserIDsRequest {
	m["long"] = m_long
	return m
}

func (m MessagesSendUserIDsRequest) WithAttachment(m_attachment string) MessagesSendUserIDsRequest {
	m["attachment"] = m_attachment
	return m
}

func (m MessagesSendUserIDsRequest) WithReplyTo(m_reply_to int) MessagesSendUserIDsRequest {
	m["reply_to"] = m_reply_to
	return m
}

func (m MessagesSendUserIDsRequest) WithForwardMessages(m_forward_messages []int) MessagesSendUserIDsRequest {
	m["forward_messages"] = m_forward_messages
	return m
}

func (m MessagesSendUserIDsRequest) WithForward(m_forward models.MessagesForward) MessagesSendUserIDsRequest {
	m["forward"] = m_forward
	return m
}

func (m MessagesSendUserIDsRequest) WithStickerId(m_sticker_id int) MessagesSendUserIDsRequest {
	m["sticker_id"] = m_sticker_id
	return m
}

func (m MessagesSendUserIDsRequest) WithGroupId(m_group_id int) MessagesSendUserIDsRequest {
	m["group_id"] = m_group_id
	return m
}

func (m MessagesSendUserIDsRequest) WithKeyboard(m_keyboard models.MessagesKeyboard) MessagesSendUserIDsRequest {
	m["keyboard"] = m_keyboard
	return m
}

func (m MessagesSendUserIDsRequest) WithTemplate(m_template string) MessagesSendUserIDsRequest {
	m["template"] = m_template
	return m
}

func (m MessagesSendUserIDsRequest) WithPayload(m_payload string) MessagesSendUserIDsRequest {
	m["payload"] = m_payload
	return m
}

func (m MessagesSendUserIDsRequest) WithContentSource(m_content_source string) MessagesSendUserIDsRequest {
	m["content_source"] = m_content_source
	return m
}

func (m MessagesSendUserIDsRequest) WithDontParseLinks(m_dont_parse_links bool) MessagesSendUserIDsRequest {
	m["dont_parse_links"] = m_dont_parse_links
	return m
}

func (m MessagesSendUserIDsRequest) WithDisableMentions(m_disable_mentions bool) MessagesSendUserIDsRequest {
	m["disable_mentions"] = m_disable_mentions
	return m
}

func (m MessagesSendUserIDsRequest) WithIntent(m_intent string) MessagesSendUserIDsRequest {
	m["intent"] = m_intent
	return m
}

func (m MessagesSendUserIDsRequest) WithSubscribeId(m_subscribe_id int) MessagesSendUserIDsRequest {
	m["subscribe_id"] = m_subscribe_id
	return m
}

func (m MessagesSendUserIDsRequest) Params() api.Params {
	return api.Params(m)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_MessagesUserBlocked, Error_MessagesDenySend, Error_MessagesPrivacy, Error_MessagesTooLongMessage, Error_MessagesTooLongForwards, Error_MessagesCantFwd, Error_MessagesChatUserNoAccess, Error_MessagesKeyboardInvalid, Error_MessagesChatBotFeature, Error_MessagesContactNotFound, Error_MessagesTooManyPosts, Error_MessagesIntentCantUse, Error_MessagesIntentLimitOverflow, Error_MessagesChatUnsupported, Error_MessagesChatDisabled, Error_MessagesChatNotAdmin, Error_MessagesPeerBlockedReasonByTime, Error_NotFound, Error_MessagesUserNotDon, Error_MessagesMessageCannotBeForwarded ]
//
// https://dev.vk.com/method/messages.send
func (m *Messages) MessagesSendUserIDs(params ...api.MethodParams) (resp models.MessagesSendUserIdsResponse, err error) {
	req := api.NewRequest[models.MessagesSendUserIdsResponse](m.api)

	res, err := req.Execute("messages.send", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MessagesSendMessageEventAnswer ...
type MessagesSendMessageEventAnswerRequest api.Params

func NewMessagesSendMessageEventAnswerRequest() MessagesSendMessageEventAnswerRequest {
	params := make(MessagesSendMessageEventAnswerRequest, 5)
	return params
}

func (m MessagesSendMessageEventAnswerRequest) WithEventId(m_event_id string) MessagesSendMessageEventAnswerRequest {
	m["event_id"] = m_event_id
	return m
}

func (m MessagesSendMessageEventAnswerRequest) WithUserId(m_user_id int) MessagesSendMessageEventAnswerRequest {
	m["user_id"] = m_user_id
	return m
}

func (m MessagesSendMessageEventAnswerRequest) WithPeerId(m_peer_id int) MessagesSendMessageEventAnswerRequest {
	m["peer_id"] = m_peer_id
	return m
}

func (m MessagesSendMessageEventAnswerRequest) WithEventData(m_event_data string) MessagesSendMessageEventAnswerRequest {
	m["event_data"] = m_event_data
	return m
}

func (m MessagesSendMessageEventAnswerRequest) Params() api.Params {
	return api.Params(m)
}

// May execute with listed access token types:
//
//	[ group ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/messages.sendMessageEventAnswer
func (m *Messages) MessagesSendMessageEventAnswer(params ...api.MethodParams) (resp models.BaseOkResponse, err error) {
	req := api.NewRequest[models.BaseOkResponse](m.api)

	res, err := req.Execute("messages.sendMessageEventAnswer", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MessagesSetActivity Changes the status of a user as typing in a conversation.
type MessagesSetActivityRequest api.Params

func NewMessagesSetActivityRequest() MessagesSetActivityRequest {
	params := make(MessagesSetActivityRequest, 5)
	return params
}

func (m MessagesSetActivityRequest) WithUserId(m_user_id int) MessagesSetActivityRequest {
	m["user_id"] = m_user_id
	return m
}

func (m MessagesSetActivityRequest) WithType(m_type string) MessagesSetActivityRequest {
	m["type"] = m_type
	return m
}

func (m MessagesSetActivityRequest) WithPeerId(m_peer_id int) MessagesSetActivityRequest {
	m["peer_id"] = m_peer_id
	return m
}

func (m MessagesSetActivityRequest) WithGroupId(m_group_id int) MessagesSetActivityRequest {
	m["group_id"] = m_group_id
	return m
}

func (m MessagesSetActivityRequest) Params() api.Params {
	return api.Params(m)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_MessagesGroupPeerAccess, Error_MessagesChatUserNoAccess, Error_MessagesContactNotFound ]
//
// https://dev.vk.com/method/messages.setActivity
func (m *Messages) MessagesSetActivity(params ...api.MethodParams) (resp models.BaseOkResponse, err error) {
	req := api.NewRequest[models.BaseOkResponse](m.api)

	res, err := req.Execute("messages.setActivity", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MessagesSetChatPhoto Sets a previously-uploaded picture as the cover picture of a chat.
type MessagesSetChatPhotoRequest api.Params

func NewMessagesSetChatPhotoRequest() MessagesSetChatPhotoRequest {
	params := make(MessagesSetChatPhotoRequest, 2)
	return params
}

func (m MessagesSetChatPhotoRequest) WithFile(m_file string) MessagesSetChatPhotoRequest {
	m["file"] = m_file
	return m
}

func (m MessagesSetChatPhotoRequest) Params() api.Params {
	return api.Params(m)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_Upload, Error_PhotoChanged, Error_MessagesChatNotAdmin ]
//
// https://dev.vk.com/method/messages.setChatPhoto
func (m *Messages) MessagesSetChatPhoto(params ...api.MethodParams) (resp models.MessagesSetChatPhotoResponse, err error) {
	req := api.NewRequest[models.MessagesSetChatPhotoResponse](m.api)

	res, err := req.Execute("messages.setChatPhoto", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// MessagesUnpin ...
type MessagesUnpinRequest api.Params

func NewMessagesUnpinRequest() MessagesUnpinRequest {
	params := make(MessagesUnpinRequest, 3)
	return params
}

func (m MessagesUnpinRequest) WithPeerId(m_peer_id int) MessagesUnpinRequest {
	m["peer_id"] = m_peer_id
	return m
}

func (m MessagesUnpinRequest) WithGroupId(m_group_id int) MessagesUnpinRequest {
	m["group_id"] = m_group_id
	return m
}

func (m MessagesUnpinRequest) Params() api.Params {
	return api.Params(m)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_MessagesChatNotAdmin ]
//
// https://dev.vk.com/method/messages.unpin
func (m *Messages) MessagesUnpin(params ...api.MethodParams) (resp models.BaseOkResponse, err error) {
	req := api.NewRequest[models.BaseOkResponse](m.api)

	res, err := req.Execute("messages.unpin", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}
