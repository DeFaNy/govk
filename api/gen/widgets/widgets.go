// Code generated by https://github.com/defany/govk. DO NOT EDIT.

package requests

import (
	"github.com/defany/govk/api"
	"github.com/defany/govk/api/gen/models"
)

type Widgets struct {
	api *api.API
}

func NewWidgets(api *api.API) *Widgets {
	return &Widgets{
		api: api,
	}
}

// WidgetsGetComments Gets a list of comments for the page added through the [vk.com/dev/Comments|Comments widget].
type WidgetsGetCommentsRequest api.Params

func NewWidgetsGetCommentsRequest() WidgetsGetCommentsRequest {
	params := make(WidgetsGetCommentsRequest, 8)
	return params
}

func (w WidgetsGetCommentsRequest) WithWidgetApiId(w_widget_api_id int) WidgetsGetCommentsRequest {
	w["widget_api_id"] = w_widget_api_id
	return w
}

func (w WidgetsGetCommentsRequest) WithUrl(w_url string) WidgetsGetCommentsRequest {
	w["url"] = w_url
	return w
}

func (w WidgetsGetCommentsRequest) WithPageId(w_page_id string) WidgetsGetCommentsRequest {
	w["page_id"] = w_page_id
	return w
}

func (w WidgetsGetCommentsRequest) WithOrder(w_order string) WidgetsGetCommentsRequest {
	w["order"] = w_order
	return w
}

func (w WidgetsGetCommentsRequest) WithFields(w_fields []models.UsersFields) WidgetsGetCommentsRequest {
	w["fields"] = w_fields
	return w
}

func (w WidgetsGetCommentsRequest) WithOffset(w_offset int) WidgetsGetCommentsRequest {
	w["offset"] = w_offset
	return w
}

func (w WidgetsGetCommentsRequest) WithCount(w_count int) WidgetsGetCommentsRequest {
	w["count"] = w_count
	return w
}

func (w WidgetsGetCommentsRequest) Params() api.Params {
	return api.Params(w)
}

// May execute with listed access token types:
//
//	[ user, service ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/widgets.getComments
func (w *Widgets) WidgetsGetComments(params ...api.MethodParams) (resp models.WidgetsGetCommentsResponse, err error) {
	req := api.NewRequest[models.WidgetsGetCommentsResponse](w.api)

	res, err := req.Execute("widgets.getComments", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// WidgetsGetPages Gets a list of application/site pages where the [vk.com/dev/Comments|Comments widget] or [vk.com/dev/Like|Like widget] is installed.
type WidgetsGetPagesRequest api.Params

func NewWidgetsGetPagesRequest() WidgetsGetPagesRequest {
	params := make(WidgetsGetPagesRequest, 6)
	return params
}

func (w WidgetsGetPagesRequest) WithWidgetApiId(w_widget_api_id int) WidgetsGetPagesRequest {
	w["widget_api_id"] = w_widget_api_id
	return w
}

func (w WidgetsGetPagesRequest) WithOrder(w_order string) WidgetsGetPagesRequest {
	w["order"] = w_order
	return w
}

func (w WidgetsGetPagesRequest) WithPeriod(w_period string) WidgetsGetPagesRequest {
	w["period"] = w_period
	return w
}

func (w WidgetsGetPagesRequest) WithOffset(w_offset int) WidgetsGetPagesRequest {
	w["offset"] = w_offset
	return w
}

func (w WidgetsGetPagesRequest) WithCount(w_count int) WidgetsGetPagesRequest {
	w["count"] = w_count
	return w
}

func (w WidgetsGetPagesRequest) Params() api.Params {
	return api.Params(w)
}

// May execute with listed access token types:
//
//	[ user, service ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/widgets.getPages
func (w *Widgets) WidgetsGetPages(params ...api.MethodParams) (resp models.WidgetsGetPagesResponse, err error) {
	req := api.NewRequest[models.WidgetsGetPagesResponse](w.api)

	res, err := req.Execute("widgets.getPages", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}
