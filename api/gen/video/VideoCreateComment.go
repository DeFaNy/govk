// Code generated by https://github.com/defany/govk. DO NOT EDIT.

package requests

import (
	"github.com/defany/govk/api"
	"github.com/defany/govk/api/gen/models"
)

// VideoCreateComment Adds a new comment on a video.
type VideoCreateCommentRequest api.Params

func NewVideoCreateCommentRequest() VideoCreateCommentRequest {
	params := make(VideoCreateCommentRequest, 9)
	return params
}

func (v VideoCreateCommentRequest) WithOwnerId(v_owner_id int) VideoCreateCommentRequest{
	v["owner_id"] = v_owner_id
	return v
}

func (v VideoCreateCommentRequest) WithVideoId(v_video_id int) VideoCreateCommentRequest{
	v["video_id"] = v_video_id
	return v
}

func (v VideoCreateCommentRequest) WithMessage(v_message string) VideoCreateCommentRequest{
	v["message"] = v_message
	return v
}

func (v VideoCreateCommentRequest) WithAttachments(v_attachments []string) VideoCreateCommentRequest{
	v["attachments"] = v_attachments
	return v
}

func (v VideoCreateCommentRequest) WithFromGroup(v_from_group bool) VideoCreateCommentRequest{
	v["from_group"] = v_from_group
	return v
}

func (v VideoCreateCommentRequest) WithReplyToComment(v_reply_to_comment int) VideoCreateCommentRequest{
	v["reply_to_comment"] = v_reply_to_comment
	return v
}

func (v VideoCreateCommentRequest) WithStickerId(v_sticker_id int) VideoCreateCommentRequest{
	v["sticker_id"] = v_sticker_id
	return v
}

func (v VideoCreateCommentRequest) WithGuid(v_guid string) VideoCreateCommentRequest{
	v["guid"] = v_guid
	return v
}

func (v VideoCreateCommentRequest) Params() api.Params {
	return api.Params(v)
}

// May execute with listed access token types:
//    [ user ]
// When executing method, may return one of global or with listed codes API errors:
//    [ Error_VideoCommentsClosed ]
//
// https://dev.vk.com/method/video.createComment
func (v *Video) VideoCreateComment(params ...api.MethodParams) (resp models.VideoCreateCommentResponse, err error) {
	req := api.NewRequest[models.VideoCreateCommentResponse](v.api)

	res, err := req.Execute("video.createComment", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

