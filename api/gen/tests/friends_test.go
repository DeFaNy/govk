// Code generated by https://github.com/defany/govk. DO NOT EDIT.

package tests

import (
	"github.com/defany/govk/api/gen/models"
	"github.com/defany/govk/api/gen/friends"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"github.com/defany/govk/vk"
	"testing"
	"encoding/json"
)

func fillRandomlyFriendsAddRequest(r *requests.FriendsAddRequest) {
	r.WithUserId(randInt())
	r.WithText(randString())
	r.WithFollow(randBool())
}

func TestVKFriendsAddSuccess(t *testing.T) {
	params := requests.NewFriendsAddRequest()
	fillRandomlyFriendsAddRequest(&params)
	var expected models.FriendsAddResponse
	fillRandomlyFriendsAddResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "friends.add", params.Params(), expectedJSON))
	resp, err := vk.Api.Friends.FriendsAdd(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyFriendsAddListRequest(r *requests.FriendsAddListRequest) {
	r.WithName(randString())
	lUserIds := randIntn(maxArrayLength + 1)
	r.WithUserIds(randIntArr(lUserIds))
}

func TestVKFriendsAddListSuccess(t *testing.T) {
	params := requests.NewFriendsAddListRequest()
	fillRandomlyFriendsAddListRequest(&params)
	var expected models.FriendsAddListResponse
	fillRandomlyFriendsAddListResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "friends.addList", params.Params(), expectedJSON))
	resp, err := vk.Api.Friends.FriendsAddList(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyFriendsAreFriendsRequest(r *requests.FriendsAreFriendsRequest) {
	lUserIds := randIntn(maxArrayLength + 1)
	r.WithUserIds(randIntArr(lUserIds))
	r.WithNeedSign(randBool())
	r.WithExtended(randBool())
}

func TestVKFriendsAreFriendsSuccess(t *testing.T) {
	params := requests.NewFriendsAreFriendsRequest()
	fillRandomlyFriendsAreFriendsRequest(&params)
	params.WithExtended(false)
	var expected models.FriendsAreFriendsResponse
	fillRandomlyFriendsAreFriendsResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "friends.areFriends", params.Params(), expectedJSON))
	resp, err := vk.Api.Friends.FriendsAreFriends(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func TestVKFriendsAreFriendsExtendedSuccess(t *testing.T) {
	params := requests.NewFriendsAreFriendsRequest()
	fillRandomlyFriendsAreFriendsRequest(&params)
	params.WithExtended(true)
	var expected models.FriendsAreFriendsExtendedResponse
	fillRandomlyFriendsAreFriendsExtendedResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "friends.areFriends", params.Params(), expectedJSON))
	resp, err := vk.Api.Friends.FriendsAreFriendsExtended(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyFriendsDeleteRequest(r *requests.FriendsDeleteRequest) {
	r.WithUserId(randInt())
}

func TestVKFriendsDeleteSuccess(t *testing.T) {
	params := requests.NewFriendsDeleteRequest()
	fillRandomlyFriendsDeleteRequest(&params)
	var expected models.FriendsDeleteResponse
	fillRandomlyFriendsDeleteResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "friends.delete", params.Params(), expectedJSON))
	resp, err := vk.Api.Friends.FriendsDelete(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func TestVKFriendsDeleteAllRequestsSuccess(t *testing.T) {
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "friends.deleteAllRequests", nil, expectedJSON))
	resp, err := vk.Api.Friends.FriendsDeleteAllRequests()
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyFriendsDeleteListRequest(r *requests.FriendsDeleteListRequest) {
	r.WithListId(randInt())
}

func TestVKFriendsDeleteListSuccess(t *testing.T) {
	params := requests.NewFriendsDeleteListRequest()
	fillRandomlyFriendsDeleteListRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "friends.deleteList", params.Params(), expectedJSON))
	resp, err := vk.Api.Friends.FriendsDeleteList(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyFriendsEditRequest(r *requests.FriendsEditRequest) {
	r.WithUserId(randInt())
	lListIds := randIntn(maxArrayLength + 1)
	r.WithListIds(randIntArr(lListIds))
}

func TestVKFriendsEditSuccess(t *testing.T) {
	params := requests.NewFriendsEditRequest()
	fillRandomlyFriendsEditRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "friends.edit", params.Params(), expectedJSON))
	resp, err := vk.Api.Friends.FriendsEdit(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyFriendsEditListRequest(r *requests.FriendsEditListRequest) {
	r.WithName(randString())
	r.WithListId(randInt())
	lUserIds := randIntn(maxArrayLength + 1)
	r.WithUserIds(randIntArr(lUserIds))
	lAddUserIds := randIntn(maxArrayLength + 1)
	r.WithAddUserIds(randIntArr(lAddUserIds))
	lDeleteUserIds := randIntn(maxArrayLength + 1)
	r.WithDeleteUserIds(randIntArr(lDeleteUserIds))
}

func TestVKFriendsEditListSuccess(t *testing.T) {
	params := requests.NewFriendsEditListRequest()
	fillRandomlyFriendsEditListRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "friends.editList", params.Params(), expectedJSON))
	resp, err := vk.Api.Friends.FriendsEditList(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyFriendsGetRequest(r *requests.FriendsGetRequest) {
	r.WithUserId(randInt())
	r.WithOrder(randString())
	r.WithListId(randInt())
	r.WithCount(randInt())
	r.WithOffset(randInt())
	Fields := new([]models.UsersFields)
	lFields := randIntn(maxArrayLength + 1)
	*Fields = make([]models.UsersFields, lFields)
	for i0 := 0; i0 < lFields; i0++ {
		fillRandomlyUsersFields(&(*Fields)[i0])
	}
	r.WithFields(*Fields)
	r.WithNameCase(randString())
	r.WithRef(randString())
}

func TestVKFriendsGetSuccess(t *testing.T) {
	params := requests.NewFriendsGetRequest()
	fillRandomlyFriendsGetRequest(&params)
	var expected models.FriendsGetResponse
	fillRandomlyFriendsGetResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "friends.get", params.Params(), expectedJSON))
	resp, err := vk.Api.Friends.FriendsGet(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func TestVKFriendsGetAppUsersSuccess(t *testing.T) {
	var expected models.FriendsGetAppUsersResponse
	fillRandomlyFriendsGetAppUsersResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "friends.getAppUsers", nil, expectedJSON))
	resp, err := vk.Api.Friends.FriendsGetAppUsers()
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyFriendsGetByPhonesRequest(r *requests.FriendsGetByPhonesRequest) {
	lPhones := randIntn(maxArrayLength + 1)
	r.WithPhones(randStringArr(lPhones))
	Fields := new([]models.UsersFields)
	lFields := randIntn(maxArrayLength + 1)
	*Fields = make([]models.UsersFields, lFields)
	for i0 := 0; i0 < lFields; i0++ {
		fillRandomlyUsersFields(&(*Fields)[i0])
	}
	r.WithFields(*Fields)
}

func TestVKFriendsGetByPhonesSuccess(t *testing.T) {
	params := requests.NewFriendsGetByPhonesRequest()
	fillRandomlyFriendsGetByPhonesRequest(&params)
	var expected models.FriendsGetByPhonesResponse
	fillRandomlyFriendsGetByPhonesResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "friends.getByPhones", params.Params(), expectedJSON))
	resp, err := vk.Api.Friends.FriendsGetByPhones(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyFriendsGetListsRequest(r *requests.FriendsGetListsRequest) {
	r.WithUserId(randInt())
	r.WithReturnSystem(randBool())
}

func TestVKFriendsGetListsSuccess(t *testing.T) {
	params := requests.NewFriendsGetListsRequest()
	fillRandomlyFriendsGetListsRequest(&params)
	var expected models.FriendsGetListsResponse
	fillRandomlyFriendsGetListsResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "friends.getLists", params.Params(), expectedJSON))
	resp, err := vk.Api.Friends.FriendsGetLists(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyFriendsGetMutualRequest(r *requests.FriendsGetMutualRequest) {
	r.WithSourceUid(randInt())
	r.WithTargetUid(randInt())
	lTargetUids := randIntn(maxArrayLength + 1)
	r.WithTargetUids(randIntArr(lTargetUids))
	r.WithOrder(randString())
	r.WithCount(randInt())
	r.WithOffset(randInt())
}

func TestVKFriendsGetMutualSuccess(t *testing.T) {
	params := requests.NewFriendsGetMutualRequest()
	fillRandomlyFriendsGetMutualRequest(&params)
	var expected models.FriendsGetMutualResponse
	fillRandomlyFriendsGetMutualResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "friends.getMutual", params.Params(), expectedJSON))
	resp, err := vk.Api.Friends.FriendsGetMutual(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyFriendsGetMutualTargetUIDsRequest(r *requests.FriendsGetMutualTargetUIDsRequest) {
	r.WithSourceUid(randInt())
	r.WithTargetUid(randInt())
	lTargetUids := randIntn(maxArrayLength + 1)
	r.WithTargetUids(randIntArr(lTargetUids))
	r.WithOrder(randString())
	r.WithCount(randInt())
	r.WithOffset(randInt())
}

func TestVKFriendsGetMutualTargetUIDsSuccess(t *testing.T) {
	params := requests.NewFriendsGetMutualTargetUIDsRequest()
	fillRandomlyFriendsGetMutualTargetUIDsRequest(&params)
	var expected models.FriendsGetMutualTargetUidsResponse
	fillRandomlyFriendsGetMutualTargetUidsResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "friends.getMutual", params.Params(), expectedJSON))
	resp, err := vk.Api.Friends.FriendsGetMutualTargetUIDs(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyFriendsGetOnlineRequest(r *requests.FriendsGetOnlineRequest) {
	r.WithUserId(randInt())
	r.WithListId(randInt())
	r.WithOnlineMobile(randBool())
	r.WithOrder(randString())
	r.WithCount(randInt())
	r.WithOffset(randInt())
}

func TestVKFriendsGetOnlineSuccess(t *testing.T) {
	params := requests.NewFriendsGetOnlineRequest()
	fillRandomlyFriendsGetOnlineRequest(&params)
	params.WithOnlineMobile(false)
	var expected models.FriendsGetOnlineResponse
	fillRandomlyFriendsGetOnlineResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "friends.getOnline", params.Params(), expectedJSON))
	resp, err := vk.Api.Friends.FriendsGetOnline(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func TestVKFriendsGetOnlineOnlineMobileSuccess(t *testing.T) {
	params := requests.NewFriendsGetOnlineRequest()
	fillRandomlyFriendsGetOnlineRequest(&params)
	params.WithOnlineMobile(true)
	var expected models.FriendsGetOnlineOnlineMobileResponse
	fillRandomlyFriendsGetOnlineOnlineMobileResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "friends.getOnline", params.Params(), expectedJSON))
	resp, err := vk.Api.Friends.FriendsGetOnlineOnlineMobile(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyFriendsGetRecentRequest(r *requests.FriendsGetRecentRequest) {
	r.WithCount(randInt())
}

func TestVKFriendsGetRecentSuccess(t *testing.T) {
	params := requests.NewFriendsGetRecentRequest()
	fillRandomlyFriendsGetRecentRequest(&params)
	var expected models.FriendsGetRecentResponse
	fillRandomlyFriendsGetRecentResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "friends.getRecent", params.Params(), expectedJSON))
	resp, err := vk.Api.Friends.FriendsGetRecent(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyFriendsGetRequestsRequest(r *requests.FriendsGetRequestsRequest) {
	r.WithOffset(randInt())
	r.WithCount(randInt())
	r.WithExtended(randBool())
	r.WithNeedMutual(randBool())
	r.WithOut(randBool())
	r.WithSort(randInt())
	r.WithNeedViewed(randBool())
	r.WithSuggested(randBool())
	r.WithRef(randString())
	Fields := new([]models.UsersFields)
	lFields := randIntn(maxArrayLength + 1)
	*Fields = make([]models.UsersFields, lFields)
	for i0 := 0; i0 < lFields; i0++ {
		fillRandomlyUsersFields(&(*Fields)[i0])
	}
	r.WithFields(*Fields)
}

func TestVKFriendsGetRequestsSuccess(t *testing.T) {
	params := requests.NewFriendsGetRequestsRequest()
	fillRandomlyFriendsGetRequestsRequest(&params)
	params.WithExtended(false)
	var expected models.FriendsGetRequestsResponse
	fillRandomlyFriendsGetRequestsResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "friends.getRequests", params.Params(), expectedJSON))
	resp, err := vk.Api.Friends.FriendsGetRequests(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func TestVKFriendsGetRequestsExtendedSuccess(t *testing.T) {
	params := requests.NewFriendsGetRequestsRequest()
	fillRandomlyFriendsGetRequestsRequest(&params)
	params.WithExtended(true)
	var expected models.FriendsGetRequestsExtendedResponse
	fillRandomlyFriendsGetRequestsExtendedResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "friends.getRequests", params.Params(), expectedJSON))
	resp, err := vk.Api.Friends.FriendsGetRequestsExtended(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyFriendsGetSuggestionsRequest(r *requests.FriendsGetSuggestionsRequest) {
	lFilter := randIntn(maxArrayLength + 1)
	r.WithFilter(randStringArr(lFilter))
	r.WithCount(randInt())
	r.WithOffset(randInt())
	Fields := new([]models.UsersFields)
	lFields := randIntn(maxArrayLength + 1)
	*Fields = make([]models.UsersFields, lFields)
	for i0 := 0; i0 < lFields; i0++ {
		fillRandomlyUsersFields(&(*Fields)[i0])
	}
	r.WithFields(*Fields)
	r.WithNameCase(randString())
}

func TestVKFriendsGetSuggestionsSuccess(t *testing.T) {
	params := requests.NewFriendsGetSuggestionsRequest()
	fillRandomlyFriendsGetSuggestionsRequest(&params)
	var expected models.FriendsGetSuggestionsResponse
	fillRandomlyFriendsGetSuggestionsResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "friends.getSuggestions", params.Params(), expectedJSON))
	resp, err := vk.Api.Friends.FriendsGetSuggestions(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyFriendsSearchRequest(r *requests.FriendsSearchRequest) {
	r.WithUserId(randInt())
	r.WithQ(randString())
	Fields := new([]models.UsersFields)
	lFields := randIntn(maxArrayLength + 1)
	*Fields = make([]models.UsersFields, lFields)
	for i0 := 0; i0 < lFields; i0++ {
		fillRandomlyUsersFields(&(*Fields)[i0])
	}
	r.WithFields(*Fields)
	r.WithNameCase(randString())
	r.WithOffset(randInt())
	r.WithCount(randInt())
}

func TestVKFriendsSearchSuccess(t *testing.T) {
	params := requests.NewFriendsSearchRequest()
	fillRandomlyFriendsSearchRequest(&params)
	var expected models.FriendsSearchResponse
	fillRandomlyFriendsSearchResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "friends.search", params.Params(), expectedJSON))
	resp, err := vk.Api.Friends.FriendsSearch(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

