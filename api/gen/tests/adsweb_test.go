// Code generated by https://github.com/defany/govk. DO NOT EDIT.

package tests

import (
	"encoding/json"
	"github.com/defany/govk/api/gen/adsweb"
	"github.com/defany/govk/api/gen/models"
	"github.com/defany/govk/pkg/random"
	"github.com/defany/govk/vk"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func fillRandomlyAdswebGetAdCategoriesRequest(r *requests.AdswebGetAdCategoriesRequest) {
	r.WithOfficeId(random.Int())
}

func TestVKAdswebGetAdCategoriesSuccess(t *testing.T) {
	params := requests.NewAdswebGetAdCategoriesRequest()
	fillRandomlyAdswebGetAdCategoriesRequest(&params)
	var expected models.AdswebGetAdCategoriesResponse
	fillRandomlyAdswebGetAdCategoriesResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.String()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "adsweb.getAdCategories", params.Params(), expectedJSON))
	resp, err := vk.Api.Adsweb.AdswebGetAdCategories(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func TestVKAdswebGetAdUnitCodeSuccess(t *testing.T) {
	var expected models.AdswebGetAdUnitCodeResponse
	fillRandomlyAdswebGetAdUnitCodeResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.String()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "adsweb.getAdUnitCode", nil, expectedJSON))
	resp, err := vk.Api.Adsweb.AdswebGetAdUnitCode()
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyAdswebGetAdUnitsRequest(r *requests.AdswebGetAdUnitsRequest) {
	r.WithOfficeId(random.Int())
	r.WithSitesIds(random.String())
	r.WithAdUnitsIds(random.String())
	r.WithFields(random.String())
	r.WithLimit(random.Int())
	r.WithOffset(random.Int())
}

func TestVKAdswebGetAdUnitsSuccess(t *testing.T) {
	params := requests.NewAdswebGetAdUnitsRequest()
	fillRandomlyAdswebGetAdUnitsRequest(&params)
	var expected models.AdswebGetAdUnitsResponse
	fillRandomlyAdswebGetAdUnitsResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.String()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "adsweb.getAdUnits", params.Params(), expectedJSON))
	resp, err := vk.Api.Adsweb.AdswebGetAdUnits(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyAdswebGetFraudHistoryRequest(r *requests.AdswebGetFraudHistoryRequest) {
	r.WithOfficeId(random.Int())
	r.WithSitesIds(random.String())
	r.WithLimit(random.Int())
	r.WithOffset(random.Int())
}

func TestVKAdswebGetFraudHistorySuccess(t *testing.T) {
	params := requests.NewAdswebGetFraudHistoryRequest()
	fillRandomlyAdswebGetFraudHistoryRequest(&params)
	var expected models.AdswebGetFraudHistoryResponse
	fillRandomlyAdswebGetFraudHistoryResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.String()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "adsweb.getFraudHistory", params.Params(), expectedJSON))
	resp, err := vk.Api.Adsweb.AdswebGetFraudHistory(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyAdswebGetSitesRequest(r *requests.AdswebGetSitesRequest) {
	r.WithOfficeId(random.Int())
	r.WithSitesIds(random.String())
	r.WithFields(random.String())
	r.WithLimit(random.Int())
	r.WithOffset(random.Int())
}

func TestVKAdswebGetSitesSuccess(t *testing.T) {
	params := requests.NewAdswebGetSitesRequest()
	fillRandomlyAdswebGetSitesRequest(&params)
	var expected models.AdswebGetSitesResponse
	fillRandomlyAdswebGetSitesResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.String()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "adsweb.getSites", params.Params(), expectedJSON))
	resp, err := vk.Api.Adsweb.AdswebGetSites(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyAdswebGetStatisticsRequest(r *requests.AdswebGetStatisticsRequest) {
	r.WithOfficeId(random.Int())
	r.WithIdsType(random.String())
	r.WithIds(random.String())
	r.WithPeriod(random.String())
	r.WithDateFrom(random.String())
	r.WithDateTo(random.String())
	r.WithFields(random.String())
	r.WithLimit(random.Int())
	r.WithPageId(random.String())
}

func TestVKAdswebGetStatisticsSuccess(t *testing.T) {
	params := requests.NewAdswebGetStatisticsRequest()
	fillRandomlyAdswebGetStatisticsRequest(&params)
	var expected models.AdswebGetStatisticsResponse
	fillRandomlyAdswebGetStatisticsResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.String()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "adsweb.getStatistics", params.Params(), expectedJSON))
	resp, err := vk.Api.Adsweb.AdswebGetStatistics(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}
