// Code generated by https://github.com/defany/govk. DO NOT EDIT.

package tests

import (
	"encoding/json"
	"github.com/defany/govk/api/gen/messages"
	"github.com/defany/govk/api/gen/models"
	"github.com/defany/govk/pkg/random"
	"github.com/defany/govk/vk"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func fillRandomlyMessagesAddChatUserRequest(r *requests.MessagesAddChatUserRequest) {
	r.WithChatId(random.RandInt())
	r.WithUserId(random.RandInt())
	r.WithVisibleMessagesCount(random.RandInt())
}

func TestVKMessagesAddChatUserSuccess(t *testing.T) {
	params := requests.NewMessagesAddChatUserRequest()
	fillRandomlyMessagesAddChatUserRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "messages.addChatUser", params.Params(), expectedJSON))
	resp, err := vk.Api.Messages.MessagesAddChatUser(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyMessagesAllowMessagesFromGroupRequest(r *requests.MessagesAllowMessagesFromGroupRequest) {
	r.WithGroupId(random.RandInt())
	r.WithKey(random.RandString())
}

func TestVKMessagesAllowMessagesFromGroupSuccess(t *testing.T) {
	params := requests.NewMessagesAllowMessagesFromGroupRequest()
	fillRandomlyMessagesAllowMessagesFromGroupRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "messages.allowMessagesFromGroup", params.Params(), expectedJSON))
	resp, err := vk.Api.Messages.MessagesAllowMessagesFromGroup(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyMessagesCreateChatRequest(r *requests.MessagesCreateChatRequest) {
	lUserIds := random.RandIntn(random.MaxArrayLength + 1)
	r.WithUserIds(random.RandIntArr(lUserIds))
	r.WithTitle(random.RandString())
	r.WithGroupId(random.RandInt())
}

func TestVKMessagesCreateChatSuccess(t *testing.T) {
	params := requests.NewMessagesCreateChatRequest()
	fillRandomlyMessagesCreateChatRequest(&params)
	var expected models.MessagesCreateChatResponse
	fillRandomlyMessagesCreateChatResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "messages.createChat", params.Params(), expectedJSON))
	resp, err := vk.Api.Messages.MessagesCreateChat(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyMessagesDeleteRequest(r *requests.MessagesDeleteRequest) {
	lMessageIds := random.RandIntn(random.MaxArrayLength + 1)
	r.WithMessageIds(random.RandIntArr(lMessageIds))
	r.WithSpam(random.RandBool())
	r.WithGroupId(random.RandInt())
	r.WithDeleteForAll(random.RandBool())
	r.WithPeerId(random.RandInt())
	lCmids := random.RandIntn(random.MaxArrayLength + 1)
	r.WithCmids(random.RandIntArr(lCmids))
}

func TestVKMessagesDeleteSuccess(t *testing.T) {
	params := requests.NewMessagesDeleteRequest()
	fillRandomlyMessagesDeleteRequest(&params)
	var expected models.MessagesDeleteResponse
	fillRandomlyMessagesDeleteResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "messages.delete", params.Params(), expectedJSON))
	resp, err := vk.Api.Messages.MessagesDelete(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyMessagesDeleteChatPhotoRequest(r *requests.MessagesDeleteChatPhotoRequest) {
	r.WithChatId(random.RandInt())
	r.WithGroupId(random.RandInt())
}

func TestVKMessagesDeleteChatPhotoSuccess(t *testing.T) {
	params := requests.NewMessagesDeleteChatPhotoRequest()
	fillRandomlyMessagesDeleteChatPhotoRequest(&params)
	var expected models.MessagesDeleteChatPhotoResponse
	fillRandomlyMessagesDeleteChatPhotoResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "messages.deleteChatPhoto", params.Params(), expectedJSON))
	resp, err := vk.Api.Messages.MessagesDeleteChatPhoto(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyMessagesDeleteConversationRequest(r *requests.MessagesDeleteConversationRequest) {
	r.WithUserId(random.RandInt())
	r.WithPeerId(random.RandInt())
	r.WithGroupId(random.RandInt())
}

func TestVKMessagesDeleteConversationSuccess(t *testing.T) {
	params := requests.NewMessagesDeleteConversationRequest()
	fillRandomlyMessagesDeleteConversationRequest(&params)
	var expected models.MessagesDeleteConversationResponse
	fillRandomlyMessagesDeleteConversationResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "messages.deleteConversation", params.Params(), expectedJSON))
	resp, err := vk.Api.Messages.MessagesDeleteConversation(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyMessagesDenyMessagesFromGroupRequest(r *requests.MessagesDenyMessagesFromGroupRequest) {
	r.WithGroupId(random.RandInt())
}

func TestVKMessagesDenyMessagesFromGroupSuccess(t *testing.T) {
	params := requests.NewMessagesDenyMessagesFromGroupRequest()
	fillRandomlyMessagesDenyMessagesFromGroupRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "messages.denyMessagesFromGroup", params.Params(), expectedJSON))
	resp, err := vk.Api.Messages.MessagesDenyMessagesFromGroup(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyMessagesEditRequest(r *requests.MessagesEditRequest) {
	r.WithPeerId(random.RandInt())
	r.WithMessage(random.RandString())
	r.WithLat(random.RandFloat())
	r.WithLong(random.RandFloat())
	r.WithAttachment(random.RandString())
	r.WithKeepForwardMessages(random.RandBool())
	r.WithKeepSnippets(random.RandBool())
	r.WithGroupId(random.RandInt())
	r.WithDontParseLinks(random.RandBool())
	r.WithDisableMentions(random.RandBool())
	r.WithMessageId(random.RandInt())
	r.WithConversationMessageId(random.RandInt())
	r.WithTemplate(random.RandString())
	r.WithKeyboard(random.RandString())
}

func TestVKMessagesEditSuccess(t *testing.T) {
	params := requests.NewMessagesEditRequest()
	fillRandomlyMessagesEditRequest(&params)
	var expected models.MessagesEditResponse
	fillRandomlyMessagesEditResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "messages.edit", params.Params(), expectedJSON))
	resp, err := vk.Api.Messages.MessagesEdit(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyMessagesEditChatRequest(r *requests.MessagesEditChatRequest) {
	r.WithChatId(random.RandInt())
	r.WithTitle(random.RandString())
}

func TestVKMessagesEditChatSuccess(t *testing.T) {
	params := requests.NewMessagesEditChatRequest()
	fillRandomlyMessagesEditChatRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "messages.editChat", params.Params(), expectedJSON))
	resp, err := vk.Api.Messages.MessagesEditChat(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyMessagesGetByConversationMessageIdRequest(r *requests.MessagesGetByConversationMessageIdRequest) {
	r.WithPeerId(random.RandInt())
	lConversationMessageIds := random.RandIntn(random.MaxArrayLength + 1)
	r.WithConversationMessageIds(random.RandIntArr(lConversationMessageIds))
	r.WithExtended(random.RandBool())
	Fields := new([]models.UsersFields)
	lFields := random.RandIntn(random.MaxArrayLength + 1)
	*Fields = make([]models.UsersFields, lFields)
	for i0 := 0; i0 < lFields; i0++ {
		fillRandomlyUsersFields(&(*Fields)[i0])
	}
	r.WithFields(*Fields)
	r.WithGroupId(random.RandInt())
}

func TestVKMessagesGetByConversationMessageIdSuccess(t *testing.T) {
	params := requests.NewMessagesGetByConversationMessageIdRequest()
	fillRandomlyMessagesGetByConversationMessageIdRequest(&params)
	params.WithExtended(false)
	var expected models.MessagesGetByConversationMessageIdResponse
	fillRandomlyMessagesGetByConversationMessageIdResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "messages.getByConversationMessageId", params.Params(), expectedJSON))
	resp, err := vk.Api.Messages.MessagesGetByConversationMessageId(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func TestVKMessagesGetByConversationMessageIdExtendedSuccess(t *testing.T) {
	params := requests.NewMessagesGetByConversationMessageIdRequest()
	fillRandomlyMessagesGetByConversationMessageIdRequest(&params)
	params.WithExtended(true)
	var expected models.MessagesGetByConversationMessageIdExtendedResponse
	fillRandomlyMessagesGetByConversationMessageIdExtendedResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "messages.getByConversationMessageId", params.Params(), expectedJSON))
	resp, err := vk.Api.Messages.MessagesGetByConversationMessageIdExtended(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyMessagesGetByIdRequest(r *requests.MessagesGetByIdRequest) {
	lMessageIds := random.RandIntn(random.MaxArrayLength + 1)
	r.WithMessageIds(random.RandIntArr(lMessageIds))
	r.WithPreviewLength(random.RandInt())
	r.WithExtended(random.RandBool())
	Fields := new([]models.UsersFields)
	lFields := random.RandIntn(random.MaxArrayLength + 1)
	*Fields = make([]models.UsersFields, lFields)
	for i0 := 0; i0 < lFields; i0++ {
		fillRandomlyUsersFields(&(*Fields)[i0])
	}
	r.WithFields(*Fields)
	r.WithGroupId(random.RandInt())
}

func TestVKMessagesGetByIdSuccess(t *testing.T) {
	params := requests.NewMessagesGetByIdRequest()
	fillRandomlyMessagesGetByIdRequest(&params)
	params.WithExtended(false)
	var expected models.MessagesGetByIdResponse
	fillRandomlyMessagesGetByIdResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "messages.getById", params.Params(), expectedJSON))
	resp, err := vk.Api.Messages.MessagesGetById(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func TestVKMessagesGetByIdExtendedSuccess(t *testing.T) {
	params := requests.NewMessagesGetByIdRequest()
	fillRandomlyMessagesGetByIdRequest(&params)
	params.WithExtended(true)
	var expected models.MessagesGetByIdExtendedResponse
	fillRandomlyMessagesGetByIdExtendedResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "messages.getById", params.Params(), expectedJSON))
	resp, err := vk.Api.Messages.MessagesGetByIdExtended(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyMessagesGetChatPreviewRequest(r *requests.MessagesGetChatPreviewRequest) {
	r.WithPeerId(random.RandInt())
	r.WithLink(random.RandString())
	Fields := new([]models.UsersFields)
	lFields := random.RandIntn(random.MaxArrayLength + 1)
	*Fields = make([]models.UsersFields, lFields)
	for i0 := 0; i0 < lFields; i0++ {
		fillRandomlyUsersFields(&(*Fields)[i0])
	}
	r.WithFields(*Fields)
}

func TestVKMessagesGetChatPreviewSuccess(t *testing.T) {
	params := requests.NewMessagesGetChatPreviewRequest()
	fillRandomlyMessagesGetChatPreviewRequest(&params)
	var expected models.MessagesGetChatPreviewResponse
	fillRandomlyMessagesGetChatPreviewResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "messages.getChatPreview", params.Params(), expectedJSON))
	resp, err := vk.Api.Messages.MessagesGetChatPreview(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyMessagesGetConversationMembersRequest(r *requests.MessagesGetConversationMembersRequest) {
	r.WithPeerId(random.RandInt())
	Fields := new([]models.UsersFields)
	lFields := random.RandIntn(random.MaxArrayLength + 1)
	*Fields = make([]models.UsersFields, lFields)
	for i0 := 0; i0 < lFields; i0++ {
		fillRandomlyUsersFields(&(*Fields)[i0])
	}
	r.WithFields(*Fields)
	r.WithGroupId(random.RandInt())
}

func TestVKMessagesGetConversationMembersSuccess(t *testing.T) {
	params := requests.NewMessagesGetConversationMembersRequest()
	fillRandomlyMessagesGetConversationMembersRequest(&params)
	var expected models.MessagesGetConversationMembersResponse
	fillRandomlyMessagesGetConversationMembersResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "messages.getConversationMembers", params.Params(), expectedJSON))
	resp, err := vk.Api.Messages.MessagesGetConversationMembers(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyMessagesGetConversationsRequest(r *requests.MessagesGetConversationsRequest) {
	r.WithOffset(random.RandInt())
	r.WithCount(random.RandInt())
	r.WithFilter(random.RandString())
	r.WithExtended(random.RandBool())
	r.WithStartMessageId(random.RandInt())
	Fields := new([]models.BaseUserGroupFields)
	lFields := random.RandIntn(random.MaxArrayLength + 1)
	*Fields = make([]models.BaseUserGroupFields, lFields)
	for i0 := 0; i0 < lFields; i0++ {
		fillRandomlyBaseUserGroupFields(&(*Fields)[i0])
	}
	r.WithFields(*Fields)
	r.WithGroupId(random.RandInt())
}

func TestVKMessagesGetConversationsSuccess(t *testing.T) {
	params := requests.NewMessagesGetConversationsRequest()
	fillRandomlyMessagesGetConversationsRequest(&params)
	var expected models.MessagesGetConversationsResponse
	fillRandomlyMessagesGetConversationsResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "messages.getConversations", params.Params(), expectedJSON))
	resp, err := vk.Api.Messages.MessagesGetConversations(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyMessagesGetConversationsByIdRequest(r *requests.MessagesGetConversationsByIdRequest) {
	lPeerIds := random.RandIntn(random.MaxArrayLength + 1)
	r.WithPeerIds(random.RandIntArr(lPeerIds))
	r.WithExtended(random.RandBool())
	Fields := new([]models.BaseUserGroupFields)
	lFields := random.RandIntn(random.MaxArrayLength + 1)
	*Fields = make([]models.BaseUserGroupFields, lFields)
	for i0 := 0; i0 < lFields; i0++ {
		fillRandomlyBaseUserGroupFields(&(*Fields)[i0])
	}
	r.WithFields(*Fields)
	r.WithGroupId(random.RandInt())
}

func TestVKMessagesGetConversationsByIdSuccess(t *testing.T) {
	params := requests.NewMessagesGetConversationsByIdRequest()
	fillRandomlyMessagesGetConversationsByIdRequest(&params)
	params.WithExtended(false)
	var expected models.MessagesGetConversationsByIdResponse
	fillRandomlyMessagesGetConversationsByIdResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "messages.getConversationsById", params.Params(), expectedJSON))
	resp, err := vk.Api.Messages.MessagesGetConversationsById(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func TestVKMessagesGetConversationsByIdExtendedSuccess(t *testing.T) {
	params := requests.NewMessagesGetConversationsByIdRequest()
	fillRandomlyMessagesGetConversationsByIdRequest(&params)
	params.WithExtended(true)
	var expected models.MessagesGetConversationsByIdExtendedResponse
	fillRandomlyMessagesGetConversationsByIdExtendedResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "messages.getConversationsById", params.Params(), expectedJSON))
	resp, err := vk.Api.Messages.MessagesGetConversationsByIdExtended(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyMessagesGetHistoryRequest(r *requests.MessagesGetHistoryRequest) {
	r.WithOffset(random.RandInt())
	r.WithCount(random.RandInt())
	r.WithUserId(random.RandInt())
	r.WithPeerId(random.RandInt())
	r.WithStartMessageId(random.RandInt())
	r.WithRev(random.RandInt())
	r.WithExtended(random.RandBool())
	Fields := new([]models.UsersFields)
	lFields := random.RandIntn(random.MaxArrayLength + 1)
	*Fields = make([]models.UsersFields, lFields)
	for i0 := 0; i0 < lFields; i0++ {
		fillRandomlyUsersFields(&(*Fields)[i0])
	}
	r.WithFields(*Fields)
	r.WithGroupId(random.RandInt())
}

func TestVKMessagesGetHistorySuccess(t *testing.T) {
	params := requests.NewMessagesGetHistoryRequest()
	fillRandomlyMessagesGetHistoryRequest(&params)
	params.WithExtended(false)
	var expected models.MessagesGetHistoryResponse
	fillRandomlyMessagesGetHistoryResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "messages.getHistory", params.Params(), expectedJSON))
	resp, err := vk.Api.Messages.MessagesGetHistory(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func TestVKMessagesGetHistoryExtendedSuccess(t *testing.T) {
	params := requests.NewMessagesGetHistoryRequest()
	fillRandomlyMessagesGetHistoryRequest(&params)
	params.WithExtended(true)
	var expected models.MessagesGetHistoryExtendedResponse
	fillRandomlyMessagesGetHistoryExtendedResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "messages.getHistory", params.Params(), expectedJSON))
	resp, err := vk.Api.Messages.MessagesGetHistoryExtended(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyMessagesGetHistoryAttachmentsRequest(r *requests.MessagesGetHistoryAttachmentsRequest) {
	r.WithPeerId(random.RandInt())
	r.WithMediaType(random.RandString())
	r.WithStartFrom(random.RandString())
	r.WithCount(random.RandInt())
	r.WithPhotoSizes(random.RandBool())
	Fields := new([]models.UsersFields)
	lFields := random.RandIntn(random.MaxArrayLength + 1)
	*Fields = make([]models.UsersFields, lFields)
	for i0 := 0; i0 < lFields; i0++ {
		fillRandomlyUsersFields(&(*Fields)[i0])
	}
	r.WithFields(*Fields)
	r.WithGroupId(random.RandInt())
	r.WithPreserveOrder(random.RandBool())
	r.WithMaxForwardsLevel(random.RandInt())
}

func TestVKMessagesGetHistoryAttachmentsSuccess(t *testing.T) {
	params := requests.NewMessagesGetHistoryAttachmentsRequest()
	fillRandomlyMessagesGetHistoryAttachmentsRequest(&params)
	var expected models.MessagesGetHistoryAttachmentsResponse
	fillRandomlyMessagesGetHistoryAttachmentsResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "messages.getHistoryAttachments", params.Params(), expectedJSON))
	resp, err := vk.Api.Messages.MessagesGetHistoryAttachments(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyMessagesGetImportantMessagesRequest(r *requests.MessagesGetImportantMessagesRequest) {
	r.WithCount(random.RandInt())
	r.WithOffset(random.RandInt())
	r.WithStartMessageId(random.RandInt())
	r.WithPreviewLength(random.RandInt())
	Fields := new([]models.BaseUserGroupFields)
	lFields := random.RandIntn(random.MaxArrayLength + 1)
	*Fields = make([]models.BaseUserGroupFields, lFields)
	for i0 := 0; i0 < lFields; i0++ {
		fillRandomlyBaseUserGroupFields(&(*Fields)[i0])
	}
	r.WithFields(*Fields)
	r.WithExtended(random.RandBool())
	r.WithGroupId(random.RandInt())
}

func TestVKMessagesGetImportantMessagesSuccess(t *testing.T) {
	params := requests.NewMessagesGetImportantMessagesRequest()
	fillRandomlyMessagesGetImportantMessagesRequest(&params)
	params.WithExtended(false)
	var expected models.MessagesGetImportantMessagesResponse
	fillRandomlyMessagesGetImportantMessagesResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "messages.getImportantMessages", params.Params(), expectedJSON))
	resp, err := vk.Api.Messages.MessagesGetImportantMessages(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func TestVKMessagesGetImportantMessagesExtendedSuccess(t *testing.T) {
	params := requests.NewMessagesGetImportantMessagesRequest()
	fillRandomlyMessagesGetImportantMessagesRequest(&params)
	params.WithExtended(true)
	var expected models.MessagesGetImportantMessagesExtendedResponse
	fillRandomlyMessagesGetImportantMessagesExtendedResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "messages.getImportantMessages", params.Params(), expectedJSON))
	resp, err := vk.Api.Messages.MessagesGetImportantMessagesExtended(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyMessagesGetIntentUsersRequest(r *requests.MessagesGetIntentUsersRequest) {
	r.WithIntent(random.RandString())
	r.WithSubscribeId(random.RandInt())
	r.WithOffset(random.RandInt())
	r.WithCount(random.RandInt())
	r.WithExtended(random.RandBool())
	lNameCase := random.RandIntn(random.MaxArrayLength + 1)
	r.WithNameCase(random.RandStringArr(lNameCase))
	lFields := random.RandIntn(random.MaxArrayLength + 1)
	r.WithFields(random.RandStringArr(lFields))
}

func TestVKMessagesGetIntentUsersSuccess(t *testing.T) {
	params := requests.NewMessagesGetIntentUsersRequest()
	fillRandomlyMessagesGetIntentUsersRequest(&params)
	var expected models.MessagesGetIntentUsersResponse
	fillRandomlyMessagesGetIntentUsersResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "messages.getIntentUsers", params.Params(), expectedJSON))
	resp, err := vk.Api.Messages.MessagesGetIntentUsers(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyMessagesGetInviteLinkRequest(r *requests.MessagesGetInviteLinkRequest) {
	r.WithPeerId(random.RandInt())
	r.WithReset(random.RandBool())
	r.WithGroupId(random.RandInt())
}

func TestVKMessagesGetInviteLinkSuccess(t *testing.T) {
	params := requests.NewMessagesGetInviteLinkRequest()
	fillRandomlyMessagesGetInviteLinkRequest(&params)
	var expected models.MessagesGetInviteLinkResponse
	fillRandomlyMessagesGetInviteLinkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "messages.getInviteLink", params.Params(), expectedJSON))
	resp, err := vk.Api.Messages.MessagesGetInviteLink(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyMessagesGetLastActivityRequest(r *requests.MessagesGetLastActivityRequest) {
	r.WithUserId(random.RandInt())
}

func TestVKMessagesGetLastActivitySuccess(t *testing.T) {
	params := requests.NewMessagesGetLastActivityRequest()
	fillRandomlyMessagesGetLastActivityRequest(&params)
	var expected models.MessagesGetLastActivityResponse
	fillRandomlyMessagesGetLastActivityResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "messages.getLastActivity", params.Params(), expectedJSON))
	resp, err := vk.Api.Messages.MessagesGetLastActivity(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyMessagesGetLongPollHistoryRequest(r *requests.MessagesGetLongPollHistoryRequest) {
	r.WithTs(random.RandInt())
	r.WithPts(random.RandInt())
	r.WithPreviewLength(random.RandInt())
	r.WithOnlines(random.RandBool())
	Fields := new([]models.UsersFields)
	lFields := random.RandIntn(random.MaxArrayLength + 1)
	*Fields = make([]models.UsersFields, lFields)
	for i0 := 0; i0 < lFields; i0++ {
		fillRandomlyUsersFields(&(*Fields)[i0])
	}
	r.WithFields(*Fields)
	r.WithEventsLimit(random.RandInt())
	r.WithMsgsLimit(random.RandInt())
	r.WithMaxMsgId(random.RandInt())
	r.WithGroupId(random.RandInt())
	r.WithLpVersion(random.RandInt())
	r.WithLastN(random.RandInt())
	r.WithCredentials(random.RandBool())
	r.WithExtended(random.RandBool())
}

func TestVKMessagesGetLongPollHistorySuccess(t *testing.T) {
	params := requests.NewMessagesGetLongPollHistoryRequest()
	fillRandomlyMessagesGetLongPollHistoryRequest(&params)
	var expected models.MessagesGetLongPollHistoryResponse
	fillRandomlyMessagesGetLongPollHistoryResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "messages.getLongPollHistory", params.Params(), expectedJSON))
	resp, err := vk.Api.Messages.MessagesGetLongPollHistory(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyMessagesGetLongPollServerRequest(r *requests.MessagesGetLongPollServerRequest) {
	r.WithNeedPts(random.RandBool())
	r.WithGroupId(random.RandInt())
	r.WithLpVersion(random.RandInt())
}

func TestVKMessagesGetLongPollServerSuccess(t *testing.T) {
	params := requests.NewMessagesGetLongPollServerRequest()
	fillRandomlyMessagesGetLongPollServerRequest(&params)
	var expected models.MessagesGetLongPollServerResponse
	fillRandomlyMessagesGetLongPollServerResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "messages.getLongPollServer", params.Params(), expectedJSON))
	resp, err := vk.Api.Messages.MessagesGetLongPollServer(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyMessagesIsMessagesFromGroupAllowedRequest(r *requests.MessagesIsMessagesFromGroupAllowedRequest) {
	r.WithGroupId(random.RandInt())
	r.WithUserId(random.RandInt())
}

func TestVKMessagesIsMessagesFromGroupAllowedSuccess(t *testing.T) {
	params := requests.NewMessagesIsMessagesFromGroupAllowedRequest()
	fillRandomlyMessagesIsMessagesFromGroupAllowedRequest(&params)
	var expected models.MessagesIsMessagesFromGroupAllowedResponse
	fillRandomlyMessagesIsMessagesFromGroupAllowedResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "messages.isMessagesFromGroupAllowed", params.Params(), expectedJSON))
	resp, err := vk.Api.Messages.MessagesIsMessagesFromGroupAllowed(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyMessagesJoinChatByInviteLinkRequest(r *requests.MessagesJoinChatByInviteLinkRequest) {
	r.WithLink(random.RandString())
}

func TestVKMessagesJoinChatByInviteLinkSuccess(t *testing.T) {
	params := requests.NewMessagesJoinChatByInviteLinkRequest()
	fillRandomlyMessagesJoinChatByInviteLinkRequest(&params)
	var expected models.MessagesJoinChatByInviteLinkResponse
	fillRandomlyMessagesJoinChatByInviteLinkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "messages.joinChatByInviteLink", params.Params(), expectedJSON))
	resp, err := vk.Api.Messages.MessagesJoinChatByInviteLink(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyMessagesMarkAsAnsweredConversationRequest(r *requests.MessagesMarkAsAnsweredConversationRequest) {
	r.WithPeerId(random.RandInt())
	r.WithAnswered(random.RandBool())
	r.WithGroupId(random.RandInt())
}

func TestVKMessagesMarkAsAnsweredConversationSuccess(t *testing.T) {
	params := requests.NewMessagesMarkAsAnsweredConversationRequest()
	fillRandomlyMessagesMarkAsAnsweredConversationRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "messages.markAsAnsweredConversation", params.Params(), expectedJSON))
	resp, err := vk.Api.Messages.MessagesMarkAsAnsweredConversation(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyMessagesMarkAsImportantRequest(r *requests.MessagesMarkAsImportantRequest) {
	lMessageIds := random.RandIntn(random.MaxArrayLength + 1)
	r.WithMessageIds(random.RandIntArr(lMessageIds))
	r.WithImportant(random.RandInt())
}

func TestVKMessagesMarkAsImportantSuccess(t *testing.T) {
	params := requests.NewMessagesMarkAsImportantRequest()
	fillRandomlyMessagesMarkAsImportantRequest(&params)
	var expected models.MessagesMarkAsImportantResponse
	fillRandomlyMessagesMarkAsImportantResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "messages.markAsImportant", params.Params(), expectedJSON))
	resp, err := vk.Api.Messages.MessagesMarkAsImportant(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyMessagesMarkAsImportantConversationRequest(r *requests.MessagesMarkAsImportantConversationRequest) {
	r.WithPeerId(random.RandInt())
	r.WithImportant(random.RandBool())
	r.WithGroupId(random.RandInt())
}

func TestVKMessagesMarkAsImportantConversationSuccess(t *testing.T) {
	params := requests.NewMessagesMarkAsImportantConversationRequest()
	fillRandomlyMessagesMarkAsImportantConversationRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "messages.markAsImportantConversation", params.Params(), expectedJSON))
	resp, err := vk.Api.Messages.MessagesMarkAsImportantConversation(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyMessagesMarkAsReadRequest(r *requests.MessagesMarkAsReadRequest) {
	lMessageIds := random.RandIntn(random.MaxArrayLength + 1)
	r.WithMessageIds(random.RandIntArr(lMessageIds))
	r.WithPeerId(random.RandInt())
	r.WithStartMessageId(random.RandInt())
	r.WithGroupId(random.RandInt())
	r.WithMarkConversationAsRead(random.RandBool())
}

func TestVKMessagesMarkAsReadSuccess(t *testing.T) {
	params := requests.NewMessagesMarkAsReadRequest()
	fillRandomlyMessagesMarkAsReadRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "messages.markAsRead", params.Params(), expectedJSON))
	resp, err := vk.Api.Messages.MessagesMarkAsRead(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyMessagesPinRequest(r *requests.MessagesPinRequest) {
	r.WithPeerId(random.RandInt())
	r.WithMessageId(random.RandInt())
	r.WithConversationMessageId(random.RandInt())
}

func TestVKMessagesPinSuccess(t *testing.T) {
	params := requests.NewMessagesPinRequest()
	fillRandomlyMessagesPinRequest(&params)
	var expected models.MessagesPinResponse
	fillRandomlyMessagesPinResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "messages.pin", params.Params(), expectedJSON))
	resp, err := vk.Api.Messages.MessagesPin(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyMessagesRemoveChatUserRequest(r *requests.MessagesRemoveChatUserRequest) {
	r.WithChatId(random.RandInt())
	r.WithUserId(random.RandInt())
	r.WithMemberId(random.RandInt())
}

func TestVKMessagesRemoveChatUserSuccess(t *testing.T) {
	params := requests.NewMessagesRemoveChatUserRequest()
	fillRandomlyMessagesRemoveChatUserRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "messages.removeChatUser", params.Params(), expectedJSON))
	resp, err := vk.Api.Messages.MessagesRemoveChatUser(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyMessagesRestoreRequest(r *requests.MessagesRestoreRequest) {
	r.WithMessageId(random.RandInt())
	r.WithGroupId(random.RandInt())
}

func TestVKMessagesRestoreSuccess(t *testing.T) {
	params := requests.NewMessagesRestoreRequest()
	fillRandomlyMessagesRestoreRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "messages.restore", params.Params(), expectedJSON))
	resp, err := vk.Api.Messages.MessagesRestore(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyMessagesSearchRequest(r *requests.MessagesSearchRequest) {
	r.WithQ(random.RandString())
	r.WithPeerId(random.RandInt())
	r.WithDate(random.RandInt())
	r.WithPreviewLength(random.RandInt())
	r.WithOffset(random.RandInt())
	r.WithCount(random.RandInt())
	r.WithExtended(random.RandBool())
	lFields := random.RandIntn(random.MaxArrayLength + 1)
	r.WithFields(random.RandStringArr(lFields))
	r.WithGroupId(random.RandInt())
}

func TestVKMessagesSearchSuccess(t *testing.T) {
	params := requests.NewMessagesSearchRequest()
	fillRandomlyMessagesSearchRequest(&params)
	params.WithExtended(false)
	var expected models.MessagesSearchResponse
	fillRandomlyMessagesSearchResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "messages.search", params.Params(), expectedJSON))
	resp, err := vk.Api.Messages.MessagesSearch(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func TestVKMessagesSearchExtendedSuccess(t *testing.T) {
	params := requests.NewMessagesSearchRequest()
	fillRandomlyMessagesSearchRequest(&params)
	params.WithExtended(true)
	var expected models.MessagesSearchExtendedResponse
	fillRandomlyMessagesSearchExtendedResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "messages.search", params.Params(), expectedJSON))
	resp, err := vk.Api.Messages.MessagesSearchExtended(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyMessagesSearchConversationsRequest(r *requests.MessagesSearchConversationsRequest) {
	r.WithQ(random.RandString())
	r.WithCount(random.RandInt())
	r.WithExtended(random.RandBool())
	Fields := new([]models.UsersFields)
	lFields := random.RandIntn(random.MaxArrayLength + 1)
	*Fields = make([]models.UsersFields, lFields)
	for i0 := 0; i0 < lFields; i0++ {
		fillRandomlyUsersFields(&(*Fields)[i0])
	}
	r.WithFields(*Fields)
	r.WithGroupId(random.RandInt())
}

func TestVKMessagesSearchConversationsSuccess(t *testing.T) {
	params := requests.NewMessagesSearchConversationsRequest()
	fillRandomlyMessagesSearchConversationsRequest(&params)
	params.WithExtended(false)
	var expected models.MessagesSearchConversationsResponse
	fillRandomlyMessagesSearchConversationsResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "messages.searchConversations", params.Params(), expectedJSON))
	resp, err := vk.Api.Messages.MessagesSearchConversations(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func TestVKMessagesSearchConversationsExtendedSuccess(t *testing.T) {
	params := requests.NewMessagesSearchConversationsRequest()
	fillRandomlyMessagesSearchConversationsRequest(&params)
	params.WithExtended(true)
	var expected models.MessagesSearchConversationsExtendedResponse
	fillRandomlyMessagesSearchConversationsExtendedResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "messages.searchConversations", params.Params(), expectedJSON))
	resp, err := vk.Api.Messages.MessagesSearchConversationsExtended(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyMessagesSendRequest(r *requests.MessagesSendRequest) {
	r.WithUserId(random.RandInt())
	r.WithRandomId(random.RandInt())
	r.WithPeerId(random.RandInt())
	lPeerIds := random.RandIntn(random.MaxArrayLength + 1)
	r.WithPeerIds(random.RandIntArr(lPeerIds))
	r.WithDomain(random.RandString())
	r.WithChatId(random.RandInt())
	lUserIds := random.RandIntn(random.MaxArrayLength + 1)
	r.WithUserIds(random.RandIntArr(lUserIds))
	r.WithMessage(random.RandString())
	r.WithLat(random.RandFloat())
	r.WithLong(random.RandFloat())
	r.WithAttachment(random.RandString())
	r.WithReplyTo(random.RandInt())
	lForwardMessages := random.RandIntn(random.MaxArrayLength + 1)
	r.WithForwardMessages(random.RandIntArr(lForwardMessages))
	Forward := new(models.MessagesForward)
	fillRandomlyMessagesForward(Forward)
	r.WithForward(*Forward)
	r.WithStickerId(random.RandInt())
	r.WithGroupId(random.RandInt())
	Keyboard := new(models.MessagesKeyboard)
	fillRandomlyMessagesKeyboard(Keyboard)
	r.WithKeyboard(*Keyboard)
	r.WithTemplate(random.RandString())
	r.WithPayload(random.RandString())
	r.WithContentSource(random.RandString())
	r.WithDontParseLinks(random.RandBool())
	r.WithDisableMentions(random.RandBool())
	r.WithIntent(random.RandString())
	r.WithSubscribeId(random.RandInt())
}

func TestVKMessagesSendSuccess(t *testing.T) {
	params := requests.NewMessagesSendRequest()
	fillRandomlyMessagesSendRequest(&params)
	var expected models.MessagesSendResponse
	fillRandomlyMessagesSendResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "messages.send", params.Params(), expectedJSON))
	resp, err := vk.Api.Messages.MessagesSend(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyMessagesSendUserIDsRequest(r *requests.MessagesSendUserIDsRequest) {
	r.WithUserId(random.RandInt())
	r.WithRandomId(random.RandInt())
	r.WithPeerId(random.RandInt())
	lPeerIds := random.RandIntn(random.MaxArrayLength + 1)
	r.WithPeerIds(random.RandIntArr(lPeerIds))
	r.WithDomain(random.RandString())
	r.WithChatId(random.RandInt())
	lUserIds := random.RandIntn(random.MaxArrayLength + 1)
	r.WithUserIds(random.RandIntArr(lUserIds))
	r.WithMessage(random.RandString())
	r.WithLat(random.RandFloat())
	r.WithLong(random.RandFloat())
	r.WithAttachment(random.RandString())
	r.WithReplyTo(random.RandInt())
	lForwardMessages := random.RandIntn(random.MaxArrayLength + 1)
	r.WithForwardMessages(random.RandIntArr(lForwardMessages))
	Forward := new(models.MessagesForward)
	fillRandomlyMessagesForward(Forward)
	r.WithForward(*Forward)
	r.WithStickerId(random.RandInt())
	r.WithGroupId(random.RandInt())
	Keyboard := new(models.MessagesKeyboard)
	fillRandomlyMessagesKeyboard(Keyboard)
	r.WithKeyboard(*Keyboard)
	r.WithTemplate(random.RandString())
	r.WithPayload(random.RandString())
	r.WithContentSource(random.RandString())
	r.WithDontParseLinks(random.RandBool())
	r.WithDisableMentions(random.RandBool())
	r.WithIntent(random.RandString())
	r.WithSubscribeId(random.RandInt())
}

func TestVKMessagesSendUserIDsSuccess(t *testing.T) {
	params := requests.NewMessagesSendUserIDsRequest()
	fillRandomlyMessagesSendUserIDsRequest(&params)
	var expected models.MessagesSendUserIdsResponse
	fillRandomlyMessagesSendUserIdsResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "messages.send", params.Params(), expectedJSON))
	resp, err := vk.Api.Messages.MessagesSendUserIDs(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyMessagesSendMessageEventAnswerRequest(r *requests.MessagesSendMessageEventAnswerRequest) {
	r.WithEventId(random.RandString())
	r.WithUserId(random.RandInt())
	r.WithPeerId(random.RandInt())
	r.WithEventData(random.RandString())
}

func TestVKMessagesSendMessageEventAnswerSuccess(t *testing.T) {
	params := requests.NewMessagesSendMessageEventAnswerRequest()
	fillRandomlyMessagesSendMessageEventAnswerRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "messages.sendMessageEventAnswer", params.Params(), expectedJSON))
	resp, err := vk.Api.Messages.MessagesSendMessageEventAnswer(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyMessagesSetActivityRequest(r *requests.MessagesSetActivityRequest) {
	r.WithUserId(random.RandInt())
	r.WithType(random.RandString())
	r.WithPeerId(random.RandInt())
	r.WithGroupId(random.RandInt())
}

func TestVKMessagesSetActivitySuccess(t *testing.T) {
	params := requests.NewMessagesSetActivityRequest()
	fillRandomlyMessagesSetActivityRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "messages.setActivity", params.Params(), expectedJSON))
	resp, err := vk.Api.Messages.MessagesSetActivity(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyMessagesSetChatPhotoRequest(r *requests.MessagesSetChatPhotoRequest) {
	r.WithFile(random.RandString())
}

func TestVKMessagesSetChatPhotoSuccess(t *testing.T) {
	params := requests.NewMessagesSetChatPhotoRequest()
	fillRandomlyMessagesSetChatPhotoRequest(&params)
	var expected models.MessagesSetChatPhotoResponse
	fillRandomlyMessagesSetChatPhotoResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "messages.setChatPhoto", params.Params(), expectedJSON))
	resp, err := vk.Api.Messages.MessagesSetChatPhoto(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyMessagesUnpinRequest(r *requests.MessagesUnpinRequest) {
	r.WithPeerId(random.RandInt())
	r.WithGroupId(random.RandInt())
}

func TestVKMessagesUnpinSuccess(t *testing.T) {
	params := requests.NewMessagesUnpinRequest()
	fillRandomlyMessagesUnpinRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "messages.unpin", params.Params(), expectedJSON))
	resp, err := vk.Api.Messages.MessagesUnpin(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}
