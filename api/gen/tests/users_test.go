// Code generated by https://github.com/defany/govk. DO NOT EDIT.

package tests

import (
	"encoding/json"
	"github.com/defany/govk/api/gen/models"
	"github.com/defany/govk/api/gen/users"
	"github.com/defany/govk/pkg/random"
	"github.com/defany/govk/vk"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func fillRandomlyUsersGetRequest(r *requests.UsersGetRequest) {
	lUserIds := random.IntDiapason(random.MaxArrayLength + 1)
	r.WithUserIds(random.StringArr(lUserIds))
	Fields := new([]models.UsersFields)
	lFields := random.IntDiapason(random.MaxArrayLength + 1)
	*Fields = make([]models.UsersFields, lFields)
	for i0 := 0; i0 < lFields; i0++ {
		fillRandomlyUsersFields(&(*Fields)[i0])
	}
	r.WithFields(*Fields)
	r.WithNameCase(random.String())
}

func TestVKUsersGetSuccess(t *testing.T) {
	params := requests.NewUsersGetRequest()
	fillRandomlyUsersGetRequest(&params)
	var expected models.UsersGetResponse
	fillRandomlyUsersGetResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.String()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "users.get", params.Params(), expectedJSON))
	resp, err := vk.Api.Users.UsersGet(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyUsersGetFollowersRequest(r *requests.UsersGetFollowersRequest) {
	r.WithUserId(random.Int())
	r.WithOffset(random.Int())
	r.WithCount(random.Int())
	Fields := new([]models.UsersFields)
	lFields := random.IntDiapason(random.MaxArrayLength + 1)
	*Fields = make([]models.UsersFields, lFields)
	for i0 := 0; i0 < lFields; i0++ {
		fillRandomlyUsersFields(&(*Fields)[i0])
	}
	r.WithFields(*Fields)
	r.WithNameCase(random.String())
}

func TestVKUsersGetFollowersSuccess(t *testing.T) {
	params := requests.NewUsersGetFollowersRequest()
	fillRandomlyUsersGetFollowersRequest(&params)
	var expected models.UsersGetFollowersResponse
	fillRandomlyUsersGetFollowersResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.String()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "users.getFollowers", params.Params(), expectedJSON))
	resp, err := vk.Api.Users.UsersGetFollowers(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyUsersGetSubscriptionsRequest(r *requests.UsersGetSubscriptionsRequest) {
	r.WithUserId(random.Int())
	r.WithExtended(random.Bool())
	r.WithOffset(random.Int())
	r.WithCount(random.Int())
	Fields := new([]models.UsersFields)
	lFields := random.IntDiapason(random.MaxArrayLength + 1)
	*Fields = make([]models.UsersFields, lFields)
	for i0 := 0; i0 < lFields; i0++ {
		fillRandomlyUsersFields(&(*Fields)[i0])
	}
	r.WithFields(*Fields)
}

func TestVKUsersGetSubscriptionsSuccess(t *testing.T) {
	params := requests.NewUsersGetSubscriptionsRequest()
	fillRandomlyUsersGetSubscriptionsRequest(&params)
	params.WithExtended(false)
	var expected models.UsersGetSubscriptionsResponse
	fillRandomlyUsersGetSubscriptionsResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.String()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "users.getSubscriptions", params.Params(), expectedJSON))
	resp, err := vk.Api.Users.UsersGetSubscriptions(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func TestVKUsersGetSubscriptionsExtendedSuccess(t *testing.T) {
	params := requests.NewUsersGetSubscriptionsRequest()
	fillRandomlyUsersGetSubscriptionsRequest(&params)
	params.WithExtended(true)
	var expected models.UsersGetSubscriptionsExtendedResponse
	fillRandomlyUsersGetSubscriptionsExtendedResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.String()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "users.getSubscriptions", params.Params(), expectedJSON))
	resp, err := vk.Api.Users.UsersGetSubscriptionsExtended(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyUsersReportRequest(r *requests.UsersReportRequest) {
	r.WithUserId(random.Int())
	r.WithType(random.String())
	r.WithComment(random.String())
}

func TestVKUsersReportSuccess(t *testing.T) {
	params := requests.NewUsersReportRequest()
	fillRandomlyUsersReportRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.String()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "users.report", params.Params(), expectedJSON))
	resp, err := vk.Api.Users.UsersReport(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyUsersSearchRequest(r *requests.UsersSearchRequest) {
	r.WithQ(random.String())
	r.WithSort(random.Int())
	r.WithOffset(random.Int())
	r.WithCount(random.Int())
	Fields := new([]models.UsersFields)
	lFields := random.IntDiapason(random.MaxArrayLength + 1)
	*Fields = make([]models.UsersFields, lFields)
	for i0 := 0; i0 < lFields; i0++ {
		fillRandomlyUsersFields(&(*Fields)[i0])
	}
	r.WithFields(*Fields)
	r.WithCity(random.Int())
	r.WithCountry(random.Int())
	r.WithHometown(random.String())
	r.WithUniversityCountry(random.Int())
	r.WithUniversity(random.Int())
	r.WithUniversityYear(random.Int())
	r.WithUniversityFaculty(random.Int())
	r.WithUniversityChair(random.Int())
	r.WithSex(random.Int())
	r.WithStatus(random.Int())
	r.WithAgeFrom(random.Int())
	r.WithAgeTo(random.Int())
	r.WithBirthDay(random.Int())
	r.WithBirthMonth(random.Int())
	r.WithBirthYear(random.Int())
	r.WithOnline(random.Bool())
	r.WithHasPhoto(random.Bool())
	r.WithSchoolCountry(random.Int())
	r.WithSchoolCity(random.Int())
	r.WithSchoolClass(random.Int())
	r.WithSchool(random.Int())
	r.WithSchoolYear(random.Int())
	r.WithReligion(random.String())
	r.WithCompany(random.String())
	r.WithPosition(random.String())
	r.WithGroupId(random.Int())
	lFromList := random.IntDiapason(random.MaxArrayLength + 1)
	r.WithFromList(random.StringArr(lFromList))
}

func TestVKUsersSearchSuccess(t *testing.T) {
	params := requests.NewUsersSearchRequest()
	fillRandomlyUsersSearchRequest(&params)
	var expected models.UsersSearchResponse
	fillRandomlyUsersSearchResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.String()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "users.search", params.Params(), expectedJSON))
	resp, err := vk.Api.Users.UsersSearch(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}
