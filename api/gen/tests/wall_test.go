// Code generated by https://github.com/defany/govk. DO NOT EDIT.

package tests

import (
	"github.com/defany/govk/api/gen/models"
	"github.com/defany/govk/api/gen/wall"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"github.com/defany/govk/vk"
	"testing"
	"encoding/json"
)

func fillRandomlyWallCheckCopyrightLinkRequest(r *requests.WallCheckCopyrightLinkRequest) {
	r.WithLink(randString())
}

func TestVKWallCheckCopyrightLinkSuccess(t *testing.T) {
	params := requests.NewWallCheckCopyrightLinkRequest()
	fillRandomlyWallCheckCopyrightLinkRequest(&params)
	var expected models.BaseBoolResponse
	fillRandomlyBaseBoolResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "wall.checkCopyrightLink", params.Params(), expectedJSON))
	resp, err := vk.Api.Wall.WallCheckCopyrightLink(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyWallCloseCommentsRequest(r *requests.WallCloseCommentsRequest) {
	r.WithOwnerId(randInt())
	r.WithPostId(randInt())
}

func TestVKWallCloseCommentsSuccess(t *testing.T) {
	params := requests.NewWallCloseCommentsRequest()
	fillRandomlyWallCloseCommentsRequest(&params)
	var expected models.BaseBoolResponse
	fillRandomlyBaseBoolResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "wall.closeComments", params.Params(), expectedJSON))
	resp, err := vk.Api.Wall.WallCloseComments(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyWallCreateCommentRequest(r *requests.WallCreateCommentRequest) {
	r.WithOwnerId(randInt())
	r.WithPostId(randInt())
	r.WithFromGroup(randInt())
	r.WithMessage(randString())
	r.WithReplyToComment(randInt())
	lAttachments := randIntn(maxArrayLength + 1)
	r.WithAttachments(randStringArr(lAttachments))
	r.WithStickerId(randInt())
	r.WithGuid(randString())
}

func TestVKWallCreateCommentSuccess(t *testing.T) {
	params := requests.NewWallCreateCommentRequest()
	fillRandomlyWallCreateCommentRequest(&params)
	var expected models.WallCreateCommentResponse
	fillRandomlyWallCreateCommentResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "wall.createComment", params.Params(), expectedJSON))
	resp, err := vk.Api.Wall.WallCreateComment(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyWallDeleteRequest(r *requests.WallDeleteRequest) {
	r.WithOwnerId(randInt())
	r.WithPostId(randInt())
}

func TestVKWallDeleteSuccess(t *testing.T) {
	params := requests.NewWallDeleteRequest()
	fillRandomlyWallDeleteRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "wall.delete", params.Params(), expectedJSON))
	resp, err := vk.Api.Wall.WallDelete(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyWallDeleteCommentRequest(r *requests.WallDeleteCommentRequest) {
	r.WithOwnerId(randInt())
	r.WithCommentId(randInt())
}

func TestVKWallDeleteCommentSuccess(t *testing.T) {
	params := requests.NewWallDeleteCommentRequest()
	fillRandomlyWallDeleteCommentRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "wall.deleteComment", params.Params(), expectedJSON))
	resp, err := vk.Api.Wall.WallDeleteComment(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyWallEditRequest(r *requests.WallEditRequest) {
	r.WithOwnerId(randInt())
	r.WithPostId(randInt())
	r.WithFriendsOnly(randBool())
	r.WithMessage(randString())
	lAttachments := randIntn(maxArrayLength + 1)
	r.WithAttachments(randStringArr(lAttachments))
	r.WithServices(randString())
	r.WithSigned(randBool())
	r.WithPublishDate(randInt())
	r.WithLat(randFloat())
	r.WithLong(randFloat())
	r.WithPlaceId(randInt())
	r.WithMarkAsAds(randBool())
	r.WithCloseComments(randBool())
	r.WithDonutPaidDuration(randInt())
	r.WithPosterBkgId(randInt())
	r.WithPosterBkgOwnerId(randInt())
	r.WithPosterBkgAccessHash(randString())
	r.WithCopyright(randString())
	r.WithTopicId(randInt())
}

func TestVKWallEditSuccess(t *testing.T) {
	params := requests.NewWallEditRequest()
	fillRandomlyWallEditRequest(&params)
	var expected models.WallEditResponse
	fillRandomlyWallEditResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "wall.edit", params.Params(), expectedJSON))
	resp, err := vk.Api.Wall.WallEdit(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyWallEditAdsStealthRequest(r *requests.WallEditAdsStealthRequest) {
	r.WithOwnerId(randInt())
	r.WithPostId(randInt())
	r.WithMessage(randString())
	lAttachments := randIntn(maxArrayLength + 1)
	r.WithAttachments(randStringArr(lAttachments))
	r.WithSigned(randBool())
	r.WithLat(randFloat())
	r.WithLong(randFloat())
	r.WithPlaceId(randInt())
	r.WithLinkButton(randString())
	r.WithLinkTitle(randString())
	r.WithLinkImage(randString())
	r.WithLinkVideo(randString())
}

func TestVKWallEditAdsStealthSuccess(t *testing.T) {
	params := requests.NewWallEditAdsStealthRequest()
	fillRandomlyWallEditAdsStealthRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "wall.editAdsStealth", params.Params(), expectedJSON))
	resp, err := vk.Api.Wall.WallEditAdsStealth(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyWallEditCommentRequest(r *requests.WallEditCommentRequest) {
	r.WithOwnerId(randInt())
	r.WithCommentId(randInt())
	r.WithMessage(randString())
	lAttachments := randIntn(maxArrayLength + 1)
	r.WithAttachments(randStringArr(lAttachments))
}

func TestVKWallEditCommentSuccess(t *testing.T) {
	params := requests.NewWallEditCommentRequest()
	fillRandomlyWallEditCommentRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "wall.editComment", params.Params(), expectedJSON))
	resp, err := vk.Api.Wall.WallEditComment(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyWallGetRequest(r *requests.WallGetRequest) {
	r.WithOwnerId(randInt())
	r.WithDomain(randString())
	r.WithOffset(randInt())
	r.WithCount(randInt())
	Filter := new(models.WallGetFilter)
	fillRandomlyWallGetFilter(Filter)
	r.WithFilter(*Filter)
	r.WithExtended(randBool())
	Fields := new([]models.BaseUserGroupFields)
	lFields := randIntn(maxArrayLength + 1)
	*Fields = make([]models.BaseUserGroupFields, lFields)
	for i0 := 0; i0 < lFields; i0++ {
		fillRandomlyBaseUserGroupFields(&(*Fields)[i0])
	}
	r.WithFields(*Fields)
}

func TestVKWallGetSuccess(t *testing.T) {
	params := requests.NewWallGetRequest()
	fillRandomlyWallGetRequest(&params)
	params.WithExtended(false)
	var expected models.WallGetResponse
	fillRandomlyWallGetResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "wall.get", params.Params(), expectedJSON))
	resp, err := vk.Api.Wall.WallGet(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func TestVKWallGetExtendedSuccess(t *testing.T) {
	params := requests.NewWallGetRequest()
	fillRandomlyWallGetRequest(&params)
	params.WithExtended(true)
	var expected models.WallGetExtendedResponse
	fillRandomlyWallGetExtendedResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "wall.get", params.Params(), expectedJSON))
	resp, err := vk.Api.Wall.WallGetExtended(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyWallGetByIdRequest(r *requests.WallGetByIdRequest) {
	lPosts := randIntn(maxArrayLength + 1)
	r.WithPosts(randStringArr(lPosts))
	r.WithExtended(randBool())
	r.WithCopyHistoryDepth(randInt())
	Fields := new([]models.BaseUserGroupFields)
	lFields := randIntn(maxArrayLength + 1)
	*Fields = make([]models.BaseUserGroupFields, lFields)
	for i0 := 0; i0 < lFields; i0++ {
		fillRandomlyBaseUserGroupFields(&(*Fields)[i0])
	}
	r.WithFields(*Fields)
}

func TestVKWallGetByIdSuccess(t *testing.T) {
	params := requests.NewWallGetByIdRequest()
	fillRandomlyWallGetByIdRequest(&params)
	params.WithExtended(false)
	var expected models.WallGetByIdLegacyResponse
	fillRandomlyWallGetByIdLegacyResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "wall.getById", params.Params(), expectedJSON))
	resp, err := vk.Api.Wall.WallGetById(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func TestVKWallGetByIdExtendedSuccess(t *testing.T) {
	params := requests.NewWallGetByIdRequest()
	fillRandomlyWallGetByIdRequest(&params)
	params.WithExtended(true)
	var expected models.WallGetByIdExtendedResponse
	fillRandomlyWallGetByIdExtendedResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "wall.getById", params.Params(), expectedJSON))
	resp, err := vk.Api.Wall.WallGetByIdExtended(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyWallGetCommentRequest(r *requests.WallGetCommentRequest) {
	r.WithOwnerId(randInt())
	r.WithCommentId(randInt())
	r.WithExtended(randBool())
	Fields := new([]models.BaseUserGroupFields)
	lFields := randIntn(maxArrayLength + 1)
	*Fields = make([]models.BaseUserGroupFields, lFields)
	for i0 := 0; i0 < lFields; i0++ {
		fillRandomlyBaseUserGroupFields(&(*Fields)[i0])
	}
	r.WithFields(*Fields)
}

func TestVKWallGetCommentSuccess(t *testing.T) {
	params := requests.NewWallGetCommentRequest()
	fillRandomlyWallGetCommentRequest(&params)
	params.WithExtended(false)
	var expected models.WallGetCommentResponse
	fillRandomlyWallGetCommentResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "wall.getComment", params.Params(), expectedJSON))
	resp, err := vk.Api.Wall.WallGetComment(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func TestVKWallGetCommentExtendedSuccess(t *testing.T) {
	params := requests.NewWallGetCommentRequest()
	fillRandomlyWallGetCommentRequest(&params)
	params.WithExtended(true)
	var expected models.WallGetCommentExtendedResponse
	fillRandomlyWallGetCommentExtendedResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "wall.getComment", params.Params(), expectedJSON))
	resp, err := vk.Api.Wall.WallGetCommentExtended(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyWallGetCommentsRequest(r *requests.WallGetCommentsRequest) {
	r.WithOwnerId(randInt())
	r.WithPostId(randInt())
	r.WithNeedLikes(randBool())
	r.WithStartCommentId(randInt())
	r.WithOffset(randInt())
	r.WithCount(randInt())
	r.WithSort(randString())
	r.WithPreviewLength(randInt())
	r.WithExtended(randBool())
	Fields := new([]models.BaseUserGroupFields)
	lFields := randIntn(maxArrayLength + 1)
	*Fields = make([]models.BaseUserGroupFields, lFields)
	for i0 := 0; i0 < lFields; i0++ {
		fillRandomlyBaseUserGroupFields(&(*Fields)[i0])
	}
	r.WithFields(*Fields)
	r.WithCommentId(randInt())
	r.WithThreadItemsCount(randInt())
}

func TestVKWallGetCommentsSuccess(t *testing.T) {
	params := requests.NewWallGetCommentsRequest()
	fillRandomlyWallGetCommentsRequest(&params)
	params.WithExtended(false)
	var expected models.WallGetCommentsResponse
	fillRandomlyWallGetCommentsResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "wall.getComments", params.Params(), expectedJSON))
	resp, err := vk.Api.Wall.WallGetComments(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func TestVKWallGetCommentsExtendedSuccess(t *testing.T) {
	params := requests.NewWallGetCommentsRequest()
	fillRandomlyWallGetCommentsRequest(&params)
	params.WithExtended(true)
	var expected models.WallGetCommentsExtendedResponse
	fillRandomlyWallGetCommentsExtendedResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "wall.getComments", params.Params(), expectedJSON))
	resp, err := vk.Api.Wall.WallGetCommentsExtended(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyWallGetRepostsRequest(r *requests.WallGetRepostsRequest) {
	r.WithOwnerId(randInt())
	r.WithPostId(randInt())
	r.WithOffset(randInt())
	r.WithCount(randInt())
}

func TestVKWallGetRepostsSuccess(t *testing.T) {
	params := requests.NewWallGetRepostsRequest()
	fillRandomlyWallGetRepostsRequest(&params)
	var expected models.WallGetRepostsResponse
	fillRandomlyWallGetRepostsResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "wall.getReposts", params.Params(), expectedJSON))
	resp, err := vk.Api.Wall.WallGetReposts(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyWallOpenCommentsRequest(r *requests.WallOpenCommentsRequest) {
	r.WithOwnerId(randInt())
	r.WithPostId(randInt())
}

func TestVKWallOpenCommentsSuccess(t *testing.T) {
	params := requests.NewWallOpenCommentsRequest()
	fillRandomlyWallOpenCommentsRequest(&params)
	var expected models.BaseBoolResponse
	fillRandomlyBaseBoolResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "wall.openComments", params.Params(), expectedJSON))
	resp, err := vk.Api.Wall.WallOpenComments(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyWallPinRequest(r *requests.WallPinRequest) {
	r.WithOwnerId(randInt())
	r.WithPostId(randInt())
}

func TestVKWallPinSuccess(t *testing.T) {
	params := requests.NewWallPinRequest()
	fillRandomlyWallPinRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "wall.pin", params.Params(), expectedJSON))
	resp, err := vk.Api.Wall.WallPin(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyWallPostRequest(r *requests.WallPostRequest) {
	r.WithOwnerId(randInt())
	r.WithFriendsOnly(randBool())
	r.WithFromGroup(randBool())
	r.WithMessage(randString())
	lAttachments := randIntn(maxArrayLength + 1)
	r.WithAttachments(randStringArr(lAttachments))
	r.WithServices(randString())
	r.WithSigned(randBool())
	r.WithPublishDate(randInt())
	r.WithLat(randFloat())
	r.WithLong(randFloat())
	r.WithPlaceId(randInt())
	r.WithPostId(randInt())
	r.WithGuid(randString())
	r.WithMarkAsAds(randBool())
	r.WithCloseComments(randBool())
	r.WithDonutPaidDuration(randInt())
	r.WithMuteNotifications(randBool())
	r.WithCopyright(randString())
	r.WithTopicId(randInt())
}

func TestVKWallPostSuccess(t *testing.T) {
	params := requests.NewWallPostRequest()
	fillRandomlyWallPostRequest(&params)
	var expected models.WallPostResponse
	fillRandomlyWallPostResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "wall.post", params.Params(), expectedJSON))
	resp, err := vk.Api.Wall.WallPost(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyWallPostAdsStealthRequest(r *requests.WallPostAdsStealthRequest) {
	r.WithOwnerId(randInt())
	r.WithMessage(randString())
	lAttachments := randIntn(maxArrayLength + 1)
	r.WithAttachments(randStringArr(lAttachments))
	r.WithSigned(randBool())
	r.WithLat(randFloat())
	r.WithLong(randFloat())
	r.WithPlaceId(randInt())
	r.WithGuid(randString())
	r.WithLinkButton(randString())
	r.WithLinkTitle(randString())
	r.WithLinkImage(randString())
	r.WithLinkVideo(randString())
}

func TestVKWallPostAdsStealthSuccess(t *testing.T) {
	params := requests.NewWallPostAdsStealthRequest()
	fillRandomlyWallPostAdsStealthRequest(&params)
	var expected models.WallPostAdsStealthResponse
	fillRandomlyWallPostAdsStealthResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "wall.postAdsStealth", params.Params(), expectedJSON))
	resp, err := vk.Api.Wall.WallPostAdsStealth(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyWallReportCommentRequest(r *requests.WallReportCommentRequest) {
	r.WithOwnerId(randInt())
	r.WithCommentId(randInt())
	r.WithReason(randInt())
}

func TestVKWallReportCommentSuccess(t *testing.T) {
	params := requests.NewWallReportCommentRequest()
	fillRandomlyWallReportCommentRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "wall.reportComment", params.Params(), expectedJSON))
	resp, err := vk.Api.Wall.WallReportComment(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyWallReportPostRequest(r *requests.WallReportPostRequest) {
	r.WithOwnerId(randInt())
	r.WithPostId(randInt())
	r.WithReason(randInt())
}

func TestVKWallReportPostSuccess(t *testing.T) {
	params := requests.NewWallReportPostRequest()
	fillRandomlyWallReportPostRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "wall.reportPost", params.Params(), expectedJSON))
	resp, err := vk.Api.Wall.WallReportPost(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyWallRepostRequest(r *requests.WallRepostRequest) {
	r.WithObject(randString())
	r.WithMessage(randString())
	r.WithGroupId(randInt())
	r.WithMarkAsAds(randBool())
	r.WithMuteNotifications(randBool())
}

func TestVKWallRepostSuccess(t *testing.T) {
	params := requests.NewWallRepostRequest()
	fillRandomlyWallRepostRequest(&params)
	var expected models.WallRepostResponse
	fillRandomlyWallRepostResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "wall.repost", params.Params(), expectedJSON))
	resp, err := vk.Api.Wall.WallRepost(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyWallRestoreRequest(r *requests.WallRestoreRequest) {
	r.WithOwnerId(randInt())
	r.WithPostId(randInt())
}

func TestVKWallRestoreSuccess(t *testing.T) {
	params := requests.NewWallRestoreRequest()
	fillRandomlyWallRestoreRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "wall.restore", params.Params(), expectedJSON))
	resp, err := vk.Api.Wall.WallRestore(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyWallRestoreCommentRequest(r *requests.WallRestoreCommentRequest) {
	r.WithOwnerId(randInt())
	r.WithCommentId(randInt())
}

func TestVKWallRestoreCommentSuccess(t *testing.T) {
	params := requests.NewWallRestoreCommentRequest()
	fillRandomlyWallRestoreCommentRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "wall.restoreComment", params.Params(), expectedJSON))
	resp, err := vk.Api.Wall.WallRestoreComment(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyWallSearchRequest(r *requests.WallSearchRequest) {
	r.WithOwnerId(randInt())
	r.WithDomain(randString())
	r.WithQuery(randString())
	r.WithOwnersOnly(randBool())
	r.WithCount(randInt())
	r.WithOffset(randInt())
	r.WithExtended(randBool())
	Fields := new([]models.BaseUserGroupFields)
	lFields := randIntn(maxArrayLength + 1)
	*Fields = make([]models.BaseUserGroupFields, lFields)
	for i0 := 0; i0 < lFields; i0++ {
		fillRandomlyBaseUserGroupFields(&(*Fields)[i0])
	}
	r.WithFields(*Fields)
}

func TestVKWallSearchSuccess(t *testing.T) {
	params := requests.NewWallSearchRequest()
	fillRandomlyWallSearchRequest(&params)
	params.WithExtended(false)
	var expected models.WallSearchResponse
	fillRandomlyWallSearchResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "wall.search", params.Params(), expectedJSON))
	resp, err := vk.Api.Wall.WallSearch(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func TestVKWallSearchExtendedSuccess(t *testing.T) {
	params := requests.NewWallSearchRequest()
	fillRandomlyWallSearchRequest(&params)
	params.WithExtended(true)
	var expected models.WallSearchExtendedResponse
	fillRandomlyWallSearchExtendedResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "wall.search", params.Params(), expectedJSON))
	resp, err := vk.Api.Wall.WallSearchExtended(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyWallUnpinRequest(r *requests.WallUnpinRequest) {
	r.WithOwnerId(randInt())
	r.WithPostId(randInt())
}

func TestVKWallUnpinSuccess(t *testing.T) {
	params := requests.NewWallUnpinRequest()
	fillRandomlyWallUnpinRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "wall.unpin", params.Params(), expectedJSON))
	resp, err := vk.Api.Wall.WallUnpin(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

