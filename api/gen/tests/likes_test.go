// Code generated by https://github.com/defany/govk. DO NOT EDIT.

package tests

import (
	"encoding/json"
	"github.com/defany/govk/api/gen/likes"
	"github.com/defany/govk/api/gen/models"
	"github.com/defany/govk/pkg/random"
	"github.com/defany/govk/vk"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func fillRandomlyLikesAddRequest(r *requests.LikesAddRequest) {
	Type := new(models.LikesType)
	fillRandomlyLikesType(Type)
	r.WithType(*Type)
	r.WithOwnerId(random.Int())
	r.WithItemId(random.Int())
	r.WithAccessKey(random.String())
}

func TestVKLikesAddSuccess(t *testing.T) {
	params := requests.NewLikesAddRequest()
	fillRandomlyLikesAddRequest(&params)
	var expected models.LikesAddResponse
	fillRandomlyLikesAddResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.String()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "likes.add", params.Params(), expectedJSON))
	resp, err := vk.Api.Likes.LikesAdd(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyLikesDeleteRequest(r *requests.LikesDeleteRequest) {
	Type := new(models.LikesType)
	fillRandomlyLikesType(Type)
	r.WithType(*Type)
	r.WithOwnerId(random.Int())
	r.WithItemId(random.Int())
	r.WithAccessKey(random.String())
}

func TestVKLikesDeleteSuccess(t *testing.T) {
	params := requests.NewLikesDeleteRequest()
	fillRandomlyLikesDeleteRequest(&params)
	var expected models.LikesDeleteResponse
	fillRandomlyLikesDeleteResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.String()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "likes.delete", params.Params(), expectedJSON))
	resp, err := vk.Api.Likes.LikesDelete(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyLikesGetListRequest(r *requests.LikesGetListRequest) {
	Type := new(models.LikesType)
	fillRandomlyLikesType(Type)
	r.WithType(*Type)
	r.WithOwnerId(random.Int())
	r.WithItemId(random.Int())
	r.WithPageUrl(random.String())
	r.WithFilter(random.String())
	r.WithFriendsOnly(random.Int())
	r.WithExtended(random.Bool())
	r.WithOffset(random.Int())
	r.WithCount(random.Int())
	r.WithSkipOwn(random.Bool())
}

func TestVKLikesGetListSuccess(t *testing.T) {
	params := requests.NewLikesGetListRequest()
	fillRandomlyLikesGetListRequest(&params)
	params.WithExtended(false)
	var expected models.LikesGetListResponse
	fillRandomlyLikesGetListResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.String()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "likes.getList", params.Params(), expectedJSON))
	resp, err := vk.Api.Likes.LikesGetList(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func TestVKLikesGetListExtendedSuccess(t *testing.T) {
	params := requests.NewLikesGetListRequest()
	fillRandomlyLikesGetListRequest(&params)
	params.WithExtended(true)
	var expected models.LikesGetListExtendedResponse
	fillRandomlyLikesGetListExtendedResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.String()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "likes.getList", params.Params(), expectedJSON))
	resp, err := vk.Api.Likes.LikesGetListExtended(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyLikesIsLikedRequest(r *requests.LikesIsLikedRequest) {
	r.WithUserId(random.Int())
	Type := new(models.LikesType)
	fillRandomlyLikesType(Type)
	r.WithType(*Type)
	r.WithOwnerId(random.Int())
	r.WithItemId(random.Int())
}

func TestVKLikesIsLikedSuccess(t *testing.T) {
	params := requests.NewLikesIsLikedRequest()
	fillRandomlyLikesIsLikedRequest(&params)
	var expected models.LikesIsLikedResponse
	fillRandomlyLikesIsLikedResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.String()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "likes.isLiked", params.Params(), expectedJSON))
	resp, err := vk.Api.Likes.LikesIsLiked(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}
