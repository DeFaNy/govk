// Code generated by https://github.com/defany/govk. DO NOT EDIT.

package tests

import (
	"github.com/defany/govk/api/gen/models"
	"github.com/defany/govk/api/gen/groups"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"github.com/defany/govk/vk"
	"testing"
	"encoding/json"
)

func fillRandomlyGroupsAddAddressRequest(r *requests.GroupsAddAddressRequest) {
	r.WithGroupId(randInt())
	r.WithTitle(randString())
	r.WithAddress(randString())
	r.WithAdditionalAddress(randString())
	r.WithCountryId(randInt())
	r.WithCityId(randInt())
	r.WithMetroId(randInt())
	r.WithLatitude(randFloat())
	r.WithLongitude(randFloat())
	r.WithPhone(randString())
	WorkInfoStatus := new(models.GroupsAddressWorkInfoStatus)
	fillRandomlyGroupsAddressWorkInfoStatus(WorkInfoStatus)
	r.WithWorkInfoStatus(*WorkInfoStatus)
	r.WithTimetable(randString())
	r.WithIsMainAddress(randBool())
}

func TestVKGroupsAddAddressSuccess(t *testing.T) {
	params := requests.NewGroupsAddAddressRequest()
	fillRandomlyGroupsAddAddressRequest(&params)
	var expected models.GroupsAddAddressResponse
	fillRandomlyGroupsAddAddressResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "groups.addAddress", params.Params(), expectedJSON))
	resp, err := vk.Api.Groups.GroupsAddAddress(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyGroupsAddCallbackServerRequest(r *requests.GroupsAddCallbackServerRequest) {
	r.WithGroupId(randInt())
	r.WithUrl(randString())
	r.WithTitle(randString())
	r.WithSecretKey(randString())
}

func TestVKGroupsAddCallbackServerSuccess(t *testing.T) {
	params := requests.NewGroupsAddCallbackServerRequest()
	fillRandomlyGroupsAddCallbackServerRequest(&params)
	var expected models.GroupsAddCallbackServerResponse
	fillRandomlyGroupsAddCallbackServerResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "groups.addCallbackServer", params.Params(), expectedJSON))
	resp, err := vk.Api.Groups.GroupsAddCallbackServer(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyGroupsAddLinkRequest(r *requests.GroupsAddLinkRequest) {
	r.WithGroupId(randInt())
	r.WithLink(randString())
	r.WithText(randString())
}

func TestVKGroupsAddLinkSuccess(t *testing.T) {
	params := requests.NewGroupsAddLinkRequest()
	fillRandomlyGroupsAddLinkRequest(&params)
	var expected models.GroupsAddLinkResponse
	fillRandomlyGroupsAddLinkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "groups.addLink", params.Params(), expectedJSON))
	resp, err := vk.Api.Groups.GroupsAddLink(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyGroupsApproveRequestRequest(r *requests.GroupsApproveRequestRequest) {
	r.WithGroupId(randInt())
	r.WithUserId(randInt())
}

func TestVKGroupsApproveRequestSuccess(t *testing.T) {
	params := requests.NewGroupsApproveRequestRequest()
	fillRandomlyGroupsApproveRequestRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "groups.approveRequest", params.Params(), expectedJSON))
	resp, err := vk.Api.Groups.GroupsApproveRequest(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyGroupsBanRequest(r *requests.GroupsBanRequest) {
	r.WithGroupId(randInt())
	r.WithOwnerId(randInt())
	r.WithEndDate(randInt())
	r.WithReason(randInt())
	r.WithComment(randString())
	r.WithCommentVisible(randBool())
}

func TestVKGroupsBanSuccess(t *testing.T) {
	params := requests.NewGroupsBanRequest()
	fillRandomlyGroupsBanRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "groups.ban", params.Params(), expectedJSON))
	resp, err := vk.Api.Groups.GroupsBan(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyGroupsCreateRequest(r *requests.GroupsCreateRequest) {
	r.WithTitle(randString())
	r.WithDescription(randString())
	r.WithType(randString())
	r.WithPublicCategory(randInt())
	r.WithPublicSubcategory(randInt())
	r.WithSubtype(randInt())
}

func TestVKGroupsCreateSuccess(t *testing.T) {
	params := requests.NewGroupsCreateRequest()
	fillRandomlyGroupsCreateRequest(&params)
	var expected models.GroupsCreateResponse
	fillRandomlyGroupsCreateResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "groups.create", params.Params(), expectedJSON))
	resp, err := vk.Api.Groups.GroupsCreate(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyGroupsDeleteAddressRequest(r *requests.GroupsDeleteAddressRequest) {
	r.WithGroupId(randInt())
	r.WithAddressId(randInt())
}

func TestVKGroupsDeleteAddressSuccess(t *testing.T) {
	params := requests.NewGroupsDeleteAddressRequest()
	fillRandomlyGroupsDeleteAddressRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "groups.deleteAddress", params.Params(), expectedJSON))
	resp, err := vk.Api.Groups.GroupsDeleteAddress(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyGroupsDeleteCallbackServerRequest(r *requests.GroupsDeleteCallbackServerRequest) {
	r.WithGroupId(randInt())
	r.WithServerId(randInt())
}

func TestVKGroupsDeleteCallbackServerSuccess(t *testing.T) {
	params := requests.NewGroupsDeleteCallbackServerRequest()
	fillRandomlyGroupsDeleteCallbackServerRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "groups.deleteCallbackServer", params.Params(), expectedJSON))
	resp, err := vk.Api.Groups.GroupsDeleteCallbackServer(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyGroupsDeleteLinkRequest(r *requests.GroupsDeleteLinkRequest) {
	r.WithGroupId(randInt())
	r.WithLinkId(randInt())
}

func TestVKGroupsDeleteLinkSuccess(t *testing.T) {
	params := requests.NewGroupsDeleteLinkRequest()
	fillRandomlyGroupsDeleteLinkRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "groups.deleteLink", params.Params(), expectedJSON))
	resp, err := vk.Api.Groups.GroupsDeleteLink(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyGroupsDisableOnlineRequest(r *requests.GroupsDisableOnlineRequest) {
	r.WithGroupId(randInt())
}

func TestVKGroupsDisableOnlineSuccess(t *testing.T) {
	params := requests.NewGroupsDisableOnlineRequest()
	fillRandomlyGroupsDisableOnlineRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "groups.disableOnline", params.Params(), expectedJSON))
	resp, err := vk.Api.Groups.GroupsDisableOnline(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyGroupsEditRequest(r *requests.GroupsEditRequest) {
	r.WithGroupId(randInt())
	r.WithTitle(randString())
	r.WithDescription(randString())
	r.WithScreenName(randString())
	Access := new(models.GroupsGroupAccess)
	fillRandomlyGroupsGroupAccess(Access)
	r.WithAccess(*Access)
	r.WithWebsite(randString())
	Subject := new(models.GroupsGroupSubject)
	fillRandomlyGroupsGroupSubject(Subject)
	r.WithSubject(*Subject)
	r.WithEmail(randString())
	r.WithPhone(randString())
	r.WithRss(randString())
	r.WithEventStartDate(randInt())
	r.WithEventFinishDate(randInt())
	r.WithEventGroupId(randInt())
	r.WithPublicCategory(randInt())
	r.WithPublicSubcategory(randInt())
	r.WithPublicDate(randString())
	Wall := new(models.GroupsGroupWall)
	fillRandomlyGroupsGroupWall(Wall)
	r.WithWall(*Wall)
	Topics := new(models.GroupsGroupTopics)
	fillRandomlyGroupsGroupTopics(Topics)
	r.WithTopics(*Topics)
	Photos := new(models.GroupsGroupPhotos)
	fillRandomlyGroupsGroupPhotos(Photos)
	r.WithPhotos(*Photos)
	Video := new(models.GroupsGroupVideo)
	fillRandomlyGroupsGroupVideo(Video)
	r.WithVideo(*Video)
	Audio := new(models.GroupsGroupAudio)
	fillRandomlyGroupsGroupAudio(Audio)
	r.WithAudio(*Audio)
	r.WithLinks(randBool())
	r.WithEvents(randBool())
	r.WithPlaces(randBool())
	r.WithContacts(randBool())
	Docs := new(models.GroupsGroupDocs)
	fillRandomlyGroupsGroupDocs(Docs)
	r.WithDocs(*Docs)
	Wiki := new(models.GroupsGroupWiki)
	fillRandomlyGroupsGroupWiki(Wiki)
	r.WithWiki(*Wiki)
	r.WithMessages(randBool())
	r.WithArticles(randBool())
	r.WithAddresses(randBool())
	AgeLimits := new(models.GroupsGroupAgeLimits)
	fillRandomlyGroupsGroupAgeLimits(AgeLimits)
	r.WithAgeLimits(*AgeLimits)
	r.WithMarket(randBool())
	r.WithMarketComments(randBool())
	lMarketCountry := randIntn(maxArrayLength + 1)
	r.WithMarketCountry(randIntArr(lMarketCountry))
	lMarketCity := randIntn(maxArrayLength + 1)
	r.WithMarketCity(randIntArr(lMarketCity))
	MarketCurrency := new(models.GroupsGroupMarketCurrency)
	fillRandomlyGroupsGroupMarketCurrency(MarketCurrency)
	r.WithMarketCurrency(*MarketCurrency)
	r.WithMarketContact(randInt())
	r.WithMarketWiki(randInt())
	r.WithObsceneFilter(randBool())
	r.WithObsceneStopwords(randBool())
	lObsceneWords := randIntn(maxArrayLength + 1)
	r.WithObsceneWords(randStringArr(lObsceneWords))
	r.WithMainSection(randInt())
	r.WithSecondarySection(randInt())
	r.WithCountry(randInt())
	r.WithCity(randInt())
}

func TestVKGroupsEditSuccess(t *testing.T) {
	params := requests.NewGroupsEditRequest()
	fillRandomlyGroupsEditRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "groups.edit", params.Params(), expectedJSON))
	resp, err := vk.Api.Groups.GroupsEdit(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyGroupsEditAddressRequest(r *requests.GroupsEditAddressRequest) {
	r.WithGroupId(randInt())
	r.WithAddressId(randInt())
	r.WithTitle(randString())
	r.WithAddress(randString())
	r.WithAdditionalAddress(randString())
	r.WithCountryId(randInt())
	r.WithCityId(randInt())
	r.WithMetroId(randInt())
	r.WithLatitude(randFloat())
	r.WithLongitude(randFloat())
	r.WithPhone(randString())
	WorkInfoStatus := new(models.GroupsAddressWorkInfoStatus)
	fillRandomlyGroupsAddressWorkInfoStatus(WorkInfoStatus)
	r.WithWorkInfoStatus(*WorkInfoStatus)
	r.WithTimetable(randString())
	r.WithIsMainAddress(randBool())
}

func TestVKGroupsEditAddressSuccess(t *testing.T) {
	params := requests.NewGroupsEditAddressRequest()
	fillRandomlyGroupsEditAddressRequest(&params)
	var expected models.GroupsEditAddressResponse
	fillRandomlyGroupsEditAddressResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "groups.editAddress", params.Params(), expectedJSON))
	resp, err := vk.Api.Groups.GroupsEditAddress(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyGroupsEditCallbackServerRequest(r *requests.GroupsEditCallbackServerRequest) {
	r.WithGroupId(randInt())
	r.WithServerId(randInt())
	r.WithUrl(randString())
	r.WithTitle(randString())
	r.WithSecretKey(randString())
}

func TestVKGroupsEditCallbackServerSuccess(t *testing.T) {
	params := requests.NewGroupsEditCallbackServerRequest()
	fillRandomlyGroupsEditCallbackServerRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "groups.editCallbackServer", params.Params(), expectedJSON))
	resp, err := vk.Api.Groups.GroupsEditCallbackServer(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyGroupsEditLinkRequest(r *requests.GroupsEditLinkRequest) {
	r.WithGroupId(randInt())
	r.WithLinkId(randInt())
	r.WithText(randString())
}

func TestVKGroupsEditLinkSuccess(t *testing.T) {
	params := requests.NewGroupsEditLinkRequest()
	fillRandomlyGroupsEditLinkRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "groups.editLink", params.Params(), expectedJSON))
	resp, err := vk.Api.Groups.GroupsEditLink(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyGroupsEditManagerRequest(r *requests.GroupsEditManagerRequest) {
	r.WithGroupId(randInt())
	r.WithUserId(randInt())
	Role := new(models.GroupsGroupRole)
	fillRandomlyGroupsGroupRole(Role)
	r.WithRole(*Role)
	r.WithIsContact(randBool())
	r.WithContactPosition(randString())
	r.WithContactPhone(randString())
	r.WithContactEmail(randString())
}

func TestVKGroupsEditManagerSuccess(t *testing.T) {
	params := requests.NewGroupsEditManagerRequest()
	fillRandomlyGroupsEditManagerRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "groups.editManager", params.Params(), expectedJSON))
	resp, err := vk.Api.Groups.GroupsEditManager(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyGroupsEnableOnlineRequest(r *requests.GroupsEnableOnlineRequest) {
	r.WithGroupId(randInt())
}

func TestVKGroupsEnableOnlineSuccess(t *testing.T) {
	params := requests.NewGroupsEnableOnlineRequest()
	fillRandomlyGroupsEnableOnlineRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "groups.enableOnline", params.Params(), expectedJSON))
	resp, err := vk.Api.Groups.GroupsEnableOnline(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyGroupsGetRequest(r *requests.GroupsGetRequest) {
	r.WithUserId(randInt())
	r.WithExtended(randBool())
	Filter := new([]models.GroupsFilter)
	lFilter := randIntn(maxArrayLength + 1)
	*Filter = make([]models.GroupsFilter, lFilter)
	for i0 := 0; i0 < lFilter; i0++ {
		fillRandomlyGroupsFilter(&(*Filter)[i0])
	}
	r.WithFilter(*Filter)
	Fields := new([]models.GroupsFields)
	lFields := randIntn(maxArrayLength + 1)
	*Fields = make([]models.GroupsFields, lFields)
	for i0 := 0; i0 < lFields; i0++ {
		fillRandomlyGroupsFields(&(*Fields)[i0])
	}
	r.WithFields(*Fields)
	r.WithOffset(randInt())
	r.WithCount(randInt())
}

func TestVKGroupsGetSuccess(t *testing.T) {
	params := requests.NewGroupsGetRequest()
	fillRandomlyGroupsGetRequest(&params)
	params.WithExtended(false)
	var expected models.GroupsGetResponse
	fillRandomlyGroupsGetResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "groups.get", params.Params(), expectedJSON))
	resp, err := vk.Api.Groups.GroupsGet(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func TestVKGroupsGetExtendedSuccess(t *testing.T) {
	params := requests.NewGroupsGetRequest()
	fillRandomlyGroupsGetRequest(&params)
	params.WithExtended(true)
	var expected models.GroupsGetObjectExtendedResponse
	fillRandomlyGroupsGetObjectExtendedResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "groups.get", params.Params(), expectedJSON))
	resp, err := vk.Api.Groups.GroupsGetExtended(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyGroupsGetAddressesRequest(r *requests.GroupsGetAddressesRequest) {
	r.WithGroupId(randInt())
	lAddressIds := randIntn(maxArrayLength + 1)
	r.WithAddressIds(randIntArr(lAddressIds))
	r.WithLatitude(randFloat())
	r.WithLongitude(randFloat())
	r.WithOffset(randInt())
	r.WithCount(randInt())
	Fields := new([]models.AddressesFields)
	lFields := randIntn(maxArrayLength + 1)
	*Fields = make([]models.AddressesFields, lFields)
	for i0 := 0; i0 < lFields; i0++ {
		fillRandomlyAddressesFields(&(*Fields)[i0])
	}
	r.WithFields(*Fields)
}

func TestVKGroupsGetAddressesSuccess(t *testing.T) {
	params := requests.NewGroupsGetAddressesRequest()
	fillRandomlyGroupsGetAddressesRequest(&params)
	var expected models.GroupsGetAddressesResponse
	fillRandomlyGroupsGetAddressesResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "groups.getAddresses", params.Params(), expectedJSON))
	resp, err := vk.Api.Groups.GroupsGetAddresses(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyGroupsGetBannedRequest(r *requests.GroupsGetBannedRequest) {
	r.WithGroupId(randInt())
	r.WithOffset(randInt())
	r.WithCount(randInt())
	Fields := new([]models.BaseUserGroupFields)
	lFields := randIntn(maxArrayLength + 1)
	*Fields = make([]models.BaseUserGroupFields, lFields)
	for i0 := 0; i0 < lFields; i0++ {
		fillRandomlyBaseUserGroupFields(&(*Fields)[i0])
	}
	r.WithFields(*Fields)
	r.WithOwnerId(randInt())
}

func TestVKGroupsGetBannedSuccess(t *testing.T) {
	params := requests.NewGroupsGetBannedRequest()
	fillRandomlyGroupsGetBannedRequest(&params)
	var expected models.GroupsGetBannedResponse
	fillRandomlyGroupsGetBannedResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "groups.getBanned", params.Params(), expectedJSON))
	resp, err := vk.Api.Groups.GroupsGetBanned(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyGroupsGetByIdRequest(r *requests.GroupsGetByIdRequest) {
	lGroupIds := randIntn(maxArrayLength + 1)
	r.WithGroupIds(randStringArr(lGroupIds))
	r.WithGroupId(randString())
	Fields := new([]models.GroupsFields)
	lFields := randIntn(maxArrayLength + 1)
	*Fields = make([]models.GroupsFields, lFields)
	for i0 := 0; i0 < lFields; i0++ {
		fillRandomlyGroupsFields(&(*Fields)[i0])
	}
	r.WithFields(*Fields)
}

func TestVKGroupsGetByIdSuccess(t *testing.T) {
	params := requests.NewGroupsGetByIdRequest()
	fillRandomlyGroupsGetByIdRequest(&params)
	var expected models.GroupsGetByIdObjectLegacyResponse
	fillRandomlyGroupsGetByIdObjectLegacyResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "groups.getById", params.Params(), expectedJSON))
	resp, err := vk.Api.Groups.GroupsGetById(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyGroupsGetCallbackConfirmationCodeRequest(r *requests.GroupsGetCallbackConfirmationCodeRequest) {
	r.WithGroupId(randInt())
}

func TestVKGroupsGetCallbackConfirmationCodeSuccess(t *testing.T) {
	params := requests.NewGroupsGetCallbackConfirmationCodeRequest()
	fillRandomlyGroupsGetCallbackConfirmationCodeRequest(&params)
	var expected models.GroupsGetCallbackConfirmationCodeResponse
	fillRandomlyGroupsGetCallbackConfirmationCodeResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "groups.getCallbackConfirmationCode", params.Params(), expectedJSON))
	resp, err := vk.Api.Groups.GroupsGetCallbackConfirmationCode(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyGroupsGetCallbackServersRequest(r *requests.GroupsGetCallbackServersRequest) {
	r.WithGroupId(randInt())
	lServerIds := randIntn(maxArrayLength + 1)
	r.WithServerIds(randIntArr(lServerIds))
}

func TestVKGroupsGetCallbackServersSuccess(t *testing.T) {
	params := requests.NewGroupsGetCallbackServersRequest()
	fillRandomlyGroupsGetCallbackServersRequest(&params)
	var expected models.GroupsGetCallbackServersResponse
	fillRandomlyGroupsGetCallbackServersResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "groups.getCallbackServers", params.Params(), expectedJSON))
	resp, err := vk.Api.Groups.GroupsGetCallbackServers(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyGroupsGetCallbackSettingsRequest(r *requests.GroupsGetCallbackSettingsRequest) {
	r.WithGroupId(randInt())
	r.WithServerId(randInt())
}

func TestVKGroupsGetCallbackSettingsSuccess(t *testing.T) {
	params := requests.NewGroupsGetCallbackSettingsRequest()
	fillRandomlyGroupsGetCallbackSettingsRequest(&params)
	var expected models.GroupsGetCallbackSettingsResponse
	fillRandomlyGroupsGetCallbackSettingsResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "groups.getCallbackSettings", params.Params(), expectedJSON))
	resp, err := vk.Api.Groups.GroupsGetCallbackSettings(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyGroupsGetCatalogRequest(r *requests.GroupsGetCatalogRequest) {
	r.WithCategoryId(randInt())
	r.WithSubcategoryId(randInt())
}

func TestVKGroupsGetCatalogSuccess(t *testing.T) {
	params := requests.NewGroupsGetCatalogRequest()
	fillRandomlyGroupsGetCatalogRequest(&params)
	var expected models.GroupsGetCatalogResponse
	fillRandomlyGroupsGetCatalogResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "groups.getCatalog", params.Params(), expectedJSON))
	resp, err := vk.Api.Groups.GroupsGetCatalog(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyGroupsGetCatalogInfoRequest(r *requests.GroupsGetCatalogInfoRequest) {
	r.WithExtended(randBool())
	r.WithSubcategories(randBool())
}

func TestVKGroupsGetCatalogInfoSuccess(t *testing.T) {
	params := requests.NewGroupsGetCatalogInfoRequest()
	fillRandomlyGroupsGetCatalogInfoRequest(&params)
	params.WithExtended(false)
	var expected models.GroupsGetCatalogInfoResponse
	fillRandomlyGroupsGetCatalogInfoResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "groups.getCatalogInfo", params.Params(), expectedJSON))
	resp, err := vk.Api.Groups.GroupsGetCatalogInfo(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func TestVKGroupsGetCatalogInfoExtendedSuccess(t *testing.T) {
	params := requests.NewGroupsGetCatalogInfoRequest()
	fillRandomlyGroupsGetCatalogInfoRequest(&params)
	params.WithExtended(true)
	var expected models.GroupsGetCatalogInfoExtendedResponse
	fillRandomlyGroupsGetCatalogInfoExtendedResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "groups.getCatalogInfo", params.Params(), expectedJSON))
	resp, err := vk.Api.Groups.GroupsGetCatalogInfoExtended(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyGroupsGetInvitedUsersRequest(r *requests.GroupsGetInvitedUsersRequest) {
	r.WithGroupId(randInt())
	r.WithOffset(randInt())
	r.WithCount(randInt())
	Fields := new([]models.UsersFields)
	lFields := randIntn(maxArrayLength + 1)
	*Fields = make([]models.UsersFields, lFields)
	for i0 := 0; i0 < lFields; i0++ {
		fillRandomlyUsersFields(&(*Fields)[i0])
	}
	r.WithFields(*Fields)
	r.WithNameCase(randString())
}

func TestVKGroupsGetInvitedUsersSuccess(t *testing.T) {
	params := requests.NewGroupsGetInvitedUsersRequest()
	fillRandomlyGroupsGetInvitedUsersRequest(&params)
	var expected models.GroupsGetInvitedUsersResponse
	fillRandomlyGroupsGetInvitedUsersResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "groups.getInvitedUsers", params.Params(), expectedJSON))
	resp, err := vk.Api.Groups.GroupsGetInvitedUsers(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyGroupsGetInvitesRequest(r *requests.GroupsGetInvitesRequest) {
	r.WithOffset(randInt())
	r.WithCount(randInt())
	r.WithExtended(randBool())
}

func TestVKGroupsGetInvitesSuccess(t *testing.T) {
	params := requests.NewGroupsGetInvitesRequest()
	fillRandomlyGroupsGetInvitesRequest(&params)
	params.WithExtended(false)
	var expected models.GroupsGetInvitesResponse
	fillRandomlyGroupsGetInvitesResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "groups.getInvites", params.Params(), expectedJSON))
	resp, err := vk.Api.Groups.GroupsGetInvites(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func TestVKGroupsGetInvitesExtendedSuccess(t *testing.T) {
	params := requests.NewGroupsGetInvitesRequest()
	fillRandomlyGroupsGetInvitesRequest(&params)
	params.WithExtended(true)
	var expected models.GroupsGetInvitesExtendedResponse
	fillRandomlyGroupsGetInvitesExtendedResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "groups.getInvites", params.Params(), expectedJSON))
	resp, err := vk.Api.Groups.GroupsGetInvitesExtended(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyGroupsGetLongPollServerRequest(r *requests.GroupsGetLongPollServerRequest) {
	r.WithGroupId(randInt())
}

func TestVKGroupsGetLongPollServerSuccess(t *testing.T) {
	params := requests.NewGroupsGetLongPollServerRequest()
	fillRandomlyGroupsGetLongPollServerRequest(&params)
	var expected models.GroupsGetLongPollServerResponse
	fillRandomlyGroupsGetLongPollServerResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "groups.getLongPollServer", params.Params(), expectedJSON))
	resp, err := vk.Api.Groups.GroupsGetLongPollServer(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyGroupsGetLongPollSettingsRequest(r *requests.GroupsGetLongPollSettingsRequest) {
	r.WithGroupId(randInt())
}

func TestVKGroupsGetLongPollSettingsSuccess(t *testing.T) {
	params := requests.NewGroupsGetLongPollSettingsRequest()
	fillRandomlyGroupsGetLongPollSettingsRequest(&params)
	var expected models.GroupsGetLongPollSettingsResponse
	fillRandomlyGroupsGetLongPollSettingsResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "groups.getLongPollSettings", params.Params(), expectedJSON))
	resp, err := vk.Api.Groups.GroupsGetLongPollSettings(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyGroupsGetMembersRequest(r *requests.GroupsGetMembersRequest) {
	r.WithGroupId(randString())
	r.WithSort(randString())
	r.WithOffset(randInt())
	r.WithCount(randInt())
	Fields := new([]models.UsersFields)
	lFields := randIntn(maxArrayLength + 1)
	*Fields = make([]models.UsersFields, lFields)
	for i0 := 0; i0 < lFields; i0++ {
		fillRandomlyUsersFields(&(*Fields)[i0])
	}
	r.WithFields(*Fields)
	r.WithFilter(randString())
}

func TestVKGroupsGetMembersSuccess(t *testing.T) {
	params := requests.NewGroupsGetMembersRequest()
	fillRandomlyGroupsGetMembersRequest(&params)
	var expected models.GroupsGetMembersResponse
	fillRandomlyGroupsGetMembersResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "groups.getMembers", params.Params(), expectedJSON))
	resp, err := vk.Api.Groups.GroupsGetMembers(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyGroupsGetRequestsRequest(r *requests.GroupsGetRequestsRequest) {
	r.WithGroupId(randInt())
	r.WithOffset(randInt())
	r.WithCount(randInt())
	Fields := new([]models.UsersFields)
	lFields := randIntn(maxArrayLength + 1)
	*Fields = make([]models.UsersFields, lFields)
	for i0 := 0; i0 < lFields; i0++ {
		fillRandomlyUsersFields(&(*Fields)[i0])
	}
	r.WithFields(*Fields)
}

func TestVKGroupsGetRequestsSuccess(t *testing.T) {
	params := requests.NewGroupsGetRequestsRequest()
	fillRandomlyGroupsGetRequestsRequest(&params)
	var expected models.GroupsGetRequestsResponse
	fillRandomlyGroupsGetRequestsResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "groups.getRequests", params.Params(), expectedJSON))
	resp, err := vk.Api.Groups.GroupsGetRequests(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyGroupsGetSettingsRequest(r *requests.GroupsGetSettingsRequest) {
	r.WithGroupId(randInt())
}

func TestVKGroupsGetSettingsSuccess(t *testing.T) {
	params := requests.NewGroupsGetSettingsRequest()
	fillRandomlyGroupsGetSettingsRequest(&params)
	var expected models.GroupsGetSettingsResponse
	fillRandomlyGroupsGetSettingsResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "groups.getSettings", params.Params(), expectedJSON))
	resp, err := vk.Api.Groups.GroupsGetSettings(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyGroupsGetTagListRequest(r *requests.GroupsGetTagListRequest) {
	r.WithGroupId(randInt())
}

func TestVKGroupsGetTagListSuccess(t *testing.T) {
	params := requests.NewGroupsGetTagListRequest()
	fillRandomlyGroupsGetTagListRequest(&params)
	var expected models.GroupsGetTagListResponse
	fillRandomlyGroupsGetTagListResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "groups.getTagList", params.Params(), expectedJSON))
	resp, err := vk.Api.Groups.GroupsGetTagList(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func TestVKGroupsGetTokenPermissionsSuccess(t *testing.T) {
	var expected models.GroupsGetTokenPermissionsResponse
	fillRandomlyGroupsGetTokenPermissionsResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "groups.getTokenPermissions", nil, expectedJSON))
	resp, err := vk.Api.Groups.GroupsGetTokenPermissions()
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyGroupsInviteRequest(r *requests.GroupsInviteRequest) {
	r.WithGroupId(randInt())
	r.WithUserId(randInt())
}

func TestVKGroupsInviteSuccess(t *testing.T) {
	params := requests.NewGroupsInviteRequest()
	fillRandomlyGroupsInviteRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "groups.invite", params.Params(), expectedJSON))
	resp, err := vk.Api.Groups.GroupsInvite(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyGroupsIsMemberRequest(r *requests.GroupsIsMemberRequest) {
	r.WithGroupId(randString())
	r.WithUserId(randInt())
	lUserIds := randIntn(maxArrayLength + 1)
	r.WithUserIds(randIntArr(lUserIds))
	r.WithExtended(randBool())
}

func TestVKGroupsIsMemberSuccess(t *testing.T) {
	params := requests.NewGroupsIsMemberRequest()
	fillRandomlyGroupsIsMemberRequest(&params)
	params.WithExtended(false)
	var expected models.GroupsIsMemberResponse
	fillRandomlyGroupsIsMemberResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "groups.isMember", params.Params(), expectedJSON))
	resp, err := vk.Api.Groups.GroupsIsMember(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func TestVKGroupsIsMemberExtendedSuccess(t *testing.T) {
	params := requests.NewGroupsIsMemberRequest()
	fillRandomlyGroupsIsMemberRequest(&params)
	params.WithExtended(true)
	var expected models.GroupsIsMemberExtendedResponse
	fillRandomlyGroupsIsMemberExtendedResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "groups.isMember", params.Params(), expectedJSON))
	resp, err := vk.Api.Groups.GroupsIsMemberExtended(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyGroupsIsMemberUserIDsRequest(r *requests.GroupsIsMemberUserIDsRequest) {
	r.WithGroupId(randString())
	r.WithUserId(randInt())
	lUserIds := randIntn(maxArrayLength + 1)
	r.WithUserIds(randIntArr(lUserIds))
	r.WithExtended(randBool())
}

func TestVKGroupsIsMemberUserIDsSuccess(t *testing.T) {
	params := requests.NewGroupsIsMemberUserIDsRequest()
	fillRandomlyGroupsIsMemberUserIDsRequest(&params)
	params.WithExtended(false)
	var expected models.GroupsIsMemberUserIdsResponse
	fillRandomlyGroupsIsMemberUserIdsResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "groups.isMember", params.Params(), expectedJSON))
	resp, err := vk.Api.Groups.GroupsIsMemberUserIDs(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func TestVKGroupsIsMemberExtendedUserIDsSuccess(t *testing.T) {
	params := requests.NewGroupsIsMemberUserIDsRequest()
	fillRandomlyGroupsIsMemberUserIDsRequest(&params)
	params.WithExtended(true)
	var expected models.GroupsIsMemberUserIdsExtendedResponse
	fillRandomlyGroupsIsMemberUserIdsExtendedResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "groups.isMember", params.Params(), expectedJSON))
	resp, err := vk.Api.Groups.GroupsIsMemberExtendedUserIDs(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyGroupsJoinRequest(r *requests.GroupsJoinRequest) {
	r.WithGroupId(randInt())
	r.WithNotSure(randString())
}

func TestVKGroupsJoinSuccess(t *testing.T) {
	params := requests.NewGroupsJoinRequest()
	fillRandomlyGroupsJoinRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "groups.join", params.Params(), expectedJSON))
	resp, err := vk.Api.Groups.GroupsJoin(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyGroupsLeaveRequest(r *requests.GroupsLeaveRequest) {
	r.WithGroupId(randInt())
}

func TestVKGroupsLeaveSuccess(t *testing.T) {
	params := requests.NewGroupsLeaveRequest()
	fillRandomlyGroupsLeaveRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "groups.leave", params.Params(), expectedJSON))
	resp, err := vk.Api.Groups.GroupsLeave(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyGroupsRemoveUserRequest(r *requests.GroupsRemoveUserRequest) {
	r.WithGroupId(randInt())
	r.WithUserId(randInt())
}

func TestVKGroupsRemoveUserSuccess(t *testing.T) {
	params := requests.NewGroupsRemoveUserRequest()
	fillRandomlyGroupsRemoveUserRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "groups.removeUser", params.Params(), expectedJSON))
	resp, err := vk.Api.Groups.GroupsRemoveUser(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyGroupsReorderLinkRequest(r *requests.GroupsReorderLinkRequest) {
	r.WithGroupId(randInt())
	r.WithLinkId(randInt())
	r.WithAfter(randInt())
}

func TestVKGroupsReorderLinkSuccess(t *testing.T) {
	params := requests.NewGroupsReorderLinkRequest()
	fillRandomlyGroupsReorderLinkRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "groups.reorderLink", params.Params(), expectedJSON))
	resp, err := vk.Api.Groups.GroupsReorderLink(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyGroupsSearchRequest(r *requests.GroupsSearchRequest) {
	r.WithQ(randString())
	r.WithType(randString())
	r.WithCountryId(randInt())
	r.WithCityId(randInt())
	r.WithFuture(randBool())
	r.WithMarket(randBool())
	r.WithSort(randInt())
	r.WithOffset(randInt())
	r.WithCount(randInt())
}

func TestVKGroupsSearchSuccess(t *testing.T) {
	params := requests.NewGroupsSearchRequest()
	fillRandomlyGroupsSearchRequest(&params)
	var expected models.GroupsSearchResponse
	fillRandomlyGroupsSearchResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "groups.search", params.Params(), expectedJSON))
	resp, err := vk.Api.Groups.GroupsSearch(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyGroupsSetCallbackSettingsRequest(r *requests.GroupsSetCallbackSettingsRequest) {
	r.WithGroupId(randInt())
	r.WithServerId(randInt())
	r.WithApiVersion(randString())
	r.WithMessageNew(randBool())
	r.WithMessageReply(randBool())
	r.WithMessageAllow(randBool())
	r.WithMessageEdit(randBool())
	r.WithMessageDeny(randBool())
	r.WithMessageTypingState(randBool())
	r.WithPhotoNew(randBool())
	r.WithAudioNew(randBool())
	r.WithVideoNew(randBool())
	r.WithWallReplyNew(randBool())
	r.WithWallReplyEdit(randBool())
	r.WithWallReplyDelete(randBool())
	r.WithWallReplyRestore(randBool())
	r.WithWallPostNew(randBool())
	r.WithWallRepost(randBool())
	r.WithBoardPostNew(randBool())
	r.WithBoardPostEdit(randBool())
	r.WithBoardPostRestore(randBool())
	r.WithBoardPostDelete(randBool())
	r.WithPhotoCommentNew(randBool())
	r.WithPhotoCommentEdit(randBool())
	r.WithPhotoCommentDelete(randBool())
	r.WithPhotoCommentRestore(randBool())
	r.WithVideoCommentNew(randBool())
	r.WithVideoCommentEdit(randBool())
	r.WithVideoCommentDelete(randBool())
	r.WithVideoCommentRestore(randBool())
	r.WithMarketCommentNew(randBool())
	r.WithMarketCommentEdit(randBool())
	r.WithMarketCommentDelete(randBool())
	r.WithMarketCommentRestore(randBool())
	r.WithMarketOrderNew(randBool())
	r.WithMarketOrderEdit(randBool())
	r.WithPollVoteNew(randBool())
	r.WithGroupJoin(randBool())
	r.WithGroupLeave(randBool())
	r.WithGroupChangeSettings(randBool())
	r.WithGroupChangePhoto(randBool())
	r.WithGroupOfficersEdit(randBool())
	r.WithUserBlock(randBool())
	r.WithUserUnblock(randBool())
	r.WithLeadFormsNew(randBool())
	r.WithLikeAdd(randBool())
	r.WithLikeRemove(randBool())
	r.WithMessageEvent(randBool())
	r.WithDonutSubscriptionCreate(randBool())
	r.WithDonutSubscriptionProlonged(randBool())
	r.WithDonutSubscriptionCancelled(randBool())
	r.WithDonutSubscriptionPriceChanged(randBool())
	r.WithDonutSubscriptionExpired(randBool())
	r.WithDonutMoneyWithdraw(randBool())
	r.WithDonutMoneyWithdrawError(randBool())
}

func TestVKGroupsSetCallbackSettingsSuccess(t *testing.T) {
	params := requests.NewGroupsSetCallbackSettingsRequest()
	fillRandomlyGroupsSetCallbackSettingsRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "groups.setCallbackSettings", params.Params(), expectedJSON))
	resp, err := vk.Api.Groups.GroupsSetCallbackSettings(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyGroupsSetLongPollSettingsRequest(r *requests.GroupsSetLongPollSettingsRequest) {
	r.WithGroupId(randInt())
	r.WithEnabled(randBool())
	r.WithApiVersion(randString())
	r.WithMessageNew(randBool())
	r.WithMessageReply(randBool())
	r.WithMessageAllow(randBool())
	r.WithMessageDeny(randBool())
	r.WithMessageEdit(randBool())
	r.WithMessageTypingState(randBool())
	r.WithPhotoNew(randBool())
	r.WithAudioNew(randBool())
	r.WithVideoNew(randBool())
	r.WithWallReplyNew(randBool())
	r.WithWallReplyEdit(randBool())
	r.WithWallReplyDelete(randBool())
	r.WithWallReplyRestore(randBool())
	r.WithWallPostNew(randBool())
	r.WithWallRepost(randBool())
	r.WithBoardPostNew(randBool())
	r.WithBoardPostEdit(randBool())
	r.WithBoardPostRestore(randBool())
	r.WithBoardPostDelete(randBool())
	r.WithPhotoCommentNew(randBool())
	r.WithPhotoCommentEdit(randBool())
	r.WithPhotoCommentDelete(randBool())
	r.WithPhotoCommentRestore(randBool())
	r.WithVideoCommentNew(randBool())
	r.WithVideoCommentEdit(randBool())
	r.WithVideoCommentDelete(randBool())
	r.WithVideoCommentRestore(randBool())
	r.WithMarketCommentNew(randBool())
	r.WithMarketCommentEdit(randBool())
	r.WithMarketCommentDelete(randBool())
	r.WithMarketCommentRestore(randBool())
	r.WithPollVoteNew(randBool())
	r.WithGroupJoin(randBool())
	r.WithGroupLeave(randBool())
	r.WithGroupChangeSettings(randBool())
	r.WithGroupChangePhoto(randBool())
	r.WithGroupOfficersEdit(randBool())
	r.WithUserBlock(randBool())
	r.WithUserUnblock(randBool())
	r.WithLikeAdd(randBool())
	r.WithLikeRemove(randBool())
	r.WithMessageEvent(randBool())
	r.WithDonutSubscriptionCreate(randBool())
	r.WithDonutSubscriptionProlonged(randBool())
	r.WithDonutSubscriptionCancelled(randBool())
	r.WithDonutSubscriptionPriceChanged(randBool())
	r.WithDonutSubscriptionExpired(randBool())
	r.WithDonutMoneyWithdraw(randBool())
	r.WithDonutMoneyWithdrawError(randBool())
}

func TestVKGroupsSetLongPollSettingsSuccess(t *testing.T) {
	params := requests.NewGroupsSetLongPollSettingsRequest()
	fillRandomlyGroupsSetLongPollSettingsRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "groups.setLongPollSettings", params.Params(), expectedJSON))
	resp, err := vk.Api.Groups.GroupsSetLongPollSettings(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyGroupsSetSettingsRequest(r *requests.GroupsSetSettingsRequest) {
	r.WithGroupId(randInt())
	r.WithMessages(randBool())
	r.WithBotsCapabilities(randBool())
	r.WithBotsStartButton(randBool())
	r.WithBotsAddToChat(randBool())
}

func TestVKGroupsSetSettingsSuccess(t *testing.T) {
	params := requests.NewGroupsSetSettingsRequest()
	fillRandomlyGroupsSetSettingsRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "groups.setSettings", params.Params(), expectedJSON))
	resp, err := vk.Api.Groups.GroupsSetSettings(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyGroupsSetUserNoteRequest(r *requests.GroupsSetUserNoteRequest) {
	r.WithGroupId(randInt())
	r.WithUserId(randInt())
	r.WithNote(randString())
}

func TestVKGroupsSetUserNoteSuccess(t *testing.T) {
	params := requests.NewGroupsSetUserNoteRequest()
	fillRandomlyGroupsSetUserNoteRequest(&params)
	var expected models.BaseBoolResponse
	fillRandomlyBaseBoolResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "groups.setUserNote", params.Params(), expectedJSON))
	resp, err := vk.Api.Groups.GroupsSetUserNote(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyGroupsTagAddRequest(r *requests.GroupsTagAddRequest) {
	r.WithGroupId(randInt())
	r.WithTagName(randString())
	r.WithTagColor(randString())
}

func TestVKGroupsTagAddSuccess(t *testing.T) {
	params := requests.NewGroupsTagAddRequest()
	fillRandomlyGroupsTagAddRequest(&params)
	var expected models.BaseBoolResponse
	fillRandomlyBaseBoolResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "groups.tagAdd", params.Params(), expectedJSON))
	resp, err := vk.Api.Groups.GroupsTagAdd(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyGroupsTagBindRequest(r *requests.GroupsTagBindRequest) {
	r.WithGroupId(randInt())
	r.WithTagId(randInt())
	r.WithUserId(randInt())
	r.WithAct(randString())
}

func TestVKGroupsTagBindSuccess(t *testing.T) {
	params := requests.NewGroupsTagBindRequest()
	fillRandomlyGroupsTagBindRequest(&params)
	var expected models.BaseBoolResponse
	fillRandomlyBaseBoolResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "groups.tagBind", params.Params(), expectedJSON))
	resp, err := vk.Api.Groups.GroupsTagBind(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyGroupsTagDeleteRequest(r *requests.GroupsTagDeleteRequest) {
	r.WithGroupId(randInt())
	r.WithTagId(randInt())
}

func TestVKGroupsTagDeleteSuccess(t *testing.T) {
	params := requests.NewGroupsTagDeleteRequest()
	fillRandomlyGroupsTagDeleteRequest(&params)
	var expected models.BaseBoolResponse
	fillRandomlyBaseBoolResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "groups.tagDelete", params.Params(), expectedJSON))
	resp, err := vk.Api.Groups.GroupsTagDelete(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyGroupsTagUpdateRequest(r *requests.GroupsTagUpdateRequest) {
	r.WithGroupId(randInt())
	r.WithTagId(randInt())
	r.WithTagName(randString())
}

func TestVKGroupsTagUpdateSuccess(t *testing.T) {
	params := requests.NewGroupsTagUpdateRequest()
	fillRandomlyGroupsTagUpdateRequest(&params)
	var expected models.BaseBoolResponse
	fillRandomlyBaseBoolResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "groups.tagUpdate", params.Params(), expectedJSON))
	resp, err := vk.Api.Groups.GroupsTagUpdate(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyGroupsToggleMarketRequest(r *requests.GroupsToggleMarketRequest) {
	r.WithGroupId(randInt())
	State := new(models.GroupsMarketState)
	fillRandomlyGroupsMarketState(State)
	r.WithState(*State)
	r.WithRef(randString())
}

func TestVKGroupsToggleMarketSuccess(t *testing.T) {
	params := requests.NewGroupsToggleMarketRequest()
	fillRandomlyGroupsToggleMarketRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "groups.toggleMarket", params.Params(), expectedJSON))
	resp, err := vk.Api.Groups.GroupsToggleMarket(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyGroupsUnbanRequest(r *requests.GroupsUnbanRequest) {
	r.WithGroupId(randInt())
	r.WithOwnerId(randInt())
}

func TestVKGroupsUnbanSuccess(t *testing.T) {
	params := requests.NewGroupsUnbanRequest()
	fillRandomlyGroupsUnbanRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "groups.unban", params.Params(), expectedJSON))
	resp, err := vk.Api.Groups.GroupsUnban(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

