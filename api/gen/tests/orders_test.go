// Code generated by https://github.com/defany/govk. DO NOT EDIT.

package tests

import (
	"github.com/defany/govk/api/gen/models"
	"github.com/defany/govk/api/gen/orders"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"github.com/defany/govk/vk"
	"testing"
	"encoding/json"
)

func fillRandomlyOrdersCancelSubscriptionRequest(r *requests.OrdersCancelSubscriptionRequest) {
	r.WithUserId(randInt())
	r.WithSubscriptionId(randInt())
	r.WithPendingCancel(randBool())
}

func TestVKOrdersCancelSubscriptionSuccess(t *testing.T) {
	params := requests.NewOrdersCancelSubscriptionRequest()
	fillRandomlyOrdersCancelSubscriptionRequest(&params)
	var expected models.OrdersCancelSubscriptionResponse
	fillRandomlyOrdersCancelSubscriptionResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "orders.cancelSubscription", params.Params(), expectedJSON))
	resp, err := vk.Api.Orders.OrdersCancelSubscription(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyOrdersChangeStateRequest(r *requests.OrdersChangeStateRequest) {
	r.WithOrderId(randInt())
	r.WithAction(randString())
	r.WithAppOrderId(randInt())
	r.WithTestMode(randBool())
}

func TestVKOrdersChangeStateSuccess(t *testing.T) {
	params := requests.NewOrdersChangeStateRequest()
	fillRandomlyOrdersChangeStateRequest(&params)
	var expected models.OrdersChangeStateResponse
	fillRandomlyOrdersChangeStateResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "orders.changeState", params.Params(), expectedJSON))
	resp, err := vk.Api.Orders.OrdersChangeState(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyOrdersGetRequest(r *requests.OrdersGetRequest) {
	r.WithOffset(randInt())
	r.WithCount(randInt())
	r.WithTestMode(randBool())
}

func TestVKOrdersGetSuccess(t *testing.T) {
	params := requests.NewOrdersGetRequest()
	fillRandomlyOrdersGetRequest(&params)
	var expected models.OrdersGetResponse
	fillRandomlyOrdersGetResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "orders.get", params.Params(), expectedJSON))
	resp, err := vk.Api.Orders.OrdersGet(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyOrdersGetAmountRequest(r *requests.OrdersGetAmountRequest) {
	r.WithUserId(randInt())
	lVotes := randIntn(maxArrayLength + 1)
	r.WithVotes(randStringArr(lVotes))
}

func TestVKOrdersGetAmountSuccess(t *testing.T) {
	params := requests.NewOrdersGetAmountRequest()
	fillRandomlyOrdersGetAmountRequest(&params)
	var expected models.OrdersGetAmountResponse
	fillRandomlyOrdersGetAmountResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "orders.getAmount", params.Params(), expectedJSON))
	resp, err := vk.Api.Orders.OrdersGetAmount(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyOrdersGetByIdRequest(r *requests.OrdersGetByIdRequest) {
	r.WithOrderId(randInt())
	lOrderIds := randIntn(maxArrayLength + 1)
	r.WithOrderIds(randIntArr(lOrderIds))
	r.WithTestMode(randBool())
}

func TestVKOrdersGetByIdSuccess(t *testing.T) {
	params := requests.NewOrdersGetByIdRequest()
	fillRandomlyOrdersGetByIdRequest(&params)
	var expected models.OrdersGetByIdResponse
	fillRandomlyOrdersGetByIdResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "orders.getById", params.Params(), expectedJSON))
	resp, err := vk.Api.Orders.OrdersGetById(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyOrdersGetUserSubscriptionByIdRequest(r *requests.OrdersGetUserSubscriptionByIdRequest) {
	r.WithUserId(randInt())
	r.WithSubscriptionId(randInt())
}

func TestVKOrdersGetUserSubscriptionByIdSuccess(t *testing.T) {
	params := requests.NewOrdersGetUserSubscriptionByIdRequest()
	fillRandomlyOrdersGetUserSubscriptionByIdRequest(&params)
	var expected models.OrdersGetUserSubscriptionByIdResponse
	fillRandomlyOrdersGetUserSubscriptionByIdResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "orders.getUserSubscriptionById", params.Params(), expectedJSON))
	resp, err := vk.Api.Orders.OrdersGetUserSubscriptionById(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyOrdersGetUserSubscriptionsRequest(r *requests.OrdersGetUserSubscriptionsRequest) {
	r.WithUserId(randInt())
}

func TestVKOrdersGetUserSubscriptionsSuccess(t *testing.T) {
	params := requests.NewOrdersGetUserSubscriptionsRequest()
	fillRandomlyOrdersGetUserSubscriptionsRequest(&params)
	var expected models.OrdersGetUserSubscriptionsResponse
	fillRandomlyOrdersGetUserSubscriptionsResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "orders.getUserSubscriptions", params.Params(), expectedJSON))
	resp, err := vk.Api.Orders.OrdersGetUserSubscriptions(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyOrdersUpdateSubscriptionRequest(r *requests.OrdersUpdateSubscriptionRequest) {
	r.WithUserId(randInt())
	r.WithSubscriptionId(randInt())
	r.WithPrice(randInt())
}

func TestVKOrdersUpdateSubscriptionSuccess(t *testing.T) {
	params := requests.NewOrdersUpdateSubscriptionRequest()
	fillRandomlyOrdersUpdateSubscriptionRequest(&params)
	var expected models.OrdersUpdateSubscriptionResponse
	fillRandomlyOrdersUpdateSubscriptionResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "orders.updateSubscription", params.Params(), expectedJSON))
	resp, err := vk.Api.Orders.OrdersUpdateSubscription(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

