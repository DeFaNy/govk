// Code generated by https://github.com/defany/govk. DO NOT EDIT.

package tests

import (
	"github.com/defany/govk/api/gen/models"
	"github.com/defany/govk/api/gen/photos"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"github.com/defany/govk/vk"
	"testing"
	"encoding/json"
)

func fillRandomlyPhotosConfirmTagRequest(r *requests.PhotosConfirmTagRequest) {
	r.WithOwnerId(randInt())
	r.WithPhotoId(randString())
	r.WithTagId(randInt())
}

func TestVKPhotosConfirmTagSuccess(t *testing.T) {
	params := requests.NewPhotosConfirmTagRequest()
	fillRandomlyPhotosConfirmTagRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "photos.confirmTag", params.Params(), expectedJSON))
	resp, err := vk.Api.Photos.PhotosConfirmTag(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyPhotosCopyRequest(r *requests.PhotosCopyRequest) {
	r.WithOwnerId(randInt())
	r.WithPhotoId(randInt())
	r.WithAccessKey(randString())
}

func TestVKPhotosCopySuccess(t *testing.T) {
	params := requests.NewPhotosCopyRequest()
	fillRandomlyPhotosCopyRequest(&params)
	var expected models.PhotosCopyResponse
	fillRandomlyPhotosCopyResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "photos.copy", params.Params(), expectedJSON))
	resp, err := vk.Api.Photos.PhotosCopy(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyPhotosCreateAlbumRequest(r *requests.PhotosCreateAlbumRequest) {
	r.WithTitle(randString())
	r.WithGroupId(randInt())
	r.WithDescription(randString())
	lPrivacyView := randIntn(maxArrayLength + 1)
	r.WithPrivacyView(randStringArr(lPrivacyView))
	lPrivacyComment := randIntn(maxArrayLength + 1)
	r.WithPrivacyComment(randStringArr(lPrivacyComment))
	r.WithUploadByAdminsOnly(randBool())
	r.WithCommentsDisabled(randBool())
}

func TestVKPhotosCreateAlbumSuccess(t *testing.T) {
	params := requests.NewPhotosCreateAlbumRequest()
	fillRandomlyPhotosCreateAlbumRequest(&params)
	var expected models.PhotosCreateAlbumResponse
	fillRandomlyPhotosCreateAlbumResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "photos.createAlbum", params.Params(), expectedJSON))
	resp, err := vk.Api.Photos.PhotosCreateAlbum(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyPhotosCreateCommentRequest(r *requests.PhotosCreateCommentRequest) {
	r.WithOwnerId(randInt())
	r.WithPhotoId(randInt())
	r.WithMessage(randString())
	lAttachments := randIntn(maxArrayLength + 1)
	r.WithAttachments(randStringArr(lAttachments))
	r.WithFromGroup(randBool())
	r.WithReplyToComment(randInt())
	r.WithStickerId(randInt())
	r.WithAccessKey(randString())
	r.WithGuid(randString())
}

func TestVKPhotosCreateCommentSuccess(t *testing.T) {
	params := requests.NewPhotosCreateCommentRequest()
	fillRandomlyPhotosCreateCommentRequest(&params)
	var expected models.PhotosCreateCommentResponse
	fillRandomlyPhotosCreateCommentResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "photos.createComment", params.Params(), expectedJSON))
	resp, err := vk.Api.Photos.PhotosCreateComment(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyPhotosDeleteRequest(r *requests.PhotosDeleteRequest) {
	r.WithOwnerId(randInt())
	r.WithPhotoId(randInt())
}

func TestVKPhotosDeleteSuccess(t *testing.T) {
	params := requests.NewPhotosDeleteRequest()
	fillRandomlyPhotosDeleteRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "photos.delete", params.Params(), expectedJSON))
	resp, err := vk.Api.Photos.PhotosDelete(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyPhotosDeleteAlbumRequest(r *requests.PhotosDeleteAlbumRequest) {
	r.WithAlbumId(randInt())
	r.WithGroupId(randInt())
}

func TestVKPhotosDeleteAlbumSuccess(t *testing.T) {
	params := requests.NewPhotosDeleteAlbumRequest()
	fillRandomlyPhotosDeleteAlbumRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "photos.deleteAlbum", params.Params(), expectedJSON))
	resp, err := vk.Api.Photos.PhotosDeleteAlbum(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyPhotosDeleteCommentRequest(r *requests.PhotosDeleteCommentRequest) {
	r.WithOwnerId(randInt())
	r.WithCommentId(randInt())
}

func TestVKPhotosDeleteCommentSuccess(t *testing.T) {
	params := requests.NewPhotosDeleteCommentRequest()
	fillRandomlyPhotosDeleteCommentRequest(&params)
	var expected models.PhotosDeleteCommentResponse
	fillRandomlyPhotosDeleteCommentResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "photos.deleteComment", params.Params(), expectedJSON))
	resp, err := vk.Api.Photos.PhotosDeleteComment(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyPhotosEditRequest(r *requests.PhotosEditRequest) {
	r.WithOwnerId(randInt())
	r.WithPhotoId(randInt())
	r.WithCaption(randString())
	r.WithLatitude(randFloat())
	r.WithLongitude(randFloat())
	r.WithPlaceStr(randString())
	r.WithFoursquareId(randString())
	r.WithDeletePlace(randBool())
}

func TestVKPhotosEditSuccess(t *testing.T) {
	params := requests.NewPhotosEditRequest()
	fillRandomlyPhotosEditRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "photos.edit", params.Params(), expectedJSON))
	resp, err := vk.Api.Photos.PhotosEdit(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyPhotosEditAlbumRequest(r *requests.PhotosEditAlbumRequest) {
	r.WithAlbumId(randInt())
	r.WithTitle(randString())
	r.WithDescription(randString())
	r.WithOwnerId(randInt())
	lPrivacyView := randIntn(maxArrayLength + 1)
	r.WithPrivacyView(randStringArr(lPrivacyView))
	lPrivacyComment := randIntn(maxArrayLength + 1)
	r.WithPrivacyComment(randStringArr(lPrivacyComment))
	r.WithUploadByAdminsOnly(randBool())
	r.WithCommentsDisabled(randBool())
}

func TestVKPhotosEditAlbumSuccess(t *testing.T) {
	params := requests.NewPhotosEditAlbumRequest()
	fillRandomlyPhotosEditAlbumRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "photos.editAlbum", params.Params(), expectedJSON))
	resp, err := vk.Api.Photos.PhotosEditAlbum(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyPhotosEditCommentRequest(r *requests.PhotosEditCommentRequest) {
	r.WithOwnerId(randInt())
	r.WithCommentId(randInt())
	r.WithMessage(randString())
	lAttachments := randIntn(maxArrayLength + 1)
	r.WithAttachments(randStringArr(lAttachments))
}

func TestVKPhotosEditCommentSuccess(t *testing.T) {
	params := requests.NewPhotosEditCommentRequest()
	fillRandomlyPhotosEditCommentRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "photos.editComment", params.Params(), expectedJSON))
	resp, err := vk.Api.Photos.PhotosEditComment(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyPhotosGetRequest(r *requests.PhotosGetRequest) {
	r.WithOwnerId(randInt())
	r.WithAlbumId(randString())
	lPhotoIds := randIntn(maxArrayLength + 1)
	r.WithPhotoIds(randStringArr(lPhotoIds))
	r.WithRev(randBool())
	r.WithExtended(randBool())
	r.WithFeedType(randString())
	r.WithFeed(randInt())
	r.WithPhotoSizes(randBool())
	r.WithOffset(randInt())
	r.WithCount(randInt())
}

func TestVKPhotosGetSuccess(t *testing.T) {
	params := requests.NewPhotosGetRequest()
	fillRandomlyPhotosGetRequest(&params)
	var expected models.PhotosGetResponse
	fillRandomlyPhotosGetResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "photos.get", params.Params(), expectedJSON))
	resp, err := vk.Api.Photos.PhotosGet(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyPhotosGetAlbumsRequest(r *requests.PhotosGetAlbumsRequest) {
	r.WithOwnerId(randInt())
	lAlbumIds := randIntn(maxArrayLength + 1)
	r.WithAlbumIds(randIntArr(lAlbumIds))
	r.WithOffset(randInt())
	r.WithCount(randInt())
	r.WithNeedSystem(randBool())
	r.WithNeedCovers(randBool())
	r.WithPhotoSizes(randBool())
}

func TestVKPhotosGetAlbumsSuccess(t *testing.T) {
	params := requests.NewPhotosGetAlbumsRequest()
	fillRandomlyPhotosGetAlbumsRequest(&params)
	var expected models.PhotosGetAlbumsResponse
	fillRandomlyPhotosGetAlbumsResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "photos.getAlbums", params.Params(), expectedJSON))
	resp, err := vk.Api.Photos.PhotosGetAlbums(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyPhotosGetAlbumsCountRequest(r *requests.PhotosGetAlbumsCountRequest) {
	r.WithUserId(randInt())
	r.WithGroupId(randInt())
}

func TestVKPhotosGetAlbumsCountSuccess(t *testing.T) {
	params := requests.NewPhotosGetAlbumsCountRequest()
	fillRandomlyPhotosGetAlbumsCountRequest(&params)
	var expected models.PhotosGetAlbumsCountResponse
	fillRandomlyPhotosGetAlbumsCountResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "photos.getAlbumsCount", params.Params(), expectedJSON))
	resp, err := vk.Api.Photos.PhotosGetAlbumsCount(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyPhotosGetAllRequest(r *requests.PhotosGetAllRequest) {
	r.WithOwnerId(randInt())
	r.WithExtended(randBool())
	r.WithOffset(randInt())
	r.WithCount(randInt())
	r.WithPhotoSizes(randBool())
	r.WithNoServiceAlbums(randBool())
	r.WithNeedHidden(randBool())
	r.WithSkipHidden(randBool())
}

func TestVKPhotosGetAllSuccess(t *testing.T) {
	params := requests.NewPhotosGetAllRequest()
	fillRandomlyPhotosGetAllRequest(&params)
	params.WithExtended(false)
	var expected models.PhotosGetAllResponse
	fillRandomlyPhotosGetAllResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "photos.getAll", params.Params(), expectedJSON))
	resp, err := vk.Api.Photos.PhotosGetAll(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func TestVKPhotosGetAllExtendedSuccess(t *testing.T) {
	params := requests.NewPhotosGetAllRequest()
	fillRandomlyPhotosGetAllRequest(&params)
	params.WithExtended(true)
	var expected models.PhotosGetAllExtendedResponse
	fillRandomlyPhotosGetAllExtendedResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "photos.getAll", params.Params(), expectedJSON))
	resp, err := vk.Api.Photos.PhotosGetAllExtended(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyPhotosGetAllCommentsRequest(r *requests.PhotosGetAllCommentsRequest) {
	r.WithOwnerId(randInt())
	r.WithAlbumId(randInt())
	r.WithNeedLikes(randBool())
	r.WithOffset(randInt())
	r.WithCount(randInt())
}

func TestVKPhotosGetAllCommentsSuccess(t *testing.T) {
	params := requests.NewPhotosGetAllCommentsRequest()
	fillRandomlyPhotosGetAllCommentsRequest(&params)
	var expected models.PhotosGetAllCommentsResponse
	fillRandomlyPhotosGetAllCommentsResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "photos.getAllComments", params.Params(), expectedJSON))
	resp, err := vk.Api.Photos.PhotosGetAllComments(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyPhotosGetByIdRequest(r *requests.PhotosGetByIdRequest) {
	lPhotos := randIntn(maxArrayLength + 1)
	r.WithPhotos(randStringArr(lPhotos))
	r.WithExtended(randBool())
	r.WithPhotoSizes(randBool())
}

func TestVKPhotosGetByIdSuccess(t *testing.T) {
	params := requests.NewPhotosGetByIdRequest()
	fillRandomlyPhotosGetByIdRequest(&params)
	var expected models.PhotosGetByIdResponse
	fillRandomlyPhotosGetByIdResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "photos.getById", params.Params(), expectedJSON))
	resp, err := vk.Api.Photos.PhotosGetById(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyPhotosGetChatUploadServerRequest(r *requests.PhotosGetChatUploadServerRequest) {
	r.WithChatId(randInt())
	r.WithCropX(randInt())
	r.WithCropY(randInt())
	r.WithCropWidth(randInt())
}

func TestVKPhotosGetChatUploadServerSuccess(t *testing.T) {
	params := requests.NewPhotosGetChatUploadServerRequest()
	fillRandomlyPhotosGetChatUploadServerRequest(&params)
	var expected models.BaseGetUploadServerResponse
	fillRandomlyBaseGetUploadServerResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "photos.getChatUploadServer", params.Params(), expectedJSON))
	resp, err := vk.Api.Photos.PhotosGetChatUploadServer(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyPhotosGetCommentsRequest(r *requests.PhotosGetCommentsRequest) {
	r.WithOwnerId(randInt())
	r.WithPhotoId(randInt())
	r.WithNeedLikes(randBool())
	r.WithStartCommentId(randInt())
	r.WithOffset(randInt())
	r.WithCount(randInt())
	r.WithSort(randString())
	r.WithAccessKey(randString())
	r.WithExtended(randBool())
	Fields := new([]models.UsersFields)
	lFields := randIntn(maxArrayLength + 1)
	*Fields = make([]models.UsersFields, lFields)
	for i0 := 0; i0 < lFields; i0++ {
		fillRandomlyUsersFields(&(*Fields)[i0])
	}
	r.WithFields(*Fields)
}

func TestVKPhotosGetCommentsSuccess(t *testing.T) {
	params := requests.NewPhotosGetCommentsRequest()
	fillRandomlyPhotosGetCommentsRequest(&params)
	params.WithExtended(false)
	var expected models.PhotosGetCommentsResponse
	fillRandomlyPhotosGetCommentsResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "photos.getComments", params.Params(), expectedJSON))
	resp, err := vk.Api.Photos.PhotosGetComments(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func TestVKPhotosGetCommentsExtendedSuccess(t *testing.T) {
	params := requests.NewPhotosGetCommentsRequest()
	fillRandomlyPhotosGetCommentsRequest(&params)
	params.WithExtended(true)
	var expected models.PhotosGetCommentsExtendedResponse
	fillRandomlyPhotosGetCommentsExtendedResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "photos.getComments", params.Params(), expectedJSON))
	resp, err := vk.Api.Photos.PhotosGetCommentsExtended(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyPhotosGetMarketAlbumUploadServerRequest(r *requests.PhotosGetMarketAlbumUploadServerRequest) {
	r.WithGroupId(randInt())
}

func TestVKPhotosGetMarketAlbumUploadServerSuccess(t *testing.T) {
	params := requests.NewPhotosGetMarketAlbumUploadServerRequest()
	fillRandomlyPhotosGetMarketAlbumUploadServerRequest(&params)
	var expected models.BaseGetUploadServerResponse
	fillRandomlyBaseGetUploadServerResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "photos.getMarketAlbumUploadServer", params.Params(), expectedJSON))
	resp, err := vk.Api.Photos.PhotosGetMarketAlbumUploadServer(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyPhotosGetMarketUploadServerRequest(r *requests.PhotosGetMarketUploadServerRequest) {
	r.WithGroupId(randInt())
	r.WithMainPhoto(randBool())
	r.WithCropX(randInt())
	r.WithCropY(randInt())
	r.WithCropWidth(randInt())
}

func TestVKPhotosGetMarketUploadServerSuccess(t *testing.T) {
	params := requests.NewPhotosGetMarketUploadServerRequest()
	fillRandomlyPhotosGetMarketUploadServerRequest(&params)
	var expected models.PhotosGetMarketUploadServerResponse
	fillRandomlyPhotosGetMarketUploadServerResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "photos.getMarketUploadServer", params.Params(), expectedJSON))
	resp, err := vk.Api.Photos.PhotosGetMarketUploadServer(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyPhotosGetMessagesUploadServerRequest(r *requests.PhotosGetMessagesUploadServerRequest) {
	r.WithPeerId(randInt())
}

func TestVKPhotosGetMessagesUploadServerSuccess(t *testing.T) {
	params := requests.NewPhotosGetMessagesUploadServerRequest()
	fillRandomlyPhotosGetMessagesUploadServerRequest(&params)
	var expected models.PhotosGetMessagesUploadServerResponse
	fillRandomlyPhotosGetMessagesUploadServerResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "photos.getMessagesUploadServer", params.Params(), expectedJSON))
	resp, err := vk.Api.Photos.PhotosGetMessagesUploadServer(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyPhotosGetNewTagsRequest(r *requests.PhotosGetNewTagsRequest) {
	r.WithOffset(randInt())
	r.WithCount(randInt())
}

func TestVKPhotosGetNewTagsSuccess(t *testing.T) {
	params := requests.NewPhotosGetNewTagsRequest()
	fillRandomlyPhotosGetNewTagsRequest(&params)
	var expected models.PhotosGetNewTagsResponse
	fillRandomlyPhotosGetNewTagsResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "photos.getNewTags", params.Params(), expectedJSON))
	resp, err := vk.Api.Photos.PhotosGetNewTags(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyPhotosGetOwnerCoverPhotoUploadServerRequest(r *requests.PhotosGetOwnerCoverPhotoUploadServerRequest) {
	r.WithGroupId(randInt())
	r.WithCropX(randInt())
	r.WithCropY(randInt())
	r.WithCropX2(randInt())
	r.WithCropY2(randInt())
}

func TestVKPhotosGetOwnerCoverPhotoUploadServerSuccess(t *testing.T) {
	params := requests.NewPhotosGetOwnerCoverPhotoUploadServerRequest()
	fillRandomlyPhotosGetOwnerCoverPhotoUploadServerRequest(&params)
	var expected models.BaseGetUploadServerResponse
	fillRandomlyBaseGetUploadServerResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "photos.getOwnerCoverPhotoUploadServer", params.Params(), expectedJSON))
	resp, err := vk.Api.Photos.PhotosGetOwnerCoverPhotoUploadServer(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyPhotosGetOwnerPhotoUploadServerRequest(r *requests.PhotosGetOwnerPhotoUploadServerRequest) {
	r.WithOwnerId(randInt())
}

func TestVKPhotosGetOwnerPhotoUploadServerSuccess(t *testing.T) {
	params := requests.NewPhotosGetOwnerPhotoUploadServerRequest()
	fillRandomlyPhotosGetOwnerPhotoUploadServerRequest(&params)
	var expected models.BaseGetUploadServerResponse
	fillRandomlyBaseGetUploadServerResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "photos.getOwnerPhotoUploadServer", params.Params(), expectedJSON))
	resp, err := vk.Api.Photos.PhotosGetOwnerPhotoUploadServer(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyPhotosGetTagsRequest(r *requests.PhotosGetTagsRequest) {
	r.WithOwnerId(randInt())
	r.WithPhotoId(randInt())
	r.WithAccessKey(randString())
}

func TestVKPhotosGetTagsSuccess(t *testing.T) {
	params := requests.NewPhotosGetTagsRequest()
	fillRandomlyPhotosGetTagsRequest(&params)
	var expected models.PhotosGetTagsResponse
	fillRandomlyPhotosGetTagsResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "photos.getTags", params.Params(), expectedJSON))
	resp, err := vk.Api.Photos.PhotosGetTags(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyPhotosGetUploadServerRequest(r *requests.PhotosGetUploadServerRequest) {
	r.WithAlbumId(randInt())
	r.WithGroupId(randInt())
}

func TestVKPhotosGetUploadServerSuccess(t *testing.T) {
	params := requests.NewPhotosGetUploadServerRequest()
	fillRandomlyPhotosGetUploadServerRequest(&params)
	var expected models.PhotosGetUploadServerResponse
	fillRandomlyPhotosGetUploadServerResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "photos.getUploadServer", params.Params(), expectedJSON))
	resp, err := vk.Api.Photos.PhotosGetUploadServer(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyPhotosGetUserPhotosRequest(r *requests.PhotosGetUserPhotosRequest) {
	r.WithUserId(randInt())
	r.WithOffset(randInt())
	r.WithCount(randInt())
	r.WithExtended(randBool())
	r.WithSort(randString())
}

func TestVKPhotosGetUserPhotosSuccess(t *testing.T) {
	params := requests.NewPhotosGetUserPhotosRequest()
	fillRandomlyPhotosGetUserPhotosRequest(&params)
	var expected models.PhotosGetUserPhotosResponse
	fillRandomlyPhotosGetUserPhotosResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "photos.getUserPhotos", params.Params(), expectedJSON))
	resp, err := vk.Api.Photos.PhotosGetUserPhotos(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyPhotosGetWallUploadServerRequest(r *requests.PhotosGetWallUploadServerRequest) {
	r.WithGroupId(randInt())
}

func TestVKPhotosGetWallUploadServerSuccess(t *testing.T) {
	params := requests.NewPhotosGetWallUploadServerRequest()
	fillRandomlyPhotosGetWallUploadServerRequest(&params)
	var expected models.PhotosGetWallUploadServerResponse
	fillRandomlyPhotosGetWallUploadServerResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "photos.getWallUploadServer", params.Params(), expectedJSON))
	resp, err := vk.Api.Photos.PhotosGetWallUploadServer(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyPhotosMakeCoverRequest(r *requests.PhotosMakeCoverRequest) {
	r.WithOwnerId(randInt())
	r.WithPhotoId(randInt())
	r.WithAlbumId(randInt())
}

func TestVKPhotosMakeCoverSuccess(t *testing.T) {
	params := requests.NewPhotosMakeCoverRequest()
	fillRandomlyPhotosMakeCoverRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "photos.makeCover", params.Params(), expectedJSON))
	resp, err := vk.Api.Photos.PhotosMakeCover(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyPhotosMoveRequest(r *requests.PhotosMoveRequest) {
	r.WithOwnerId(randInt())
	r.WithTargetAlbumId(randInt())
	r.WithPhotoIds(randInt())
}

func TestVKPhotosMoveSuccess(t *testing.T) {
	params := requests.NewPhotosMoveRequest()
	fillRandomlyPhotosMoveRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "photos.move", params.Params(), expectedJSON))
	resp, err := vk.Api.Photos.PhotosMove(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyPhotosPutTagRequest(r *requests.PhotosPutTagRequest) {
	r.WithOwnerId(randInt())
	r.WithPhotoId(randInt())
	r.WithUserId(randInt())
	r.WithX(randFloat())
	r.WithY(randFloat())
	r.WithX2(randFloat())
	r.WithY2(randFloat())
}

func TestVKPhotosPutTagSuccess(t *testing.T) {
	params := requests.NewPhotosPutTagRequest()
	fillRandomlyPhotosPutTagRequest(&params)
	var expected models.PhotosPutTagResponse
	fillRandomlyPhotosPutTagResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "photos.putTag", params.Params(), expectedJSON))
	resp, err := vk.Api.Photos.PhotosPutTag(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyPhotosRemoveTagRequest(r *requests.PhotosRemoveTagRequest) {
	r.WithOwnerId(randInt())
	r.WithPhotoId(randInt())
	r.WithTagId(randInt())
}

func TestVKPhotosRemoveTagSuccess(t *testing.T) {
	params := requests.NewPhotosRemoveTagRequest()
	fillRandomlyPhotosRemoveTagRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "photos.removeTag", params.Params(), expectedJSON))
	resp, err := vk.Api.Photos.PhotosRemoveTag(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyPhotosReorderAlbumsRequest(r *requests.PhotosReorderAlbumsRequest) {
	r.WithOwnerId(randInt())
	r.WithAlbumId(randInt())
	r.WithBefore(randInt())
	r.WithAfter(randInt())
}

func TestVKPhotosReorderAlbumsSuccess(t *testing.T) {
	params := requests.NewPhotosReorderAlbumsRequest()
	fillRandomlyPhotosReorderAlbumsRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "photos.reorderAlbums", params.Params(), expectedJSON))
	resp, err := vk.Api.Photos.PhotosReorderAlbums(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyPhotosReorderPhotosRequest(r *requests.PhotosReorderPhotosRequest) {
	r.WithOwnerId(randInt())
	r.WithPhotoId(randInt())
	r.WithBefore(randInt())
	r.WithAfter(randInt())
}

func TestVKPhotosReorderPhotosSuccess(t *testing.T) {
	params := requests.NewPhotosReorderPhotosRequest()
	fillRandomlyPhotosReorderPhotosRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "photos.reorderPhotos", params.Params(), expectedJSON))
	resp, err := vk.Api.Photos.PhotosReorderPhotos(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyPhotosReportRequest(r *requests.PhotosReportRequest) {
	r.WithOwnerId(randInt())
	r.WithPhotoId(randInt())
	r.WithReason(randInt())
}

func TestVKPhotosReportSuccess(t *testing.T) {
	params := requests.NewPhotosReportRequest()
	fillRandomlyPhotosReportRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "photos.report", params.Params(), expectedJSON))
	resp, err := vk.Api.Photos.PhotosReport(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyPhotosReportCommentRequest(r *requests.PhotosReportCommentRequest) {
	r.WithOwnerId(randInt())
	r.WithCommentId(randInt())
	r.WithReason(randInt())
}

func TestVKPhotosReportCommentSuccess(t *testing.T) {
	params := requests.NewPhotosReportCommentRequest()
	fillRandomlyPhotosReportCommentRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "photos.reportComment", params.Params(), expectedJSON))
	resp, err := vk.Api.Photos.PhotosReportComment(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyPhotosRestoreRequest(r *requests.PhotosRestoreRequest) {
	r.WithOwnerId(randInt())
	r.WithPhotoId(randInt())
}

func TestVKPhotosRestoreSuccess(t *testing.T) {
	params := requests.NewPhotosRestoreRequest()
	fillRandomlyPhotosRestoreRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "photos.restore", params.Params(), expectedJSON))
	resp, err := vk.Api.Photos.PhotosRestore(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyPhotosRestoreCommentRequest(r *requests.PhotosRestoreCommentRequest) {
	r.WithOwnerId(randInt())
	r.WithCommentId(randInt())
}

func TestVKPhotosRestoreCommentSuccess(t *testing.T) {
	params := requests.NewPhotosRestoreCommentRequest()
	fillRandomlyPhotosRestoreCommentRequest(&params)
	var expected models.PhotosRestoreCommentResponse
	fillRandomlyPhotosRestoreCommentResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "photos.restoreComment", params.Params(), expectedJSON))
	resp, err := vk.Api.Photos.PhotosRestoreComment(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyPhotosSaveRequest(r *requests.PhotosSaveRequest) {
	r.WithAlbumId(randInt())
	r.WithGroupId(randInt())
	r.WithServer(randInt())
	r.WithPhotosList(randString())
	r.WithHash(randString())
	r.WithLatitude(randFloat())
	r.WithLongitude(randFloat())
	r.WithCaption(randString())
}

func TestVKPhotosSaveSuccess(t *testing.T) {
	params := requests.NewPhotosSaveRequest()
	fillRandomlyPhotosSaveRequest(&params)
	var expected models.PhotosSaveResponse
	fillRandomlyPhotosSaveResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "photos.save", params.Params(), expectedJSON))
	resp, err := vk.Api.Photos.PhotosSave(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyPhotosSaveMarketAlbumPhotoRequest(r *requests.PhotosSaveMarketAlbumPhotoRequest) {
	r.WithGroupId(randInt())
	r.WithPhoto(randString())
	r.WithServer(randInt())
	r.WithHash(randString())
}

func TestVKPhotosSaveMarketAlbumPhotoSuccess(t *testing.T) {
	params := requests.NewPhotosSaveMarketAlbumPhotoRequest()
	fillRandomlyPhotosSaveMarketAlbumPhotoRequest(&params)
	var expected models.PhotosSaveMarketAlbumPhotoResponse
	fillRandomlyPhotosSaveMarketAlbumPhotoResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "photos.saveMarketAlbumPhoto", params.Params(), expectedJSON))
	resp, err := vk.Api.Photos.PhotosSaveMarketAlbumPhoto(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyPhotosSaveMarketPhotoRequest(r *requests.PhotosSaveMarketPhotoRequest) {
	r.WithGroupId(randInt())
	r.WithPhoto(randString())
	r.WithServer(randInt())
	r.WithHash(randString())
	r.WithCropData(randString())
	r.WithCropHash(randString())
}

func TestVKPhotosSaveMarketPhotoSuccess(t *testing.T) {
	params := requests.NewPhotosSaveMarketPhotoRequest()
	fillRandomlyPhotosSaveMarketPhotoRequest(&params)
	var expected models.PhotosSaveMarketPhotoResponse
	fillRandomlyPhotosSaveMarketPhotoResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "photos.saveMarketPhoto", params.Params(), expectedJSON))
	resp, err := vk.Api.Photos.PhotosSaveMarketPhoto(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyPhotosSaveMessagesPhotoRequest(r *requests.PhotosSaveMessagesPhotoRequest) {
	r.WithPhoto(randString())
	r.WithServer(randInt())
	r.WithHash(randString())
}

func TestVKPhotosSaveMessagesPhotoSuccess(t *testing.T) {
	params := requests.NewPhotosSaveMessagesPhotoRequest()
	fillRandomlyPhotosSaveMessagesPhotoRequest(&params)
	var expected models.PhotosSaveMessagesPhotoResponse
	fillRandomlyPhotosSaveMessagesPhotoResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "photos.saveMessagesPhoto", params.Params(), expectedJSON))
	resp, err := vk.Api.Photos.PhotosSaveMessagesPhoto(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyPhotosSaveOwnerCoverPhotoRequest(r *requests.PhotosSaveOwnerCoverPhotoRequest) {
	r.WithHash(randString())
	r.WithPhoto(randString())
}

func TestVKPhotosSaveOwnerCoverPhotoSuccess(t *testing.T) {
	params := requests.NewPhotosSaveOwnerCoverPhotoRequest()
	fillRandomlyPhotosSaveOwnerCoverPhotoRequest(&params)
	var expected models.PhotosSaveOwnerCoverPhotoResponse
	fillRandomlyPhotosSaveOwnerCoverPhotoResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "photos.saveOwnerCoverPhoto", params.Params(), expectedJSON))
	resp, err := vk.Api.Photos.PhotosSaveOwnerCoverPhoto(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyPhotosSaveOwnerPhotoRequest(r *requests.PhotosSaveOwnerPhotoRequest) {
	r.WithServer(randString())
	r.WithHash(randString())
	r.WithPhoto(randString())
}

func TestVKPhotosSaveOwnerPhotoSuccess(t *testing.T) {
	params := requests.NewPhotosSaveOwnerPhotoRequest()
	fillRandomlyPhotosSaveOwnerPhotoRequest(&params)
	var expected models.PhotosSaveOwnerPhotoResponse
	fillRandomlyPhotosSaveOwnerPhotoResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "photos.saveOwnerPhoto", params.Params(), expectedJSON))
	resp, err := vk.Api.Photos.PhotosSaveOwnerPhoto(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyPhotosSaveWallPhotoRequest(r *requests.PhotosSaveWallPhotoRequest) {
	r.WithUserId(randInt())
	r.WithGroupId(randInt())
	r.WithPhoto(randString())
	r.WithServer(randInt())
	r.WithHash(randString())
	r.WithLatitude(randFloat())
	r.WithLongitude(randFloat())
	r.WithCaption(randString())
}

func TestVKPhotosSaveWallPhotoSuccess(t *testing.T) {
	params := requests.NewPhotosSaveWallPhotoRequest()
	fillRandomlyPhotosSaveWallPhotoRequest(&params)
	var expected models.PhotosSaveWallPhotoResponse
	fillRandomlyPhotosSaveWallPhotoResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "photos.saveWallPhoto", params.Params(), expectedJSON))
	resp, err := vk.Api.Photos.PhotosSaveWallPhoto(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyPhotosSearchRequest(r *requests.PhotosSearchRequest) {
	r.WithQ(randString())
	r.WithLat(randFloat())
	r.WithLong(randFloat())
	r.WithStartTime(randInt())
	r.WithEndTime(randInt())
	r.WithSort(randInt())
	r.WithOffset(randInt())
	r.WithCount(randInt())
	r.WithRadius(randInt())
}

func TestVKPhotosSearchSuccess(t *testing.T) {
	params := requests.NewPhotosSearchRequest()
	fillRandomlyPhotosSearchRequest(&params)
	var expected models.PhotosSearchResponse
	fillRandomlyPhotosSearchResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "photos.search", params.Params(), expectedJSON))
	resp, err := vk.Api.Photos.PhotosSearch(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

