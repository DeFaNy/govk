// Code generated by https://github.com/defany/govk. DO NOT EDIT.

package tests

import (
	"github.com/defany/govk/api/gen/models"
	"github.com/defany/govk/api/gen/fave"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"github.com/defany/govk/vk"
	"testing"
	"encoding/json"
)

func fillRandomlyFaveAddArticleRequest(r *requests.FaveAddArticleRequest) {
	r.WithUrl(randString())
}

func TestVKFaveAddArticleSuccess(t *testing.T) {
	params := requests.NewFaveAddArticleRequest()
	fillRandomlyFaveAddArticleRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "fave.addArticle", params.Params(), expectedJSON))
	resp, err := vk.Api.Fave.FaveAddArticle(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyFaveAddLinkRequest(r *requests.FaveAddLinkRequest) {
	r.WithLink(randString())
}

func TestVKFaveAddLinkSuccess(t *testing.T) {
	params := requests.NewFaveAddLinkRequest()
	fillRandomlyFaveAddLinkRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "fave.addLink", params.Params(), expectedJSON))
	resp, err := vk.Api.Fave.FaveAddLink(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyFaveAddPageRequest(r *requests.FaveAddPageRequest) {
	r.WithUserId(randInt())
	r.WithGroupId(randInt())
}

func TestVKFaveAddPageSuccess(t *testing.T) {
	params := requests.NewFaveAddPageRequest()
	fillRandomlyFaveAddPageRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "fave.addPage", params.Params(), expectedJSON))
	resp, err := vk.Api.Fave.FaveAddPage(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyFaveAddPostRequest(r *requests.FaveAddPostRequest) {
	r.WithOwnerId(randInt())
	r.WithId(randInt())
	r.WithAccessKey(randString())
}

func TestVKFaveAddPostSuccess(t *testing.T) {
	params := requests.NewFaveAddPostRequest()
	fillRandomlyFaveAddPostRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "fave.addPost", params.Params(), expectedJSON))
	resp, err := vk.Api.Fave.FaveAddPost(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyFaveAddProductRequest(r *requests.FaveAddProductRequest) {
	r.WithOwnerId(randInt())
	r.WithId(randInt())
	r.WithAccessKey(randString())
}

func TestVKFaveAddProductSuccess(t *testing.T) {
	params := requests.NewFaveAddProductRequest()
	fillRandomlyFaveAddProductRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "fave.addProduct", params.Params(), expectedJSON))
	resp, err := vk.Api.Fave.FaveAddProduct(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyFaveAddTagRequest(r *requests.FaveAddTagRequest) {
	r.WithName(randString())
	r.WithPosition(randString())
}

func TestVKFaveAddTagSuccess(t *testing.T) {
	params := requests.NewFaveAddTagRequest()
	fillRandomlyFaveAddTagRequest(&params)
	var expected models.FaveAddTagResponse
	fillRandomlyFaveAddTagResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "fave.addTag", params.Params(), expectedJSON))
	resp, err := vk.Api.Fave.FaveAddTag(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyFaveAddVideoRequest(r *requests.FaveAddVideoRequest) {
	r.WithOwnerId(randInt())
	r.WithId(randInt())
	r.WithAccessKey(randString())
}

func TestVKFaveAddVideoSuccess(t *testing.T) {
	params := requests.NewFaveAddVideoRequest()
	fillRandomlyFaveAddVideoRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "fave.addVideo", params.Params(), expectedJSON))
	resp, err := vk.Api.Fave.FaveAddVideo(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyFaveEditTagRequest(r *requests.FaveEditTagRequest) {
	r.WithId(randInt())
	r.WithName(randString())
}

func TestVKFaveEditTagSuccess(t *testing.T) {
	params := requests.NewFaveEditTagRequest()
	fillRandomlyFaveEditTagRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "fave.editTag", params.Params(), expectedJSON))
	resp, err := vk.Api.Fave.FaveEditTag(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyFaveGetRequest(r *requests.FaveGetRequest) {
	r.WithExtended(randBool())
	r.WithItemType(randString())
	r.WithTagId(randInt())
	r.WithOffset(randInt())
	r.WithCount(randInt())
	Fields := new([]models.UsersFields)
	lFields := randIntn(maxArrayLength + 1)
	*Fields = make([]models.UsersFields, lFields)
	for i0 := 0; i0 < lFields; i0++ {
		fillRandomlyUsersFields(&(*Fields)[i0])
	}
	r.WithFields(*Fields)
	r.WithIsFromSnackbar(randBool())
}

func TestVKFaveGetSuccess(t *testing.T) {
	params := requests.NewFaveGetRequest()
	fillRandomlyFaveGetRequest(&params)
	params.WithExtended(false)
	var expected models.FaveGetResponse
	fillRandomlyFaveGetResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "fave.get", params.Params(), expectedJSON))
	resp, err := vk.Api.Fave.FaveGet(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func TestVKFaveGetExtendedSuccess(t *testing.T) {
	params := requests.NewFaveGetRequest()
	fillRandomlyFaveGetRequest(&params)
	params.WithExtended(true)
	var expected models.FaveGetExtendedResponse
	fillRandomlyFaveGetExtendedResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "fave.get", params.Params(), expectedJSON))
	resp, err := vk.Api.Fave.FaveGetExtended(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyFaveGetPagesRequest(r *requests.FaveGetPagesRequest) {
	r.WithOffset(randInt())
	r.WithCount(randInt())
	r.WithType(randString())
	Fields := new([]models.BaseUserGroupFields)
	lFields := randIntn(maxArrayLength + 1)
	*Fields = make([]models.BaseUserGroupFields, lFields)
	for i0 := 0; i0 < lFields; i0++ {
		fillRandomlyBaseUserGroupFields(&(*Fields)[i0])
	}
	r.WithFields(*Fields)
	r.WithTagId(randInt())
}

func TestVKFaveGetPagesSuccess(t *testing.T) {
	params := requests.NewFaveGetPagesRequest()
	fillRandomlyFaveGetPagesRequest(&params)
	var expected models.FaveGetPagesResponse
	fillRandomlyFaveGetPagesResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "fave.getPages", params.Params(), expectedJSON))
	resp, err := vk.Api.Fave.FaveGetPages(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func TestVKFaveGetTagsSuccess(t *testing.T) {
	var expected models.FaveGetTagsResponse
	fillRandomlyFaveGetTagsResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "fave.getTags", nil, expectedJSON))
	resp, err := vk.Api.Fave.FaveGetTags()
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func TestVKFaveMarkSeenSuccess(t *testing.T) {
	var expected models.BaseBoolResponse
	fillRandomlyBaseBoolResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "fave.markSeen", nil, expectedJSON))
	resp, err := vk.Api.Fave.FaveMarkSeen()
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyFaveRemoveArticleRequest(r *requests.FaveRemoveArticleRequest) {
	r.WithOwnerId(randInt())
	r.WithArticleId(randInt())
}

func TestVKFaveRemoveArticleSuccess(t *testing.T) {
	params := requests.NewFaveRemoveArticleRequest()
	fillRandomlyFaveRemoveArticleRequest(&params)
	var expected models.BaseBoolResponse
	fillRandomlyBaseBoolResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "fave.removeArticle", params.Params(), expectedJSON))
	resp, err := vk.Api.Fave.FaveRemoveArticle(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyFaveRemoveLinkRequest(r *requests.FaveRemoveLinkRequest) {
	r.WithLinkId(randString())
	r.WithLink(randString())
}

func TestVKFaveRemoveLinkSuccess(t *testing.T) {
	params := requests.NewFaveRemoveLinkRequest()
	fillRandomlyFaveRemoveLinkRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "fave.removeLink", params.Params(), expectedJSON))
	resp, err := vk.Api.Fave.FaveRemoveLink(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyFaveRemovePageRequest(r *requests.FaveRemovePageRequest) {
	r.WithUserId(randInt())
	r.WithGroupId(randInt())
}

func TestVKFaveRemovePageSuccess(t *testing.T) {
	params := requests.NewFaveRemovePageRequest()
	fillRandomlyFaveRemovePageRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "fave.removePage", params.Params(), expectedJSON))
	resp, err := vk.Api.Fave.FaveRemovePage(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyFaveRemovePostRequest(r *requests.FaveRemovePostRequest) {
	r.WithOwnerId(randInt())
	r.WithId(randInt())
}

func TestVKFaveRemovePostSuccess(t *testing.T) {
	params := requests.NewFaveRemovePostRequest()
	fillRandomlyFaveRemovePostRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "fave.removePost", params.Params(), expectedJSON))
	resp, err := vk.Api.Fave.FaveRemovePost(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyFaveRemoveProductRequest(r *requests.FaveRemoveProductRequest) {
	r.WithOwnerId(randInt())
	r.WithId(randInt())
}

func TestVKFaveRemoveProductSuccess(t *testing.T) {
	params := requests.NewFaveRemoveProductRequest()
	fillRandomlyFaveRemoveProductRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "fave.removeProduct", params.Params(), expectedJSON))
	resp, err := vk.Api.Fave.FaveRemoveProduct(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyFaveRemoveTagRequest(r *requests.FaveRemoveTagRequest) {
	r.WithId(randInt())
}

func TestVKFaveRemoveTagSuccess(t *testing.T) {
	params := requests.NewFaveRemoveTagRequest()
	fillRandomlyFaveRemoveTagRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "fave.removeTag", params.Params(), expectedJSON))
	resp, err := vk.Api.Fave.FaveRemoveTag(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyFaveRemoveVideoRequest(r *requests.FaveRemoveVideoRequest) {
	r.WithOwnerId(randInt())
	r.WithId(randInt())
}

func TestVKFaveRemoveVideoSuccess(t *testing.T) {
	params := requests.NewFaveRemoveVideoRequest()
	fillRandomlyFaveRemoveVideoRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "fave.removeVideo", params.Params(), expectedJSON))
	resp, err := vk.Api.Fave.FaveRemoveVideo(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyFaveReorderTagsRequest(r *requests.FaveReorderTagsRequest) {
	lIds := randIntn(maxArrayLength + 1)
	r.WithIds(randIntArr(lIds))
}

func TestVKFaveReorderTagsSuccess(t *testing.T) {
	params := requests.NewFaveReorderTagsRequest()
	fillRandomlyFaveReorderTagsRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "fave.reorderTags", params.Params(), expectedJSON))
	resp, err := vk.Api.Fave.FaveReorderTags(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyFaveSetPageTagsRequest(r *requests.FaveSetPageTagsRequest) {
	r.WithUserId(randInt())
	r.WithGroupId(randInt())
	lTagIds := randIntn(maxArrayLength + 1)
	r.WithTagIds(randIntArr(lTagIds))
}

func TestVKFaveSetPageTagsSuccess(t *testing.T) {
	params := requests.NewFaveSetPageTagsRequest()
	fillRandomlyFaveSetPageTagsRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "fave.setPageTags", params.Params(), expectedJSON))
	resp, err := vk.Api.Fave.FaveSetPageTags(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyFaveSetTagsRequest(r *requests.FaveSetTagsRequest) {
	r.WithItemType(randString())
	r.WithItemOwnerId(randInt())
	r.WithItemId(randInt())
	lTagIds := randIntn(maxArrayLength + 1)
	r.WithTagIds(randIntArr(lTagIds))
	r.WithLinkId(randString())
	r.WithLinkUrl(randString())
}

func TestVKFaveSetTagsSuccess(t *testing.T) {
	params := requests.NewFaveSetTagsRequest()
	fillRandomlyFaveSetTagsRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "fave.setTags", params.Params(), expectedJSON))
	resp, err := vk.Api.Fave.FaveSetTags(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyFaveTrackPageInteractionRequest(r *requests.FaveTrackPageInteractionRequest) {
	r.WithUserId(randInt())
	r.WithGroupId(randInt())
}

func TestVKFaveTrackPageInteractionSuccess(t *testing.T) {
	params := requests.NewFaveTrackPageInteractionRequest()
	fillRandomlyFaveTrackPageInteractionRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "fave.trackPageInteraction", params.Params(), expectedJSON))
	resp, err := vk.Api.Fave.FaveTrackPageInteraction(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

