// Code generated by https://github.com/defany/govk. DO NOT EDIT.

package tests

import (
	"github.com/defany/govk/api/gen/models"
	"github.com/defany/govk/api/gen/polls"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"github.com/defany/govk/vk"
	"testing"
	"encoding/json"
)

func fillRandomlyPollsAddVoteRequest(r *requests.PollsAddVoteRequest) {
	r.WithOwnerId(randInt())
	r.WithPollId(randInt())
	lAnswerIds := randIntn(maxArrayLength + 1)
	r.WithAnswerIds(randIntArr(lAnswerIds))
	r.WithIsBoard(randBool())
}

func TestVKPollsAddVoteSuccess(t *testing.T) {
	params := requests.NewPollsAddVoteRequest()
	fillRandomlyPollsAddVoteRequest(&params)
	var expected models.PollsAddVoteResponse
	fillRandomlyPollsAddVoteResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "polls.addVote", params.Params(), expectedJSON))
	resp, err := vk.Api.Polls.PollsAddVote(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyPollsCreateRequest(r *requests.PollsCreateRequest) {
	r.WithQuestion(randString())
	r.WithIsAnonymous(randBool())
	r.WithIsMultiple(randBool())
	r.WithEndDate(randInt())
	r.WithOwnerId(randInt())
	r.WithAppId(randInt())
	r.WithAddAnswers(randString())
	r.WithPhotoId(randInt())
	r.WithBackgroundId(randInt())
	r.WithDisableUnvote(randBool())
}

func TestVKPollsCreateSuccess(t *testing.T) {
	params := requests.NewPollsCreateRequest()
	fillRandomlyPollsCreateRequest(&params)
	var expected models.PollsCreateResponse
	fillRandomlyPollsCreateResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "polls.create", params.Params(), expectedJSON))
	resp, err := vk.Api.Polls.PollsCreate(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyPollsDeleteVoteRequest(r *requests.PollsDeleteVoteRequest) {
	r.WithOwnerId(randInt())
	r.WithPollId(randInt())
	r.WithAnswerId(randInt())
	r.WithIsBoard(randBool())
}

func TestVKPollsDeleteVoteSuccess(t *testing.T) {
	params := requests.NewPollsDeleteVoteRequest()
	fillRandomlyPollsDeleteVoteRequest(&params)
	var expected models.PollsDeleteVoteResponse
	fillRandomlyPollsDeleteVoteResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "polls.deleteVote", params.Params(), expectedJSON))
	resp, err := vk.Api.Polls.PollsDeleteVote(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyPollsEditRequest(r *requests.PollsEditRequest) {
	r.WithOwnerId(randInt())
	r.WithPollId(randInt())
	r.WithQuestion(randString())
	r.WithAddAnswers(randString())
	r.WithEditAnswers(randString())
	r.WithDeleteAnswers(randString())
	r.WithEndDate(randInt())
	r.WithPhotoId(randInt())
	r.WithBackgroundId(randInt())
}

func TestVKPollsEditSuccess(t *testing.T) {
	params := requests.NewPollsEditRequest()
	fillRandomlyPollsEditRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "polls.edit", params.Params(), expectedJSON))
	resp, err := vk.Api.Polls.PollsEdit(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func TestVKPollsGetBackgroundsSuccess(t *testing.T) {
	var expected models.PollsGetBackgroundsResponse
	fillRandomlyPollsGetBackgroundsResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "polls.getBackgrounds", nil, expectedJSON))
	resp, err := vk.Api.Polls.PollsGetBackgrounds()
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyPollsGetByIdRequest(r *requests.PollsGetByIdRequest) {
	r.WithOwnerId(randInt())
	r.WithIsBoard(randBool())
	r.WithPollId(randInt())
	r.WithExtended(randBool())
	r.WithFriendsCount(randInt())
	lFields := randIntn(maxArrayLength + 1)
	r.WithFields(randStringArr(lFields))
	r.WithNameCase(randString())
}

func TestVKPollsGetByIdSuccess(t *testing.T) {
	params := requests.NewPollsGetByIdRequest()
	fillRandomlyPollsGetByIdRequest(&params)
	var expected models.PollsGetByIdResponse
	fillRandomlyPollsGetByIdResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "polls.getById", params.Params(), expectedJSON))
	resp, err := vk.Api.Polls.PollsGetById(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyPollsGetPhotoUploadServerRequest(r *requests.PollsGetPhotoUploadServerRequest) {
	r.WithOwnerId(randInt())
}

func TestVKPollsGetPhotoUploadServerSuccess(t *testing.T) {
	params := requests.NewPollsGetPhotoUploadServerRequest()
	fillRandomlyPollsGetPhotoUploadServerRequest(&params)
	var expected models.BaseGetUploadServerResponse
	fillRandomlyBaseGetUploadServerResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "polls.getPhotoUploadServer", params.Params(), expectedJSON))
	resp, err := vk.Api.Polls.PollsGetPhotoUploadServer(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyPollsGetVotersRequest(r *requests.PollsGetVotersRequest) {
	r.WithOwnerId(randInt())
	r.WithPollId(randInt())
	lAnswerIds := randIntn(maxArrayLength + 1)
	r.WithAnswerIds(randIntArr(lAnswerIds))
	r.WithIsBoard(randBool())
	r.WithFriendsOnly(randBool())
	r.WithOffset(randInt())
	r.WithCount(randInt())
	Fields := new([]models.UsersFields)
	lFields := randIntn(maxArrayLength + 1)
	*Fields = make([]models.UsersFields, lFields)
	for i0 := 0; i0 < lFields; i0++ {
		fillRandomlyUsersFields(&(*Fields)[i0])
	}
	r.WithFields(*Fields)
	r.WithNameCase(randString())
}

func TestVKPollsGetVotersSuccess(t *testing.T) {
	params := requests.NewPollsGetVotersRequest()
	fillRandomlyPollsGetVotersRequest(&params)
	var expected models.PollsGetVotersResponse
	fillRandomlyPollsGetVotersResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "polls.getVoters", params.Params(), expectedJSON))
	resp, err := vk.Api.Polls.PollsGetVoters(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyPollsSavePhotoRequest(r *requests.PollsSavePhotoRequest) {
	r.WithPhoto(randString())
	r.WithHash(randString())
}

func TestVKPollsSavePhotoSuccess(t *testing.T) {
	params := requests.NewPollsSavePhotoRequest()
	fillRandomlyPollsSavePhotoRequest(&params)
	var expected models.PollsSavePhotoResponse
	fillRandomlyPollsSavePhotoResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "polls.savePhoto", params.Params(), expectedJSON))
	resp, err := vk.Api.Polls.PollsSavePhoto(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

