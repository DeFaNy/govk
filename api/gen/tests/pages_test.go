// Code generated by https://github.com/defany/govk. DO NOT EDIT.

package tests

import (
	"encoding/json"
	"github.com/defany/govk/api/gen/models"
	"github.com/defany/govk/api/gen/pages"
	"github.com/defany/govk/pkg/random"
	"github.com/defany/govk/vk"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func fillRandomlyPagesClearCacheRequest(r *requests.PagesClearCacheRequest) {
	r.WithUrl(random.RandString())
}

func TestVKPagesClearCacheSuccess(t *testing.T) {
	params := requests.NewPagesClearCacheRequest()
	fillRandomlyPagesClearCacheRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "pages.clearCache", params.Params(), expectedJSON))
	resp, err := vk.Api.Pages.PagesClearCache(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyPagesGetRequest(r *requests.PagesGetRequest) {
	r.WithOwnerId(random.RandInt())
	r.WithPageId(random.RandInt())
	r.WithGlobal(random.RandBool())
	r.WithSitePreview(random.RandBool())
	r.WithTitle(random.RandString())
	r.WithNeedSource(random.RandBool())
	r.WithNeedHtml(random.RandBool())
}

func TestVKPagesGetSuccess(t *testing.T) {
	params := requests.NewPagesGetRequest()
	fillRandomlyPagesGetRequest(&params)
	var expected models.PagesGetResponse
	fillRandomlyPagesGetResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "pages.get", params.Params(), expectedJSON))
	resp, err := vk.Api.Pages.PagesGet(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyPagesGetHistoryRequest(r *requests.PagesGetHistoryRequest) {
	r.WithPageId(random.RandInt())
	r.WithGroupId(random.RandInt())
	r.WithUserId(random.RandInt())
}

func TestVKPagesGetHistorySuccess(t *testing.T) {
	params := requests.NewPagesGetHistoryRequest()
	fillRandomlyPagesGetHistoryRequest(&params)
	var expected models.PagesGetHistoryResponse
	fillRandomlyPagesGetHistoryResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "pages.getHistory", params.Params(), expectedJSON))
	resp, err := vk.Api.Pages.PagesGetHistory(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyPagesGetTitlesRequest(r *requests.PagesGetTitlesRequest) {
	r.WithGroupId(random.RandInt())
}

func TestVKPagesGetTitlesSuccess(t *testing.T) {
	params := requests.NewPagesGetTitlesRequest()
	fillRandomlyPagesGetTitlesRequest(&params)
	var expected models.PagesGetTitlesResponse
	fillRandomlyPagesGetTitlesResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "pages.getTitles", params.Params(), expectedJSON))
	resp, err := vk.Api.Pages.PagesGetTitles(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyPagesGetVersionRequest(r *requests.PagesGetVersionRequest) {
	r.WithVersionId(random.RandInt())
	r.WithGroupId(random.RandInt())
	r.WithUserId(random.RandInt())
	r.WithNeedHtml(random.RandBool())
}

func TestVKPagesGetVersionSuccess(t *testing.T) {
	params := requests.NewPagesGetVersionRequest()
	fillRandomlyPagesGetVersionRequest(&params)
	var expected models.PagesGetVersionResponse
	fillRandomlyPagesGetVersionResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "pages.getVersion", params.Params(), expectedJSON))
	resp, err := vk.Api.Pages.PagesGetVersion(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyPagesParseWikiRequest(r *requests.PagesParseWikiRequest) {
	r.WithText(random.RandString())
	r.WithGroupId(random.RandInt())
}

func TestVKPagesParseWikiSuccess(t *testing.T) {
	params := requests.NewPagesParseWikiRequest()
	fillRandomlyPagesParseWikiRequest(&params)
	var expected models.PagesParseWikiResponse
	fillRandomlyPagesParseWikiResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "pages.parseWiki", params.Params(), expectedJSON))
	resp, err := vk.Api.Pages.PagesParseWiki(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyPagesSaveRequest(r *requests.PagesSaveRequest) {
	r.WithText(random.RandString())
	r.WithPageId(random.RandInt())
	r.WithGroupId(random.RandInt())
	r.WithUserId(random.RandInt())
	r.WithTitle(random.RandString())
}

func TestVKPagesSaveSuccess(t *testing.T) {
	params := requests.NewPagesSaveRequest()
	fillRandomlyPagesSaveRequest(&params)
	var expected models.PagesSaveResponse
	fillRandomlyPagesSaveResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "pages.save", params.Params(), expectedJSON))
	resp, err := vk.Api.Pages.PagesSave(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyPagesSaveAccessRequest(r *requests.PagesSaveAccessRequest) {
	r.WithPageId(random.RandInt())
	r.WithGroupId(random.RandInt())
	r.WithUserId(random.RandInt())
	r.WithView(random.RandInt())
	r.WithEdit(random.RandInt())
}

func TestVKPagesSaveAccessSuccess(t *testing.T) {
	params := requests.NewPagesSaveAccessRequest()
	fillRandomlyPagesSaveAccessRequest(&params)
	var expected models.PagesSaveAccessResponse
	fillRandomlyPagesSaveAccessResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "pages.saveAccess", params.Params(), expectedJSON))
	resp, err := vk.Api.Pages.PagesSaveAccess(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}
