// Code generated by https://github.com/defany/govk. DO NOT EDIT.

package tests

import (
	"encoding/json"
	"github.com/defany/govk/api/gen/leadforms"
	"github.com/defany/govk/api/gen/models"
	"github.com/defany/govk/pkg/random"
	"github.com/defany/govk/vk"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func fillRandomlyLeadFormsCreateRequest(r *requests.LeadFormsCreateRequest) {
	r.WithGroupId(random.RandInt())
	r.WithName(random.RandString())
	r.WithTitle(random.RandString())
	r.WithDescription(random.RandString())
	r.WithQuestions(random.RandString())
	r.WithPolicyLinkUrl(random.RandString())
	r.WithPhoto(random.RandString())
	r.WithConfirmation(random.RandString())
	r.WithSiteLinkUrl(random.RandString())
	r.WithActive(random.RandBool())
	r.WithOncePerUser(random.RandBool())
	r.WithPixelCode(random.RandString())
	lNotifyAdmins := random.RandIntn(random.MaxArrayLength + 1)
	r.WithNotifyAdmins(random.RandIntArr(lNotifyAdmins))
	lNotifyEmails := random.RandIntn(random.MaxArrayLength + 1)
	r.WithNotifyEmails(random.RandStringArr(lNotifyEmails))
}

func TestVKLeadFormsCreateSuccess(t *testing.T) {
	params := requests.NewLeadFormsCreateRequest()
	fillRandomlyLeadFormsCreateRequest(&params)
	var expected models.LeadFormsCreateResponse
	fillRandomlyLeadFormsCreateResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "leadForms.create", params.Params(), expectedJSON))
	resp, err := vk.Api.LeadForms.LeadFormsCreate(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyLeadFormsDeleteRequest(r *requests.LeadFormsDeleteRequest) {
	r.WithGroupId(random.RandInt())
	r.WithFormId(random.RandInt())
}

func TestVKLeadFormsDeleteSuccess(t *testing.T) {
	params := requests.NewLeadFormsDeleteRequest()
	fillRandomlyLeadFormsDeleteRequest(&params)
	var expected models.LeadFormsDeleteResponse
	fillRandomlyLeadFormsDeleteResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "leadForms.delete", params.Params(), expectedJSON))
	resp, err := vk.Api.LeadForms.LeadFormsDelete(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyLeadFormsGetRequest(r *requests.LeadFormsGetRequest) {
	r.WithGroupId(random.RandInt())
	r.WithFormId(random.RandInt())
}

func TestVKLeadFormsGetSuccess(t *testing.T) {
	params := requests.NewLeadFormsGetRequest()
	fillRandomlyLeadFormsGetRequest(&params)
	var expected models.LeadFormsGetResponse
	fillRandomlyLeadFormsGetResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "leadForms.get", params.Params(), expectedJSON))
	resp, err := vk.Api.LeadForms.LeadFormsGet(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyLeadFormsGetLeadsRequest(r *requests.LeadFormsGetLeadsRequest) {
	r.WithGroupId(random.RandInt())
	r.WithFormId(random.RandInt())
	r.WithLimit(random.RandInt())
	r.WithNextPageToken(random.RandString())
}

func TestVKLeadFormsGetLeadsSuccess(t *testing.T) {
	params := requests.NewLeadFormsGetLeadsRequest()
	fillRandomlyLeadFormsGetLeadsRequest(&params)
	var expected models.LeadFormsGetLeadsResponse
	fillRandomlyLeadFormsGetLeadsResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "leadForms.getLeads", params.Params(), expectedJSON))
	resp, err := vk.Api.LeadForms.LeadFormsGetLeads(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func TestVKLeadFormsGetUploadURLSuccess(t *testing.T) {
	var expected models.LeadFormsUploadUrlResponse
	fillRandomlyLeadFormsUploadUrlResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "leadForms.getUploadURL", nil, expectedJSON))
	resp, err := vk.Api.LeadForms.LeadFormsGetUploadURL()
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyLeadFormsListRequest(r *requests.LeadFormsListRequest) {
	r.WithGroupId(random.RandInt())
}

func TestVKLeadFormsListSuccess(t *testing.T) {
	params := requests.NewLeadFormsListRequest()
	fillRandomlyLeadFormsListRequest(&params)
	var expected models.LeadFormsListResponse
	fillRandomlyLeadFormsListResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "leadForms.list", params.Params(), expectedJSON))
	resp, err := vk.Api.LeadForms.LeadFormsList(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyLeadFormsUpdateRequest(r *requests.LeadFormsUpdateRequest) {
	r.WithGroupId(random.RandInt())
	r.WithFormId(random.RandInt())
	r.WithName(random.RandString())
	r.WithTitle(random.RandString())
	r.WithDescription(random.RandString())
	r.WithQuestions(random.RandString())
	r.WithPolicyLinkUrl(random.RandString())
	r.WithPhoto(random.RandString())
	r.WithConfirmation(random.RandString())
	r.WithSiteLinkUrl(random.RandString())
	r.WithActive(random.RandBool())
	r.WithOncePerUser(random.RandBool())
	r.WithPixelCode(random.RandString())
	lNotifyAdmins := random.RandIntn(random.MaxArrayLength + 1)
	r.WithNotifyAdmins(random.RandIntArr(lNotifyAdmins))
	lNotifyEmails := random.RandIntn(random.MaxArrayLength + 1)
	r.WithNotifyEmails(random.RandStringArr(lNotifyEmails))
}

func TestVKLeadFormsUpdateSuccess(t *testing.T) {
	params := requests.NewLeadFormsUpdateRequest()
	fillRandomlyLeadFormsUpdateRequest(&params)
	var expected models.LeadFormsCreateResponse
	fillRandomlyLeadFormsCreateResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "leadForms.update", params.Params(), expectedJSON))
	resp, err := vk.Api.LeadForms.LeadFormsUpdate(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}
