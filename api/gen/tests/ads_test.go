// Code generated by https://github.com/defany/govk. DO NOT EDIT.

package tests

import (
	"github.com/defany/govk/api/gen/models"
	"github.com/defany/govk/api/gen/ads"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"github.com/defany/govk/vk"
	"testing"
	"encoding/json"
)

func fillRandomlyAdsAddOfficeUsersRequest(r *requests.AdsAddOfficeUsersRequest) {
	r.WithAccountId(randInt())
	Data := new([]models.AdsUserSpecificationCutted)
	lData := randIntn(maxArrayLength + 1)
	*Data = make([]models.AdsUserSpecificationCutted, lData)
	for i0 := 0; i0 < lData; i0++ {
		fillRandomlyAdsUserSpecificationCutted(&(*Data)[i0])
	}
	r.WithData(*Data)
}

func TestVKAdsAddOfficeUsersSuccess(t *testing.T) {
	params := requests.NewAdsAddOfficeUsersRequest()
	fillRandomlyAdsAddOfficeUsersRequest(&params)
	var expected models.AdsAddOfficeUsersResponse
	fillRandomlyAdsAddOfficeUsersResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "ads.addOfficeUsers", params.Params(), expectedJSON))
	resp, err := vk.Api.Ads.AdsAddOfficeUsers(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyAdsCheckLinkRequest(r *requests.AdsCheckLinkRequest) {
	r.WithAccountId(randInt())
	r.WithLinkType(randString())
	r.WithLinkUrl(randString())
	r.WithCampaignId(randInt())
}

func TestVKAdsCheckLinkSuccess(t *testing.T) {
	params := requests.NewAdsCheckLinkRequest()
	fillRandomlyAdsCheckLinkRequest(&params)
	var expected models.AdsCheckLinkResponse
	fillRandomlyAdsCheckLinkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "ads.checkLink", params.Params(), expectedJSON))
	resp, err := vk.Api.Ads.AdsCheckLink(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyAdsCreateAdsRequest(r *requests.AdsCreateAdsRequest) {
	r.WithAccountId(randInt())
	r.WithData(randString())
}

func TestVKAdsCreateAdsSuccess(t *testing.T) {
	params := requests.NewAdsCreateAdsRequest()
	fillRandomlyAdsCreateAdsRequest(&params)
	var expected models.AdsCreateAdsResponse
	fillRandomlyAdsCreateAdsResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "ads.createAds", params.Params(), expectedJSON))
	resp, err := vk.Api.Ads.AdsCreateAds(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyAdsCreateCampaignsRequest(r *requests.AdsCreateCampaignsRequest) {
	r.WithAccountId(randInt())
	r.WithData(randString())
}

func TestVKAdsCreateCampaignsSuccess(t *testing.T) {
	params := requests.NewAdsCreateCampaignsRequest()
	fillRandomlyAdsCreateCampaignsRequest(&params)
	var expected models.AdsCreateCampaignsResponse
	fillRandomlyAdsCreateCampaignsResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "ads.createCampaigns", params.Params(), expectedJSON))
	resp, err := vk.Api.Ads.AdsCreateCampaigns(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyAdsCreateClientsRequest(r *requests.AdsCreateClientsRequest) {
	r.WithAccountId(randInt())
	r.WithData(randString())
}

func TestVKAdsCreateClientsSuccess(t *testing.T) {
	params := requests.NewAdsCreateClientsRequest()
	fillRandomlyAdsCreateClientsRequest(&params)
	var expected models.AdsCreateClientsResponse
	fillRandomlyAdsCreateClientsResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "ads.createClients", params.Params(), expectedJSON))
	resp, err := vk.Api.Ads.AdsCreateClients(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyAdsCreateTargetGroupRequest(r *requests.AdsCreateTargetGroupRequest) {
	r.WithAccountId(randInt())
	r.WithClientId(randInt())
	r.WithName(randString())
	r.WithLifetime(randInt())
	r.WithTargetPixelId(randInt())
	r.WithTargetPixelRules(randString())
}

func TestVKAdsCreateTargetGroupSuccess(t *testing.T) {
	params := requests.NewAdsCreateTargetGroupRequest()
	fillRandomlyAdsCreateTargetGroupRequest(&params)
	var expected models.AdsCreateTargetGroupResponse
	fillRandomlyAdsCreateTargetGroupResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "ads.createTargetGroup", params.Params(), expectedJSON))
	resp, err := vk.Api.Ads.AdsCreateTargetGroup(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyAdsDeleteAdsRequest(r *requests.AdsDeleteAdsRequest) {
	r.WithAccountId(randInt())
	r.WithIds(randString())
}

func TestVKAdsDeleteAdsSuccess(t *testing.T) {
	params := requests.NewAdsDeleteAdsRequest()
	fillRandomlyAdsDeleteAdsRequest(&params)
	var expected models.AdsDeleteAdsResponse
	fillRandomlyAdsDeleteAdsResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "ads.deleteAds", params.Params(), expectedJSON))
	resp, err := vk.Api.Ads.AdsDeleteAds(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyAdsDeleteCampaignsRequest(r *requests.AdsDeleteCampaignsRequest) {
	r.WithAccountId(randInt())
	r.WithIds(randString())
}

func TestVKAdsDeleteCampaignsSuccess(t *testing.T) {
	params := requests.NewAdsDeleteCampaignsRequest()
	fillRandomlyAdsDeleteCampaignsRequest(&params)
	var expected models.AdsDeleteCampaignsResponse
	fillRandomlyAdsDeleteCampaignsResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "ads.deleteCampaigns", params.Params(), expectedJSON))
	resp, err := vk.Api.Ads.AdsDeleteCampaigns(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyAdsDeleteClientsRequest(r *requests.AdsDeleteClientsRequest) {
	r.WithAccountId(randInt())
	r.WithIds(randString())
}

func TestVKAdsDeleteClientsSuccess(t *testing.T) {
	params := requests.NewAdsDeleteClientsRequest()
	fillRandomlyAdsDeleteClientsRequest(&params)
	var expected models.AdsDeleteClientsResponse
	fillRandomlyAdsDeleteClientsResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "ads.deleteClients", params.Params(), expectedJSON))
	resp, err := vk.Api.Ads.AdsDeleteClients(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyAdsDeleteTargetGroupRequest(r *requests.AdsDeleteTargetGroupRequest) {
	r.WithAccountId(randInt())
	r.WithClientId(randInt())
	r.WithTargetGroupId(randInt())
}

func TestVKAdsDeleteTargetGroupSuccess(t *testing.T) {
	params := requests.NewAdsDeleteTargetGroupRequest()
	fillRandomlyAdsDeleteTargetGroupRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "ads.deleteTargetGroup", params.Params(), expectedJSON))
	resp, err := vk.Api.Ads.AdsDeleteTargetGroup(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func TestVKAdsGetAccountsSuccess(t *testing.T) {
	var expected models.AdsGetAccountsResponse
	fillRandomlyAdsGetAccountsResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "ads.getAccounts", nil, expectedJSON))
	resp, err := vk.Api.Ads.AdsGetAccounts()
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyAdsGetAdsRequest(r *requests.AdsGetAdsRequest) {
	r.WithAccountId(randInt())
	r.WithAdIds(randString())
	r.WithCampaignIds(randString())
	r.WithClientId(randInt())
	r.WithIncludeDeleted(randBool())
	r.WithOnlyDeleted(randBool())
	r.WithLimit(randInt())
	r.WithOffset(randInt())
}

func TestVKAdsGetAdsSuccess(t *testing.T) {
	params := requests.NewAdsGetAdsRequest()
	fillRandomlyAdsGetAdsRequest(&params)
	var expected models.AdsGetAdsResponse
	fillRandomlyAdsGetAdsResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "ads.getAds", params.Params(), expectedJSON))
	resp, err := vk.Api.Ads.AdsGetAds(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyAdsGetAdsLayoutRequest(r *requests.AdsGetAdsLayoutRequest) {
	r.WithAccountId(randInt())
	r.WithClientId(randInt())
	r.WithIncludeDeleted(randBool())
	r.WithOnlyDeleted(randBool())
	r.WithCampaignIds(randString())
	r.WithAdIds(randString())
	r.WithLimit(randInt())
	r.WithOffset(randInt())
}

func TestVKAdsGetAdsLayoutSuccess(t *testing.T) {
	params := requests.NewAdsGetAdsLayoutRequest()
	fillRandomlyAdsGetAdsLayoutRequest(&params)
	var expected models.AdsGetAdsLayoutResponse
	fillRandomlyAdsGetAdsLayoutResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "ads.getAdsLayout", params.Params(), expectedJSON))
	resp, err := vk.Api.Ads.AdsGetAdsLayout(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyAdsGetAdsTargetingRequest(r *requests.AdsGetAdsTargetingRequest) {
	r.WithAccountId(randInt())
	r.WithAdIds(randString())
	r.WithCampaignIds(randString())
	r.WithClientId(randInt())
	r.WithIncludeDeleted(randBool())
	r.WithLimit(randInt())
	r.WithOffset(randInt())
}

func TestVKAdsGetAdsTargetingSuccess(t *testing.T) {
	params := requests.NewAdsGetAdsTargetingRequest()
	fillRandomlyAdsGetAdsTargetingRequest(&params)
	var expected models.AdsGetAdsTargetingResponse
	fillRandomlyAdsGetAdsTargetingResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "ads.getAdsTargeting", params.Params(), expectedJSON))
	resp, err := vk.Api.Ads.AdsGetAdsTargeting(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyAdsGetBudgetRequest(r *requests.AdsGetBudgetRequest) {
	r.WithAccountId(randInt())
}

func TestVKAdsGetBudgetSuccess(t *testing.T) {
	params := requests.NewAdsGetBudgetRequest()
	fillRandomlyAdsGetBudgetRequest(&params)
	var expected models.AdsGetBudgetResponse
	fillRandomlyAdsGetBudgetResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "ads.getBudget", params.Params(), expectedJSON))
	resp, err := vk.Api.Ads.AdsGetBudget(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyAdsGetCampaignsRequest(r *requests.AdsGetCampaignsRequest) {
	r.WithAccountId(randInt())
	r.WithClientId(randInt())
	r.WithIncludeDeleted(randBool())
	r.WithCampaignIds(randString())
	lFields := randIntn(maxArrayLength + 1)
	r.WithFields(randStringArr(lFields))
}

func TestVKAdsGetCampaignsSuccess(t *testing.T) {
	params := requests.NewAdsGetCampaignsRequest()
	fillRandomlyAdsGetCampaignsRequest(&params)
	var expected models.AdsGetCampaignsResponse
	fillRandomlyAdsGetCampaignsResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "ads.getCampaigns", params.Params(), expectedJSON))
	resp, err := vk.Api.Ads.AdsGetCampaigns(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyAdsGetCategoriesRequest(r *requests.AdsGetCategoriesRequest) {
	r.WithLang(randString())
}

func TestVKAdsGetCategoriesSuccess(t *testing.T) {
	params := requests.NewAdsGetCategoriesRequest()
	fillRandomlyAdsGetCategoriesRequest(&params)
	var expected models.AdsGetCategoriesResponse
	fillRandomlyAdsGetCategoriesResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "ads.getCategories", params.Params(), expectedJSON))
	resp, err := vk.Api.Ads.AdsGetCategories(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyAdsGetClientsRequest(r *requests.AdsGetClientsRequest) {
	r.WithAccountId(randInt())
}

func TestVKAdsGetClientsSuccess(t *testing.T) {
	params := requests.NewAdsGetClientsRequest()
	fillRandomlyAdsGetClientsRequest(&params)
	var expected models.AdsGetClientsResponse
	fillRandomlyAdsGetClientsResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "ads.getClients", params.Params(), expectedJSON))
	resp, err := vk.Api.Ads.AdsGetClients(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyAdsGetDemographicsRequest(r *requests.AdsGetDemographicsRequest) {
	r.WithAccountId(randInt())
	r.WithIdsType(randString())
	r.WithIds(randString())
	r.WithPeriod(randString())
	r.WithDateFrom(randString())
	r.WithDateTo(randString())
}

func TestVKAdsGetDemographicsSuccess(t *testing.T) {
	params := requests.NewAdsGetDemographicsRequest()
	fillRandomlyAdsGetDemographicsRequest(&params)
	var expected models.AdsGetDemographicsResponse
	fillRandomlyAdsGetDemographicsResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "ads.getDemographics", params.Params(), expectedJSON))
	resp, err := vk.Api.Ads.AdsGetDemographics(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyAdsGetFloodStatsRequest(r *requests.AdsGetFloodStatsRequest) {
	r.WithAccountId(randInt())
}

func TestVKAdsGetFloodStatsSuccess(t *testing.T) {
	params := requests.NewAdsGetFloodStatsRequest()
	fillRandomlyAdsGetFloodStatsRequest(&params)
	var expected models.AdsGetFloodStatsResponse
	fillRandomlyAdsGetFloodStatsResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "ads.getFloodStats", params.Params(), expectedJSON))
	resp, err := vk.Api.Ads.AdsGetFloodStats(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyAdsGetLookalikeRequestsRequest(r *requests.AdsGetLookalikeRequestsRequest) {
	r.WithAccountId(randInt())
	r.WithClientId(randInt())
	r.WithRequestsIds(randString())
	r.WithOffset(randInt())
	r.WithLimit(randInt())
	r.WithSortBy(randString())
}

func TestVKAdsGetLookalikeRequestsSuccess(t *testing.T) {
	params := requests.NewAdsGetLookalikeRequestsRequest()
	fillRandomlyAdsGetLookalikeRequestsRequest(&params)
	var expected models.AdsGetLookalikeRequestsResponse
	fillRandomlyAdsGetLookalikeRequestsResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "ads.getLookalikeRequests", params.Params(), expectedJSON))
	resp, err := vk.Api.Ads.AdsGetLookalikeRequests(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyAdsGetMusiciansRequest(r *requests.AdsGetMusiciansRequest) {
	r.WithArtistName(randString())
}

func TestVKAdsGetMusiciansSuccess(t *testing.T) {
	params := requests.NewAdsGetMusiciansRequest()
	fillRandomlyAdsGetMusiciansRequest(&params)
	var expected models.AdsGetMusiciansResponse
	fillRandomlyAdsGetMusiciansResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "ads.getMusicians", params.Params(), expectedJSON))
	resp, err := vk.Api.Ads.AdsGetMusicians(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyAdsGetMusiciansByIdsRequest(r *requests.AdsGetMusiciansByIdsRequest) {
	lIds := randIntn(maxArrayLength + 1)
	r.WithIds(randIntArr(lIds))
}

func TestVKAdsGetMusiciansByIdsSuccess(t *testing.T) {
	params := requests.NewAdsGetMusiciansByIdsRequest()
	fillRandomlyAdsGetMusiciansByIdsRequest(&params)
	var expected models.AdsGetMusiciansResponse
	fillRandomlyAdsGetMusiciansResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "ads.getMusiciansByIds", params.Params(), expectedJSON))
	resp, err := vk.Api.Ads.AdsGetMusiciansByIds(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyAdsGetOfficeUsersRequest(r *requests.AdsGetOfficeUsersRequest) {
	r.WithAccountId(randInt())
}

func TestVKAdsGetOfficeUsersSuccess(t *testing.T) {
	params := requests.NewAdsGetOfficeUsersRequest()
	fillRandomlyAdsGetOfficeUsersRequest(&params)
	var expected models.AdsGetOfficeUsersResponse
	fillRandomlyAdsGetOfficeUsersResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "ads.getOfficeUsers", params.Params(), expectedJSON))
	resp, err := vk.Api.Ads.AdsGetOfficeUsers(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyAdsGetPostsReachRequest(r *requests.AdsGetPostsReachRequest) {
	r.WithAccountId(randInt())
	r.WithIdsType(randString())
	r.WithIds(randString())
}

func TestVKAdsGetPostsReachSuccess(t *testing.T) {
	params := requests.NewAdsGetPostsReachRequest()
	fillRandomlyAdsGetPostsReachRequest(&params)
	var expected models.AdsGetPostsReachResponse
	fillRandomlyAdsGetPostsReachResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "ads.getPostsReach", params.Params(), expectedJSON))
	resp, err := vk.Api.Ads.AdsGetPostsReach(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyAdsGetRejectionReasonRequest(r *requests.AdsGetRejectionReasonRequest) {
	r.WithAccountId(randInt())
	r.WithAdId(randInt())
}

func TestVKAdsGetRejectionReasonSuccess(t *testing.T) {
	params := requests.NewAdsGetRejectionReasonRequest()
	fillRandomlyAdsGetRejectionReasonRequest(&params)
	var expected models.AdsGetRejectionReasonResponse
	fillRandomlyAdsGetRejectionReasonResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "ads.getRejectionReason", params.Params(), expectedJSON))
	resp, err := vk.Api.Ads.AdsGetRejectionReason(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyAdsGetStatisticsRequest(r *requests.AdsGetStatisticsRequest) {
	r.WithAccountId(randInt())
	r.WithIdsType(randString())
	r.WithIds(randString())
	r.WithPeriod(randString())
	r.WithDateFrom(randString())
	r.WithDateTo(randString())
	lStatsFields := randIntn(maxArrayLength + 1)
	r.WithStatsFields(randStringArr(lStatsFields))
}

func TestVKAdsGetStatisticsSuccess(t *testing.T) {
	params := requests.NewAdsGetStatisticsRequest()
	fillRandomlyAdsGetStatisticsRequest(&params)
	var expected models.AdsGetStatisticsResponse
	fillRandomlyAdsGetStatisticsResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "ads.getStatistics", params.Params(), expectedJSON))
	resp, err := vk.Api.Ads.AdsGetStatistics(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyAdsGetSuggestionsRequest(r *requests.AdsGetSuggestionsRequest) {
	r.WithSection(randString())
	r.WithIds(randString())
	r.WithQ(randString())
	r.WithCountry(randInt())
	r.WithCities(randString())
	r.WithLang(randString())
}

func TestVKAdsGetSuggestionsSuccess(t *testing.T) {
	params := requests.NewAdsGetSuggestionsRequest()
	fillRandomlyAdsGetSuggestionsRequest(&params)
	var expected models.AdsGetSuggestionsResponse
	fillRandomlyAdsGetSuggestionsResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "ads.getSuggestions", params.Params(), expectedJSON))
	resp, err := vk.Api.Ads.AdsGetSuggestions(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyAdsGetTargetGroupsRequest(r *requests.AdsGetTargetGroupsRequest) {
	r.WithAccountId(randInt())
	r.WithClientId(randInt())
	r.WithExtended(randBool())
}

func TestVKAdsGetTargetGroupsSuccess(t *testing.T) {
	params := requests.NewAdsGetTargetGroupsRequest()
	fillRandomlyAdsGetTargetGroupsRequest(&params)
	var expected models.AdsGetTargetGroupsResponse
	fillRandomlyAdsGetTargetGroupsResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "ads.getTargetGroups", params.Params(), expectedJSON))
	resp, err := vk.Api.Ads.AdsGetTargetGroups(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyAdsGetTargetingStatsRequest(r *requests.AdsGetTargetingStatsRequest) {
	r.WithAccountId(randInt())
	r.WithClientId(randInt())
	r.WithCriteria(randString())
	r.WithAdId(randInt())
	r.WithAdFormat(randInt())
	r.WithAdPlatform(randString())
	r.WithAdPlatformNoWall(randString())
	r.WithAdPlatformNoAdNetwork(randString())
	r.WithPublisherPlatforms(randString())
	r.WithLinkUrl(randString())
	r.WithLinkDomain(randString())
	r.WithNeedPrecise(randBool())
	r.WithImpressionsLimitPeriod(randInt())
}

func TestVKAdsGetTargetingStatsSuccess(t *testing.T) {
	params := requests.NewAdsGetTargetingStatsRequest()
	fillRandomlyAdsGetTargetingStatsRequest(&params)
	var expected models.AdsGetTargetingStatsResponse
	fillRandomlyAdsGetTargetingStatsResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "ads.getTargetingStats", params.Params(), expectedJSON))
	resp, err := vk.Api.Ads.AdsGetTargetingStats(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyAdsGetUploadURLRequest(r *requests.AdsGetUploadURLRequest) {
	r.WithAdFormat(randInt())
	r.WithIcon(randInt())
}

func TestVKAdsGetUploadURLSuccess(t *testing.T) {
	params := requests.NewAdsGetUploadURLRequest()
	fillRandomlyAdsGetUploadURLRequest(&params)
	var expected models.AdsGetUploadURLResponse
	fillRandomlyAdsGetUploadURLResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "ads.getUploadURL", params.Params(), expectedJSON))
	resp, err := vk.Api.Ads.AdsGetUploadURL(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func TestVKAdsGetVideoUploadURLSuccess(t *testing.T) {
	var expected models.AdsGetVideoUploadURLResponse
	fillRandomlyAdsGetVideoUploadURLResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "ads.getVideoUploadURL", nil, expectedJSON))
	resp, err := vk.Api.Ads.AdsGetVideoUploadURL()
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyAdsImportTargetContactsRequest(r *requests.AdsImportTargetContactsRequest) {
	r.WithAccountId(randInt())
	r.WithClientId(randInt())
	r.WithTargetGroupId(randInt())
	r.WithContacts(randString())
}

func TestVKAdsImportTargetContactsSuccess(t *testing.T) {
	params := requests.NewAdsImportTargetContactsRequest()
	fillRandomlyAdsImportTargetContactsRequest(&params)
	var expected models.AdsImportTargetContactsResponse
	fillRandomlyAdsImportTargetContactsResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "ads.importTargetContacts", params.Params(), expectedJSON))
	resp, err := vk.Api.Ads.AdsImportTargetContacts(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyAdsRemoveOfficeUsersRequest(r *requests.AdsRemoveOfficeUsersRequest) {
	r.WithAccountId(randInt())
	r.WithIds(randString())
}

func TestVKAdsRemoveOfficeUsersSuccess(t *testing.T) {
	params := requests.NewAdsRemoveOfficeUsersRequest()
	fillRandomlyAdsRemoveOfficeUsersRequest(&params)
	var expected models.AdsRemoveOfficeUsersResponse
	fillRandomlyAdsRemoveOfficeUsersResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "ads.removeOfficeUsers", params.Params(), expectedJSON))
	resp, err := vk.Api.Ads.AdsRemoveOfficeUsers(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyAdsUpdateAdsRequest(r *requests.AdsUpdateAdsRequest) {
	r.WithAccountId(randInt())
	r.WithData(randString())
}

func TestVKAdsUpdateAdsSuccess(t *testing.T) {
	params := requests.NewAdsUpdateAdsRequest()
	fillRandomlyAdsUpdateAdsRequest(&params)
	var expected models.AdsUpdateAdsResponse
	fillRandomlyAdsUpdateAdsResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "ads.updateAds", params.Params(), expectedJSON))
	resp, err := vk.Api.Ads.AdsUpdateAds(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyAdsUpdateCampaignsRequest(r *requests.AdsUpdateCampaignsRequest) {
	r.WithAccountId(randInt())
	r.WithData(randString())
}

func TestVKAdsUpdateCampaignsSuccess(t *testing.T) {
	params := requests.NewAdsUpdateCampaignsRequest()
	fillRandomlyAdsUpdateCampaignsRequest(&params)
	var expected models.AdsUpdateCampaignsResponse
	fillRandomlyAdsUpdateCampaignsResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "ads.updateCampaigns", params.Params(), expectedJSON))
	resp, err := vk.Api.Ads.AdsUpdateCampaigns(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyAdsUpdateClientsRequest(r *requests.AdsUpdateClientsRequest) {
	r.WithAccountId(randInt())
	r.WithData(randString())
}

func TestVKAdsUpdateClientsSuccess(t *testing.T) {
	params := requests.NewAdsUpdateClientsRequest()
	fillRandomlyAdsUpdateClientsRequest(&params)
	var expected models.AdsUpdateClientsResponse
	fillRandomlyAdsUpdateClientsResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "ads.updateClients", params.Params(), expectedJSON))
	resp, err := vk.Api.Ads.AdsUpdateClients(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyAdsUpdateOfficeUsersRequest(r *requests.AdsUpdateOfficeUsersRequest) {
	r.WithAccountId(randInt())
	Data := new([]models.AdsUserSpecification)
	lData := randIntn(maxArrayLength + 1)
	*Data = make([]models.AdsUserSpecification, lData)
	for i0 := 0; i0 < lData; i0++ {
		fillRandomlyAdsUserSpecification(&(*Data)[i0])
	}
	r.WithData(*Data)
}

func TestVKAdsUpdateOfficeUsersSuccess(t *testing.T) {
	params := requests.NewAdsUpdateOfficeUsersRequest()
	fillRandomlyAdsUpdateOfficeUsersRequest(&params)
	var expected models.AdsUpdateOfficeUsersResponse
	fillRandomlyAdsUpdateOfficeUsersResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "ads.updateOfficeUsers", params.Params(), expectedJSON))
	resp, err := vk.Api.Ads.AdsUpdateOfficeUsers(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyAdsUpdateTargetGroupRequest(r *requests.AdsUpdateTargetGroupRequest) {
	r.WithAccountId(randInt())
	r.WithClientId(randInt())
	r.WithTargetGroupId(randInt())
	r.WithName(randString())
	r.WithDomain(randString())
	r.WithLifetime(randInt())
	r.WithTargetPixelId(randInt())
	r.WithTargetPixelRules(randString())
}

func TestVKAdsUpdateTargetGroupSuccess(t *testing.T) {
	params := requests.NewAdsUpdateTargetGroupRequest()
	fillRandomlyAdsUpdateTargetGroupRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "ads.updateTargetGroup", params.Params(), expectedJSON))
	resp, err := vk.Api.Ads.AdsUpdateTargetGroup(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

