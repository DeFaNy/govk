// Code generated by https://github.com/defany/govk. DO NOT EDIT.

package tests

import (
	"encoding/json"
	"github.com/defany/govk/api/gen/models"
	"github.com/defany/govk/api/gen/notifications"
	"github.com/defany/govk/pkg/random"
	"github.com/defany/govk/vk"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func fillRandomlyNotificationsGetRequest(r *requests.NotificationsGetRequest) {
	r.WithCount(random.RandInt())
	r.WithStartFrom(random.RandString())
	lFilters := random.RandIntn(random.MaxArrayLength + 1)
	r.WithFilters(random.RandStringArr(lFilters))
	r.WithStartTime(random.RandInt())
	r.WithEndTime(random.RandInt())
}

func TestVKNotificationsGetSuccess(t *testing.T) {
	params := requests.NewNotificationsGetRequest()
	fillRandomlyNotificationsGetRequest(&params)
	var expected models.NotificationsGetResponse
	fillRandomlyNotificationsGetResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "notifications.get", params.Params(), expectedJSON))
	resp, err := vk.Api.Notifications.NotificationsGet(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func TestVKNotificationsMarkAsViewedSuccess(t *testing.T) {
	var expected models.NotificationsMarkAsViewedResponse
	fillRandomlyNotificationsMarkAsViewedResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "notifications.markAsViewed", nil, expectedJSON))
	resp, err := vk.Api.Notifications.NotificationsMarkAsViewed()
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyNotificationsSendMessageRequest(r *requests.NotificationsSendMessageRequest) {
	lUserIds := random.RandIntn(random.MaxArrayLength + 1)
	r.WithUserIds(random.RandIntArr(lUserIds))
	r.WithMessage(random.RandString())
	r.WithFragment(random.RandString())
	r.WithGroupId(random.RandInt())
	r.WithRandomId(random.RandInt())
	r.WithSendingMode(random.RandString())
}

func TestVKNotificationsSendMessageSuccess(t *testing.T) {
	params := requests.NewNotificationsSendMessageRequest()
	fillRandomlyNotificationsSendMessageRequest(&params)
	var expected models.NotificationsSendMessageResponse
	fillRandomlyNotificationsSendMessageResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "notifications.sendMessage", params.Params(), expectedJSON))
	resp, err := vk.Api.Notifications.NotificationsSendMessage(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}
