// Code generated by https://github.com/defany/govk. DO NOT EDIT.

package tests

import (
	"encoding/json"
	"github.com/defany/govk/api/gen/models"
	"github.com/defany/govk/api/gen/video"
	"github.com/defany/govk/pkg/random"
	"github.com/defany/govk/vk"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func fillRandomlyVideoAddRequest(r *requests.VideoAddRequest) {
	r.WithTargetId(random.RandInt())
	r.WithVideoId(random.RandInt())
	r.WithOwnerId(random.RandInt())
}

func TestVKVideoAddSuccess(t *testing.T) {
	params := requests.NewVideoAddRequest()
	fillRandomlyVideoAddRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "video.add", params.Params(), expectedJSON))
	resp, err := vk.Api.Video.VideoAdd(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyVideoAddAlbumRequest(r *requests.VideoAddAlbumRequest) {
	r.WithGroupId(random.RandInt())
	r.WithTitle(random.RandString())
	lPrivacy := random.RandIntn(random.MaxArrayLength + 1)
	r.WithPrivacy(random.RandStringArr(lPrivacy))
}

func TestVKVideoAddAlbumSuccess(t *testing.T) {
	params := requests.NewVideoAddAlbumRequest()
	fillRandomlyVideoAddAlbumRequest(&params)
	var expected models.VideoAddAlbumResponse
	fillRandomlyVideoAddAlbumResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "video.addAlbum", params.Params(), expectedJSON))
	resp, err := vk.Api.Video.VideoAddAlbum(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyVideoAddToAlbumRequest(r *requests.VideoAddToAlbumRequest) {
	r.WithTargetId(random.RandInt())
	r.WithAlbumId(random.RandInt())
	lAlbumIds := random.RandIntn(random.MaxArrayLength + 1)
	r.WithAlbumIds(random.RandIntArr(lAlbumIds))
	r.WithOwnerId(random.RandInt())
	r.WithVideoId(random.RandInt())
}

func TestVKVideoAddToAlbumSuccess(t *testing.T) {
	params := requests.NewVideoAddToAlbumRequest()
	fillRandomlyVideoAddToAlbumRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "video.addToAlbum", params.Params(), expectedJSON))
	resp, err := vk.Api.Video.VideoAddToAlbum(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyVideoCreateCommentRequest(r *requests.VideoCreateCommentRequest) {
	r.WithOwnerId(random.RandInt())
	r.WithVideoId(random.RandInt())
	r.WithMessage(random.RandString())
	lAttachments := random.RandIntn(random.MaxArrayLength + 1)
	r.WithAttachments(random.RandStringArr(lAttachments))
	r.WithFromGroup(random.RandBool())
	r.WithReplyToComment(random.RandInt())
	r.WithStickerId(random.RandInt())
	r.WithGuid(random.RandString())
}

func TestVKVideoCreateCommentSuccess(t *testing.T) {
	params := requests.NewVideoCreateCommentRequest()
	fillRandomlyVideoCreateCommentRequest(&params)
	var expected models.VideoCreateCommentResponse
	fillRandomlyVideoCreateCommentResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "video.createComment", params.Params(), expectedJSON))
	resp, err := vk.Api.Video.VideoCreateComment(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyVideoDeleteRequest(r *requests.VideoDeleteRequest) {
	r.WithVideoId(random.RandInt())
	r.WithOwnerId(random.RandInt())
	r.WithTargetId(random.RandInt())
}

func TestVKVideoDeleteSuccess(t *testing.T) {
	params := requests.NewVideoDeleteRequest()
	fillRandomlyVideoDeleteRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "video.delete", params.Params(), expectedJSON))
	resp, err := vk.Api.Video.VideoDelete(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyVideoDeleteAlbumRequest(r *requests.VideoDeleteAlbumRequest) {
	r.WithGroupId(random.RandInt())
	r.WithAlbumId(random.RandInt())
}

func TestVKVideoDeleteAlbumSuccess(t *testing.T) {
	params := requests.NewVideoDeleteAlbumRequest()
	fillRandomlyVideoDeleteAlbumRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "video.deleteAlbum", params.Params(), expectedJSON))
	resp, err := vk.Api.Video.VideoDeleteAlbum(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyVideoDeleteCommentRequest(r *requests.VideoDeleteCommentRequest) {
	r.WithOwnerId(random.RandInt())
	r.WithCommentId(random.RandInt())
}

func TestVKVideoDeleteCommentSuccess(t *testing.T) {
	params := requests.NewVideoDeleteCommentRequest()
	fillRandomlyVideoDeleteCommentRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "video.deleteComment", params.Params(), expectedJSON))
	resp, err := vk.Api.Video.VideoDeleteComment(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyVideoEditRequest(r *requests.VideoEditRequest) {
	r.WithOwnerId(random.RandInt())
	r.WithVideoId(random.RandInt())
	r.WithName(random.RandString())
	r.WithDesc(random.RandString())
	lPrivacyView := random.RandIntn(random.MaxArrayLength + 1)
	r.WithPrivacyView(random.RandStringArr(lPrivacyView))
	lPrivacyComment := random.RandIntn(random.MaxArrayLength + 1)
	r.WithPrivacyComment(random.RandStringArr(lPrivacyComment))
	r.WithNoComments(random.RandBool())
	r.WithRepeat(random.RandBool())
}

func TestVKVideoEditSuccess(t *testing.T) {
	params := requests.NewVideoEditRequest()
	fillRandomlyVideoEditRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "video.edit", params.Params(), expectedJSON))
	resp, err := vk.Api.Video.VideoEdit(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyVideoEditAlbumRequest(r *requests.VideoEditAlbumRequest) {
	r.WithGroupId(random.RandInt())
	r.WithAlbumId(random.RandInt())
	r.WithTitle(random.RandString())
	lPrivacy := random.RandIntn(random.MaxArrayLength + 1)
	r.WithPrivacy(random.RandStringArr(lPrivacy))
}

func TestVKVideoEditAlbumSuccess(t *testing.T) {
	params := requests.NewVideoEditAlbumRequest()
	fillRandomlyVideoEditAlbumRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "video.editAlbum", params.Params(), expectedJSON))
	resp, err := vk.Api.Video.VideoEditAlbum(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyVideoEditCommentRequest(r *requests.VideoEditCommentRequest) {
	r.WithOwnerId(random.RandInt())
	r.WithCommentId(random.RandInt())
	r.WithMessage(random.RandString())
	lAttachments := random.RandIntn(random.MaxArrayLength + 1)
	r.WithAttachments(random.RandStringArr(lAttachments))
}

func TestVKVideoEditCommentSuccess(t *testing.T) {
	params := requests.NewVideoEditCommentRequest()
	fillRandomlyVideoEditCommentRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "video.editComment", params.Params(), expectedJSON))
	resp, err := vk.Api.Video.VideoEditComment(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyVideoGetRequest(r *requests.VideoGetRequest) {
	r.WithOwnerId(random.RandInt())
	lVideos := random.RandIntn(random.MaxArrayLength + 1)
	r.WithVideos(random.RandStringArr(lVideos))
	r.WithAlbumId(random.RandInt())
	r.WithCount(random.RandInt())
	r.WithOffset(random.RandInt())
	r.WithExtended(random.RandBool())
	lFields := random.RandIntn(random.MaxArrayLength + 1)
	r.WithFields(random.RandStringArr(lFields))
}

func TestVKVideoGetSuccess(t *testing.T) {
	params := requests.NewVideoGetRequest()
	fillRandomlyVideoGetRequest(&params)
	var expected models.VideoGetResponse
	fillRandomlyVideoGetResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "video.get", params.Params(), expectedJSON))
	resp, err := vk.Api.Video.VideoGet(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyVideoGetAlbumByIdRequest(r *requests.VideoGetAlbumByIdRequest) {
	r.WithOwnerId(random.RandInt())
	r.WithAlbumId(random.RandInt())
}

func TestVKVideoGetAlbumByIdSuccess(t *testing.T) {
	params := requests.NewVideoGetAlbumByIdRequest()
	fillRandomlyVideoGetAlbumByIdRequest(&params)
	var expected models.VideoGetAlbumByIdResponse
	fillRandomlyVideoGetAlbumByIdResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "video.getAlbumById", params.Params(), expectedJSON))
	resp, err := vk.Api.Video.VideoGetAlbumById(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyVideoGetAlbumsRequest(r *requests.VideoGetAlbumsRequest) {
	r.WithOwnerId(random.RandInt())
	r.WithOffset(random.RandInt())
	r.WithCount(random.RandInt())
	r.WithExtended(random.RandBool())
	r.WithNeedSystem(random.RandBool())
}

func TestVKVideoGetAlbumsSuccess(t *testing.T) {
	params := requests.NewVideoGetAlbumsRequest()
	fillRandomlyVideoGetAlbumsRequest(&params)
	params.WithExtended(false)
	var expected models.VideoGetAlbumsResponse
	fillRandomlyVideoGetAlbumsResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "video.getAlbums", params.Params(), expectedJSON))
	resp, err := vk.Api.Video.VideoGetAlbums(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func TestVKVideoGetAlbumsExtendedSuccess(t *testing.T) {
	params := requests.NewVideoGetAlbumsRequest()
	fillRandomlyVideoGetAlbumsRequest(&params)
	params.WithExtended(true)
	var expected models.VideoGetAlbumsExtendedResponse
	fillRandomlyVideoGetAlbumsExtendedResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "video.getAlbums", params.Params(), expectedJSON))
	resp, err := vk.Api.Video.VideoGetAlbumsExtended(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyVideoGetAlbumsByVideoRequest(r *requests.VideoGetAlbumsByVideoRequest) {
	r.WithTargetId(random.RandInt())
	r.WithOwnerId(random.RandInt())
	r.WithVideoId(random.RandInt())
	r.WithExtended(random.RandBool())
}

func TestVKVideoGetAlbumsByVideoSuccess(t *testing.T) {
	params := requests.NewVideoGetAlbumsByVideoRequest()
	fillRandomlyVideoGetAlbumsByVideoRequest(&params)
	params.WithExtended(false)
	var expected models.VideoGetAlbumsByVideoResponse
	fillRandomlyVideoGetAlbumsByVideoResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "video.getAlbumsByVideo", params.Params(), expectedJSON))
	resp, err := vk.Api.Video.VideoGetAlbumsByVideo(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func TestVKVideoGetAlbumsByVideoExtendedSuccess(t *testing.T) {
	params := requests.NewVideoGetAlbumsByVideoRequest()
	fillRandomlyVideoGetAlbumsByVideoRequest(&params)
	params.WithExtended(true)
	var expected models.VideoGetAlbumsByVideoExtendedResponse
	fillRandomlyVideoGetAlbumsByVideoExtendedResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "video.getAlbumsByVideo", params.Params(), expectedJSON))
	resp, err := vk.Api.Video.VideoGetAlbumsByVideoExtended(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyVideoGetCommentsRequest(r *requests.VideoGetCommentsRequest) {
	r.WithOwnerId(random.RandInt())
	r.WithVideoId(random.RandInt())
	r.WithNeedLikes(random.RandBool())
	r.WithStartCommentId(random.RandInt())
	r.WithOffset(random.RandInt())
	r.WithCount(random.RandInt())
	r.WithSort(random.RandString())
	r.WithExtended(random.RandBool())
	lFields := random.RandIntn(random.MaxArrayLength + 1)
	r.WithFields(random.RandStringArr(lFields))
}

func TestVKVideoGetCommentsSuccess(t *testing.T) {
	params := requests.NewVideoGetCommentsRequest()
	fillRandomlyVideoGetCommentsRequest(&params)
	params.WithExtended(false)
	var expected models.VideoGetCommentsResponse
	fillRandomlyVideoGetCommentsResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "video.getComments", params.Params(), expectedJSON))
	resp, err := vk.Api.Video.VideoGetComments(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func TestVKVideoGetCommentsExtendedSuccess(t *testing.T) {
	params := requests.NewVideoGetCommentsRequest()
	fillRandomlyVideoGetCommentsRequest(&params)
	params.WithExtended(true)
	var expected models.VideoGetCommentsExtendedResponse
	fillRandomlyVideoGetCommentsExtendedResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "video.getComments", params.Params(), expectedJSON))
	resp, err := vk.Api.Video.VideoGetCommentsExtended(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyVideoRemoveFromAlbumRequest(r *requests.VideoRemoveFromAlbumRequest) {
	r.WithTargetId(random.RandInt())
	r.WithAlbumId(random.RandInt())
	lAlbumIds := random.RandIntn(random.MaxArrayLength + 1)
	r.WithAlbumIds(random.RandIntArr(lAlbumIds))
	r.WithOwnerId(random.RandInt())
	r.WithVideoId(random.RandInt())
}

func TestVKVideoRemoveFromAlbumSuccess(t *testing.T) {
	params := requests.NewVideoRemoveFromAlbumRequest()
	fillRandomlyVideoRemoveFromAlbumRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "video.removeFromAlbum", params.Params(), expectedJSON))
	resp, err := vk.Api.Video.VideoRemoveFromAlbum(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyVideoReorderAlbumsRequest(r *requests.VideoReorderAlbumsRequest) {
	r.WithOwnerId(random.RandInt())
	r.WithAlbumId(random.RandInt())
	r.WithBefore(random.RandInt())
	r.WithAfter(random.RandInt())
}

func TestVKVideoReorderAlbumsSuccess(t *testing.T) {
	params := requests.NewVideoReorderAlbumsRequest()
	fillRandomlyVideoReorderAlbumsRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "video.reorderAlbums", params.Params(), expectedJSON))
	resp, err := vk.Api.Video.VideoReorderAlbums(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyVideoReorderVideosRequest(r *requests.VideoReorderVideosRequest) {
	r.WithTargetId(random.RandInt())
	r.WithAlbumId(random.RandInt())
	r.WithOwnerId(random.RandInt())
	r.WithVideoId(random.RandInt())
	r.WithBeforeOwnerId(random.RandInt())
	r.WithBeforeVideoId(random.RandInt())
	r.WithAfterOwnerId(random.RandInt())
	r.WithAfterVideoId(random.RandInt())
}

func TestVKVideoReorderVideosSuccess(t *testing.T) {
	params := requests.NewVideoReorderVideosRequest()
	fillRandomlyVideoReorderVideosRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "video.reorderVideos", params.Params(), expectedJSON))
	resp, err := vk.Api.Video.VideoReorderVideos(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyVideoReportRequest(r *requests.VideoReportRequest) {
	r.WithOwnerId(random.RandInt())
	r.WithVideoId(random.RandInt())
	r.WithReason(random.RandInt())
	r.WithComment(random.RandString())
	r.WithSearchQuery(random.RandString())
}

func TestVKVideoReportSuccess(t *testing.T) {
	params := requests.NewVideoReportRequest()
	fillRandomlyVideoReportRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "video.report", params.Params(), expectedJSON))
	resp, err := vk.Api.Video.VideoReport(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyVideoReportCommentRequest(r *requests.VideoReportCommentRequest) {
	r.WithOwnerId(random.RandInt())
	r.WithCommentId(random.RandInt())
	r.WithReason(random.RandInt())
}

func TestVKVideoReportCommentSuccess(t *testing.T) {
	params := requests.NewVideoReportCommentRequest()
	fillRandomlyVideoReportCommentRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "video.reportComment", params.Params(), expectedJSON))
	resp, err := vk.Api.Video.VideoReportComment(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyVideoRestoreRequest(r *requests.VideoRestoreRequest) {
	r.WithVideoId(random.RandInt())
	r.WithOwnerId(random.RandInt())
}

func TestVKVideoRestoreSuccess(t *testing.T) {
	params := requests.NewVideoRestoreRequest()
	fillRandomlyVideoRestoreRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "video.restore", params.Params(), expectedJSON))
	resp, err := vk.Api.Video.VideoRestore(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyVideoRestoreCommentRequest(r *requests.VideoRestoreCommentRequest) {
	r.WithOwnerId(random.RandInt())
	r.WithCommentId(random.RandInt())
}

func TestVKVideoRestoreCommentSuccess(t *testing.T) {
	params := requests.NewVideoRestoreCommentRequest()
	fillRandomlyVideoRestoreCommentRequest(&params)
	var expected models.VideoRestoreCommentResponse
	fillRandomlyVideoRestoreCommentResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "video.restoreComment", params.Params(), expectedJSON))
	resp, err := vk.Api.Video.VideoRestoreComment(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyVideoSaveRequest(r *requests.VideoSaveRequest) {
	r.WithName(random.RandString())
	r.WithDescription(random.RandString())
	r.WithIsPrivate(random.RandBool())
	r.WithWallpost(random.RandBool())
	r.WithLink(random.RandString())
	r.WithGroupId(random.RandInt())
	r.WithAlbumId(random.RandInt())
	lPrivacyView := random.RandIntn(random.MaxArrayLength + 1)
	r.WithPrivacyView(random.RandStringArr(lPrivacyView))
	lPrivacyComment := random.RandIntn(random.MaxArrayLength + 1)
	r.WithPrivacyComment(random.RandStringArr(lPrivacyComment))
	r.WithNoComments(random.RandBool())
	r.WithRepeat(random.RandBool())
	r.WithCompression(random.RandBool())
}

func TestVKVideoSaveSuccess(t *testing.T) {
	params := requests.NewVideoSaveRequest()
	fillRandomlyVideoSaveRequest(&params)
	var expected models.VideoSaveResponse
	fillRandomlyVideoSaveResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "video.save", params.Params(), expectedJSON))
	resp, err := vk.Api.Video.VideoSave(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyVideoSearchRequest(r *requests.VideoSearchRequest) {
	r.WithQ(random.RandString())
	r.WithSort(random.RandInt())
	r.WithHd(random.RandInt())
	r.WithAdult(random.RandBool())
	r.WithLive(random.RandBool())
	lFilters := random.RandIntn(random.MaxArrayLength + 1)
	r.WithFilters(random.RandStringArr(lFilters))
	r.WithSearchOwn(random.RandBool())
	r.WithOffset(random.RandInt())
	r.WithLonger(random.RandInt())
	r.WithShorter(random.RandInt())
	r.WithCount(random.RandInt())
	r.WithExtended(random.RandBool())
}

func TestVKVideoSearchSuccess(t *testing.T) {
	params := requests.NewVideoSearchRequest()
	fillRandomlyVideoSearchRequest(&params)
	params.WithExtended(false)
	var expected models.VideoSearchResponse
	fillRandomlyVideoSearchResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "video.search", params.Params(), expectedJSON))
	resp, err := vk.Api.Video.VideoSearch(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func TestVKVideoSearchExtendedSuccess(t *testing.T) {
	params := requests.NewVideoSearchRequest()
	fillRandomlyVideoSearchRequest(&params)
	params.WithExtended(true)
	var expected models.VideoSearchExtendedResponse
	fillRandomlyVideoSearchExtendedResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "video.search", params.Params(), expectedJSON))
	resp, err := vk.Api.Video.VideoSearchExtended(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}
