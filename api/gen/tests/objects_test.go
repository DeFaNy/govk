// Code generated by https://github.com/defany/govk. DO NOT EDIT.

package tests

import (
	"encoding/json"
	"github.com/defany/govk/api/gen/models"
)

func fillRandomlyAccountAccountCounters(o *models.AccountAccountCounters) {
	(*o).AppRequests = new(int)
	*(*o).AppRequests = randInt()
	(*o).Events = new(int)
	*(*o).Events = randInt()
	(*o).Faves = new(int)
	*(*o).Faves = randInt()
	(*o).Friends = new(int)
	*(*o).Friends = randInt()
	(*o).FriendsRecommendations = new(int)
	*(*o).FriendsRecommendations = randInt()
	(*o).FriendsSuggestions = new(int)
	*(*o).FriendsSuggestions = randInt()
	(*o).Gifts = new(int)
	*(*o).Gifts = randInt()
	(*o).Groups = new(int)
	*(*o).Groups = randInt()
	(*o).Memories = new(int)
	*(*o).Memories = randInt()
	(*o).MenuClipsBadge = new(int)
	*(*o).MenuClipsBadge = randInt()
	(*o).MenuDiscoverBadge = new(int)
	*(*o).MenuDiscoverBadge = randInt()
	(*o).Messages = new(int)
	*(*o).Messages = randInt()
	(*o).Notes = new(int)
	*(*o).Notes = randInt()
	(*o).Notifications = new(int)
	*(*o).Notifications = randInt()
	(*o).Photos = new(int)
	*(*o).Photos = randInt()
	(*o).Sdk = new(int)
	*(*o).Sdk = randInt()
}

func fillRandomlyAccountInfo(o *models.AccountInfo) {
	(*o).TwoFaRequired = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).TwoFaRequired)
	(*o).Country = new(string)
	*(*o).Country = randString()
	(*o).HttpsRequired = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).HttpsRequired)
	(*o).Intro = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).Intro)
	(*o).Lang = new(int)
	*(*o).Lang = randInt()
	(*o).LinkRedirects = new([]string)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).LinkRedirects = make([]string, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*o).LinkRedirects)[i0] = randString()
	}
	(*o).MiniAppsAdsSlotId = new(int)
	*(*o).MiniAppsAdsSlotId = randInt()
	(*o).NoWallReplies = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).NoWallReplies)
	(*o).OwnPostsDefault = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).OwnPostsDefault)
	(*o).QrPromotion = new(int)
	*(*o).QrPromotion = randInt()
	(*o).ShowVkAppsIntro = new(bool)
	*(*o).ShowVkAppsIntro = randBool()
	(*o).Subscriptions = new(models.AccountSubscriptions)
	fillRandomlyAccountSubscriptions((*o).Subscriptions)
	(*o).WishlistsAePromoBannerShow = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).WishlistsAePromoBannerShow)
}

func fillRandomlyAccountNameRequest(o *models.AccountNameRequest) {
	(*o).FirstName = new(string)
	*(*o).FirstName = randString()
	(*o).Id = new(int)
	*(*o).Id = randInt()
	(*o).Lang = new(string)
	*(*o).Lang = randString()
	(*o).LastName = new(string)
	*(*o).LastName = randString()
	(*o).LinkHref = new(string)
	*(*o).LinkHref = randString()
	(*o).LinkLabel = new(string)
	*(*o).LinkLabel = randString()
	(*o).Status = new(models.AccountNameRequestStatus)
	fillRandomlyAccountNameRequestStatus((*o).Status)
}

func fillRandomlyAccountNameRequestStatus(o *models.AccountNameRequestStatus) {
	switch randIntn(8) {
	case 0:
		*o = "success"
	case 1:
		*o = "processing"
	case 2:
		*o = "declined"
	case 3:
		*o = "was_accepted"
	case 4:
		*o = "was_declined"
	case 5:
		*o = "declined_with_link"
	case 6:
		*o = "response"
	case 7:
		*o = "response_with_link"
	}
}

func fillRandomlyAccountOfferLinkType(o *models.AccountOfferLinkType) {
	switch randIntn(3) {
	case 0:
		*o = "profile"
	case 1:
		*o = "group"
	case 2:
		*o = "app"
	}
}

func fillRandomlyAccountOffer(o *models.AccountOffer) {
	(*o).CurrencyAmount = new(float64)
	*(*o).CurrencyAmount = randFloat()
	(*o).Description = new(string)
	*(*o).Description = randString()
	(*o).Id = new(int)
	*(*o).Id = randInt()
	(*o).Img = new(string)
	*(*o).Img = randString()
	(*o).Instruction = new(string)
	*(*o).Instruction = randString()
	(*o).InstructionHtml = new(string)
	*(*o).InstructionHtml = randString()
	(*o).LinkId = new(int)
	*(*o).LinkId = randInt()
	(*o).LinkType = new(models.AccountOfferLinkType)
	fillRandomlyAccountOfferLinkType((*o).LinkType)
	(*o).Price = new(int)
	*(*o).Price = randInt()
	(*o).ShortDescription = new(string)
	*(*o).ShortDescription = randString()
	(*o).Tag = new(string)
	*(*o).Tag = randString()
	(*o).Title = new(string)
	*(*o).Title = randString()
}

func fillRandomlyAccountPushConversations(o *models.AccountPushConversations) {
	(*o).Count = new(int)
	*(*o).Count = randInt()
	(*o).Items = new([]models.AccountPushConversationsItem)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).Items = make([]models.AccountPushConversationsItem, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyAccountPushConversationsItem(&(*(*o).Items)[i0])
	}
}

func fillRandomlyAccountPushConversationsItem(o *models.AccountPushConversationsItem) {
	(*o).DisabledMassMentions = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).DisabledMassMentions)
	(*o).DisabledMentions = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).DisabledMentions)
	(*o).DisabledUntil = randInt()
	(*o).PeerId = randInt()
	fillRandomlyBaseBoolInt(&(*o).Sound)
}

func fillRandomlyAccountPushParams(o *models.AccountPushParams) {
	(*o).AppRequest = new([]models.AccountPushParamsOnoff)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).AppRequest = make([]models.AccountPushParamsOnoff, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyAccountPushParamsOnoff(&(*(*o).AppRequest)[i0])
	}
	(*o).Birthday = new([]models.AccountPushParamsOnoff)
	l0 = randIntn(maxArrayLength + 1)
	*(*o).Birthday = make([]models.AccountPushParamsOnoff, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyAccountPushParamsOnoff(&(*(*o).Birthday)[i0])
	}
	(*o).Chat = new([]models.AccountPushParamsMode)
	l0 = randIntn(maxArrayLength + 1)
	*(*o).Chat = make([]models.AccountPushParamsMode, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyAccountPushParamsMode(&(*(*o).Chat)[i0])
	}
	(*o).Comment = new([]models.AccountPushParamsSettings)
	l0 = randIntn(maxArrayLength + 1)
	*(*o).Comment = make([]models.AccountPushParamsSettings, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyAccountPushParamsSettings(&(*(*o).Comment)[i0])
	}
	(*o).EventSoon = new([]models.AccountPushParamsOnoff)
	l0 = randIntn(maxArrayLength + 1)
	*(*o).EventSoon = make([]models.AccountPushParamsOnoff, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyAccountPushParamsOnoff(&(*(*o).EventSoon)[i0])
	}
	(*o).Friend = new([]models.AccountPushParamsOnoff)
	l0 = randIntn(maxArrayLength + 1)
	*(*o).Friend = make([]models.AccountPushParamsOnoff, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyAccountPushParamsOnoff(&(*(*o).Friend)[i0])
	}
	(*o).FriendAccepted = new([]models.AccountPushParamsOnoff)
	l0 = randIntn(maxArrayLength + 1)
	*(*o).FriendAccepted = make([]models.AccountPushParamsOnoff, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyAccountPushParamsOnoff(&(*(*o).FriendAccepted)[i0])
	}
	(*o).FriendFound = new([]models.AccountPushParamsOnoff)
	l0 = randIntn(maxArrayLength + 1)
	*(*o).FriendFound = make([]models.AccountPushParamsOnoff, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyAccountPushParamsOnoff(&(*(*o).FriendFound)[i0])
	}
	(*o).GroupAccepted = new([]models.AccountPushParamsOnoff)
	l0 = randIntn(maxArrayLength + 1)
	*(*o).GroupAccepted = make([]models.AccountPushParamsOnoff, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyAccountPushParamsOnoff(&(*(*o).GroupAccepted)[i0])
	}
	(*o).GroupInvite = new([]models.AccountPushParamsOnoff)
	l0 = randIntn(maxArrayLength + 1)
	*(*o).GroupInvite = make([]models.AccountPushParamsOnoff, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyAccountPushParamsOnoff(&(*(*o).GroupInvite)[i0])
	}
	(*o).Like = new([]models.AccountPushParamsSettings)
	l0 = randIntn(maxArrayLength + 1)
	*(*o).Like = make([]models.AccountPushParamsSettings, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyAccountPushParamsSettings(&(*(*o).Like)[i0])
	}
	(*o).Mention = new([]models.AccountPushParamsSettings)
	l0 = randIntn(maxArrayLength + 1)
	*(*o).Mention = make([]models.AccountPushParamsSettings, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyAccountPushParamsSettings(&(*(*o).Mention)[i0])
	}
	(*o).Msg = new([]models.AccountPushParamsMode)
	l0 = randIntn(maxArrayLength + 1)
	*(*o).Msg = make([]models.AccountPushParamsMode, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyAccountPushParamsMode(&(*(*o).Msg)[i0])
	}
	(*o).NewPost = new([]models.AccountPushParamsOnoff)
	l0 = randIntn(maxArrayLength + 1)
	*(*o).NewPost = make([]models.AccountPushParamsOnoff, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyAccountPushParamsOnoff(&(*(*o).NewPost)[i0])
	}
	(*o).Reply = new([]models.AccountPushParamsOnoff)
	l0 = randIntn(maxArrayLength + 1)
	*(*o).Reply = make([]models.AccountPushParamsOnoff, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyAccountPushParamsOnoff(&(*(*o).Reply)[i0])
	}
	(*o).Repost = new([]models.AccountPushParamsSettings)
	l0 = randIntn(maxArrayLength + 1)
	*(*o).Repost = make([]models.AccountPushParamsSettings, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyAccountPushParamsSettings(&(*(*o).Repost)[i0])
	}
	(*o).SdkOpen = new([]models.AccountPushParamsOnoff)
	l0 = randIntn(maxArrayLength + 1)
	*(*o).SdkOpen = make([]models.AccountPushParamsOnoff, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyAccountPushParamsOnoff(&(*(*o).SdkOpen)[i0])
	}
	(*o).WallPost = new([]models.AccountPushParamsOnoff)
	l0 = randIntn(maxArrayLength + 1)
	*(*o).WallPost = make([]models.AccountPushParamsOnoff, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyAccountPushParamsOnoff(&(*(*o).WallPost)[i0])
	}
	(*o).WallPublish = new([]models.AccountPushParamsOnoff)
	l0 = randIntn(maxArrayLength + 1)
	*(*o).WallPublish = make([]models.AccountPushParamsOnoff, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyAccountPushParamsOnoff(&(*(*o).WallPublish)[i0])
	}
}

func fillRandomlyAccountPushParamsMode(o *models.AccountPushParamsMode) {
	switch randIntn(4) {
	case 0:
		*o = "on"
	case 1:
		*o = "off"
	case 2:
		*o = "no_sound"
	case 3:
		*o = "no_text"
	}
}

func fillRandomlyAccountPushParamsOnoff(o *models.AccountPushParamsOnoff) {
	switch randIntn(2) {
	case 0:
		*o = "on"
	case 1:
		*o = "off"
	}
}

func fillRandomlyAccountPushParamsSettings(o *models.AccountPushParamsSettings) {
	switch randIntn(3) {
	case 0:
		*o = "on"
	case 1:
		*o = "off"
	case 2:
		*o = "fr_of_fr"
	}
}

func fillRandomlyAccountPushSettings(o *models.AccountPushSettings) {
	(*o).Conversations = new(models.AccountPushConversations)
	fillRandomlyAccountPushConversations((*o).Conversations)
	(*o).Disabled = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).Disabled)
	(*o).DisabledUntil = new(int)
	*(*o).DisabledUntil = randInt()
	(*o).Settings = new(models.AccountPushParams)
	fillRandomlyAccountPushParams((*o).Settings)
}

func fillRandomlyAccountSubscriptions(o *models.AccountSubscriptions) {
	l0 := randIntn(maxArrayLength + 1)
	*o = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*o)[i0] = randInt()
	}
}

func fillRandomlyAccountUserSettings(o *models.AccountUserSettings) {
	fillRandomlyUsersUserSettingsXtr(&(*o).UsersUserSettingsXtr)
	(*o).IsServiceAccount = new(bool)
	*(*o).IsServiceAccount = randBool()
	(*o).Photo200 = new(string)
	*(*o).Photo200 = randString()
}

func fillRandomlyAccountUserSettingsInterest(o *models.AccountUserSettingsInterest) {
	(*o).Title = randString()
	(*o).Value = randString()
}

func fillRandomlyAccountUserSettingsInterests(o *models.AccountUserSettingsInterests) {
	(*o).About = new(models.AccountUserSettingsInterest)
	fillRandomlyAccountUserSettingsInterest((*o).About)
	(*o).Activities = new(models.AccountUserSettingsInterest)
	fillRandomlyAccountUserSettingsInterest((*o).Activities)
	(*o).Books = new(models.AccountUserSettingsInterest)
	fillRandomlyAccountUserSettingsInterest((*o).Books)
	(*o).Games = new(models.AccountUserSettingsInterest)
	fillRandomlyAccountUserSettingsInterest((*o).Games)
	(*o).Interests = new(models.AccountUserSettingsInterest)
	fillRandomlyAccountUserSettingsInterest((*o).Interests)
	(*o).Movies = new(models.AccountUserSettingsInterest)
	fillRandomlyAccountUserSettingsInterest((*o).Movies)
	(*o).Music = new(models.AccountUserSettingsInterest)
	fillRandomlyAccountUserSettingsInterest((*o).Music)
	(*o).Quotes = new(models.AccountUserSettingsInterest)
	fillRandomlyAccountUserSettingsInterest((*o).Quotes)
	(*o).Tv = new(models.AccountUserSettingsInterest)
	fillRandomlyAccountUserSettingsInterest((*o).Tv)
}

func fillRandomlyAddressesFields(o *models.AddressesFields) {
	switch randIntn(14) {
	case 0:
		*o = "id"
	case 1:
		*o = "title"
	case 2:
		*o = "address"
	case 3:
		*o = "additional_address"
	case 4:
		*o = "country_id"
	case 5:
		*o = "city_id"
	case 6:
		*o = "metro_station_id"
	case 7:
		*o = "latitude"
	case 8:
		*o = "longitude"
	case 9:
		*o = "distance"
	case 10:
		*o = "work_info_status"
	case 11:
		*o = "timetable"
	case 12:
		*o = "phone"
	case 13:
		*o = "time_offset"
	}
}

func fillRandomlyAdsAccessRole(o *models.AdsAccessRole) {
	switch randIntn(3) {
	case 0:
		*o = "admin"
	case 1:
		*o = "manager"
	case 2:
		*o = "reports"
	}
}

func fillRandomlyAdsAccessRolePublic(o *models.AdsAccessRolePublic) {
	switch randIntn(2) {
	case 0:
		*o = "manager"
	case 1:
		*o = "reports"
	}
}

func fillRandomlyAdsAccesses(o *models.AdsAccesses) {
	(*o).ClientId = new(string)
	*(*o).ClientId = randString()
	(*o).Role = new(models.AdsAccessRole)
	fillRandomlyAdsAccessRole((*o).Role)
}

func fillRandomlyAdsAccount(o *models.AdsAccount) {
	fillRandomlyAdsAccessRole(&(*o).AccessRole)
	(*o).AccountId = randInt()
	(*o).AccountName = randString()
	fillRandomlyBaseBoolInt(&(*o).AccountStatus)
	fillRandomlyAdsAccountType(&(*o).AccountType)
	(*o).CanViewBudget = randBool()
}

func fillRandomlyAdsAccountType(o *models.AdsAccountType) {
	switch randIntn(2) {
	case 0:
		*o = "general"
	case 1:
		*o = "agency"
	}
}

func fillRandomlyAdsAd(o *models.AdsAd) {
	(*o).AdFormat = randInt()
	(*o).AdPlatform = new(string)
	*(*o).AdPlatform = randString()
	(*o).AllLimit = randInt()
	fillRandomlyAdsAdApproved(&(*o).Approved)
	(*o).AutobiddingMaxCost = new(int)
	*(*o).AutobiddingMaxCost = randInt()
	(*o).CampaignId = randInt()
	(*o).Category1Id = new(int)
	*(*o).Category1Id = randInt()
	(*o).Category2Id = new(int)
	*(*o).Category2Id = randInt()
	fillRandomlyAdsAdCostType(&(*o).CostType)
	(*o).Cpa = new(int)
	*(*o).Cpa = randInt()
	(*o).Cpc = new(int)
	*(*o).Cpc = randInt()
	(*o).Cpm = new(int)
	*(*o).Cpm = randInt()
	(*o).DisclaimerMedical = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).DisclaimerMedical)
	(*o).DisclaimerSpecialist = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).DisclaimerSpecialist)
	(*o).DisclaimerSupplements = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).DisclaimerSupplements)
	(*o).Id = randInt()
	(*o).ImpressionsLimit = new(int)
	*(*o).ImpressionsLimit = randInt()
	(*o).ImpressionsLimited = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).ImpressionsLimited)
	(*o).Name = randString()
	(*o).Ocpm = new(int)
	*(*o).Ocpm = randInt()
	fillRandomlyAdsAdStatus(&(*o).Status)
	(*o).Video = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).Video)
}

func fillRandomlyAdsAdApproved(o *models.AdsAdApproved) {
	switch randIntn(4) {
	case 0:
		*o = 0
	case 1:
		*o = 1
	case 2:
		*o = 2
	case 3:
		*o = 3
	}
}

func fillRandomlyAdsAdCostType(o *models.AdsAdCostType) {
	switch randIntn(4) {
	case 0:
		*o = 0
	case 1:
		*o = 1
	case 2:
		*o = 2
	case 3:
		*o = 3
	}
}

func fillRandomlyAdsAdLayout(o *models.AdsAdLayout) {
	(*o).AdFormat = randInt()
	(*o).CampaignId = randInt()
	fillRandomlyAdsAdCostType(&(*o).CostType)
	(*o).Description = randString()
	(*o).Id = randString()
	(*o).ImageSrc = randString()
	(*o).ImageSrc2x = new(string)
	*(*o).ImageSrc2x = randString()
	(*o).LinkDomain = new(string)
	*(*o).LinkDomain = randString()
	(*o).LinkUrl = randString()
	(*o).PreviewLink = new(string)
	*(*o).PreviewLink = randString()
	(*o).Title = randString()
	(*o).Video = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).Video)
}

func fillRandomlyAdsAdStatus(o *models.AdsAdStatus) {
	switch randIntn(3) {
	case 0:
		*o = 0
	case 1:
		*o = 1
	case 2:
		*o = 2
	}
}

func fillRandomlyAdsCampaign(o *models.AdsCampaign) {
	(*o).AdsCount = new(int)
	*(*o).AdsCount = randInt()
	(*o).AllLimit = randString()
	(*o).CreateTime = new(int)
	*(*o).CreateTime = randInt()
	(*o).DayLimit = randString()
	(*o).GoalType = new(int)
	*(*o).GoalType = randInt()
	(*o).Id = randInt()
	(*o).IsCboEnabled = new(bool)
	*(*o).IsCboEnabled = randBool()
	(*o).Name = randString()
	(*o).StartTime = randInt()
	fillRandomlyAdsCampaignStatus(&(*o).Status)
	(*o).StopTime = randInt()
	fillRandomlyAdsCampaignType(&(*o).Type)
	(*o).UpdateTime = new(int)
	*(*o).UpdateTime = randInt()
	(*o).UserGoalType = new(int)
	*(*o).UserGoalType = randInt()
	(*o).ViewsLimit = new(int)
	*(*o).ViewsLimit = randInt()
}

func fillRandomlyAdsCampaignStatus(o *models.AdsCampaignStatus) {
	switch randIntn(3) {
	case 0:
		*o = 0
	case 1:
		*o = 1
	case 2:
		*o = 2
	}
}

func fillRandomlyAdsCampaignType(o *models.AdsCampaignType) {
	switch randIntn(6) {
	case 0:
		*o = "normal"
	case 1:
		*o = "vk_apps_managed"
	case 2:
		*o = "mobile_apps"
	case 3:
		*o = "promoted_posts"
	case 4:
		*o = "adaptive_ads"
	case 5:
		*o = "stories"
	}
}

func fillRandomlyAdsCategory(o *models.AdsCategory) {
	(*o).Id = randInt()
	(*o).Name = randString()
	(*o).Subcategories = new([]models.AdsCategory)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).Subcategories = make([]models.AdsCategory, l0)
	for i0 := 0; i0 < l0; i0++ {
		//fillRandomlyAdsCategory(&(*(*o).Subcategories)[i0])
	}
}

func fillRandomlyAdsClient(o *models.AdsClient) {
	(*o).AllLimit = randString()
	(*o).DayLimit = randString()
	(*o).Id = randInt()
	(*o).Name = randString()
}

func fillRandomlyAdsCreateAdStatus(o *models.AdsCreateAdStatus) {
	(*o).ErrorCode = new(int)
	*(*o).ErrorCode = randInt()
	(*o).ErrorDesc = new(string)
	*(*o).ErrorDesc = randString()
	(*o).Id = randInt()
	(*o).PostId = new(int)
	*(*o).PostId = randInt()
}

func fillRandomlyAdsCreateCampaignStatus(o *models.AdsCreateCampaignStatus) {
	(*o).ErrorCode = new(int)
	*(*o).ErrorCode = randInt()
	(*o).ErrorDesc = new(string)
	*(*o).ErrorDesc = randString()
	(*o).Id = randInt()
}

func fillRandomlyAdsCriteria(o *models.AdsCriteria) {
	(*o).AgeFrom = new(int)
	*(*o).AgeFrom = randInt()
	(*o).AgeTo = new(int)
	*(*o).AgeTo = randInt()
	(*o).Apps = new(string)
	*(*o).Apps = randString()
	(*o).AppsNot = new(string)
	*(*o).AppsNot = randString()
	(*o).Birthday = new(int)
	*(*o).Birthday = randInt()
	(*o).Cities = new(string)
	*(*o).Cities = randString()
	(*o).CitiesNot = new(string)
	*(*o).CitiesNot = randString()
	(*o).Country = new(int)
	*(*o).Country = randInt()
	(*o).Districts = new(string)
	*(*o).Districts = randString()
	(*o).Groups = new(string)
	*(*o).Groups = randString()
	(*o).InterestCategories = new(string)
	*(*o).InterestCategories = randString()
	(*o).Interests = new(string)
	*(*o).Interests = randString()
	(*o).Paying = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).Paying)
	(*o).Positions = new(string)
	*(*o).Positions = randString()
	(*o).Religions = new(string)
	*(*o).Religions = randString()
	(*o).RetargetingGroups = new(string)
	*(*o).RetargetingGroups = randString()
	(*o).RetargetingGroupsNot = new(string)
	*(*o).RetargetingGroupsNot = randString()
	(*o).SchoolFrom = new(int)
	*(*o).SchoolFrom = randInt()
	(*o).SchoolTo = new(int)
	*(*o).SchoolTo = randInt()
	(*o).Schools = new(string)
	*(*o).Schools = randString()
	(*o).Sex = new(models.AdsCriteriaSex)
	fillRandomlyAdsCriteriaSex((*o).Sex)
	(*o).Stations = new(string)
	*(*o).Stations = randString()
	(*o).Statuses = new(string)
	*(*o).Statuses = randString()
	(*o).Streets = new(string)
	*(*o).Streets = randString()
	(*o).Travellers = new(models.BasePropertyExists)
	fillRandomlyBasePropertyExists((*o).Travellers)
	(*o).UniFrom = new(int)
	*(*o).UniFrom = randInt()
	(*o).UniTo = new(int)
	*(*o).UniTo = randInt()
	(*o).UserBrowsers = new(string)
	*(*o).UserBrowsers = randString()
	(*o).UserDevices = new(string)
	*(*o).UserDevices = randString()
	(*o).UserOs = new(string)
	*(*o).UserOs = randString()
}

func fillRandomlyAdsCriteriaSex(o *models.AdsCriteriaSex) {
	switch randIntn(3) {
	case 0:
		*o = 0
	case 1:
		*o = 1
	case 2:
		*o = 2
	}
}

func fillRandomlyAdsDemoStats(o *models.AdsDemoStats) {
	(*o).Id = new(int)
	*(*o).Id = randInt()
	(*o).Stats = new(models.AdsDemostatsFormat)
	fillRandomlyAdsDemostatsFormat((*o).Stats)
	(*o).Type = new(models.AdsObjectType)
	fillRandomlyAdsObjectType((*o).Type)
}

func fillRandomlyAdsDemostatsFormat(o *models.AdsDemostatsFormat) {
	(*o).Age = new([]models.AdsStatsAge)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).Age = make([]models.AdsStatsAge, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyAdsStatsAge(&(*(*o).Age)[i0])
	}
	(*o).Cities = new([]models.AdsStatsCities)
	l0 = randIntn(maxArrayLength + 1)
	*(*o).Cities = make([]models.AdsStatsCities, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyAdsStatsCities(&(*(*o).Cities)[i0])
	}
	(*o).Day = new(string)
	*(*o).Day = randString()
	(*o).Month = new(string)
	*(*o).Month = randString()
	(*o).Overall = new(int)
	*(*o).Overall = randInt()
	(*o).Sex = new([]models.AdsStatsSex)
	l0 = randIntn(maxArrayLength + 1)
	*(*o).Sex = make([]models.AdsStatsSex, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyAdsStatsSex(&(*(*o).Sex)[i0])
	}
	(*o).SexAge = new([]models.AdsStatsSexAge)
	l0 = randIntn(maxArrayLength + 1)
	*(*o).SexAge = make([]models.AdsStatsSexAge, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyAdsStatsSexAge(&(*(*o).SexAge)[i0])
	}
}

func fillRandomlyAdsFloodStats(o *models.AdsFloodStats) {
	(*o).Left = randInt()
	(*o).Refresh = randInt()
}

func fillRandomlyAdsLinkStatus(o *models.AdsLinkStatus) {
	(*o).Description = randString()
	(*o).RedirectUrl = randString()
	(*o).Status = randString()
}

func fillRandomlyAdsLookalikeRequestSourceType(o *models.AdsLookalikeRequestSourceType) {
	switch randIntn(1) {
	case 0:
		*o = "retargeting_group"
	}
}

func fillRandomlyAdsLookalikeRequestStatus(o *models.AdsLookalikeRequestStatus) {
	switch randIntn(6) {
	case 0:
		*o = "search_in_progress"
	case 1:
		*o = "search_failed"
	case 2:
		*o = "search_done"
	case 3:
		*o = "save_in_progress"
	case 4:
		*o = "save_failed"
	case 5:
		*o = "save_done"
	}
}

func fillRandomlyAdsLookalikeRequest(o *models.AdsLookalikeRequest) {
	(*o).AudienceCount = new(int)
	*(*o).AudienceCount = randInt()
	(*o).CreateTime = randInt()
	(*o).Id = randInt()
	(*o).SaveAudienceLevels = new([]models.AdsLookalikeRequestSaveAudienceLevel)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).SaveAudienceLevels = make([]models.AdsLookalikeRequestSaveAudienceLevel, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyAdsLookalikeRequestSaveAudienceLevel(&(*(*o).SaveAudienceLevels)[i0])
	}
	(*o).ScheduledDeleteTime = new(int)
	*(*o).ScheduledDeleteTime = randInt()
	(*o).SourceName = new(string)
	*(*o).SourceName = randString()
	(*o).SourceRetargetingGroupId = new(int)
	*(*o).SourceRetargetingGroupId = randInt()
	fillRandomlyAdsLookalikeRequestSourceType(&(*o).SourceType)
	fillRandomlyAdsLookalikeRequestStatus(&(*o).Status)
	(*o).UpdateTime = randInt()
}

func fillRandomlyAdsLookalikeRequestSaveAudienceLevel(o *models.AdsLookalikeRequestSaveAudienceLevel) {
	(*o).AudienceCount = new(int)
	*(*o).AudienceCount = randInt()
	(*o).Level = new(int)
	*(*o).Level = randInt()
}

func fillRandomlyAdsMusician(o *models.AdsMusician) {
	(*o).Avatar = new(string)
	*(*o).Avatar = randString()
	(*o).Id = randInt()
	(*o).Name = randString()
}

func fillRandomlyAdsObjectType(o *models.AdsObjectType) {
	switch randIntn(4) {
	case 0:
		*o = "ad"
	case 1:
		*o = "campaign"
	case 2:
		*o = "client"
	case 3:
		*o = "office"
	}
}

func fillRandomlyAdsParagraphs(o *models.AdsParagraphs) {
	(*o).Paragraph = new(string)
	*(*o).Paragraph = randString()
}

func fillRandomlyAdsPromotedPostReach(o *models.AdsPromotedPostReach) {
	(*o).Hide = randInt()
	(*o).Id = randInt()
	(*o).JoinGroup = randInt()
	(*o).Links = randInt()
	(*o).ReachSubscribers = randInt()
	(*o).ReachTotal = randInt()
	(*o).Report = randInt()
	(*o).ToGroup = randInt()
	(*o).Unsubscribe = randInt()
	(*o).VideoViews100p = new(int)
	*(*o).VideoViews100p = randInt()
	(*o).VideoViews25p = new(int)
	*(*o).VideoViews25p = randInt()
	(*o).VideoViews3s = new(int)
	*(*o).VideoViews3s = randInt()
	(*o).VideoViews50p = new(int)
	*(*o).VideoViews50p = randInt()
	(*o).VideoViews75p = new(int)
	*(*o).VideoViews75p = randInt()
	(*o).VideoViewsStart = new(int)
	*(*o).VideoViewsStart = randInt()
}

func fillRandomlyAdsRejectReason(o *models.AdsRejectReason) {
	(*o).Comment = new(string)
	*(*o).Comment = randString()
	(*o).Rules = new([]models.AdsRules)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).Rules = make([]models.AdsRules, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyAdsRules(&(*(*o).Rules)[i0])
	}
}

func fillRandomlyAdsRules(o *models.AdsRules) {
	(*o).Paragraphs = new([]models.AdsParagraphs)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).Paragraphs = make([]models.AdsParagraphs, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyAdsParagraphs(&(*(*o).Paragraphs)[i0])
	}
	(*o).Title = new(string)
	*(*o).Title = randString()
}

func fillRandomlyAdsStats(o *models.AdsStats) {
	(*o).Id = new(int)
	*(*o).Id = randInt()
	(*o).Stats = new(models.AdsStatsFormat)
	fillRandomlyAdsStatsFormat((*o).Stats)
	(*o).Type = new(models.AdsObjectType)
	fillRandomlyAdsObjectType((*o).Type)
	(*o).ViewsTimes = new(models.AdsStatsViewsTimes)
	fillRandomlyAdsStatsViewsTimes((*o).ViewsTimes)
}

func fillRandomlyAdsStatsAge(o *models.AdsStatsAge) {
	(*o).ClicksRate = new(float64)
	*(*o).ClicksRate = randFloat()
	(*o).ImpressionsRate = new(float64)
	*(*o).ImpressionsRate = randFloat()
	(*o).Value = new(string)
	*(*o).Value = randString()
}

func fillRandomlyAdsStatsCities(o *models.AdsStatsCities) {
	(*o).ClicksRate = new(float64)
	*(*o).ClicksRate = randFloat()
	(*o).ImpressionsRate = new(float64)
	*(*o).ImpressionsRate = randFloat()
	(*o).Name = new(string)
	*(*o).Name = randString()
	(*o).Value = new(int)
	*(*o).Value = randInt()
}

func fillRandomlyAdsStatsFormat(o *models.AdsStatsFormat) {
	(*o).Clicks = new(int)
	*(*o).Clicks = randInt()
	(*o).Day = new(string)
	*(*o).Day = randString()
	(*o).Impressions = new(int)
	*(*o).Impressions = randInt()
	(*o).JoinRate = new(int)
	*(*o).JoinRate = randInt()
	(*o).LinkExternalClicks = new(int)
	*(*o).LinkExternalClicks = randInt()
	(*o).Month = new(string)
	*(*o).Month = randString()
	(*o).Overall = new(int)
	*(*o).Overall = randInt()
	(*o).Reach = new(int)
	*(*o).Reach = randInt()
	(*o).Spent = new(int)
	*(*o).Spent = randInt()
	(*o).VideoClicksSite = new(int)
	*(*o).VideoClicksSite = randInt()
	(*o).VideoViews = new(int)
	*(*o).VideoViews = randInt()
	(*o).VideoViewsFull = new(int)
	*(*o).VideoViewsFull = randInt()
	(*o).VideoViewsHalf = new(int)
	*(*o).VideoViewsHalf = randInt()
}

func fillRandomlyAdsStatsSex(o *models.AdsStatsSex) {
	(*o).ClicksRate = new(float64)
	*(*o).ClicksRate = randFloat()
	(*o).ImpressionsRate = new(float64)
	*(*o).ImpressionsRate = randFloat()
	(*o).Value = new(models.AdsStatsSexValue)
	fillRandomlyAdsStatsSexValue((*o).Value)
}

func fillRandomlyAdsStatsSexAge(o *models.AdsStatsSexAge) {
	(*o).ClicksRate = new(float64)
	*(*o).ClicksRate = randFloat()
	(*o).ImpressionsRate = new(float64)
	*(*o).ImpressionsRate = randFloat()
	(*o).Value = new(string)
	*(*o).Value = randString()
}

func fillRandomlyAdsStatsSexValue(o *models.AdsStatsSexValue) {
	switch randIntn(2) {
	case 0:
		*o = "f"
	case 1:
		*o = "m"
	}
}

func fillRandomlyAdsStatsViewsTimes(o *models.AdsStatsViewsTimes) {
	(*o).ViewsAdsTimes1 = new(int)
	*(*o).ViewsAdsTimes1 = randInt()
	(*o).ViewsAdsTimes10 = new(int)
	*(*o).ViewsAdsTimes10 = randInt()
	(*o).ViewsAdsTimes11Plus = new(int)
	*(*o).ViewsAdsTimes11Plus = randInt()
	(*o).ViewsAdsTimes2 = new(int)
	*(*o).ViewsAdsTimes2 = randInt()
	(*o).ViewsAdsTimes3 = new(int)
	*(*o).ViewsAdsTimes3 = randInt()
	(*o).ViewsAdsTimes4 = new(int)
	*(*o).ViewsAdsTimes4 = randInt()
	(*o).ViewsAdsTimes5 = new(string)
	*(*o).ViewsAdsTimes5 = randString()
	(*o).ViewsAdsTimes6 = new(int)
	*(*o).ViewsAdsTimes6 = randInt()
	(*o).ViewsAdsTimes7 = new(int)
	*(*o).ViewsAdsTimes7 = randInt()
	(*o).ViewsAdsTimes8 = new(int)
	*(*o).ViewsAdsTimes8 = randInt()
	(*o).ViewsAdsTimes9 = new(int)
	*(*o).ViewsAdsTimes9 = randInt()
}

func fillRandomlyAdsTargSettings(o *models.AdsTargSettings) {
	(*o).CampaignId = new(int)
	*(*o).CampaignId = randInt()
	(*o).Id = new(int)
	*(*o).Id = randInt()
	fillRandomlyAdsCriteria(&(*o).AdsCriteria)
}

func fillRandomlyAdsTargStats(o *models.AdsTargStats) {
	(*o).AudienceCount = randInt()
	(*o).RecommendedCpc = new(float64)
	*(*o).RecommendedCpc = randFloat()
	(*o).RecommendedCpc50 = new(float64)
	*(*o).RecommendedCpc50 = randFloat()
	(*o).RecommendedCpc70 = new(float64)
	*(*o).RecommendedCpc70 = randFloat()
	(*o).RecommendedCpc90 = new(float64)
	*(*o).RecommendedCpc90 = randFloat()
	(*o).RecommendedCpm = new(float64)
	*(*o).RecommendedCpm = randFloat()
	(*o).RecommendedCpm50 = new(float64)
	*(*o).RecommendedCpm50 = randFloat()
	(*o).RecommendedCpm70 = new(float64)
	*(*o).RecommendedCpm70 = randFloat()
	(*o).RecommendedCpm90 = new(float64)
	*(*o).RecommendedCpm90 = randFloat()
}

func fillRandomlyAdsTargSuggestions(o *models.AdsTargSuggestions) {
	(*o).Id = new(int)
	*(*o).Id = randInt()
	(*o).Name = new(string)
	*(*o).Name = randString()
}

func fillRandomlyAdsTargSuggestionsCities(o *models.AdsTargSuggestionsCities) {
	(*o).Id = new(int)
	*(*o).Id = randInt()
	(*o).Name = new(string)
	*(*o).Name = randString()
	(*o).Parent = new(string)
	*(*o).Parent = randString()
}

func fillRandomlyAdsTargSuggestionsRegions(o *models.AdsTargSuggestionsRegions) {
	(*o).Id = new(int)
	*(*o).Id = randInt()
	(*o).Name = new(string)
	*(*o).Name = randString()
	(*o).Type = new(string)
	*(*o).Type = randString()
}

func fillRandomlyAdsTargSuggestionsSchools(o *models.AdsTargSuggestionsSchools) {
	(*o).Desc = new(string)
	*(*o).Desc = randString()
	(*o).Id = new(int)
	*(*o).Id = randInt()
	(*o).Name = new(string)
	*(*o).Name = randString()
	(*o).Parent = new(string)
	*(*o).Parent = randString()
	(*o).Type = new(models.AdsTargSuggestionsSchoolsType)
	fillRandomlyAdsTargSuggestionsSchoolsType((*o).Type)
}

func fillRandomlyAdsTargSuggestionsSchoolsType(o *models.AdsTargSuggestionsSchoolsType) {
	switch randIntn(4) {
	case 0:
		*o = "school"
	case 1:
		*o = "university"
	case 2:
		*o = "faculty"
	case 3:
		*o = "chair"
	}
}

func fillRandomlyAdsTargetGroup(o *models.AdsTargetGroup) {
	(*o).AudienceCount = new(int)
	*(*o).AudienceCount = randInt()
	(*o).Domain = new(string)
	*(*o).Domain = randString()
	(*o).Id = new(int)
	*(*o).Id = randInt()
	(*o).Lifetime = new(int)
	*(*o).Lifetime = randInt()
	(*o).Name = new(string)
	*(*o).Name = randString()
	(*o).Pixel = new(string)
	*(*o).Pixel = randString()
}

func fillRandomlyAdsUpdateOfficeUsersResult(o *models.AdsUpdateOfficeUsersResult) {
	(*o).Error = new(models.BaseError)
	fillRandomlyBaseError((*o).Error)
	(*o).IsSuccess = randBool()
	(*o).UserId = randInt()
}

func fillRandomlyAdsUserSpecification(o *models.AdsUserSpecification) {
	(*o).ClientIds = new([]int)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).ClientIds = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*o).ClientIds)[i0] = randInt()
	}
	(*o).GrantAccessToAllClients = new(bool)
	*(*o).GrantAccessToAllClients = randBool()
	fillRandomlyAdsAccessRolePublic(&(*o).Role)
	(*o).UserId = randInt()
	(*o).ViewBudget = new(bool)
	*(*o).ViewBudget = randBool()
}

func fillRandomlyAdsUserSpecificationCutted(o *models.AdsUserSpecificationCutted) {
	(*o).ClientId = new(int)
	*(*o).ClientId = randInt()
	fillRandomlyAdsAccessRolePublic(&(*o).Role)
	(*o).UserId = randInt()
	(*o).ViewBudget = new(bool)
	*(*o).ViewBudget = randBool()
}

func fillRandomlyAdsUsers(o *models.AdsUsers) {
	l0 := randIntn(maxArrayLength + 1)
	(*o).Accesses = make([]models.AdsAccesses, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyAdsAccesses(&((*o).Accesses)[i0])
	}
	(*o).UserId = randInt()
}

func fillRandomlyAdswebGetAdCategoriesResponseCategoriesCategory(o *models.AdswebGetAdCategoriesResponseCategoriesCategory) {
	(*o).Id = randInt()
	(*o).Name = randString()
}

func fillRandomlyAdswebGetAdUnitsResponseAdUnitsAdUnit(o *models.AdswebGetAdUnitsResponseAdUnitsAdUnit) {
	(*o).Id = randInt()
	(*o).Name = new(string)
	*(*o).Name = randString()
	(*o).SiteId = randInt()
}

func fillRandomlyAdswebGetFraudHistoryResponseEntriesEntry(o *models.AdswebGetFraudHistoryResponseEntriesEntry) {
	(*o).Day = randString()
	(*o).SiteId = randInt()
}

func fillRandomlyAdswebGetSitesResponseSitesSite(o *models.AdswebGetSitesResponseSitesSite) {
	(*o).Domains = new(string)
	*(*o).Domains = randString()
	(*o).Id = randInt()
	(*o).StatusModer = new(string)
	*(*o).StatusModer = randString()
	(*o).StatusUser = new(string)
	*(*o).StatusUser = randString()
}

func fillRandomlyAdswebGetStatisticsResponseItemsItem(o *models.AdswebGetStatisticsResponseItemsItem) {
	(*o).AdUnitId = new(int)
	*(*o).AdUnitId = randInt()
	(*o).DayMax = new(string)
	*(*o).DayMax = randString()
	(*o).DayMin = new(string)
	*(*o).DayMin = randString()
	(*o).DaysCount = new(int)
	*(*o).DaysCount = randInt()
	(*o).HourMax = new(string)
	*(*o).HourMax = randString()
	(*o).HourMin = new(string)
	*(*o).HourMin = randString()
	(*o).HoursCount = new(int)
	*(*o).HoursCount = randInt()
	(*o).MonthMax = new(string)
	*(*o).MonthMax = randString()
	(*o).MonthMin = new(string)
	*(*o).MonthMin = randString()
	(*o).MonthsCount = new(int)
	*(*o).MonthsCount = randInt()
	(*o).OverallCount = new(int)
	*(*o).OverallCount = randInt()
	(*o).SiteId = new(int)
	*(*o).SiteId = randInt()
}

func fillRandomlyAppWidgetsPhoto(o *models.AppWidgetsPhoto) {
	(*o).Id = randString()
	l0 := randIntn(maxArrayLength + 1)
	(*o).Images = make([]models.BaseImage, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyBaseImage(&((*o).Images)[i0])
	}
}

func fillRandomlyAppWidgetsPhotos(o *models.AppWidgetsPhotos) {
	(*o).Count = new(int)
	*(*o).Count = randInt()
	(*o).Items = new([]models.AppWidgetsPhoto)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).Items = make([]models.AppWidgetsPhoto, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyAppWidgetsPhoto(&(*(*o).Items)[i0])
	}
}

func fillRandomlyAppsApp(o *models.AppsApp) {
	fillRandomlyAppsAppMin(&(*o).AppsAppMin)
	(*o).AuthorUrl = new(string)
	*(*o).AuthorUrl = randString()
	(*o).Banner1120 = new(string)
	*(*o).Banner1120 = randString()
	(*o).Banner560 = new(string)
	*(*o).Banner560 = randString()
	(*o).CatalogPosition = new(int)
	*(*o).CatalogPosition = randInt()
	(*o).Description = new(string)
	*(*o).Description = randString()
	(*o).Friends = new([]int)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).Friends = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*o).Friends)[i0] = randInt()
	}
	(*o).Genre = new(string)
	*(*o).Genre = randString()
	(*o).GenreId = new(int)
	*(*o).GenreId = randInt()
	(*o).Icon16 = new(string)
	*(*o).Icon16 = randString()
	(*o).International = new(bool)
	*(*o).International = randBool()
	(*o).IsInCatalog = new(int)
	*(*o).IsInCatalog = randInt()
	(*o).IsNew = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).IsNew)
	(*o).LeaderboardType = new(models.AppsAppLeaderboardType)
	fillRandomlyAppsAppLeaderboardType((*o).LeaderboardType)
	(*o).MembersCount = new(int)
	*(*o).MembersCount = randInt()
	(*o).PlatformId = new(string)
	*(*o).PlatformId = randString()
	(*o).PublishedDate = new(int)
	*(*o).PublishedDate = randInt()
	(*o).PushEnabled = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).PushEnabled)
	(*o).ScreenName = new(string)
	*(*o).ScreenName = randString()
	(*o).ScreenOrientation = new(int)
	*(*o).ScreenOrientation = randInt()
	(*o).Section = new(string)
	*(*o).Section = randString()
}

func fillRandomlyAppsAppLeaderboardType(o *models.AppsAppLeaderboardType) {
	switch randIntn(3) {
	case 0:
		*o = 0
	case 1:
		*o = 1
	case 2:
		*o = 2
	}
}

func fillRandomlyAppsAppMin(o *models.AppsAppMin) {
	(*o).AuthorOwnerId = new(int)
	*(*o).AuthorOwnerId = randInt()
	(*o).BackgroundLoaderColor = new(string)
	*(*o).BackgroundLoaderColor = randString()
	(*o).Icon139 = new(string)
	*(*o).Icon139 = randString()
	(*o).Icon150 = new(string)
	*(*o).Icon150 = randString()
	(*o).Icon278 = new(string)
	*(*o).Icon278 = randString()
	(*o).Icon576 = new(string)
	*(*o).Icon576 = randString()
	(*o).Icon75 = new(string)
	*(*o).Icon75 = randString()
	(*o).Id = randInt()
	(*o).IsInstalled = new(bool)
	*(*o).IsInstalled = randBool()
	(*o).LoaderIcon = new(string)
	*(*o).LoaderIcon = randString()
	(*o).Title = randString()
	fillRandomlyAppsAppType(&(*o).Type)
}

func fillRandomlyAppsAppType(o *models.AppsAppType) {
	switch randIntn(8) {
	case 0:
		*o = "app"
	case 1:
		*o = "game"
	case 2:
		*o = "site"
	case 3:
		*o = "standalone"
	case 4:
		*o = "vk_app"
	case 5:
		*o = "community_app"
	case 6:
		*o = "html5_game"
	case 7:
		*o = "mini_app"
	}
}

func fillRandomlyAppsCatalogList(o *models.AppsCatalogList) {
	(*o).Count = randInt()
	l0 := randIntn(maxArrayLength + 1)
	(*o).Items = make([]models.AppsApp, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyAppsApp(&((*o).Items)[i0])
	}
	(*o).Profiles = new([]models.UsersUserMin)
	l0 = randIntn(maxArrayLength + 1)
	*(*o).Profiles = make([]models.UsersUserMin, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyUsersUserMin(&(*(*o).Profiles)[i0])
	}
}

func fillRandomlyAppsLeaderboard(o *models.AppsLeaderboard) {
	(*o).Level = new(int)
	*(*o).Level = randInt()
	(*o).Points = new(int)
	*(*o).Points = randInt()
	(*o).Score = new(int)
	*(*o).Score = randInt()
	(*o).UserId = randInt()
}

func fillRandomlyAppsScopeName(o *models.AppsScopeName) {
	switch randIntn(11) {
	case 0:
		*o = "friends"
	case 1:
		*o = "photos"
	case 2:
		*o = "video"
	case 3:
		*o = "pages"
	case 4:
		*o = "status"
	case 5:
		*o = "notes"
	case 6:
		*o = "wall"
	case 7:
		*o = "docs"
	case 8:
		*o = "groups"
	case 9:
		*o = "stats"
	case 10:
		*o = "market"
	}
}

func fillRandomlyAppsScope(o *models.AppsScope) {
	fillRandomlyAppsScopeName(&(*o).Name)
	(*o).Title = new(string)
	*(*o).Title = randString()
}

func fillRandomlyAudioAudioGenreId(o *models.AudioAudioGenreId) {
	switch randIntn(21) {
	case 0:
		*o = 1
	case 1:
		*o = 2
	case 2:
		*o = 3
	case 3:
		*o = 4
	case 4:
		*o = 5
	case 5:
		*o = 6
	case 6:
		*o = 7
	case 7:
		*o = 21
	case 8:
		*o = 8
	case 9:
		*o = 1001
	case 10:
		*o = 10
	case 11:
		*o = 11
	case 12:
		*o = 12
	case 13:
		*o = 13
	case 14:
		*o = 14
	case 15:
		*o = 15
	case 16:
		*o = 16
	case 17:
		*o = 17
	case 18:
		*o = 19
	case 19:
		*o = 22
	case 20:
		*o = 18
	}
}

func fillRandomlyAudioAudio(o *models.AudioAudio) {
	(*o).AccessKey = new(string)
	*(*o).AccessKey = randString()
	(*o).AlbumId = new(int)
	*(*o).AlbumId = randInt()
	(*o).Artist = randString()
	(*o).Date = new(int)
	*(*o).Date = randInt()
	(*o).Duration = randInt()
	(*o).GenreId = new(models.AudioAudioGenreId)
	fillRandomlyAudioAudioGenreId((*o).GenreId)
	(*o).Id = randInt()
	(*o).OwnerId = randInt()
	(*o).Performer = new(string)
	*(*o).Performer = randString()
	(*o).Title = randString()
	(*o).Url = new(string)
	*(*o).Url = randString()
}

func fillRandomlyBaseBoolInt(o *models.BaseBoolInt) {
	switch randIntn(2) {
	case 0:
		*o = 0
	case 1:
		*o = 1
	}
}

func fillRandomlyBaseCity(o *models.BaseCity) {
	(*o).Id = randInt()
	(*o).Title = randString()
}

func fillRandomlyBaseCommentsInfo(o *models.BaseCommentsInfo) {
	(*o).CanClose = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).CanClose)
	(*o).CanOpen = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).CanOpen)
	(*o).CanPost = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).CanPost)
	(*o).Count = new(int)
	*(*o).Count = randInt()
	(*o).Donut = new(models.WallWallpostCommentsDonut)
	fillRandomlyWallWallpostCommentsDonut((*o).Donut)
	(*o).GroupsCanPost = new(bool)
	*(*o).GroupsCanPost = randBool()
}

func fillRandomlyBaseCountry(o *models.BaseCountry) {
	(*o).Id = randInt()
	(*o).Title = randString()
}

func fillRandomlyBaseCropPhoto(o *models.BaseCropPhoto) {
	fillRandomlyBaseCropPhotoCrop(&(*o).Crop)
	fillRandomlyPhotosPhoto(&(*o).Photo)
	fillRandomlyBaseCropPhotoRect(&(*o).Rect)
}

func fillRandomlyBaseCropPhotoCrop(o *models.BaseCropPhotoCrop) {
	(*o).X = randFloat()
	(*o).X2 = randFloat()
	(*o).Y = randFloat()
	(*o).Y2 = randFloat()
}

func fillRandomlyBaseCropPhotoRect(o *models.BaseCropPhotoRect) {
	(*o).X = randFloat()
	(*o).X2 = randFloat()
	(*o).Y = randFloat()
	(*o).Y2 = randFloat()
}

func fillRandomlyBaseError(o *models.BaseError) {
	(*o).ErrorCode = randInt()
	(*o).ErrorMsg = new(string)
	*(*o).ErrorMsg = randString()
	(*o).ErrorSubcode = new(int)
	*(*o).ErrorSubcode = randInt()
	(*o).ErrorText = new(string)
	*(*o).ErrorText = randString()
	(*o).RequestParams = new([]models.BaseRequestParam)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).RequestParams = make([]models.BaseRequestParam, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyBaseRequestParam(&(*(*o).RequestParams)[i0])
	}
}

func fillRandomlyBaseGeo(o *models.BaseGeo) {
	(*o).Coordinates = new(models.BaseGeoCoordinates)
	fillRandomlyBaseGeoCoordinates((*o).Coordinates)
	(*o).Place = new(models.BasePlace)
	fillRandomlyBasePlace((*o).Place)
	(*o).Showmap = new(int)
	*(*o).Showmap = randInt()
	(*o).Type = new(string)
	*(*o).Type = randString()
}

func fillRandomlyBaseGeoCoordinates(o *models.BaseGeoCoordinates) {
	(*o).Latitude = randFloat()
	(*o).Longitude = randFloat()
}

func fillRandomlyBaseGradientPoint(o *models.BaseGradientPoint) {
	(*o).Color = randString()
	(*o).Position = randFloat()
}

func fillRandomlyBaseImage(o *models.BaseImage) {
	(*o).Height = randInt()
	(*o).Id = new(string)
	*(*o).Id = randString()
	(*o).Url = randString()
	(*o).Width = randInt()
}

func fillRandomlyBaseLikes(o *models.BaseLikes) {
	(*o).Count = new(int)
	*(*o).Count = randInt()
	(*o).UserLikes = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).UserLikes)
}

func fillRandomlyBaseLikesInfo(o *models.BaseLikesInfo) {
	fillRandomlyBaseBoolInt(&(*o).CanLike)
	(*o).CanPublish = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).CanPublish)
	(*o).Count = randInt()
	(*o).UserLikes = randInt()
}

func fillRandomlyBaseLink(o *models.BaseLink) {
	(*o).Application = new(models.BaseLinkApplication)
	fillRandomlyBaseLinkApplication((*o).Application)
	(*o).Button = new(models.BaseLinkButton)
	fillRandomlyBaseLinkButton((*o).Button)
	(*o).Caption = new(string)
	*(*o).Caption = randString()
	(*o).Description = new(string)
	*(*o).Description = randString()
	(*o).Id = new(string)
	*(*o).Id = randString()
	(*o).IsExternal = new(bool)
	*(*o).IsExternal = randBool()
	(*o).IsFavorite = new(bool)
	*(*o).IsFavorite = randBool()
	(*o).Photo = new(models.PhotosPhoto)
	fillRandomlyPhotosPhoto((*o).Photo)
	(*o).PreviewPage = new(string)
	*(*o).PreviewPage = randString()
	(*o).PreviewUrl = new(string)
	*(*o).PreviewUrl = randString()
	(*o).Product = new(models.BaseLinkProduct)
	fillRandomlyBaseLinkProduct((*o).Product)
	(*o).Rating = new(models.BaseLinkRating)
	fillRandomlyBaseLinkRating((*o).Rating)
	(*o).TargetObject = new(models.LinkTargetObject)
	fillRandomlyLinkTargetObject((*o).TargetObject)
	(*o).Title = new(string)
	*(*o).Title = randString()
	(*o).Url = randString()
	(*o).Video = new(models.VideoVideo)
	fillRandomlyVideoVideo((*o).Video)
}

func fillRandomlyBaseLinkApplication(o *models.BaseLinkApplication) {
	(*o).AppId = new(float64)
	*(*o).AppId = randFloat()
	(*o).Store = new(models.BaseLinkApplicationStore)
	fillRandomlyBaseLinkApplicationStore((*o).Store)
}

func fillRandomlyBaseLinkApplicationStore(o *models.BaseLinkApplicationStore) {
	(*o).Id = new(float64)
	*(*o).Id = randFloat()
	(*o).Name = new(string)
	*(*o).Name = randString()
}

func fillRandomlyBaseLinkButton(o *models.BaseLinkButton) {
	(*o).Action = new(models.BaseLinkButtonAction)
	fillRandomlyBaseLinkButtonAction((*o).Action)
	(*o).AlbumId = new(int)
	*(*o).AlbumId = randInt()
	(*o).BlockId = new(string)
	*(*o).BlockId = randString()
	(*o).CuratorId = new(int)
	*(*o).CuratorId = randInt()
	(*o).Icon = new(string)
	*(*o).Icon = randString()
	(*o).OwnerId = new(int)
	*(*o).OwnerId = randInt()
	(*o).SectionId = new(string)
	*(*o).SectionId = randString()
	(*o).Style = new(models.BaseLinkButtonStyle)
	fillRandomlyBaseLinkButtonStyle((*o).Style)
	(*o).Title = new(string)
	*(*o).Title = randString()
}

func fillRandomlyBaseLinkButtonAction(o *models.BaseLinkButtonAction) {
	(*o).ConsumeReason = new(string)
	*(*o).ConsumeReason = randString()
	fillRandomlyBaseLinkButtonActionType(&(*o).Type)
	(*o).Url = new(string)
	*(*o).Url = randString()
}

func fillRandomlyBaseLinkButtonActionType(o *models.BaseLinkButtonActionType) {
	switch randIntn(1) {
	case 0:
		*o = "open_url"
	}
}

func fillRandomlyBaseLinkButtonStyle(o *models.BaseLinkButtonStyle) {
	switch randIntn(2) {
	case 0:
		*o = "primary"
	case 1:
		*o = "secondary"
	}
}

func fillRandomlyBaseLinkProduct(o *models.BaseLinkProduct) {
	(*o).Merchant = new(string)
	*(*o).Merchant = randString()
	(*o).OrdersCount = new(int)
	*(*o).OrdersCount = randInt()
	fillRandomlyMarketPrice(&(*o).Price)
}

func fillRandomlyBaseLinkProductCategory(o *models.BaseLinkProductCategory) {
	*o = models.BaseLinkProductCategory(randString())
}

func fillRandomlyBaseLinkProductStatus(o *models.BaseLinkProductStatus) {
	switch randIntn(5) {
	case 0:
		*o = "active"
	case 1:
		*o = "blocked"
	case 2:
		*o = "sold"
	case 3:
		*o = "deleted"
	case 4:
		*o = "archived"
	}
}

func fillRandomlyBaseLinkRating(o *models.BaseLinkRating) {
	(*o).ReviewsCount = new(int)
	*(*o).ReviewsCount = randInt()
	(*o).Stars = new(float64)
	*(*o).Stars = randFloat()
}

func fillRandomlyBaseMessageError(o *models.BaseMessageError) {
	(*o).Code = new(int)
	*(*o).Code = randInt()
	(*o).Description = new(string)
	*(*o).Description = randString()
}

func fillRandomlyBaseObject(o *models.BaseObject) {
	(*o).Id = randInt()
	(*o).Title = randString()
}

func fillRandomlyBaseObjectCount(o *models.BaseObjectCount) {
	(*o).Count = new(int)
	*(*o).Count = randInt()
}

func fillRandomlyBaseObjectWithName(o *models.BaseObjectWithName) {
	(*o).Id = randInt()
	(*o).Name = randString()
}

func fillRandomlyBasePlace(o *models.BasePlace) {
	(*o).Address = new(string)
	*(*o).Address = randString()
	(*o).Checkins = new(int)
	*(*o).Checkins = randInt()
	(*o).City = new(string)
	*(*o).City = randString()
	(*o).Country = new(string)
	*(*o).Country = randString()
	(*o).Created = new(int)
	*(*o).Created = randInt()
	(*o).Icon = new(string)
	*(*o).Icon = randString()
	(*o).Id = new(int)
	*(*o).Id = randInt()
	(*o).Latitude = new(float64)
	*(*o).Latitude = randFloat()
	(*o).Longitude = new(float64)
	*(*o).Longitude = randFloat()
	(*o).Title = new(string)
	*(*o).Title = randString()
	(*o).Type = new(string)
	*(*o).Type = randString()
}

func fillRandomlyBasePropertyExists(o *models.BasePropertyExists) {
	switch randIntn(1) {
	case 0:
		*o = 1
	}
}

func fillRandomlyBaseRepostsInfo(o *models.BaseRepostsInfo) {
	(*o).Count = randInt()
	(*o).MailCount = new(int)
	*(*o).MailCount = randInt()
	(*o).UserReposted = new(int)
	*(*o).UserReposted = randInt()
	(*o).WallCount = new(int)
	*(*o).WallCount = randInt()
}

func fillRandomlyBaseRequestParam(o *models.BaseRequestParam) {
	(*o).Key = new(string)
	*(*o).Key = randString()
	(*o).Value = new(string)
	*(*o).Value = randString()
}

func fillRandomlyBaseSex(o *models.BaseSex) {
	switch randIntn(3) {
	case 0:
		*o = 0
	case 1:
		*o = 1
	case 2:
		*o = 2
	}
}

func fillRandomlyBaseSticker(o *models.BaseSticker) {
	var rawJSON []byte
	switch randIntn(2) {
	case 0:
		r := new(models.BaseStickerOld)
		fillRandomlyBaseStickerOld(r)
		rawJSON, _ = json.Marshal(*r)
	case 1:
		r := new(models.BaseStickerNew)
		fillRandomlyBaseStickerNew(r)
		rawJSON, _ = json.Marshal(*r)
	}
	o.Raws = rawJSON
}

func fillRandomlyBaseStickerAnimationType(o *models.BaseStickerAnimationType) {
	switch randIntn(2) {
	case 0:
		*o = "light"
	case 1:
		*o = "dark"
	}
}

func fillRandomlyBaseStickerAnimation(o *models.BaseStickerAnimation) {
	(*o).Type = new(models.BaseStickerAnimationType)
	fillRandomlyBaseStickerAnimationType((*o).Type)
	(*o).Url = new(string)
	*(*o).Url = randString()
}

func fillRandomlyBaseStickerNew(o *models.BaseStickerNew) {
	(*o).AnimationUrl = new(string)
	*(*o).AnimationUrl = randString()
	(*o).Animations = new([]models.BaseStickerAnimation)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).Animations = make([]models.BaseStickerAnimation, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyBaseStickerAnimation(&(*(*o).Animations)[i0])
	}
	(*o).Images = new([]models.BaseImage)
	l0 = randIntn(maxArrayLength + 1)
	*(*o).Images = make([]models.BaseImage, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyBaseImage(&(*(*o).Images)[i0])
	}
	(*o).ImagesWithBackground = new([]models.BaseImage)
	l0 = randIntn(maxArrayLength + 1)
	*(*o).ImagesWithBackground = make([]models.BaseImage, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyBaseImage(&(*(*o).ImagesWithBackground)[i0])
	}
	(*o).IsAllowed = new(bool)
	*(*o).IsAllowed = randBool()
	(*o).ProductId = new(int)
	*(*o).ProductId = randInt()
	(*o).StickerId = new(int)
	*(*o).StickerId = randInt()
}

func fillRandomlyBaseStickerOld(o *models.BaseStickerOld) {
	(*o).Height = new(int)
	*(*o).Height = randInt()
	(*o).Id = new(int)
	*(*o).Id = randInt()
	(*o).IsAllowed = new(bool)
	*(*o).IsAllowed = randBool()
	(*o).Photo128 = new(string)
	*(*o).Photo128 = randString()
	(*o).Photo256 = new(string)
	*(*o).Photo256 = randString()
	(*o).Photo352 = new(string)
	*(*o).Photo352 = randString()
	(*o).Photo512 = new(string)
	*(*o).Photo512 = randString()
	(*o).Photo64 = new(string)
	*(*o).Photo64 = randString()
	(*o).ProductId = new(int)
	*(*o).ProductId = randInt()
	(*o).Width = new(int)
	*(*o).Width = randInt()
}

func fillRandomlyBaseStickersList(o *models.BaseStickersList) {
	l0 := randIntn(maxArrayLength + 1)
	*o = make([]models.BaseStickerNew, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyBaseStickerNew(&(*o)[i0])
	}
}

func fillRandomlyBaseUploadServer(o *models.BaseUploadServer) {
	(*o).UploadUrl = randString()
}

func fillRandomlyBaseUserGroupFields(o *models.BaseUserGroupFields) {
	switch randIntn(111) {
	case 0:
		*o = "about"
	case 1:
		*o = "action_button"
	case 2:
		*o = "activities"
	case 3:
		*o = "activity"
	case 4:
		*o = "addresses"
	case 5:
		*o = "admin_level"
	case 6:
		*o = "age_limits"
	case 7:
		*o = "author_id"
	case 8:
		*o = "ban_info"
	case 9:
		*o = "bdate"
	case 10:
		*o = "blacklisted"
	case 11:
		*o = "blacklisted_by_me"
	case 12:
		*o = "books"
	case 13:
		*o = "can_create_topic"
	case 14:
		*o = "can_message"
	case 15:
		*o = "can_post"
	case 16:
		*o = "can_see_all_posts"
	case 17:
		*o = "can_see_audio"
	case 18:
		*o = "can_send_friend_request"
	case 19:
		*o = "can_upload_video"
	case 20:
		*o = "can_write_private_message"
	case 21:
		*o = "career"
	case 22:
		*o = "city"
	case 23:
		*o = "common_count"
	case 24:
		*o = "connections"
	case 25:
		*o = "contacts"
	case 26:
		*o = "counters"
	case 27:
		*o = "country"
	case 28:
		*o = "cover"
	case 29:
		*o = "crop_photo"
	case 30:
		*o = "deactivated"
	case 31:
		*o = "description"
	case 32:
		*o = "domain"
	case 33:
		*o = "education"
	case 34:
		*o = "exports"
	case 35:
		*o = "finish_date"
	case 36:
		*o = "fixed_post"
	case 37:
		*o = "followers_count"
	case 38:
		*o = "friend_status"
	case 39:
		*o = "games"
	case 40:
		*o = "has_market_app"
	case 41:
		*o = "has_mobile"
	case 42:
		*o = "has_photo"
	case 43:
		*o = "home_town"
	case 44:
		*o = "id"
	case 45:
		*o = "interests"
	case 46:
		*o = "is_admin"
	case 47:
		*o = "is_closed"
	case 48:
		*o = "is_favorite"
	case 49:
		*o = "is_friend"
	case 50:
		*o = "is_hidden_from_feed"
	case 51:
		*o = "is_member"
	case 52:
		*o = "is_messages_blocked"
	case 53:
		*o = "can_send_notify"
	case 54:
		*o = "is_subscribed"
	case 55:
		*o = "last_seen"
	case 56:
		*o = "links"
	case 57:
		*o = "lists"
	case 58:
		*o = "maiden_name"
	case 59:
		*o = "main_album_id"
	case 60:
		*o = "main_section"
	case 61:
		*o = "market"
	case 62:
		*o = "member_status"
	case 63:
		*o = "members_count"
	case 64:
		*o = "military"
	case 65:
		*o = "movies"
	case 66:
		*o = "music"
	case 67:
		*o = "name"
	case 68:
		*o = "nickname"
	case 69:
		*o = "occupation"
	case 70:
		*o = "online"
	case 71:
		*o = "online_status"
	case 72:
		*o = "personal"
	case 73:
		*o = "phone"
	case 74:
		*o = "photo_100"
	case 75:
		*o = "photo_200"
	case 76:
		*o = "photo_200_orig"
	case 77:
		*o = "photo_400_orig"
	case 78:
		*o = "photo_50"
	case 79:
		*o = "photo_id"
	case 80:
		*o = "photo_max"
	case 81:
		*o = "photo_max_orig"
	case 82:
		*o = "quotes"
	case 83:
		*o = "relation"
	case 84:
		*o = "relatives"
	case 85:
		*o = "schools"
	case 86:
		*o = "screen_name"
	case 87:
		*o = "sex"
	case 88:
		*o = "site"
	case 89:
		*o = "start_date"
	case 90:
		*o = "status"
	case 91:
		*o = "timezone"
	case 92:
		*o = "trending"
	case 93:
		*o = "tv"
	case 94:
		*o = "type"
	case 95:
		*o = "universities"
	case 96:
		*o = "verified"
	case 97:
		*o = "wall_comments"
	case 98:
		*o = "wiki_page"
	case 99:
		*o = "first_name"
	case 100:
		*o = "first_name_acc"
	case 101:
		*o = "first_name_dat"
	case 102:
		*o = "first_name_gen"
	case 103:
		*o = "last_name"
	case 104:
		*o = "last_name_acc"
	case 105:
		*o = "last_name_dat"
	case 106:
		*o = "last_name_gen"
	case 107:
		*o = "can_subscribe_stories"
	case 108:
		*o = "is_subscribed_stories"
	case 109:
		*o = "vk_admin_status"
	case 110:
		*o = "can_upload_story"
	}
}

func fillRandomlyBaseUserId(o *models.BaseUserId) {
	(*o).UserId = new(int)
	*(*o).UserId = randInt()
}

func fillRandomlyBoardDefaultOrder(o *models.BoardDefaultOrder) {
	switch randIntn(4) {
	case 0:
		*o = 1
	case 1:
		*o = 2
	case 2:
		*o = -1
	case 3:
		*o = -2
	}
}

func fillRandomlyBoardTopic(o *models.BoardTopic) {
	(*o).Comments = new(int)
	*(*o).Comments = randInt()
	(*o).Created = new(int)
	*(*o).Created = randInt()
	(*o).CreatedBy = new(int)
	*(*o).CreatedBy = randInt()
	(*o).FirstComment = new(string)
	*(*o).FirstComment = randString()
	(*o).Id = new(int)
	*(*o).Id = randInt()
	(*o).IsClosed = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).IsClosed)
	(*o).IsFixed = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).IsFixed)
	(*o).LastComment = new(string)
	*(*o).LastComment = randString()
	(*o).Title = new(string)
	*(*o).Title = randString()
	(*o).Updated = new(int)
	*(*o).Updated = randInt()
	(*o).UpdatedBy = new(int)
	*(*o).UpdatedBy = randInt()
}

func fillRandomlyBoardTopicComment(o *models.BoardTopicComment) {
	(*o).Attachments = new([]models.WallCommentAttachment)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).Attachments = make([]models.WallCommentAttachment, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyWallCommentAttachment(&(*(*o).Attachments)[i0])
	}
	(*o).CanEdit = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).CanEdit)
	(*o).Date = randInt()
	(*o).FromId = randInt()
	(*o).Id = randInt()
	(*o).Likes = new(models.BaseLikesInfo)
	fillRandomlyBaseLikesInfo((*o).Likes)
	(*o).RealOffset = new(int)
	*(*o).RealOffset = randInt()
	(*o).Text = randString()
}

func fillRandomlyCallbackBase(o *models.CallbackBase) {
	(*o).EventId = randString()
	(*o).GroupId = randInt()
	(*o).Secret = new(string)
	*(*o).Secret = randString()
	fillRandomlyCallbackType(&(*o).Type)
}

func fillRandomlyCallbackBoardPostDelete(o *models.CallbackBoardPostDelete) {
	(*o).Id = randInt()
	(*o).TopicId = randInt()
	(*o).TopicOwnerId = randInt()
}

func fillRandomlyCallbackConfirmation(o *models.CallbackConfirmation) {
	fillRandomlyCallbackBase(&(*o).CallbackBase)
	(*o).Type = new(models.CallbackType)
	fillRandomlyCallbackType((*o).Type)
}

func fillRandomlyCallbackDonutMoneyWithdraw(o *models.CallbackDonutMoneyWithdraw) {
	(*o).Amount = randFloat()
	(*o).AmountWithoutFee = randFloat()
}

func fillRandomlyCallbackDonutMoneyWithdrawError(o *models.CallbackDonutMoneyWithdrawError) {
	(*o).Reason = randString()
}

func fillRandomlyCallbackDonutSubscriptionCancelled(o *models.CallbackDonutSubscriptionCancelled) {
	(*o).UserId = new(int)
	*(*o).UserId = randInt()
}

func fillRandomlyCallbackDonutSubscriptionCreate(o *models.CallbackDonutSubscriptionCreate) {
	(*o).Amount = randInt()
	(*o).AmountWithoutFee = randFloat()
	(*o).UserId = new(int)
	*(*o).UserId = randInt()
}

func fillRandomlyCallbackDonutSubscriptionExpired(o *models.CallbackDonutSubscriptionExpired) {
	(*o).UserId = new(int)
	*(*o).UserId = randInt()
}

func fillRandomlyCallbackDonutSubscriptionPriceChanged(o *models.CallbackDonutSubscriptionPriceChanged) {
	(*o).AmountDiff = new(float64)
	*(*o).AmountDiff = randFloat()
	(*o).AmountDiffWithoutFee = new(float64)
	*(*o).AmountDiffWithoutFee = randFloat()
	(*o).AmountNew = randInt()
	(*o).AmountOld = randInt()
	(*o).UserId = new(int)
	*(*o).UserId = randInt()
}

func fillRandomlyCallbackDonutSubscriptionProlonged(o *models.CallbackDonutSubscriptionProlonged) {
	(*o).Amount = randInt()
	(*o).AmountWithoutFee = randFloat()
	(*o).UserId = new(int)
	*(*o).UserId = randInt()
}

func fillRandomlyCallbackGroupChangePhoto(o *models.CallbackGroupChangePhoto) {
	fillRandomlyPhotosPhoto(&(*o).Photo)
	(*o).UserId = randInt()
}

func fillRandomlyCallbackGroupChangeSettings(o *models.CallbackGroupChangeSettings) {
	fillRandomlyBaseBoolInt(&(*o).Self)
	(*o).UserId = randInt()
}

func fillRandomlyCallbackGroupJoin(o *models.CallbackGroupJoin) {
	fillRandomlyCallbackGroupJoinType(&(*o).JoinType)
	(*o).UserId = randInt()
}

func fillRandomlyCallbackGroupJoinType(o *models.CallbackGroupJoinType) {
	switch randIntn(5) {
	case 0:
		*o = "join"
	case 1:
		*o = "unsure"
	case 2:
		*o = "accepted"
	case 3:
		*o = "approved"
	case 4:
		*o = "request"
	}
}

func fillRandomlyCallbackGroupLeave(o *models.CallbackGroupLeave) {
	(*o).Self = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).Self)
	(*o).UserId = new(int)
	*(*o).UserId = randInt()
}

func fillRandomlyCallbackGroupMarket(o *models.CallbackGroupMarket) {
	switch randIntn(2) {
	case 0:
		*o = 0
	case 1:
		*o = 1
	}
}

func fillRandomlyCallbackGroupOfficerRole(o *models.CallbackGroupOfficerRole) {
	switch randIntn(4) {
	case 0:
		*o = 0
	case 1:
		*o = 1
	case 2:
		*o = 2
	case 3:
		*o = 3
	}
}

func fillRandomlyCallbackGroupOfficersEdit(o *models.CallbackGroupOfficersEdit) {
	(*o).AdminId = randInt()
	fillRandomlyCallbackGroupOfficerRole(&(*o).LevelNew)
	fillRandomlyCallbackGroupOfficerRole(&(*o).LevelOld)
	(*o).UserId = randInt()
}

func fillRandomlyCallbackGroupSettingsChanges(o *models.CallbackGroupSettingsChanges) {
	(*o).Access = new(models.GroupsGroupIsClosed)
	fillRandomlyGroupsGroupIsClosed((*o).Access)
	(*o).AgeLimits = new(models.GroupsGroupFullAgeLimits)
	fillRandomlyGroupsGroupFullAgeLimits((*o).AgeLimits)
	(*o).Description = new(string)
	*(*o).Description = randString()
	(*o).EnableAudio = new(models.GroupsGroupAudio)
	fillRandomlyGroupsGroupAudio((*o).EnableAudio)
	(*o).EnableMarket = new(models.CallbackGroupMarket)
	fillRandomlyCallbackGroupMarket((*o).EnableMarket)
	(*o).EnablePhoto = new(models.GroupsGroupPhotos)
	fillRandomlyGroupsGroupPhotos((*o).EnablePhoto)
	(*o).EnableStatusDefault = new(models.GroupsGroupWall)
	fillRandomlyGroupsGroupWall((*o).EnableStatusDefault)
	(*o).EnableVideo = new(models.GroupsGroupVideo)
	fillRandomlyGroupsGroupVideo((*o).EnableVideo)
	(*o).PublicCategory = new(int)
	*(*o).PublicCategory = randInt()
	(*o).PublicSubcategory = new(int)
	*(*o).PublicSubcategory = randInt()
	(*o).ScreenName = new(string)
	*(*o).ScreenName = randString()
	(*o).Title = new(string)
	*(*o).Title = randString()
	(*o).Website = new(string)
	*(*o).Website = randString()
}

func fillRandomlyCallbackLikeAddRemoveObjectType(o *models.CallbackLikeAddRemoveObjectType) {
	switch randIntn(10) {
	case 0:
		*o = "video"
	case 1:
		*o = "photo"
	case 2:
		*o = "post"
	case 3:
		*o = "comment"
	case 4:
		*o = "note"
	case 5:
		*o = "topic_comment"
	case 6:
		*o = "photo_comment"
	case 7:
		*o = "video_comment"
	case 8:
		*o = "market"
	case 9:
		*o = "market_comment"
	}
}

func fillRandomlyCallbackLikeAddRemove(o *models.CallbackLikeAddRemove) {
	(*o).LikerId = randInt()
	(*o).ObjectId = randInt()
	(*o).ObjectOwnerId = randInt()
	fillRandomlyCallbackLikeAddRemoveObjectType(&(*o).ObjectType)
	(*o).PostId = randInt()
	(*o).ThreadReplyId = new(int)
	*(*o).ThreadReplyId = randInt()
}

func fillRandomlyCallbackMarketComment(o *models.CallbackMarketComment) {
	(*o).Date = randInt()
	(*o).FromId = randInt()
	(*o).Id = randInt()
	(*o).MarketOwnerId = new(int)
	*(*o).MarketOwnerId = randInt()
	(*o).PhotoId = new(int)
	*(*o).PhotoId = randInt()
	(*o).Text = new(string)
	*(*o).Text = randString()
}

func fillRandomlyCallbackMarketCommentDelete(o *models.CallbackMarketCommentDelete) {
	(*o).Id = randInt()
	(*o).ItemId = randInt()
	(*o).OwnerId = randInt()
	(*o).UserId = randInt()
}

func fillRandomlyCallbackMessageAllow(o *models.CallbackMessageAllow) {
	fillRandomlyCallbackBase(&(*o).CallbackBase)
	fillRandomlyCallbackMessageAllowObject(&(*o).Object)
	(*o).Type = new(models.CallbackType)
	fillRandomlyCallbackType((*o).Type)
}

func fillRandomlyCallbackMessageAllowObject(o *models.CallbackMessageAllowObject) {
	(*o).Key = randString()
	(*o).UserId = randInt()
}

func fillRandomlyCallbackMessageDeny(o *models.CallbackMessageDeny) {
	(*o).UserId = randInt()
}

func fillRandomlyCallbackMessageEdit(o *models.CallbackMessageEdit) {
	fillRandomlyCallbackBase(&(*o).CallbackBase)
	fillRandomlyMessagesMessage(&(*o).Object)
	(*o).Type = new(models.CallbackType)
	fillRandomlyCallbackType((*o).Type)
}

func fillRandomlyCallbackMessageNew(o *models.CallbackMessageNew) {
	fillRandomlyCallbackBase(&(*o).CallbackBase)
	fillRandomlyCallbackMessageObject(&(*o).Object)
	(*o).Type = new(models.CallbackType)
	fillRandomlyCallbackType((*o).Type)
}

func fillRandomlyCallbackMessageObject(o *models.CallbackMessageObject) {
	(*o).ClientInfo = new(models.ClientInfoForBots)
	fillRandomlyClientInfoForBots((*o).ClientInfo)
	(*o).Message = new(models.MessagesMessage)
	fillRandomlyMessagesMessage((*o).Message)
}

func fillRandomlyCallbackMessageReply(o *models.CallbackMessageReply) {
	fillRandomlyCallbackBase(&(*o).CallbackBase)
	fillRandomlyMessagesMessage(&(*o).Object)
	(*o).Type = new(models.CallbackType)
	fillRandomlyCallbackType((*o).Type)
}

func fillRandomlyCallbackPhotoComment(o *models.CallbackPhotoComment) {
	(*o).Date = randInt()
	(*o).FromId = randInt()
	(*o).Id = randInt()
	(*o).PhotoOwnerId = randInt()
	(*o).Text = randString()
}

func fillRandomlyCallbackPhotoCommentDelete(o *models.CallbackPhotoCommentDelete) {
	(*o).Id = randInt()
	(*o).OwnerId = randInt()
	(*o).PhotoId = randInt()
	(*o).UserId = randInt()
}

func fillRandomlyCallbackPollVoteNew(o *models.CallbackPollVoteNew) {
	(*o).OptionId = randInt()
	(*o).OwnerId = randInt()
	(*o).PollId = randInt()
	(*o).UserId = randInt()
}

func fillRandomlyCallbackQrScan(o *models.CallbackQrScan) {
	(*o).Data = randString()
	(*o).Reread = randBool()
	(*o).Subtype = randString()
	(*o).Type = randString()
	(*o).UserId = randInt()
}

func fillRandomlyCallbackType(o *models.CallbackType) {
	switch randIntn(43) {
	case 0:
		*o = "audio_new"
	case 1:
		*o = "board_post_new"
	case 2:
		*o = "board_post_edit"
	case 3:
		*o = "board_post_restore"
	case 4:
		*o = "board_post_delete"
	case 5:
		*o = "confirmation"
	case 6:
		*o = "group_leave"
	case 7:
		*o = "group_join"
	case 8:
		*o = "group_change_photo"
	case 9:
		*o = "group_change_settings"
	case 10:
		*o = "group_officers_edit"
	case 11:
		*o = "lead_forms_new"
	case 12:
		*o = "market_comment_new"
	case 13:
		*o = "market_comment_delete"
	case 14:
		*o = "market_comment_edit"
	case 15:
		*o = "market_comment_restore"
	case 16:
		*o = "message_new"
	case 17:
		*o = "message_reply"
	case 18:
		*o = "message_edit"
	case 19:
		*o = "message_allow"
	case 20:
		*o = "message_deny"
	case 21:
		*o = "message_read"
	case 22:
		*o = "message_typing_state"
	case 23:
		*o = "messages_edit"
	case 24:
		*o = "photo_new"
	case 25:
		*o = "photo_comment_new"
	case 26:
		*o = "photo_comment_delete"
	case 27:
		*o = "photo_comment_edit"
	case 28:
		*o = "photo_comment_restore"
	case 29:
		*o = "poll_vote_new"
	case 30:
		*o = "user_block"
	case 31:
		*o = "user_unblock"
	case 32:
		*o = "video_new"
	case 33:
		*o = "video_comment_new"
	case 34:
		*o = "video_comment_delete"
	case 35:
		*o = "video_comment_edit"
	case 36:
		*o = "video_comment_restore"
	case 37:
		*o = "wall_post_new"
	case 38:
		*o = "wall_reply_new"
	case 39:
		*o = "wall_reply_edit"
	case 40:
		*o = "wall_reply_delete"
	case 41:
		*o = "wall_reply_restore"
	case 42:
		*o = "wall_repost"
	}
}

func fillRandomlyCallbackUserBlock(o *models.CallbackUserBlock) {
	(*o).AdminId = randInt()
	(*o).Comment = new(string)
	*(*o).Comment = randString()
	(*o).Reason = randInt()
	(*o).UnblockDate = randInt()
	(*o).UserId = randInt()
}

func fillRandomlyCallbackUserUnblock(o *models.CallbackUserUnblock) {
	(*o).AdminId = randInt()
	(*o).ByEndDate = randInt()
	(*o).UserId = randInt()
}

func fillRandomlyCallbackVideoComment(o *models.CallbackVideoComment) {
	(*o).Date = randInt()
	(*o).FromId = randInt()
	(*o).Id = randInt()
	(*o).Text = randString()
	(*o).VideoOwnerId = randInt()
}

func fillRandomlyCallbackVideoCommentDelete(o *models.CallbackVideoCommentDelete) {
	(*o).Id = randInt()
	(*o).OwnerId = randInt()
	(*o).UserId = randInt()
	(*o).VideoId = randInt()
}

func fillRandomlyCallbackWallCommentDelete(o *models.CallbackWallCommentDelete) {
	(*o).Id = randInt()
	(*o).OwnerId = randInt()
	(*o).PostId = randInt()
	(*o).UserId = randInt()
}

func fillRandomlyCallsCall(o *models.CallsCall) {
	(*o).Duration = new(int)
	*(*o).Duration = randInt()
	(*o).InitiatorId = randInt()
	(*o).Participants = new(models.CallsParticipants)
	fillRandomlyCallsParticipants((*o).Participants)
	(*o).ReceiverId = randInt()
	fillRandomlyCallsEndState(&(*o).State)
	(*o).Time = randInt()
	(*o).Video = new(bool)
	*(*o).Video = randBool()
}

func fillRandomlyCallsEndState(o *models.CallsEndState) {
	switch randIntn(3) {
	case 0:
		*o = "canceled_by_initiator"
	case 1:
		*o = "canceled_by_receiver"
	case 2:
		*o = "reached"
	}
}

func fillRandomlyCallsParticipants(o *models.CallsParticipants) {
	(*o).Count = new(int)
	*(*o).Count = randInt()
	(*o).List = new([]int)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).List = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*o).List)[i0] = randInt()
	}
}

func fillRandomlyClientInfoForBots(o *models.ClientInfoForBots) {
	(*o).ButtonActions = new([]models.MessagesTemplateActionTypeNames)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).ButtonActions = make([]models.MessagesTemplateActionTypeNames, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyMessagesTemplateActionTypeNames(&(*(*o).ButtonActions)[i0])
	}
	(*o).Carousel = new(bool)
	*(*o).Carousel = randBool()
	(*o).InlineKeyboard = new(bool)
	*(*o).InlineKeyboard = randBool()
	(*o).Keyboard = new(bool)
	*(*o).Keyboard = randBool()
	(*o).LangId = new(int)
	*(*o).LangId = randInt()
}

func fillRandomlyCommentThread(o *models.CommentThread) {
	(*o).CanPost = new(bool)
	*(*o).CanPost = randBool()
	(*o).Count = randInt()
	(*o).GroupsCanPost = new(bool)
	*(*o).GroupsCanPost = randBool()
	(*o).Items = new([]models.WallWallComment)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).Items = make([]models.WallWallComment, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyWallWallComment(&(*(*o).Items)[i0])
	}
	(*o).ShowReplyButton = new(bool)
	*(*o).ShowReplyButton = randBool()
}

func fillRandomlyDatabaseCity(o *models.DatabaseCity) {
	fillRandomlyBaseObject(&(*o).BaseObject)
	(*o).Area = new(string)
	*(*o).Area = randString()
	(*o).Important = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).Important)
	(*o).Region = new(string)
	*(*o).Region = randString()
}

func fillRandomlyDatabaseCityById(o *models.DatabaseCityById) {
	r := models.BaseObject(*o)
	fillRandomlyBaseObject(&r)
	*o = models.DatabaseCityById(r)
}

func fillRandomlyDatabaseFaculty(o *models.DatabaseFaculty) {
	(*o).Id = new(int)
	*(*o).Id = randInt()
	(*o).Title = new(string)
	*(*o).Title = randString()
}

func fillRandomlyDatabaseRegion(o *models.DatabaseRegion) {
	(*o).Id = new(int)
	*(*o).Id = randInt()
	(*o).Title = new(string)
	*(*o).Title = randString()
}

func fillRandomlyDatabaseSchool(o *models.DatabaseSchool) {
	(*o).Id = new(int)
	*(*o).Id = randInt()
	(*o).Title = new(string)
	*(*o).Title = randString()
}

func fillRandomlyDatabaseStation(o *models.DatabaseStation) {
	(*o).CityId = new(int)
	*(*o).CityId = randInt()
	(*o).Color = new(string)
	*(*o).Color = randString()
	(*o).Id = randInt()
	(*o).Name = randString()
}

func fillRandomlyDatabaseUniversity(o *models.DatabaseUniversity) {
	(*o).Id = new(int)
	*(*o).Id = randInt()
	(*o).Title = new(string)
	*(*o).Title = randString()
}

func fillRandomlyDocsDoc(o *models.DocsDoc) {
	(*o).AccessKey = new(string)
	*(*o).AccessKey = randString()
	(*o).Date = randInt()
	(*o).Ext = randString()
	(*o).Id = randInt()
	(*o).IsLicensed = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).IsLicensed)
	(*o).OwnerId = randInt()
	(*o).Preview = new(models.DocsDocPreview)
	fillRandomlyDocsDocPreview((*o).Preview)
	(*o).Size = randInt()
	(*o).Tags = new([]string)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).Tags = make([]string, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*o).Tags)[i0] = randString()
	}
	(*o).Title = randString()
	(*o).Type = randInt()
	(*o).Url = new(string)
	*(*o).Url = randString()
}

func fillRandomlyDocsDocAttachmentType(o *models.DocsDocAttachmentType) {
	switch randIntn(3) {
	case 0:
		*o = "doc"
	case 1:
		*o = "graffiti"
	case 2:
		*o = "audio_message"
	}
}

func fillRandomlyDocsDocPreview(o *models.DocsDocPreview) {
	(*o).AudioMsg = new(models.DocsDocPreviewAudioMsg)
	fillRandomlyDocsDocPreviewAudioMsg((*o).AudioMsg)
	(*o).Graffiti = new(models.DocsDocPreviewGraffiti)
	fillRandomlyDocsDocPreviewGraffiti((*o).Graffiti)
	(*o).Photo = new(models.DocsDocPreviewPhoto)
	fillRandomlyDocsDocPreviewPhoto((*o).Photo)
	(*o).Video = new(models.DocsDocPreviewVideo)
	fillRandomlyDocsDocPreviewVideo((*o).Video)
}

func fillRandomlyDocsDocPreviewAudioMsg(o *models.DocsDocPreviewAudioMsg) {
	(*o).Duration = randInt()
	(*o).LinkMp3 = randString()
	(*o).LinkOgg = randString()
	l0 := randIntn(maxArrayLength + 1)
	(*o).Waveform = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		((*o).Waveform)[i0] = randInt()
	}
}

func fillRandomlyDocsDocPreviewGraffiti(o *models.DocsDocPreviewGraffiti) {
	(*o).Height = randInt()
	(*o).Src = randString()
	(*o).Width = randInt()
}

func fillRandomlyDocsDocPreviewPhoto(o *models.DocsDocPreviewPhoto) {
	(*o).Sizes = new([]models.DocsDocPreviewPhotoSizes)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).Sizes = make([]models.DocsDocPreviewPhotoSizes, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyDocsDocPreviewPhotoSizes(&(*(*o).Sizes)[i0])
	}
}

func fillRandomlyDocsDocPreviewPhotoSizes(o *models.DocsDocPreviewPhotoSizes) {
	(*o).Height = randInt()
	(*o).Src = randString()
	fillRandomlyPhotosPhotoSizesType(&(*o).Type)
	(*o).Width = randInt()
}

func fillRandomlyDocsDocPreviewVideo(o *models.DocsDocPreviewVideo) {
	(*o).FileSize = randInt()
	(*o).Height = randInt()
	(*o).Src = randString()
	(*o).Width = randInt()
}

func fillRandomlyDocsDocTypes(o *models.DocsDocTypes) {
	(*o).Count = randInt()
	(*o).Id = randInt()
	(*o).Name = randString()
}

func fillRandomlyDonutDonatorSubscriptionInfoStatus(o *models.DonutDonatorSubscriptionInfoStatus) {
	switch randIntn(2) {
	case 0:
		*o = "active"
	case 1:
		*o = "expiring"
	}
}

func fillRandomlyDonutDonatorSubscriptionInfo(o *models.DonutDonatorSubscriptionInfo) {
	(*o).Amount = randInt()
	(*o).NextPaymentDate = randInt()
	(*o).OwnerId = randInt()
	fillRandomlyDonutDonatorSubscriptionInfoStatus(&(*o).Status)
}

func fillRandomlyEventsEventAttach(o *models.EventsEventAttach) {
	(*o).Address = new(string)
	*(*o).Address = randString()
	(*o).ButtonText = randString()
	l0 := randIntn(maxArrayLength + 1)
	(*o).Friends = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		((*o).Friends)[i0] = randInt()
	}
	(*o).Id = randInt()
	(*o).IsFavorite = randBool()
	(*o).MemberStatus = new(models.GroupsGroupFullMemberStatus)
	fillRandomlyGroupsGroupFullMemberStatus((*o).MemberStatus)
	(*o).Text = randString()
	(*o).Time = new(int)
	*(*o).Time = randInt()
}

func fillRandomlyFaveBookmark(o *models.FaveBookmark) {
	(*o).AddedDate = randInt()
	(*o).Link = new(models.BaseLink)
	fillRandomlyBaseLink((*o).Link)
	(*o).Post = new(models.WallWallpostFull)
	fillRandomlyWallWallpostFull((*o).Post)
	(*o).Product = new(models.MarketMarketItem)
	fillRandomlyMarketMarketItem((*o).Product)
	(*o).Seen = randBool()
	l0 := randIntn(maxArrayLength + 1)
	(*o).Tags = make([]models.FaveTag, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyFaveTag(&((*o).Tags)[i0])
	}
	fillRandomlyFaveBookmarkType(&(*o).Type)
	(*o).Video = new(models.VideoVideoFull)
	fillRandomlyVideoVideoFull((*o).Video)
}

func fillRandomlyFaveBookmarkType(o *models.FaveBookmarkType) {
	switch randIntn(5) {
	case 0:
		*o = "post"
	case 1:
		*o = "video"
	case 2:
		*o = "product"
	case 3:
		*o = "article"
	case 4:
		*o = "link"
	}
}

func fillRandomlyFavePage(o *models.FavePage) {
	(*o).Description = randString()
	(*o).Group = new(models.GroupsGroupFull)
	fillRandomlyGroupsGroupFull((*o).Group)
	l0 := randIntn(maxArrayLength + 1)
	(*o).Tags = make([]models.FaveTag, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyFaveTag(&((*o).Tags)[i0])
	}
	fillRandomlyFavePageType(&(*o).Type)
	(*o).UpdatedDate = new(int)
	*(*o).UpdatedDate = randInt()
	(*o).User = new(models.UsersUserFull)
	fillRandomlyUsersUserFull((*o).User)
}

func fillRandomlyFavePageType(o *models.FavePageType) {
	switch randIntn(3) {
	case 0:
		*o = "user"
	case 1:
		*o = "group"
	case 2:
		*o = "hints"
	}
}

func fillRandomlyFaveTag(o *models.FaveTag) {
	(*o).Id = new(int)
	*(*o).Id = randInt()
	(*o).Name = new(string)
	*(*o).Name = randString()
}

func fillRandomlyFriendsFriendExtendedStatus(o *models.FriendsFriendExtendedStatus) {
	fillRandomlyFriendsFriendStatus(&(*o).FriendsFriendStatus)
	(*o).IsRequestUnread = new(bool)
	*(*o).IsRequestUnread = randBool()
}

func fillRandomlyFriendsFriendStatus(o *models.FriendsFriendStatus) {
	fillRandomlyFriendsFriendStatusStatus(&(*o).FriendStatus)
	(*o).Sign = new(string)
	*(*o).Sign = randString()
	(*o).UserId = randInt()
}

func fillRandomlyFriendsFriendStatusStatus(o *models.FriendsFriendStatusStatus) {
	switch randIntn(4) {
	case 0:
		*o = 0
	case 1:
		*o = 1
	case 2:
		*o = 2
	case 3:
		*o = 3
	}
}

func fillRandomlyFriendsFriendsList(o *models.FriendsFriendsList) {
	(*o).Id = randInt()
	(*o).Name = randString()
}

func fillRandomlyFriendsMutualFriend(o *models.FriendsMutualFriend) {
	(*o).CommonCount = new(int)
	*(*o).CommonCount = randInt()
	(*o).CommonFriends = new([]int)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).CommonFriends = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*o).CommonFriends)[i0] = randInt()
	}
	(*o).Id = new(int)
	*(*o).Id = randInt()
}

func fillRandomlyFriendsRequests(o *models.FriendsRequests) {
	(*o).From = new(string)
	*(*o).From = randString()
	(*o).Mutual = new(models.FriendsRequestsMutual)
	fillRandomlyFriendsRequestsMutual((*o).Mutual)
	(*o).UserId = new(int)
	*(*o).UserId = randInt()
}

func fillRandomlyFriendsRequestsMutual(o *models.FriendsRequestsMutual) {
	(*o).Count = new(int)
	*(*o).Count = randInt()
	(*o).Users = new([]int)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).Users = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*o).Users)[i0] = randInt()
	}
}

func fillRandomlyFriendsRequestsXtrMessage(o *models.FriendsRequestsXtrMessage) {
	(*o).From = new(string)
	*(*o).From = randString()
	(*o).Message = new(string)
	*(*o).Message = randString()
	(*o).Mutual = new(models.FriendsRequestsMutual)
	fillRandomlyFriendsRequestsMutual((*o).Mutual)
	(*o).UserId = new(int)
	*(*o).UserId = randInt()
}

func fillRandomlyFriendsUserXtrPhone(o *models.FriendsUserXtrPhone) {
	fillRandomlyUsersUserFull(&(*o).UsersUserFull)
	(*o).Phone = new(string)
	*(*o).Phone = randString()
}

func fillRandomlyGiftsGift(o *models.GiftsGift) {
	(*o).Date = new(int)
	*(*o).Date = randInt()
	(*o).FromId = new(int)
	*(*o).FromId = randInt()
	(*o).Gift = new(models.GiftsLayout)
	fillRandomlyGiftsLayout((*o).Gift)
	(*o).GiftHash = new(string)
	*(*o).GiftHash = randString()
	(*o).Id = new(int)
	*(*o).Id = randInt()
	(*o).Message = new(string)
	*(*o).Message = randString()
	(*o).Privacy = new(models.GiftsGiftPrivacy)
	fillRandomlyGiftsGiftPrivacy((*o).Privacy)
}

func fillRandomlyGiftsGiftPrivacy(o *models.GiftsGiftPrivacy) {
	switch randIntn(3) {
	case 0:
		*o = 0
	case 1:
		*o = 1
	case 2:
		*o = 2
	}
}

func fillRandomlyGiftsLayout(o *models.GiftsLayout) {
	(*o).BuildId = new(string)
	*(*o).BuildId = randString()
	(*o).Id = new(int)
	*(*o).Id = randInt()
	(*o).IsStickersStyle = new(bool)
	*(*o).IsStickersStyle = randBool()
	(*o).Keywords = new(string)
	*(*o).Keywords = randString()
	(*o).StickersProductId = new(int)
	*(*o).StickersProductId = randInt()
	(*o).Thumb256 = new(string)
	*(*o).Thumb256 = randString()
	(*o).Thumb48 = new(string)
	*(*o).Thumb48 = randString()
	(*o).Thumb512 = new(string)
	*(*o).Thumb512 = randString()
	(*o).Thumb96 = new(string)
	*(*o).Thumb96 = randString()
}

func fillRandomlyGroupsAddress(o *models.GroupsAddress) {
	(*o).AdditionalAddress = new(string)
	*(*o).AdditionalAddress = randString()
	(*o).Address = new(string)
	*(*o).Address = randString()
	(*o).CityId = new(int)
	*(*o).CityId = randInt()
	(*o).CountryId = new(int)
	*(*o).CountryId = randInt()
	(*o).Distance = new(int)
	*(*o).Distance = randInt()
	(*o).Id = randInt()
	(*o).Latitude = new(float64)
	*(*o).Latitude = randFloat()
	(*o).Longitude = new(float64)
	*(*o).Longitude = randFloat()
	(*o).MetroStationId = new(int)
	*(*o).MetroStationId = randInt()
	(*o).Phone = new(string)
	*(*o).Phone = randString()
	(*o).PlaceId = new(int)
	*(*o).PlaceId = randInt()
	(*o).TimeOffset = new(int)
	*(*o).TimeOffset = randInt()
	(*o).Timetable = new(models.GroupsAddressTimetable)
	fillRandomlyGroupsAddressTimetable((*o).Timetable)
	(*o).Title = new(string)
	*(*o).Title = randString()
	(*o).WorkInfoStatus = new(models.GroupsAddressWorkInfoStatus)
	fillRandomlyGroupsAddressWorkInfoStatus((*o).WorkInfoStatus)
}

func fillRandomlyGroupsAddressTimetable(o *models.GroupsAddressTimetable) {
	(*o).Fri = new(models.GroupsAddressTimetableDay)
	fillRandomlyGroupsAddressTimetableDay((*o).Fri)
	(*o).Mon = new(models.GroupsAddressTimetableDay)
	fillRandomlyGroupsAddressTimetableDay((*o).Mon)
	(*o).Sat = new(models.GroupsAddressTimetableDay)
	fillRandomlyGroupsAddressTimetableDay((*o).Sat)
	(*o).Sun = new(models.GroupsAddressTimetableDay)
	fillRandomlyGroupsAddressTimetableDay((*o).Sun)
	(*o).Thu = new(models.GroupsAddressTimetableDay)
	fillRandomlyGroupsAddressTimetableDay((*o).Thu)
	(*o).Tue = new(models.GroupsAddressTimetableDay)
	fillRandomlyGroupsAddressTimetableDay((*o).Tue)
	(*o).Wed = new(models.GroupsAddressTimetableDay)
	fillRandomlyGroupsAddressTimetableDay((*o).Wed)
}

func fillRandomlyGroupsAddressTimetableDay(o *models.GroupsAddressTimetableDay) {
	(*o).BreakCloseTime = new(int)
	*(*o).BreakCloseTime = randInt()
	(*o).BreakOpenTime = new(int)
	*(*o).BreakOpenTime = randInt()
	(*o).CloseTime = randInt()
	(*o).OpenTime = randInt()
}

func fillRandomlyGroupsAddressWorkInfoStatus(o *models.GroupsAddressWorkInfoStatus) {
	switch randIntn(5) {
	case 0:
		*o = "no_information"
	case 1:
		*o = "temporarily_closed"
	case 2:
		*o = "always_opened"
	case 3:
		*o = "timetable"
	case 4:
		*o = "forever_closed"
	}
}

func fillRandomlyGroupsAddressesInfo(o *models.GroupsAddressesInfo) {
	(*o).IsEnabled = randBool()
	(*o).MainAddressId = new(int)
	*(*o).MainAddressId = randInt()
}

func fillRandomlyGroupsBanInfo(o *models.GroupsBanInfo) {
	(*o).AdminId = new(int)
	*(*o).AdminId = randInt()
	(*o).Comment = new(string)
	*(*o).Comment = randString()
	(*o).CommentVisible = new(bool)
	*(*o).CommentVisible = randBool()
	(*o).Date = new(int)
	*(*o).Date = randInt()
	(*o).EndDate = new(int)
	*(*o).EndDate = randInt()
	(*o).IsClosed = new(bool)
	*(*o).IsClosed = randBool()
	(*o).Reason = new(models.GroupsBanInfoReason)
	fillRandomlyGroupsBanInfoReason((*o).Reason)
}

func fillRandomlyGroupsBanInfoReason(o *models.GroupsBanInfoReason) {
	switch randIntn(5) {
	case 0:
		*o = 0
	case 1:
		*o = 1
	case 2:
		*o = 2
	case 3:
		*o = 3
	case 4:
		*o = 4
	}
}

func fillRandomlyGroupsBannedItem(o *models.GroupsBannedItem) {
	r := models.GroupsOwnerXtrBanInfo(*o)
	fillRandomlyGroupsOwnerXtrBanInfo(&r)
	*o = models.GroupsBannedItem(r)
}

func fillRandomlyGroupsCallbackServerStatus(o *models.GroupsCallbackServerStatus) {
	switch randIntn(4) {
	case 0:
		*o = "unconfigured"
	case 1:
		*o = "failed"
	case 2:
		*o = "wait"
	case 3:
		*o = "ok"
	}
}

func fillRandomlyGroupsCallbackServer(o *models.GroupsCallbackServer) {
	(*o).CreatorId = randInt()
	(*o).Id = randInt()
	(*o).SecretKey = randString()
	fillRandomlyGroupsCallbackServerStatus(&(*o).Status)
	(*o).Title = randString()
	(*o).Url = randString()
}

func fillRandomlyGroupsCallbackSettings(o *models.GroupsCallbackSettings) {
	(*o).ApiVersion = new(string)
	*(*o).ApiVersion = randString()
	(*o).Events = new(models.GroupsLongPollEvents)
	fillRandomlyGroupsLongPollEvents((*o).Events)
}

func fillRandomlyGroupsContactsItem(o *models.GroupsContactsItem) {
	(*o).Desc = new(string)
	*(*o).Desc = randString()
	(*o).Email = new(string)
	*(*o).Email = randString()
	(*o).Phone = new(string)
	*(*o).Phone = randString()
	(*o).UserId = new(int)
	*(*o).UserId = randInt()
}

func fillRandomlyGroupsCountersGroup(o *models.GroupsCountersGroup) {
	(*o).Addresses = new(int)
	*(*o).Addresses = randInt()
	(*o).Albums = new(int)
	*(*o).Albums = randInt()
	(*o).Articles = new(int)
	*(*o).Articles = randInt()
	(*o).AudioPlaylists = new(int)
	*(*o).AudioPlaylists = randInt()
	(*o).Audios = new(int)
	*(*o).Audios = randInt()
	(*o).Clips = new(int)
	*(*o).Clips = randInt()
	(*o).ClipsFollowers = new(int)
	*(*o).ClipsFollowers = randInt()
	(*o).Docs = new(int)
	*(*o).Docs = randInt()
	(*o).Market = new(int)
	*(*o).Market = randInt()
	(*o).MarketServices = new(int)
	*(*o).MarketServices = randInt()
	(*o).Narratives = new(int)
	*(*o).Narratives = randInt()
	(*o).Photos = new(int)
	*(*o).Photos = randInt()
	(*o).Podcasts = new(int)
	*(*o).Podcasts = randInt()
	(*o).Topics = new(int)
	*(*o).Topics = randInt()
	(*o).Videos = new(int)
	*(*o).Videos = randInt()
}

func fillRandomlyGroupsCover(o *models.GroupsCover) {
	fillRandomlyBaseBoolInt(&(*o).Enabled)
	(*o).Images = new([]models.BaseImage)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).Images = make([]models.BaseImage, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyBaseImage(&(*(*o).Images)[i0])
	}
}

func fillRandomlyGroupsFields(o *models.GroupsFields) {
	switch randIntn(66) {
	case 0:
		*o = "market"
	case 1:
		*o = "member_status"
	case 2:
		*o = "is_favorite"
	case 3:
		*o = "is_subscribed"
	case 4:
		*o = "is_subscribed_podcasts"
	case 5:
		*o = "can_subscribe_podcasts"
	case 6:
		*o = "city"
	case 7:
		*o = "country"
	case 8:
		*o = "verified"
	case 9:
		*o = "description"
	case 10:
		*o = "wiki_page"
	case 11:
		*o = "members_count"
	case 12:
		*o = "requests_count"
	case 13:
		*o = "counters"
	case 14:
		*o = "cover"
	case 15:
		*o = "can_post"
	case 16:
		*o = "can_suggest"
	case 17:
		*o = "can_upload_story"
	case 18:
		*o = "can_upload_doc"
	case 19:
		*o = "can_upload_video"
	case 20:
		*o = "can_upload_clip"
	case 21:
		*o = "can_see_all_posts"
	case 22:
		*o = "can_create_topic"
	case 23:
		*o = "crop_photo"
	case 24:
		*o = "activity"
	case 25:
		*o = "fixed_post"
	case 26:
		*o = "has_photo"
	case 27:
		*o = "status"
	case 28:
		*o = "main_album_id"
	case 29:
		*o = "links"
	case 30:
		*o = "contacts"
	case 31:
		*o = "site"
	case 32:
		*o = "main_section"
	case 33:
		*o = "secondary_section"
	case 34:
		*o = "wall"
	case 35:
		*o = "trending"
	case 36:
		*o = "can_message"
	case 37:
		*o = "is_market_cart_enabled"
	case 38:
		*o = "is_messages_blocked"
	case 39:
		*o = "can_send_notify"
	case 40:
		*o = "has_group_channel"
	case 41:
		*o = "group_channel"
	case 42:
		*o = "online_status"
	case 43:
		*o = "start_date"
	case 44:
		*o = "finish_date"
	case 45:
		*o = "age_limits"
	case 46:
		*o = "ban_info"
	case 47:
		*o = "action_button"
	case 48:
		*o = "author_id"
	case 49:
		*o = "phone"
	case 50:
		*o = "has_market_app"
	case 51:
		*o = "addresses"
	case 52:
		*o = "live_covers"
	case 53:
		*o = "is_adult"
	case 54:
		*o = "is_hidden_from_feed"
	case 55:
		*o = "can_subscribe_posts"
	case 56:
		*o = "warning_notification"
	case 57:
		*o = "msg_push_allowed"
	case 58:
		*o = "stories_archive_count"
	case 59:
		*o = "video_live_level"
	case 60:
		*o = "video_live_count"
	case 61:
		*o = "clips_count"
	case 62:
		*o = "has_unseen_stories"
	case 63:
		*o = "is_business"
	case 64:
		*o = "textlives_count"
	case 65:
		*o = "members_count_text"
	}
}

func fillRandomlyGroupsFilter(o *models.GroupsFilter) {
	switch randIntn(8) {
	case 0:
		*o = "admin"
	case 1:
		*o = "editor"
	case 2:
		*o = "moder"
	case 3:
		*o = "advertiser"
	case 4:
		*o = "groups"
	case 5:
		*o = "publics"
	case 6:
		*o = "events"
	case 7:
		*o = "has_addresses"
	}
}

func fillRandomlyGroupsGroup(o *models.GroupsGroup) {
	(*o).AdminLevel = new(models.GroupsGroupAdminLevel)
	fillRandomlyGroupsGroupAdminLevel((*o).AdminLevel)
	(*o).Deactivated = new(string)
	*(*o).Deactivated = randString()
	(*o).EstDate = new(string)
	*(*o).EstDate = randString()
	(*o).FinishDate = new(int)
	*(*o).FinishDate = randInt()
	(*o).Id = randInt()
	(*o).IsAdmin = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).IsAdmin)
	(*o).IsAdvertiser = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).IsAdvertiser)
	(*o).IsClosed = new(models.GroupsGroupIsClosed)
	fillRandomlyGroupsGroupIsClosed((*o).IsClosed)
	(*o).IsMember = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).IsMember)
	(*o).IsVideoLiveNotificationsBlocked = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).IsVideoLiveNotificationsBlocked)
	(*o).Name = new(string)
	*(*o).Name = randString()
	(*o).Photo100 = new(string)
	*(*o).Photo100 = randString()
	(*o).Photo200 = new(string)
	*(*o).Photo200 = randString()
	(*o).Photo200Orig = new(string)
	*(*o).Photo200Orig = randString()
	(*o).Photo400 = new(string)
	*(*o).Photo400 = randString()
	(*o).Photo400Orig = new(string)
	*(*o).Photo400Orig = randString()
	(*o).Photo50 = new(string)
	*(*o).Photo50 = randString()
	(*o).PhotoMax = new(string)
	*(*o).PhotoMax = randString()
	(*o).PhotoMaxOrig = new(string)
	*(*o).PhotoMaxOrig = randString()
	(*o).PhotoMaxSize = new(models.GroupsPhotoSize)
	fillRandomlyGroupsPhotoSize((*o).PhotoMaxSize)
	(*o).PublicDateLabel = new(string)
	*(*o).PublicDateLabel = randString()
	(*o).ScreenName = new(string)
	*(*o).ScreenName = randString()
	(*o).StartDate = new(int)
	*(*o).StartDate = randInt()
	(*o).Type = new(models.GroupsGroupType)
	fillRandomlyGroupsGroupType((*o).Type)
	(*o).VideoLive = new(models.VideoLiveInfo)
	fillRandomlyVideoLiveInfo((*o).VideoLive)
}

func fillRandomlyGroupsGroupAccess(o *models.GroupsGroupAccess) {
	switch randIntn(3) {
	case 0:
		*o = 0
	case 1:
		*o = 1
	case 2:
		*o = 2
	}
}

func fillRandomlyGroupsGroupAdminLevel(o *models.GroupsGroupAdminLevel) {
	switch randIntn(3) {
	case 0:
		*o = 1
	case 1:
		*o = 2
	case 2:
		*o = 3
	}
}

func fillRandomlyGroupsGroupAgeLimits(o *models.GroupsGroupAgeLimits) {
	switch randIntn(3) {
	case 0:
		*o = 1
	case 1:
		*o = 2
	case 2:
		*o = 3
	}
}

func fillRandomlyGroupsGroupAttach(o *models.GroupsGroupAttach) {
	(*o).Id = randInt()
	(*o).IsFavorite = randBool()
	(*o).Size = randInt()
	(*o).Status = randString()
	(*o).Text = randString()
}

func fillRandomlyGroupsGroupAudio(o *models.GroupsGroupAudio) {
	switch randIntn(3) {
	case 0:
		*o = 0
	case 1:
		*o = 1
	case 2:
		*o = 2
	}
}

func fillRandomlyGroupsGroupBanInfo(o *models.GroupsGroupBanInfo) {
	(*o).Comment = new(string)
	*(*o).Comment = randString()
	(*o).EndDate = new(int)
	*(*o).EndDate = randInt()
	(*o).Reason = new(models.GroupsBanInfoReason)
	fillRandomlyGroupsBanInfoReason((*o).Reason)
}

func fillRandomlyGroupsGroupCategory(o *models.GroupsGroupCategory) {
	(*o).Id = randInt()
	(*o).Name = randString()
	(*o).Subcategories = new([]models.BaseObjectWithName)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).Subcategories = make([]models.BaseObjectWithName, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyBaseObjectWithName(&(*(*o).Subcategories)[i0])
	}
}

func fillRandomlyGroupsGroupCategoryFull(o *models.GroupsGroupCategoryFull) {
	(*o).Id = randInt()
	(*o).Name = randString()
	(*o).PageCount = randInt()
	l0 := randIntn(maxArrayLength + 1)
	(*o).PagePreviews = make([]models.GroupsGroup, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyGroupsGroup(&((*o).PagePreviews)[i0])
	}
	(*o).Subcategories = new([]models.GroupsGroupCategory)
	l0 = randIntn(maxArrayLength + 1)
	*(*o).Subcategories = make([]models.GroupsGroupCategory, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyGroupsGroupCategory(&(*(*o).Subcategories)[i0])
	}
}

func fillRandomlyGroupsGroupCategoryType(o *models.GroupsGroupCategoryType) {
	(*o).Id = randInt()
	(*o).Name = randString()
}

func fillRandomlyGroupsGroupDocs(o *models.GroupsGroupDocs) {
	switch randIntn(3) {
	case 0:
		*o = 0
	case 1:
		*o = 1
	case 2:
		*o = 2
	}
}

func fillRandomlyGroupsGroupFullWall(o *models.GroupsGroupFullWall) {
	switch randIntn(4) {
	case 0:
		*o = 0
	case 1:
		*o = 1
	case 2:
		*o = 2
	case 3:
		*o = 3
	}
}

func fillRandomlyGroupsGroupFull(o *models.GroupsGroupFull) {
	fillRandomlyGroupsGroup(&(*o).GroupsGroup)
	(*o).Activity = new(string)
	*(*o).Activity = randString()
	(*o).Addresses = new(models.GroupsAddressesInfo)
	fillRandomlyGroupsAddressesInfo((*o).Addresses)
	(*o).AgeLimits = new(models.GroupsGroupFullAgeLimits)
	fillRandomlyGroupsGroupFullAgeLimits((*o).AgeLimits)
	(*o).BanInfo = new(models.GroupsGroupBanInfo)
	fillRandomlyGroupsGroupBanInfo((*o).BanInfo)
	(*o).CanCreateTopic = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).CanCreateTopic)
	(*o).CanMessage = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).CanMessage)
	(*o).CanPost = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).CanPost)
	(*o).CanSeeAllPosts = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).CanSeeAllPosts)
	(*o).CanSendNotify = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).CanSendNotify)
	(*o).CanSubscribePodcasts = new(bool)
	*(*o).CanSubscribePodcasts = randBool()
	(*o).CanSubscribePosts = new(bool)
	*(*o).CanSubscribePosts = randBool()
	(*o).CanSuggest = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).CanSuggest)
	(*o).CanUploadDoc = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).CanUploadDoc)
	(*o).CanUploadStory = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).CanUploadStory)
	(*o).CanUploadVideo = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).CanUploadVideo)
	(*o).City = new(models.BaseObject)
	fillRandomlyBaseObject((*o).City)
	(*o).ClipsCount = new(int)
	*(*o).ClipsCount = randInt()
	(*o).Contacts = new([]models.GroupsContactsItem)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).Contacts = make([]models.GroupsContactsItem, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyGroupsContactsItem(&(*(*o).Contacts)[i0])
	}
	(*o).Counters = new(models.GroupsCountersGroup)
	fillRandomlyGroupsCountersGroup((*o).Counters)
	(*o).Country = new(models.BaseCountry)
	fillRandomlyBaseCountry((*o).Country)
	(*o).Cover = new(models.GroupsCover)
	fillRandomlyGroupsCover((*o).Cover)
	(*o).CropPhoto = new(models.BaseCropPhoto)
	fillRandomlyBaseCropPhoto((*o).CropPhoto)
	(*o).Description = new(string)
	*(*o).Description = randString()
	(*o).FixedPost = new(int)
	*(*o).FixedPost = randInt()
	(*o).HasGroupChannel = new(bool)
	*(*o).HasGroupChannel = randBool()
	(*o).HasMarketApp = new(bool)
	*(*o).HasMarketApp = randBool()
	(*o).HasPhoto = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).HasPhoto)
	(*o).HasUnseenStories = new(bool)
	*(*o).HasUnseenStories = randBool()
	(*o).InvitedBy = new(int)
	*(*o).InvitedBy = randInt()
	(*o).IsAdult = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).IsAdult)
	(*o).IsFavorite = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).IsFavorite)
	(*o).IsHiddenFromFeed = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).IsHiddenFromFeed)
	(*o).IsMessagesBlocked = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).IsMessagesBlocked)
	(*o).IsSubscribed = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).IsSubscribed)
	(*o).IsSubscribedPodcasts = new(bool)
	*(*o).IsSubscribedPodcasts = randBool()
	(*o).Links = new([]models.GroupsLinksItem)
	l0 = randIntn(maxArrayLength + 1)
	*(*o).Links = make([]models.GroupsLinksItem, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyGroupsLinksItem(&(*(*o).Links)[i0])
	}
	(*o).LiveCovers = new(models.GroupsLiveCovers)
	fillRandomlyGroupsLiveCovers((*o).LiveCovers)
	(*o).MainAlbumId = new(int)
	*(*o).MainAlbumId = randInt()
	(*o).MainSection = new(models.GroupsGroupFullSection)
	fillRandomlyGroupsGroupFullSection((*o).MainSection)
	(*o).Market = new(models.GroupsMarketInfo)
	fillRandomlyGroupsMarketInfo((*o).Market)
	(*o).MemberStatus = new(models.GroupsGroupFullMemberStatus)
	fillRandomlyGroupsGroupFullMemberStatus((*o).MemberStatus)
	(*o).MembersCount = new(int)
	*(*o).MembersCount = randInt()
	(*o).MembersCountText = new(string)
	*(*o).MembersCountText = randString()
	(*o).OnlineStatus = new(models.GroupsOnlineStatus)
	fillRandomlyGroupsOnlineStatus((*o).OnlineStatus)
	(*o).RequestsCount = new(int)
	*(*o).RequestsCount = randInt()
	(*o).SecondarySection = new(models.GroupsGroupFullSection)
	fillRandomlyGroupsGroupFullSection((*o).SecondarySection)
	(*o).Site = new(string)
	*(*o).Site = randString()
	(*o).Status = new(string)
	*(*o).Status = randString()
	(*o).StatusAudio = new(models.AudioAudio)
	fillRandomlyAudioAudio((*o).StatusAudio)
	(*o).StoriesArchiveCount = new(int)
	*(*o).StoriesArchiveCount = randInt()
	(*o).Trending = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).Trending)
	(*o).UsingVkpayMarketApp = new(bool)
	*(*o).UsingVkpayMarketApp = randBool()
	(*o).Verified = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).Verified)
	(*o).VideoLiveCount = new(int)
	*(*o).VideoLiveCount = randInt()
	(*o).VideoLiveLevel = new(int)
	*(*o).VideoLiveLevel = randInt()
	(*o).Wall = new(models.GroupsGroupFullWall)
	fillRandomlyGroupsGroupFullWall((*o).Wall)
	(*o).WikiPage = new(string)
	*(*o).WikiPage = randString()
}

func fillRandomlyGroupsGroupFullAgeLimits(o *models.GroupsGroupFullAgeLimits) {
	switch randIntn(3) {
	case 0:
		*o = 1
	case 1:
		*o = 2
	case 2:
		*o = 3
	}
}

func fillRandomlyGroupsGroupFullMemberStatus(o *models.GroupsGroupFullMemberStatus) {
	switch randIntn(6) {
	case 0:
		*o = 0
	case 1:
		*o = 1
	case 2:
		*o = 2
	case 3:
		*o = 3
	case 4:
		*o = 4
	case 5:
		*o = 5
	}
}

func fillRandomlyGroupsGroupFullSection(o *models.GroupsGroupFullSection) {
	switch randIntn(45) {
	case 0:
		*o = 0
	case 1:
		*o = 1
	case 2:
		*o = 2
	case 3:
		*o = 3
	case 4:
		*o = 4
	case 5:
		*o = 5
	case 6:
		*o = 6
	case 7:
		*o = 7
	case 8:
		*o = 8
	case 9:
		*o = 9
	case 10:
		*o = 10
	case 11:
		*o = 11
	case 12:
		*o = 12
	case 13:
		*o = 13
	case 14:
		*o = 14
	case 15:
		*o = 15
	case 16:
		*o = 16
	case 17:
		*o = 24
	case 18:
		*o = 26
	case 19:
		*o = 27
	case 20:
		*o = 31
	case 21:
		*o = 32
	case 22:
		*o = 33
	case 23:
		*o = 34
	case 24:
		*o = 35
	case 25:
		*o = 36
	case 26:
		*o = 37
	case 27:
		*o = 39
	case 28:
		*o = 40
	case 29:
		*o = 41
	case 30:
		*o = 42
	case 31:
		*o = 43
	case 32:
		*o = 44
	case 33:
		*o = 45
	case 34:
		*o = 46
	case 35:
		*o = 47
	case 36:
		*o = 48
	case 37:
		*o = 49
	case 38:
		*o = 50
	case 39:
		*o = 51
	case 40:
		*o = 53
	case 41:
		*o = 54
	case 42:
		*o = 55
	case 43:
		*o = 57
	case 44:
		*o = 58
	}
}

func fillRandomlyGroupsGroupIsClosed(o *models.GroupsGroupIsClosed) {
	switch randIntn(3) {
	case 0:
		*o = 0
	case 1:
		*o = 1
	case 2:
		*o = 2
	}
}

func fillRandomlyGroupsGroupMarketCurrency(o *models.GroupsGroupMarketCurrency) {
	switch randIntn(5) {
	case 0:
		*o = 643
	case 1:
		*o = 980
	case 2:
		*o = 398
	case 3:
		*o = 978
	case 4:
		*o = 840
	}
}

func fillRandomlyGroupsGroupPhotos(o *models.GroupsGroupPhotos) {
	switch randIntn(3) {
	case 0:
		*o = 0
	case 1:
		*o = 1
	case 2:
		*o = 2
	}
}

func fillRandomlyGroupsGroupPublicCategoryList(o *models.GroupsGroupPublicCategoryList) {
	(*o).Id = new(int)
	*(*o).Id = randInt()
	(*o).Name = new(string)
	*(*o).Name = randString()
	(*o).Subcategories = new([]models.GroupsGroupCategoryType)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).Subcategories = make([]models.GroupsGroupCategoryType, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyGroupsGroupCategoryType(&(*(*o).Subcategories)[i0])
	}
}

func fillRandomlyGroupsGroupRole(o *models.GroupsGroupRole) {
	switch randIntn(4) {
	case 0:
		*o = "moderator"
	case 1:
		*o = "editor"
	case 2:
		*o = "administrator"
	case 3:
		*o = "advertiser"
	}
}

func fillRandomlyGroupsGroupSubject(o *models.GroupsGroupSubject) {
	switch randIntn(42) {
	case 0:
		*o = 1
	case 1:
		*o = 2
	case 2:
		*o = 3
	case 3:
		*o = 4
	case 4:
		*o = 5
	case 5:
		*o = 6
	case 6:
		*o = 7
	case 7:
		*o = 8
	case 8:
		*o = 9
	case 9:
		*o = 10
	case 10:
		*o = 11
	case 11:
		*o = 12
	case 12:
		*o = 13
	case 13:
		*o = 14
	case 14:
		*o = 15
	case 15:
		*o = 16
	case 16:
		*o = 17
	case 17:
		*o = 18
	case 18:
		*o = 19
	case 19:
		*o = 20
	case 20:
		*o = 21
	case 21:
		*o = 22
	case 22:
		*o = 23
	case 23:
		*o = 24
	case 24:
		*o = 25
	case 25:
		*o = 26
	case 26:
		*o = 27
	case 27:
		*o = 28
	case 28:
		*o = 29
	case 29:
		*o = 30
	case 30:
		*o = 31
	case 31:
		*o = 32
	case 32:
		*o = 33
	case 33:
		*o = 34
	case 34:
		*o = 35
	case 35:
		*o = 36
	case 36:
		*o = 37
	case 37:
		*o = 38
	case 38:
		*o = 39
	case 39:
		*o = 40
	case 40:
		*o = 41
	case 41:
		*o = 42
	}
}

func fillRandomlyGroupsGroupSuggestedPrivacy(o *models.GroupsGroupSuggestedPrivacy) {
	switch randIntn(3) {
	case 0:
		*o = 0
	case 1:
		*o = 1
	case 2:
		*o = 2
	}
}

func fillRandomlyGroupsGroupTagColor(o *models.GroupsGroupTagColor) {
	switch randIntn(20) {
	case 0:
		*o = "454647"
	case 1:
		*o = "45678f"
	case 2:
		*o = "4bb34b"
	case 3:
		*o = "5181b8"
	case 4:
		*o = "539b9c"
	case 5:
		*o = "5c9ce6"
	case 6:
		*o = "63b9ba"
	case 7:
		*o = "6bc76b"
	case 8:
		*o = "76787a"
	case 9:
		*o = "792ec0"
	case 10:
		*o = "7a6c4f"
	case 11:
		*o = "7ececf"
	case 12:
		*o = "9e8d6b"
	case 13:
		*o = "a162de"
	case 14:
		*o = "aaaeb3"
	case 15:
		*o = "bbaa84"
	case 16:
		*o = "e64646"
	case 17:
		*o = "ff5c5c"
	case 18:
		*o = "ffa000"
	case 19:
		*o = "ffc107"
	}
}

func fillRandomlyGroupsGroupTag(o *models.GroupsGroupTag) {
	fillRandomlyGroupsGroupTagColor(&(*o).Color)
	(*o).Id = randInt()
	(*o).Name = randString()
	(*o).Uses = new(int)
	*(*o).Uses = randInt()
}

func fillRandomlyGroupsGroupTopics(o *models.GroupsGroupTopics) {
	switch randIntn(3) {
	case 0:
		*o = 0
	case 1:
		*o = 1
	case 2:
		*o = 2
	}
}

func fillRandomlyGroupsGroupType(o *models.GroupsGroupType) {
	switch randIntn(3) {
	case 0:
		*o = "group"
	case 1:
		*o = "page"
	case 2:
		*o = "event"
	}
}

func fillRandomlyGroupsGroupVideo(o *models.GroupsGroupVideo) {
	switch randIntn(3) {
	case 0:
		*o = 0
	case 1:
		*o = 1
	case 2:
		*o = 2
	}
}

func fillRandomlyGroupsGroupWall(o *models.GroupsGroupWall) {
	switch randIntn(4) {
	case 0:
		*o = 0
	case 1:
		*o = 1
	case 2:
		*o = 2
	case 3:
		*o = 3
	}
}

func fillRandomlyGroupsGroupWiki(o *models.GroupsGroupWiki) {
	switch randIntn(3) {
	case 0:
		*o = 0
	case 1:
		*o = 1
	case 2:
		*o = 2
	}
}

func fillRandomlyGroupsGroupsArray(o *models.GroupsGroupsArray) {
	(*o).Count = randInt()
	l0 := randIntn(maxArrayLength + 1)
	(*o).Items = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		((*o).Items)[i0] = randInt()
	}
}

func fillRandomlyGroupsLinksItem(o *models.GroupsLinksItem) {
	(*o).Desc = new(string)
	*(*o).Desc = randString()
	(*o).EditTitle = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).EditTitle)
	(*o).Id = new(int)
	*(*o).Id = randInt()
	(*o).ImageProcessing = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).ImageProcessing)
	(*o).Name = new(string)
	*(*o).Name = randString()
	(*o).Photo100 = new(string)
	*(*o).Photo100 = randString()
	(*o).Photo50 = new(string)
	*(*o).Photo50 = randString()
	(*o).Url = new(string)
	*(*o).Url = randString()
}

func fillRandomlyGroupsLiveCovers(o *models.GroupsLiveCovers) {
	(*o).IsEnabled = randBool()
	(*o).IsScalable = new(bool)
	*(*o).IsScalable = randBool()
	(*o).StoryIds = new([]string)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).StoryIds = make([]string, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*o).StoryIds)[i0] = randString()
	}
}

func fillRandomlyGroupsLongPollEvents(o *models.GroupsLongPollEvents) {
	fillRandomlyBaseBoolInt(&(*o).AudioNew)
	fillRandomlyBaseBoolInt(&(*o).BoardPostDelete)
	fillRandomlyBaseBoolInt(&(*o).BoardPostEdit)
	fillRandomlyBaseBoolInt(&(*o).BoardPostNew)
	fillRandomlyBaseBoolInt(&(*o).BoardPostRestore)
	fillRandomlyBaseBoolInt(&(*o).DonutMoneyWithdraw)
	fillRandomlyBaseBoolInt(&(*o).DonutMoneyWithdrawError)
	fillRandomlyBaseBoolInt(&(*o).DonutSubscriptionCancelled)
	fillRandomlyBaseBoolInt(&(*o).DonutSubscriptionCreate)
	fillRandomlyBaseBoolInt(&(*o).DonutSubscriptionExpired)
	fillRandomlyBaseBoolInt(&(*o).DonutSubscriptionPriceChanged)
	fillRandomlyBaseBoolInt(&(*o).DonutSubscriptionProlonged)
	fillRandomlyBaseBoolInt(&(*o).GroupChangePhoto)
	fillRandomlyBaseBoolInt(&(*o).GroupChangeSettings)
	fillRandomlyBaseBoolInt(&(*o).GroupJoin)
	fillRandomlyBaseBoolInt(&(*o).GroupLeave)
	fillRandomlyBaseBoolInt(&(*o).GroupOfficersEdit)
	(*o).LeadFormsNew = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).LeadFormsNew)
	fillRandomlyBaseBoolInt(&(*o).MarketCommentDelete)
	fillRandomlyBaseBoolInt(&(*o).MarketCommentEdit)
	fillRandomlyBaseBoolInt(&(*o).MarketCommentNew)
	fillRandomlyBaseBoolInt(&(*o).MarketCommentRestore)
	(*o).MarketOrderEdit = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).MarketOrderEdit)
	(*o).MarketOrderNew = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).MarketOrderNew)
	fillRandomlyBaseBoolInt(&(*o).MessageAllow)
	fillRandomlyBaseBoolInt(&(*o).MessageDeny)
	fillRandomlyBaseBoolInt(&(*o).MessageEdit)
	fillRandomlyBaseBoolInt(&(*o).MessageNew)
	fillRandomlyBaseBoolInt(&(*o).MessageRead)
	fillRandomlyBaseBoolInt(&(*o).MessageReply)
	fillRandomlyBaseBoolInt(&(*o).MessageTypingState)
	fillRandomlyBaseBoolInt(&(*o).PhotoCommentDelete)
	fillRandomlyBaseBoolInt(&(*o).PhotoCommentEdit)
	fillRandomlyBaseBoolInt(&(*o).PhotoCommentNew)
	fillRandomlyBaseBoolInt(&(*o).PhotoCommentRestore)
	fillRandomlyBaseBoolInt(&(*o).PhotoNew)
	fillRandomlyBaseBoolInt(&(*o).PollVoteNew)
	fillRandomlyBaseBoolInt(&(*o).UserBlock)
	fillRandomlyBaseBoolInt(&(*o).UserUnblock)
	fillRandomlyBaseBoolInt(&(*o).VideoCommentDelete)
	fillRandomlyBaseBoolInt(&(*o).VideoCommentEdit)
	fillRandomlyBaseBoolInt(&(*o).VideoCommentNew)
	fillRandomlyBaseBoolInt(&(*o).VideoCommentRestore)
	fillRandomlyBaseBoolInt(&(*o).VideoNew)
	fillRandomlyBaseBoolInt(&(*o).WallPostNew)
	fillRandomlyBaseBoolInt(&(*o).WallReplyDelete)
	fillRandomlyBaseBoolInt(&(*o).WallReplyEdit)
	fillRandomlyBaseBoolInt(&(*o).WallReplyNew)
	fillRandomlyBaseBoolInt(&(*o).WallReplyRestore)
	fillRandomlyBaseBoolInt(&(*o).WallRepost)
}

func fillRandomlyGroupsLongPollServer(o *models.GroupsLongPollServer) {
	(*o).Key = randString()
	(*o).Server = randString()
	(*o).Ts = randString()
}

func fillRandomlyGroupsLongPollSettings(o *models.GroupsLongPollSettings) {
	(*o).ApiVersion = new(string)
	*(*o).ApiVersion = randString()
	fillRandomlyGroupsLongPollEvents(&(*o).Events)
	(*o).IsEnabled = randBool()
}

func fillRandomlyGroupsMarketInfo(o *models.GroupsMarketInfo) {
	(*o).ContactId = new(int)
	*(*o).ContactId = randInt()
	(*o).Currency = new(models.MarketCurrency)
	fillRandomlyMarketCurrency((*o).Currency)
	(*o).CurrencyText = new(string)
	*(*o).CurrencyText = randString()
	(*o).Enabled = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).Enabled)
	(*o).MainAlbumId = new(int)
	*(*o).MainAlbumId = randInt()
	(*o).MinOrderPrice = new(models.MarketPrice)
	fillRandomlyMarketPrice((*o).MinOrderPrice)
	(*o).PriceMax = new(string)
	*(*o).PriceMax = randString()
	(*o).PriceMin = new(string)
	*(*o).PriceMin = randString()
	(*o).Type = new(string)
	*(*o).Type = randString()
}

func fillRandomlyGroupsMarketState(o *models.GroupsMarketState) {
	switch randIntn(3) {
	case 0:
		*o = "none"
	case 1:
		*o = "basic"
	case 2:
		*o = "advanced"
	}
}

func fillRandomlyGroupsMemberRole(o *models.GroupsMemberRole) {
	(*o).Id = randInt()
	(*o).Permissions = new([]models.GroupsMemberRolePermission)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).Permissions = make([]models.GroupsMemberRolePermission, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyGroupsMemberRolePermission(&(*(*o).Permissions)[i0])
	}
	(*o).Role = new(models.GroupsMemberRoleStatus)
	fillRandomlyGroupsMemberRoleStatus((*o).Role)
}

func fillRandomlyGroupsMemberRolePermission(o *models.GroupsMemberRolePermission) {
	switch randIntn(1) {
	case 0:
		*o = "ads"
	}
}

func fillRandomlyGroupsMemberRoleStatus(o *models.GroupsMemberRoleStatus) {
	switch randIntn(5) {
	case 0:
		*o = "moderator"
	case 1:
		*o = "editor"
	case 2:
		*o = "administrator"
	case 3:
		*o = "creator"
	case 4:
		*o = "advertiser"
	}
}

func fillRandomlyGroupsMemberStatus(o *models.GroupsMemberStatus) {
	fillRandomlyBaseBoolInt(&(*o).Member)
	(*o).UserId = randInt()
}

func fillRandomlyGroupsMemberStatusFull(o *models.GroupsMemberStatusFull) {
	(*o).CanInvite = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).CanInvite)
	(*o).CanRecall = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).CanRecall)
	(*o).Invitation = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).Invitation)
	fillRandomlyBaseBoolInt(&(*o).Member)
	(*o).Request = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).Request)
	(*o).UserId = randInt()
}

func fillRandomlyGroupsOnlineStatus(o *models.GroupsOnlineStatus) {
	(*o).Minutes = new(int)
	*(*o).Minutes = randInt()
	fillRandomlyGroupsOnlineStatusType(&(*o).Status)
}

func fillRandomlyGroupsOnlineStatusType(o *models.GroupsOnlineStatusType) {
	switch randIntn(3) {
	case 0:
		*o = "none"
	case 1:
		*o = "online"
	case 2:
		*o = "answer_mark"
	}
}

func fillRandomlyGroupsOwnerXtrBanInfo(o *models.GroupsOwnerXtrBanInfo) {
	(*o).BanInfo = new(models.GroupsBanInfo)
	fillRandomlyGroupsBanInfo((*o).BanInfo)
	(*o).Group = new(models.GroupsGroup)
	fillRandomlyGroupsGroup((*o).Group)
	(*o).Profile = new(models.UsersUser)
	fillRandomlyUsersUser((*o).Profile)
	(*o).Type = new(models.GroupsOwnerXtrBanInfoType)
	fillRandomlyGroupsOwnerXtrBanInfoType((*o).Type)
}

func fillRandomlyGroupsOwnerXtrBanInfoType(o *models.GroupsOwnerXtrBanInfoType) {
	switch randIntn(2) {
	case 0:
		*o = "group"
	case 1:
		*o = "profile"
	}
}

func fillRandomlyGroupsPhotoSize(o *models.GroupsPhotoSize) {
	(*o).Height = randInt()
	(*o).Width = randInt()
}

func fillRandomlyGroupsRoleOptions(o *models.GroupsRoleOptions) {
	switch randIntn(4) {
	case 0:
		*o = "moderator"
	case 1:
		*o = "editor"
	case 2:
		*o = "administrator"
	case 3:
		*o = "creator"
	}
}

func fillRandomlyGroupsSectionsListItem(o *models.GroupsSectionsListItem) {
	l0 := randIntn(maxArrayLength + 1)
	*o = make([]string, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*o)[i0] = randString()
	}
}

func fillRandomlyGroupsSettingsTwitterStatus(o *models.GroupsSettingsTwitterStatus) {
	switch randIntn(2) {
	case 0:
		*o = "loading"
	case 1:
		*o = "sync"
	}
}

func fillRandomlyGroupsSettingsTwitter(o *models.GroupsSettingsTwitter) {
	(*o).Name = new(string)
	*(*o).Name = randString()
	fillRandomlyGroupsSettingsTwitterStatus(&(*o).Status)
}

func fillRandomlyGroupsSubjectItem(o *models.GroupsSubjectItem) {
	(*o).Id = randInt()
	(*o).Name = randString()
}

func fillRandomlyGroupsTokenPermissionSetting(o *models.GroupsTokenPermissionSetting) {
	(*o).Name = randString()
	(*o).Setting = randInt()
}

func fillRandomlyGroupsUserXtrRole(o *models.GroupsUserXtrRole) {
	fillRandomlyUsersUserFull(&(*o).UsersUserFull)
	(*o).Role = new(models.GroupsRoleOptions)
	fillRandomlyGroupsRoleOptions((*o).Role)
}

func fillRandomlyLeadFormsAnswerAnswer(o *models.LeadFormsAnswerAnswer) {
	var rawJSON []byte
	switch randIntn(2) {
	case 0:
		r := new(models.LeadFormsAnswerItem)
		fillRandomlyLeadFormsAnswerItem(r)
		rawJSON, _ = json.Marshal(*r)
	case 1:
		l0 := randIntn(maxArrayLength + 1)
		r := make([]models.LeadFormsAnswerItem, l0)
		for i0 := 0; i0 < l0; i0++ {
			fillRandomlyLeadFormsAnswerItem(&(r[i0]))
		}
		rawJSON, _ = json.Marshal(r)
	}
	o.Raws = rawJSON
}

func fillRandomlyLeadFormsAnswer(o *models.LeadFormsAnswer) {
	fillRandomlyLeadFormsAnswerAnswer(&(*o).Answer)
	(*o).Key = randString()
}

func fillRandomlyLeadFormsAnswerItem(o *models.LeadFormsAnswerItem) {
	(*o).Key = new(string)
	*(*o).Key = randString()
	(*o).Value = randString()
}

func fillRandomlyLeadFormsForm(o *models.LeadFormsForm) {
	(*o).Active = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).Active)
	(*o).Confirmation = new(string)
	*(*o).Confirmation = randString()
	(*o).Description = new(string)
	*(*o).Description = randString()
	(*o).FormId = randInt()
	(*o).GroupId = randInt()
	(*o).LeadsCount = randInt()
	(*o).Name = new(string)
	*(*o).Name = randString()
	(*o).NotifyAdmins = new(string)
	*(*o).NotifyAdmins = randString()
	(*o).NotifyEmails = new(string)
	*(*o).NotifyEmails = randString()
	(*o).OncePerUser = new(int)
	*(*o).OncePerUser = randInt()
	(*o).Photo = new(string)
	*(*o).Photo = randString()
	(*o).PixelCode = new(string)
	*(*o).PixelCode = randString()
	(*o).PolicyLinkUrl = new(string)
	*(*o).PolicyLinkUrl = randString()
	(*o).Questions = new([]models.LeadFormsQuestionItem)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).Questions = make([]models.LeadFormsQuestionItem, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyLeadFormsQuestionItem(&(*(*o).Questions)[i0])
	}
	(*o).SiteLinkUrl = new(string)
	*(*o).SiteLinkUrl = randString()
	(*o).Title = new(string)
	*(*o).Title = randString()
	(*o).Url = randString()
}

func fillRandomlyLeadFormsLead(o *models.LeadFormsLead) {
	(*o).AdId = new(int)
	*(*o).AdId = randInt()
	l0 := randIntn(maxArrayLength + 1)
	(*o).Answers = make([]models.LeadFormsAnswer, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyLeadFormsAnswer(&((*o).Answers)[i0])
	}
	(*o).Date = randInt()
	(*o).LeadId = randInt()
	(*o).UserId = randInt()
}

func fillRandomlyLeadFormsQuestionItemType(o *models.LeadFormsQuestionItemType) {
	switch randIntn(5) {
	case 0:
		*o = "input"
	case 1:
		*o = "textarea"
	case 2:
		*o = "radio"
	case 3:
		*o = "checkbox"
	case 4:
		*o = "select"
	}
}

func fillRandomlyLeadFormsQuestionItem(o *models.LeadFormsQuestionItem) {
	(*o).Key = randString()
	(*o).Label = new(string)
	*(*o).Label = randString()
	(*o).Options = new([]models.LeadFormsQuestionItemOption)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).Options = make([]models.LeadFormsQuestionItemOption, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyLeadFormsQuestionItemOption(&(*(*o).Options)[i0])
	}
	fillRandomlyLeadFormsQuestionItemType(&(*o).Type)
}

func fillRandomlyLeadFormsQuestionItemOption(o *models.LeadFormsQuestionItemOption) {
	(*o).Key = new(string)
	*(*o).Key = randString()
	(*o).Label = randString()
}

func fillRandomlyLikesType(o *models.LikesType) {
	switch randIntn(13) {
	case 0:
		*o = "post"
	case 1:
		*o = "comment"
	case 2:
		*o = "photo"
	case 3:
		*o = "audio"
	case 4:
		*o = "video"
	case 5:
		*o = "note"
	case 6:
		*o = "market"
	case 7:
		*o = "photo_comment"
	case 8:
		*o = "video_comment"
	case 9:
		*o = "topic_comment"
	case 10:
		*o = "market_comment"
	case 11:
		*o = "sitepage"
	case 12:
		*o = "textpost"
	}
}

func fillRandomlyLinkTargetObject(o *models.LinkTargetObject) {
	(*o).ItemId = new(int)
	*(*o).ItemId = randInt()
	(*o).OwnerId = new(int)
	*(*o).OwnerId = randInt()
	(*o).Type = new(string)
	*(*o).Type = randString()
}

func fillRandomlyMarketCurrency(o *models.MarketCurrency) {
	(*o).Id = randInt()
	(*o).Name = randString()
	(*o).Title = randString()
}

func fillRandomlyMarketMarketAlbum(o *models.MarketMarketAlbum) {
	(*o).Count = randInt()
	(*o).Id = randInt()
	(*o).IsHidden = new(bool)
	*(*o).IsHidden = randBool()
	(*o).IsMain = new(bool)
	*(*o).IsMain = randBool()
	(*o).OwnerId = randInt()
	(*o).Photo = new(models.PhotosPhoto)
	fillRandomlyPhotosPhoto((*o).Photo)
	(*o).Title = randString()
	(*o).UpdatedTime = randInt()
}

func fillRandomlyMarketMarketCategory(o *models.MarketMarketCategory) {
	r := models.MarketMarketCategoryOld(*o)
	fillRandomlyMarketMarketCategoryOld(&r)
	*o = models.MarketMarketCategory(r)
}

func fillRandomlyMarketMarketCategoryNested(o *models.MarketMarketCategoryNested) {
	(*o).Id = randInt()
	(*o).Name = randString()
	(*o).Parent = new(models.MarketMarketCategoryNested)
	//fillRandomlyMarketMarketCategoryNested((*o).Parent)
}

func fillRandomlyMarketMarketCategoryOld(o *models.MarketMarketCategoryOld) {
	(*o).Id = randInt()
	(*o).Name = randString()
	fillRandomlyMarketSection(&(*o).Section)
}

func fillRandomlyMarketMarketCategoryTree(o *models.MarketMarketCategoryTree) {
	(*o).Children = new([]models.MarketMarketCategoryTree)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).Children = make([]models.MarketMarketCategoryTree, l0)
	for i0 := 0; i0 < l0; i0++ {
		//fillRandomlyMarketMarketCategoryTree(&(*(*o).Children)[i0])
	}
	(*o).Id = randInt()
	(*o).Name = randString()
}

func fillRandomlyMarketMarketItem(o *models.MarketMarketItem) {
	(*o).AccessKey = new(string)
	*(*o).AccessKey = randString()
	fillRandomlyMarketMarketItemAvailability(&(*o).Availability)
	(*o).ButtonTitle = new(string)
	*(*o).ButtonTitle = randString()
	fillRandomlyMarketMarketCategory(&(*o).Category)
	(*o).Date = new(int)
	*(*o).Date = randInt()
	(*o).Description = randString()
	(*o).ExternalId = new(string)
	*(*o).ExternalId = randString()
	(*o).Id = randInt()
	(*o).IsFavorite = new(bool)
	*(*o).IsFavorite = randBool()
	(*o).IsMainVariant = new(bool)
	*(*o).IsMainVariant = randBool()
	(*o).OwnerId = randInt()
	fillRandomlyMarketPrice(&(*o).Price)
	(*o).Sku = new(string)
	*(*o).Sku = randString()
	(*o).ThumbPhoto = new(string)
	*(*o).ThumbPhoto = randString()
	(*o).Title = randString()
	(*o).Url = new(string)
	*(*o).Url = randString()
	(*o).VariantsGroupingId = new(int)
	*(*o).VariantsGroupingId = randInt()
}

func fillRandomlyMarketMarketItemAvailability(o *models.MarketMarketItemAvailability) {
	switch randIntn(3) {
	case 0:
		*o = 0
	case 1:
		*o = 1
	case 2:
		*o = 2
	}
}

func fillRandomlyMarketMarketItemFull(o *models.MarketMarketItemFull) {
	fillRandomlyMarketMarketItem(&(*o).MarketMarketItem)
	(*o).AdId = new(int)
	*(*o).AdId = randInt()
	(*o).AlbumsIds = new([]int)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).AlbumsIds = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*o).AlbumsIds)[i0] = randInt()
	}
	(*o).CanComment = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).CanComment)
	(*o).CanRepost = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).CanRepost)
	(*o).CancelInfo = new(models.BaseLink)
	fillRandomlyBaseLink((*o).CancelInfo)
	(*o).Likes = new(models.BaseLikes)
	fillRandomlyBaseLikes((*o).Likes)
	(*o).Photos = new([]models.PhotosPhoto)
	l0 = randIntn(maxArrayLength + 1)
	*(*o).Photos = make([]models.PhotosPhoto, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyPhotosPhoto(&(*(*o).Photos)[i0])
	}
	(*o).Reposts = new(models.BaseRepostsInfo)
	fillRandomlyBaseRepostsInfo((*o).Reposts)
	(*o).UserAgreementInfo = new(string)
	*(*o).UserAgreementInfo = randString()
	(*o).ViewsCount = new(int)
	*(*o).ViewsCount = randInt()
	(*o).WishlistItemId = new(int)
	*(*o).WishlistItemId = randInt()
}

func fillRandomlyMarketOrder(o *models.MarketOrder) {
	(*o).Address = new(string)
	*(*o).Address = randString()
	(*o).CancelInfo = new(models.BaseLink)
	fillRandomlyBaseLink((*o).CancelInfo)
	(*o).Comment = new(string)
	*(*o).Comment = randString()
	(*o).Date = randInt()
	(*o).DisplayOrderId = new(string)
	*(*o).DisplayOrderId = randString()
	(*o).GroupId = randInt()
	(*o).Id = randInt()
	(*o).ItemsCount = randInt()
	(*o).MerchantComment = new(string)
	*(*o).MerchantComment = randString()
	(*o).PreviewOrderItems = new([]models.MarketOrderItem)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).PreviewOrderItems = make([]models.MarketOrderItem, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyMarketOrderItem(&(*(*o).PreviewOrderItems)[i0])
	}
	(*o).Status = randInt()
	fillRandomlyMarketPrice(&(*o).TotalPrice)
	(*o).TrackLink = new(string)
	*(*o).TrackLink = randString()
	(*o).TrackNumber = new(string)
	*(*o).TrackNumber = randString()
	(*o).UserId = randInt()
	(*o).Weight = new(int)
	*(*o).Weight = randInt()
}

func fillRandomlyMarketOrderItem(o *models.MarketOrderItem) {
	fillRandomlyMarketMarketItem(&(*o).Item)
	(*o).ItemId = randInt()
	(*o).OwnerId = randInt()
	(*o).Photo = new(models.PhotosPhoto)
	fillRandomlyPhotosPhoto((*o).Photo)
	fillRandomlyMarketPrice(&(*o).Price)
	(*o).Quantity = randInt()
	(*o).Title = new(string)
	*(*o).Title = randString()
	(*o).Variants = new([]string)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).Variants = make([]string, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*o).Variants)[i0] = randString()
	}
}

func fillRandomlyMarketPrice(o *models.MarketPrice) {
	(*o).Amount = randString()
	fillRandomlyMarketCurrency(&(*o).Currency)
	(*o).DiscountRate = new(int)
	*(*o).DiscountRate = randInt()
	(*o).OldAmount = new(string)
	*(*o).OldAmount = randString()
	(*o).OldAmountText = new(string)
	*(*o).OldAmountText = randString()
	(*o).Text = randString()
}

func fillRandomlyMarketSection(o *models.MarketSection) {
	(*o).Id = randInt()
	(*o).Name = randString()
}

func fillRandomlyMarketServicesViewType(o *models.MarketServicesViewType) {
	switch randIntn(2) {
	case 0:
		*o = 1
	case 1:
		*o = 2
	}
}

func fillRandomlyMessagesAudioMessage(o *models.MessagesAudioMessage) {
	(*o).AccessKey = new(string)
	*(*o).AccessKey = randString()
	(*o).Duration = randInt()
	(*o).Id = randInt()
	(*o).LinkMp3 = randString()
	(*o).LinkOgg = randString()
	(*o).OwnerId = randInt()
	(*o).TranscriptError = new(int)
	*(*o).TranscriptError = randInt()
	l0 := randIntn(maxArrayLength + 1)
	(*o).Waveform = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		((*o).Waveform)[i0] = randInt()
	}
}

func fillRandomlyMessagesChat(o *models.MessagesChat) {
	(*o).AdminId = randInt()
	(*o).Id = randInt()
	(*o).IsDefaultPhoto = new(bool)
	*(*o).IsDefaultPhoto = randBool()
	(*o).IsGroupChannel = new(bool)
	*(*o).IsGroupChannel = randBool()
	(*o).Kicked = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).Kicked)
	(*o).Left = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).Left)
	(*o).MembersCount = randInt()
	(*o).Photo100 = new(string)
	*(*o).Photo100 = randString()
	(*o).Photo200 = new(string)
	*(*o).Photo200 = randString()
	(*o).Photo50 = new(string)
	*(*o).Photo50 = randString()
	(*o).PushSettings = new(models.MessagesChatPushSettings)
	fillRandomlyMessagesChatPushSettings((*o).PushSettings)
	(*o).Title = new(string)
	*(*o).Title = randString()
	(*o).Type = randString()
	l0 := randIntn(maxArrayLength + 1)
	(*o).Users = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		((*o).Users)[i0] = randInt()
	}
}

func fillRandomlyMessagesChatFull(o *models.MessagesChatFull) {
	(*o).AdminId = randInt()
	(*o).Id = randInt()
	(*o).Kicked = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).Kicked)
	(*o).Left = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).Left)
	(*o).Photo100 = new(string)
	*(*o).Photo100 = randString()
	(*o).Photo200 = new(string)
	*(*o).Photo200 = randString()
	(*o).Photo50 = new(string)
	*(*o).Photo50 = randString()
	(*o).PushSettings = new(models.MessagesChatPushSettings)
	fillRandomlyMessagesChatPushSettings((*o).PushSettings)
	(*o).Title = new(string)
	*(*o).Title = randString()
	(*o).Type = randString()
	l0 := randIntn(maxArrayLength + 1)
	(*o).Users = make([]models.MessagesUserXtrInvitedBy, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyMessagesUserXtrInvitedBy(&((*o).Users)[i0])
	}
}

func fillRandomlyMessagesChatPreview(o *models.MessagesChatPreview) {
	(*o).AdminId = new(int)
	*(*o).AdminId = randInt()
	(*o).Button = new(models.BaseLinkButton)
	fillRandomlyBaseLinkButton((*o).Button)
	(*o).IsDon = new(bool)
	*(*o).IsDon = randBool()
	(*o).IsGroupChannel = new(bool)
	*(*o).IsGroupChannel = randBool()
	(*o).IsMember = new(bool)
	*(*o).IsMember = randBool()
	(*o).Joined = new(bool)
	*(*o).Joined = randBool()
	(*o).LocalId = new(int)
	*(*o).LocalId = randInt()
	(*o).Members = new([]int)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).Members = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*o).Members)[i0] = randInt()
	}
	(*o).MembersCount = new(int)
	*(*o).MembersCount = randInt()
	(*o).Photo = new(models.MessagesChatSettingsPhoto)
	fillRandomlyMessagesChatSettingsPhoto((*o).Photo)
	(*o).Title = new(string)
	*(*o).Title = randString()
}

func fillRandomlyMessagesChatPushSettings(o *models.MessagesChatPushSettings) {
	(*o).DisabledUntil = new(int)
	*(*o).DisabledUntil = randInt()
	(*o).Sound = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).Sound)
}

func fillRandomlyMessagesChatRestrictions(o *models.MessagesChatRestrictions) {
	(*o).AdminsPromoteUsers = new(bool)
	*(*o).AdminsPromoteUsers = randBool()
	(*o).OnlyAdminsEditInfo = new(bool)
	*(*o).OnlyAdminsEditInfo = randBool()
	(*o).OnlyAdminsEditPin = new(bool)
	*(*o).OnlyAdminsEditPin = randBool()
	(*o).OnlyAdminsInvite = new(bool)
	*(*o).OnlyAdminsInvite = randBool()
	(*o).OnlyAdminsKick = new(bool)
	*(*o).OnlyAdminsKick = randBool()
}

func fillRandomlyMessagesChatSettings(o *models.MessagesChatSettings) {
	fillRandomlyMessagesChatSettingsAcl(&(*o).Acl)
	l0 := randIntn(maxArrayLength + 1)
	(*o).ActiveIds = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		((*o).ActiveIds)[i0] = randInt()
	}
	(*o).AdminIds = new([]int)
	l0 = randIntn(maxArrayLength + 1)
	*(*o).AdminIds = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*o).AdminIds)[i0] = randInt()
	}
	(*o).DisappearingChatLink = new(string)
	*(*o).DisappearingChatLink = randString()
	(*o).FriendsCount = new(int)
	*(*o).FriendsCount = randInt()
	(*o).IsDisappearing = new(bool)
	*(*o).IsDisappearing = randBool()
	(*o).IsGroupChannel = new(bool)
	*(*o).IsGroupChannel = randBool()
	(*o).IsService = new(bool)
	*(*o).IsService = randBool()
	(*o).MembersCount = new(int)
	*(*o).MembersCount = randInt()
	(*o).OwnerId = randInt()
	(*o).Permissions = new(models.MessagesChatSettingsPermissions)
	fillRandomlyMessagesChatSettingsPermissions((*o).Permissions)
	(*o).Photo = new(models.MessagesChatSettingsPhoto)
	fillRandomlyMessagesChatSettingsPhoto((*o).Photo)
	(*o).PinnedMessage = new(models.MessagesPinnedMessage)
	fillRandomlyMessagesPinnedMessage((*o).PinnedMessage)
	fillRandomlyMessagesChatSettingsState(&(*o).State)
	(*o).Theme = new(string)
	*(*o).Theme = randString()
	(*o).Title = randString()
}

func fillRandomlyMessagesChatSettingsAcl(o *models.MessagesChatSettingsAcl) {
	(*o).CanCall = randBool()
	(*o).CanChangeInfo = randBool()
	(*o).CanChangeInviteLink = randBool()
	(*o).CanChangePin = randBool()
	(*o).CanChangeServiceType = new(bool)
	*(*o).CanChangeServiceType = randBool()
	(*o).CanCopyChat = randBool()
	(*o).CanInvite = randBool()
	(*o).CanModerate = randBool()
	(*o).CanPromoteUsers = randBool()
	(*o).CanSeeInviteLink = randBool()
	(*o).CanUseMassMentions = randBool()
}

func fillRandomlyMessagesChatSettingsPermissionsCall(o *models.MessagesChatSettingsPermissionsCall) {
	switch randIntn(3) {
	case 0:
		*o = "owner"
	case 1:
		*o = "owner_and_admins"
	case 2:
		*o = "all"
	}
}

func fillRandomlyMessagesChatSettingsPermissionsChangeAdmins(o *models.MessagesChatSettingsPermissionsChangeAdmins) {
	switch randIntn(2) {
	case 0:
		*o = "owner"
	case 1:
		*o = "owner_and_admins"
	}
}

func fillRandomlyMessagesChatSettingsPermissionsChangeInfo(o *models.MessagesChatSettingsPermissionsChangeInfo) {
	switch randIntn(3) {
	case 0:
		*o = "owner"
	case 1:
		*o = "owner_and_admins"
	case 2:
		*o = "all"
	}
}

func fillRandomlyMessagesChatSettingsPermissionsChangePin(o *models.MessagesChatSettingsPermissionsChangePin) {
	switch randIntn(3) {
	case 0:
		*o = "owner"
	case 1:
		*o = "owner_and_admins"
	case 2:
		*o = "all"
	}
}

func fillRandomlyMessagesChatSettingsPermissionsInvite(o *models.MessagesChatSettingsPermissionsInvite) {
	switch randIntn(3) {
	case 0:
		*o = "owner"
	case 1:
		*o = "owner_and_admins"
	case 2:
		*o = "all"
	}
}

func fillRandomlyMessagesChatSettingsPermissionsSeeInviteLink(o *models.MessagesChatSettingsPermissionsSeeInviteLink) {
	switch randIntn(3) {
	case 0:
		*o = "owner"
	case 1:
		*o = "owner_and_admins"
	case 2:
		*o = "all"
	}
}

func fillRandomlyMessagesChatSettingsPermissionsUseMassMentions(o *models.MessagesChatSettingsPermissionsUseMassMentions) {
	switch randIntn(3) {
	case 0:
		*o = "owner"
	case 1:
		*o = "owner_and_admins"
	case 2:
		*o = "all"
	}
}

func fillRandomlyMessagesChatSettingsPermissions(o *models.MessagesChatSettingsPermissions) {
	(*o).Call = new(models.MessagesChatSettingsPermissionsCall)
	fillRandomlyMessagesChatSettingsPermissionsCall((*o).Call)
	(*o).ChangeAdmins = new(models.MessagesChatSettingsPermissionsChangeAdmins)
	fillRandomlyMessagesChatSettingsPermissionsChangeAdmins((*o).ChangeAdmins)
	(*o).ChangeInfo = new(models.MessagesChatSettingsPermissionsChangeInfo)
	fillRandomlyMessagesChatSettingsPermissionsChangeInfo((*o).ChangeInfo)
	(*o).ChangePin = new(models.MessagesChatSettingsPermissionsChangePin)
	fillRandomlyMessagesChatSettingsPermissionsChangePin((*o).ChangePin)
	(*o).Invite = new(models.MessagesChatSettingsPermissionsInvite)
	fillRandomlyMessagesChatSettingsPermissionsInvite((*o).Invite)
	(*o).SeeInviteLink = new(models.MessagesChatSettingsPermissionsSeeInviteLink)
	fillRandomlyMessagesChatSettingsPermissionsSeeInviteLink((*o).SeeInviteLink)
	(*o).UseMassMentions = new(models.MessagesChatSettingsPermissionsUseMassMentions)
	fillRandomlyMessagesChatSettingsPermissionsUseMassMentions((*o).UseMassMentions)
}

func fillRandomlyMessagesChatSettingsPhoto(o *models.MessagesChatSettingsPhoto) {
	(*o).IsDefaultCallPhoto = new(bool)
	*(*o).IsDefaultCallPhoto = randBool()
	(*o).IsDefaultPhoto = new(bool)
	*(*o).IsDefaultPhoto = randBool()
	(*o).Photo100 = new(string)
	*(*o).Photo100 = randString()
	(*o).Photo200 = new(string)
	*(*o).Photo200 = randString()
	(*o).Photo50 = new(string)
	*(*o).Photo50 = randString()
}

func fillRandomlyMessagesChatSettingsState(o *models.MessagesChatSettingsState) {
	switch randIntn(3) {
	case 0:
		*o = "in"
	case 1:
		*o = "kicked"
	case 2:
		*o = "left"
	}
}

func fillRandomlyMessagesConversationSpecialServiceType(o *models.MessagesConversationSpecialServiceType) {
	switch randIntn(1) {
	case 0:
		*o = "business_notify"
	}
}

func fillRandomlyMessagesConversation(o *models.MessagesConversation) {
	(*o).CanWrite = new(models.MessagesConversationCanWrite)
	fillRandomlyMessagesConversationCanWrite((*o).CanWrite)
	(*o).ChatSettings = new(models.MessagesChatSettings)
	fillRandomlyMessagesChatSettings((*o).ChatSettings)
	(*o).CurrentKeyboard = new(models.MessagesKeyboard)
	fillRandomlyMessagesKeyboard((*o).CurrentKeyboard)
	(*o).Important = new(bool)
	*(*o).Important = randBool()
	(*o).InRead = randInt()
	(*o).IsMarkedUnread = new(bool)
	*(*o).IsMarkedUnread = randBool()
	(*o).LastConversationMessageId = new(int)
	*(*o).LastConversationMessageId = randInt()
	(*o).LastMessageId = randInt()
	(*o).Mentions = new([]int)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).Mentions = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*o).Mentions)[i0] = randInt()
	}
	(*o).MessageRequestData = new(models.MessagesMessageRequestData)
	fillRandomlyMessagesMessageRequestData((*o).MessageRequestData)
	(*o).OutRead = randInt()
	(*o).OutReadBy = new(models.MessagesOutReadBy)
	fillRandomlyMessagesOutReadBy((*o).OutReadBy)
	fillRandomlyMessagesConversationPeer(&(*o).Peer)
	(*o).PushSettings = new(models.MessagesPushSettings)
	fillRandomlyMessagesPushSettings((*o).PushSettings)
	(*o).SortId = new(models.MessagesConversationSortId)
	fillRandomlyMessagesConversationSortId((*o).SortId)
	(*o).SpecialServiceType = new(models.MessagesConversationSpecialServiceType)
	fillRandomlyMessagesConversationSpecialServiceType((*o).SpecialServiceType)
	(*o).Unanswered = new(bool)
	*(*o).Unanswered = randBool()
	(*o).UnreadCount = new(int)
	*(*o).UnreadCount = randInt()
}

func fillRandomlyMessagesConversationCanWrite(o *models.MessagesConversationCanWrite) {
	(*o).Allowed = randBool()
	(*o).Reason = new(int)
	*(*o).Reason = randInt()
}

func fillRandomlyMessagesConversationMember(o *models.MessagesConversationMember) {
	(*o).CanKick = new(bool)
	*(*o).CanKick = randBool()
	(*o).InvitedBy = new(int)
	*(*o).InvitedBy = randInt()
	(*o).IsAdmin = new(bool)
	*(*o).IsAdmin = randBool()
	(*o).IsMessageRequest = new(bool)
	*(*o).IsMessageRequest = randBool()
	(*o).IsOwner = new(bool)
	*(*o).IsOwner = randBool()
	(*o).JoinDate = new(int)
	*(*o).JoinDate = randInt()
	(*o).MemberId = randInt()
	(*o).RequestDate = new(int)
	*(*o).RequestDate = randInt()
}

func fillRandomlyMessagesConversationPeer(o *models.MessagesConversationPeer) {
	(*o).Id = randInt()
	(*o).LocalId = new(int)
	*(*o).LocalId = randInt()
	fillRandomlyMessagesConversationPeerType(&(*o).Type)
}

func fillRandomlyMessagesConversationPeerType(o *models.MessagesConversationPeerType) {
	switch randIntn(4) {
	case 0:
		*o = "chat"
	case 1:
		*o = "email"
	case 2:
		*o = "user"
	case 3:
		*o = "group"
	}
}

func fillRandomlyMessagesConversationSortId(o *models.MessagesConversationSortId) {
	(*o).MajorId = randInt()
	(*o).MinorId = randInt()
}

func fillRandomlyMessagesConversationWithMessage(o *models.MessagesConversationWithMessage) {
	fillRandomlyMessagesConversation(&(*o).Conversation)
	(*o).LastMessage = new(models.MessagesMessage)
	fillRandomlyMessagesMessage((*o).LastMessage)
}

func fillRandomlyMessagesForeignMessage(o *models.MessagesForeignMessage) {
	(*o).Attachments = new([]models.MessagesMessageAttachment)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).Attachments = make([]models.MessagesMessageAttachment, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyMessagesMessageAttachment(&(*(*o).Attachments)[i0])
	}
	(*o).ConversationMessageId = new(int)
	*(*o).ConversationMessageId = randInt()
	(*o).Date = randInt()
	(*o).FromId = randInt()
	(*o).FwdMessages = new([]models.MessagesForeignMessage)
	l0 = randIntn(maxArrayLength + 1)
	*(*o).FwdMessages = make([]models.MessagesForeignMessage, l0)
	for i0 := 0; i0 < l0; i0++ {
		//fillRandomlyMessagesForeignMessage(&(*(*o).FwdMessages)[i0])
	}
	(*o).Geo = new(models.BaseGeo)
	fillRandomlyBaseGeo((*o).Geo)
	(*o).Id = new(int)
	*(*o).Id = randInt()
	(*o).Payload = new(string)
	*(*o).Payload = randString()
	(*o).PeerId = new(int)
	*(*o).PeerId = randInt()
	(*o).ReplyMessage = new(models.MessagesForeignMessage)
	//fillRandomlyMessagesForeignMessage((*o).ReplyMessage)
	(*o).Text = randString()
	(*o).UpdateTime = new(int)
	*(*o).UpdateTime = randInt()
	(*o).WasListened = new(bool)
	*(*o).WasListened = randBool()
}

func fillRandomlyMessagesForward(o *models.MessagesForward) {
	(*o).ConversationMessageIds = new([]int)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).ConversationMessageIds = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*o).ConversationMessageIds)[i0] = randInt()
	}
	(*o).IsReply = new(bool)
	*(*o).IsReply = randBool()
	(*o).MessageIds = new([]int)
	l0 = randIntn(maxArrayLength + 1)
	*(*o).MessageIds = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*o).MessageIds)[i0] = randInt()
	}
	(*o).OwnerId = new(int)
	*(*o).OwnerId = randInt()
	(*o).PeerId = new(int)
	*(*o).PeerId = randInt()
}

func fillRandomlyMessagesGetConversationById(o *models.MessagesGetConversationById) {
	(*o).Count = randInt()
	l0 := randIntn(maxArrayLength + 1)
	(*o).Items = make([]models.MessagesConversation, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyMessagesConversation(&((*o).Items)[i0])
	}
}

func fillRandomlyMessagesGetConversationByIdExtended(o *models.MessagesGetConversationByIdExtended) {
	fillRandomlyMessagesGetConversationById(&(*o).MessagesGetConversationById)
	(*o).Groups = new([]models.GroupsGroupFull)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).Groups = make([]models.GroupsGroupFull, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyGroupsGroupFull(&(*(*o).Groups)[i0])
	}
	(*o).Profiles = new([]models.UsersUserFull)
	l0 = randIntn(maxArrayLength + 1)
	*(*o).Profiles = make([]models.UsersUserFull, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyUsersUserFull(&(*(*o).Profiles)[i0])
	}
}

func fillRandomlyMessagesGetConversationMembers(o *models.MessagesGetConversationMembers) {
	(*o).ChatRestrictions = new(models.MessagesChatRestrictions)
	fillRandomlyMessagesChatRestrictions((*o).ChatRestrictions)
	(*o).Count = randInt()
	(*o).Groups = new([]models.GroupsGroupFull)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).Groups = make([]models.GroupsGroupFull, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyGroupsGroupFull(&(*(*o).Groups)[i0])
	}
	l0 = randIntn(maxArrayLength + 1)
	(*o).Items = make([]models.MessagesConversationMember, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyMessagesConversationMember(&((*o).Items)[i0])
	}
	(*o).Profiles = new([]models.UsersUserFull)
	l0 = randIntn(maxArrayLength + 1)
	*(*o).Profiles = make([]models.UsersUserFull, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyUsersUserFull(&(*(*o).Profiles)[i0])
	}
}

func fillRandomlyMessagesGraffiti(o *models.MessagesGraffiti) {
	(*o).AccessKey = new(string)
	*(*o).AccessKey = randString()
	(*o).Height = randInt()
	(*o).Id = randInt()
	(*o).OwnerId = randInt()
	(*o).Url = randString()
	(*o).Width = randInt()
}

func fillRandomlyMessagesHistoryAttachment(o *models.MessagesHistoryAttachment) {
	fillRandomlyMessagesHistoryMessageAttachment(&(*o).Attachment)
	(*o).ForwardLevel = new(int)
	*(*o).ForwardLevel = randInt()
	(*o).FromId = randInt()
	(*o).MessageId = randInt()
	(*o).WasListened = new(bool)
	*(*o).WasListened = randBool()
}

func fillRandomlyMessagesHistoryMessageAttachment(o *models.MessagesHistoryMessageAttachment) {
	(*o).Audio = new(models.AudioAudio)
	fillRandomlyAudioAudio((*o).Audio)
	(*o).AudioMessage = new(models.MessagesAudioMessage)
	fillRandomlyMessagesAudioMessage((*o).AudioMessage)
	(*o).Doc = new(models.DocsDoc)
	fillRandomlyDocsDoc((*o).Doc)
	(*o).Graffiti = new(models.MessagesGraffiti)
	fillRandomlyMessagesGraffiti((*o).Graffiti)
	(*o).Link = new(models.BaseLink)
	fillRandomlyBaseLink((*o).Link)
	(*o).Market = new(models.MarketMarketItem)
	fillRandomlyMarketMarketItem((*o).Market)
	(*o).Photo = new(models.PhotosPhoto)
	fillRandomlyPhotosPhoto((*o).Photo)
	fillRandomlyMessagesHistoryMessageAttachmentType(&(*o).Type)
	(*o).Video = new(models.VideoVideo)
	fillRandomlyVideoVideo((*o).Video)
	(*o).Wall = new(models.WallWallpostFull)
	fillRandomlyWallWallpostFull((*o).Wall)
}

func fillRandomlyMessagesHistoryMessageAttachmentType(o *models.MessagesHistoryMessageAttachmentType) {
	switch randIntn(10) {
	case 0:
		*o = "photo"
	case 1:
		*o = "video"
	case 2:
		*o = "audio"
	case 3:
		*o = "doc"
	case 4:
		*o = "link"
	case 5:
		*o = "market"
	case 6:
		*o = "wall"
	case 7:
		*o = "share"
	case 8:
		*o = "graffiti"
	case 9:
		*o = "audio_message"
	}
}

func fillRandomlyMessagesKeyboard(o *models.MessagesKeyboard) {
	(*o).AuthorId = new(int)
	*(*o).AuthorId = randInt()
	l0 := randIntn(maxArrayLength + 1)
	(*o).Buttons = make([][]models.MessagesKeyboardButton, l0)
	for i0 := 0; i0 < l0; i0++ {
		l1 := randIntn(maxArrayLength + 1)
		((*o).Buttons)[i0] = make([]models.MessagesKeyboardButton, l1)
		for i1 := 0; i1 < l1; i1++ {
			fillRandomlyMessagesKeyboardButton(&((*o).Buttons)[i0][i1])
		}
	}
	(*o).Inline = new(bool)
	*(*o).Inline = randBool()
	(*o).OneTime = randBool()
}

func fillRandomlyMessagesKeyboardButtonColor(o *models.MessagesKeyboardButtonColor) {
	switch randIntn(4) {
	case 0:
		*o = "default"
	case 1:
		*o = "positive"
	case 2:
		*o = "negative"
	case 3:
		*o = "primary"
	}
}

func fillRandomlyMessagesKeyboardButton(o *models.MessagesKeyboardButton) {
	fillRandomlyMessagesKeyboardButtonPropertyAction(&(*o).Action)
	(*o).Color = new(models.MessagesKeyboardButtonColor)
	fillRandomlyMessagesKeyboardButtonColor((*o).Color)
}

func fillRandomlyMessagesKeyboardButtonActionCallbackType(o *models.MessagesKeyboardButtonActionCallbackType) {
	switch randIntn(1) {
	case 0:
		*o = "callback"
	}
}

func fillRandomlyMessagesKeyboardButtonActionCallback(o *models.MessagesKeyboardButtonActionCallback) {
	(*o).Label = randString()
	(*o).Payload = new(string)
	*(*o).Payload = randString()
	fillRandomlyMessagesKeyboardButtonActionCallbackType(&(*o).Type)
}

func fillRandomlyMessagesKeyboardButtonActionLocationType(o *models.MessagesKeyboardButtonActionLocationType) {
	switch randIntn(1) {
	case 0:
		*o = "location"
	}
}

func fillRandomlyMessagesKeyboardButtonActionLocation(o *models.MessagesKeyboardButtonActionLocation) {
	(*o).Payload = new(string)
	*(*o).Payload = randString()
	fillRandomlyMessagesKeyboardButtonActionLocationType(&(*o).Type)
}

func fillRandomlyMessagesKeyboardButtonActionOpenAppType(o *models.MessagesKeyboardButtonActionOpenAppType) {
	switch randIntn(1) {
	case 0:
		*o = "open_app"
	}
}

func fillRandomlyMessagesKeyboardButtonActionOpenApp(o *models.MessagesKeyboardButtonActionOpenApp) {
	(*o).AppId = randInt()
	(*o).Hash = new(string)
	*(*o).Hash = randString()
	(*o).Label = randString()
	(*o).OwnerId = randInt()
	(*o).Payload = new(string)
	*(*o).Payload = randString()
	fillRandomlyMessagesKeyboardButtonActionOpenAppType(&(*o).Type)
}

func fillRandomlyMessagesKeyboardButtonActionOpenLinkType(o *models.MessagesKeyboardButtonActionOpenLinkType) {
	switch randIntn(1) {
	case 0:
		*o = "open_link"
	}
}

func fillRandomlyMessagesKeyboardButtonActionOpenLink(o *models.MessagesKeyboardButtonActionOpenLink) {
	(*o).Label = randString()
	(*o).Link = randString()
	(*o).Payload = new(string)
	*(*o).Payload = randString()
	fillRandomlyMessagesKeyboardButtonActionOpenLinkType(&(*o).Type)
}

func fillRandomlyMessagesKeyboardButtonActionOpenPhotoType(o *models.MessagesKeyboardButtonActionOpenPhotoType) {
	switch randIntn(1) {
	case 0:
		*o = "open_photo"
	}
}

func fillRandomlyMessagesKeyboardButtonActionOpenPhoto(o *models.MessagesKeyboardButtonActionOpenPhoto) {
	fillRandomlyMessagesKeyboardButtonActionOpenPhotoType(&(*o).Type)
}

func fillRandomlyMessagesKeyboardButtonActionTextType(o *models.MessagesKeyboardButtonActionTextType) {
	switch randIntn(1) {
	case 0:
		*o = "text"
	}
}

func fillRandomlyMessagesKeyboardButtonActionText(o *models.MessagesKeyboardButtonActionText) {
	(*o).Label = randString()
	(*o).Payload = new(string)
	*(*o).Payload = randString()
	fillRandomlyMessagesKeyboardButtonActionTextType(&(*o).Type)
}

func fillRandomlyMessagesKeyboardButtonActionVkpayType(o *models.MessagesKeyboardButtonActionVkpayType) {
	switch randIntn(1) {
	case 0:
		*o = "vkpay"
	}
}

func fillRandomlyMessagesKeyboardButtonActionVkpay(o *models.MessagesKeyboardButtonActionVkpay) {
	(*o).Hash = randString()
	(*o).Payload = new(string)
	*(*o).Payload = randString()
	fillRandomlyMessagesKeyboardButtonActionVkpayType(&(*o).Type)
}

func fillRandomlyMessagesKeyboardButtonPropertyAction(o *models.MessagesKeyboardButtonPropertyAction) {
	var rawJSON []byte
	switch randIntn(7) {
	case 0:
		r := new(models.MessagesKeyboardButtonActionLocation)
		fillRandomlyMessagesKeyboardButtonActionLocation(r)
		rawJSON, _ = json.Marshal(*r)
	case 1:
		r := new(models.MessagesKeyboardButtonActionOpenApp)
		fillRandomlyMessagesKeyboardButtonActionOpenApp(r)
		rawJSON, _ = json.Marshal(*r)
	case 2:
		r := new(models.MessagesKeyboardButtonActionOpenLink)
		fillRandomlyMessagesKeyboardButtonActionOpenLink(r)
		rawJSON, _ = json.Marshal(*r)
	case 3:
		r := new(models.MessagesKeyboardButtonActionOpenPhoto)
		fillRandomlyMessagesKeyboardButtonActionOpenPhoto(r)
		rawJSON, _ = json.Marshal(*r)
	case 4:
		r := new(models.MessagesKeyboardButtonActionText)
		fillRandomlyMessagesKeyboardButtonActionText(r)
		rawJSON, _ = json.Marshal(*r)
	case 5:
		r := new(models.MessagesKeyboardButtonActionCallback)
		fillRandomlyMessagesKeyboardButtonActionCallback(r)
		rawJSON, _ = json.Marshal(*r)
	case 6:
		r := new(models.MessagesKeyboardButtonActionVkpay)
		fillRandomlyMessagesKeyboardButtonActionVkpay(r)
		rawJSON, _ = json.Marshal(*r)
	}
	o.Raws = rawJSON
}

func fillRandomlyMessagesLastActivity(o *models.MessagesLastActivity) {
	fillRandomlyBaseBoolInt(&(*o).Online)
	(*o).Time = randInt()
}

func fillRandomlyMessagesLongpollMessages(o *models.MessagesLongpollMessages) {
	(*o).Count = new(int)
	*(*o).Count = randInt()
	(*o).Items = new([]models.MessagesMessage)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).Items = make([]models.MessagesMessage, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyMessagesMessage(&(*(*o).Items)[i0])
	}
}

func fillRandomlyMessagesLongpollParams(o *models.MessagesLongpollParams) {
	(*o).Key = randString()
	(*o).Pts = new(int)
	*(*o).Pts = randInt()
	(*o).Server = randString()
	(*o).Ts = randInt()
}

func fillRandomlyMessagesMessage(o *models.MessagesMessage) {
	(*o).Action = new(models.MessagesMessageAction)
	fillRandomlyMessagesMessageAction((*o).Action)
	(*o).AdminAuthorId = new(int)
	*(*o).AdminAuthorId = randInt()
	(*o).Attachments = new([]models.MessagesMessageAttachment)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).Attachments = make([]models.MessagesMessageAttachment, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyMessagesMessageAttachment(&(*(*o).Attachments)[i0])
	}
	(*o).ConversationMessageId = new(int)
	*(*o).ConversationMessageId = randInt()
	(*o).Date = randInt()
	(*o).Deleted = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).Deleted)
	(*o).FromId = randInt()
	(*o).FwdMessages = new([]models.MessagesForeignMessage)
	l0 = randIntn(maxArrayLength + 1)
	*(*o).FwdMessages = make([]models.MessagesForeignMessage, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyMessagesForeignMessage(&(*(*o).FwdMessages)[i0])
	}
	(*o).Geo = new(models.BaseGeo)
	fillRandomlyBaseGeo((*o).Geo)
	(*o).Id = randInt()
	(*o).Important = new(bool)
	*(*o).Important = randBool()
	(*o).IsCropped = new(bool)
	*(*o).IsCropped = randBool()
	(*o).IsHidden = new(bool)
	*(*o).IsHidden = randBool()
	(*o).IsSilent = new(bool)
	*(*o).IsSilent = randBool()
	(*o).Keyboard = new(models.MessagesKeyboard)
	fillRandomlyMessagesKeyboard((*o).Keyboard)
	(*o).MembersCount = new(int)
	*(*o).MembersCount = randInt()
	fillRandomlyBaseBoolInt(&(*o).Out)
	(*o).Payload = new(string)
	*(*o).Payload = randString()
	(*o).PeerId = randInt()
	(*o).PinnedAt = new(int)
	*(*o).PinnedAt = randInt()
	(*o).RandomId = new(int)
	*(*o).RandomId = randInt()
	(*o).Ref = new(string)
	*(*o).Ref = randString()
	(*o).RefSource = new(string)
	*(*o).RefSource = randString()
	(*o).ReplyMessage = new(models.MessagesForeignMessage)
	fillRandomlyMessagesForeignMessage((*o).ReplyMessage)
	(*o).Text = randString()
	(*o).UpdateTime = new(int)
	*(*o).UpdateTime = randInt()
	(*o).WasListened = new(bool)
	*(*o).WasListened = randBool()
}

func fillRandomlyMessagesMessageAction(o *models.MessagesMessageAction) {
	(*o).ConversationMessageId = new(int)
	*(*o).ConversationMessageId = randInt()
	(*o).Email = new(string)
	*(*o).Email = randString()
	(*o).MemberId = new(int)
	*(*o).MemberId = randInt()
	(*o).Message = new(string)
	*(*o).Message = randString()
	(*o).Photo = new(models.MessagesMessageActionPhoto)
	fillRandomlyMessagesMessageActionPhoto((*o).Photo)
	(*o).Text = new(string)
	*(*o).Text = randString()
	fillRandomlyMessagesMessageActionStatus(&(*o).Type)
}

func fillRandomlyMessagesMessageActionPhoto(o *models.MessagesMessageActionPhoto) {
	(*o).Photo100 = randString()
	(*o).Photo200 = randString()
	(*o).Photo50 = randString()
}

func fillRandomlyMessagesMessageActionStatus(o *models.MessagesMessageActionStatus) {
	switch randIntn(11) {
	case 0:
		*o = "chat_photo_update"
	case 1:
		*o = "chat_photo_remove"
	case 2:
		*o = "chat_create"
	case 3:
		*o = "chat_title_update"
	case 4:
		*o = "chat_invite_user"
	case 5:
		*o = "chat_kick_user"
	case 6:
		*o = "chat_pin_message"
	case 7:
		*o = "chat_unpin_message"
	case 8:
		*o = "chat_invite_user_by_link"
	case 9:
		*o = "chat_invite_user_by_message_request"
	case 10:
		*o = "chat_screenshot"
	}
}

func fillRandomlyMessagesMessageAttachment(o *models.MessagesMessageAttachment) {
	(*o).Audio = new(models.AudioAudio)
	fillRandomlyAudioAudio((*o).Audio)
	(*o).AudioMessage = new(models.MessagesAudioMessage)
	fillRandomlyMessagesAudioMessage((*o).AudioMessage)
	(*o).Call = new(models.CallsCall)
	fillRandomlyCallsCall((*o).Call)
	(*o).Doc = new(models.DocsDoc)
	fillRandomlyDocsDoc((*o).Doc)
	(*o).Gift = new(models.GiftsLayout)
	fillRandomlyGiftsLayout((*o).Gift)
	(*o).Graffiti = new(models.MessagesGraffiti)
	fillRandomlyMessagesGraffiti((*o).Graffiti)
	(*o).Market = new(models.MarketMarketItem)
	fillRandomlyMarketMarketItem((*o).Market)
	(*o).MarketMarketAlbum = new(models.MarketMarketAlbum)
	fillRandomlyMarketMarketAlbum((*o).MarketMarketAlbum)
	(*o).Photo = new(models.PhotosPhoto)
	fillRandomlyPhotosPhoto((*o).Photo)
	(*o).Poll = new(models.PollsPoll)
	fillRandomlyPollsPoll((*o).Poll)
	(*o).Sticker = new(models.BaseSticker)
	fillRandomlyBaseSticker((*o).Sticker)
	(*o).Story = new(models.StoriesStory)
	fillRandomlyStoriesStory((*o).Story)
	fillRandomlyMessagesMessageAttachmentType(&(*o).Type)
	(*o).Video = new(models.VideoVideoFull)
	fillRandomlyVideoVideoFull((*o).Video)
	(*o).WallReply = new(models.WallWallComment)
	fillRandomlyWallWallComment((*o).WallReply)
}

func fillRandomlyMessagesMessageAttachmentType(o *models.MessagesMessageAttachmentType) {
	switch randIntn(16) {
	case 0:
		*o = "photo"
	case 1:
		*o = "audio"
	case 2:
		*o = "video"
	case 3:
		*o = "doc"
	case 4:
		*o = "link"
	case 5:
		*o = "market"
	case 6:
		*o = "market_album"
	case 7:
		*o = "gift"
	case 8:
		*o = "sticker"
	case 9:
		*o = "wall"
	case 10:
		*o = "wall_reply"
	case 11:
		*o = "article"
	case 12:
		*o = "poll"
	case 13:
		*o = "call"
	case 14:
		*o = "graffiti"
	case 15:
		*o = "audio_message"
	}
}

func fillRandomlyMessagesMessageRequestData(o *models.MessagesMessageRequestData) {
	(*o).InviterId = new(int)
	*(*o).InviterId = randInt()
	(*o).RequestDate = new(int)
	*(*o).RequestDate = randInt()
	(*o).Status = new(string)
	*(*o).Status = randString()
}

func fillRandomlyMessagesMessagesArray(o *models.MessagesMessagesArray) {
	(*o).Count = new(int)
	*(*o).Count = randInt()
	(*o).Items = new([]models.MessagesMessage)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).Items = make([]models.MessagesMessage, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyMessagesMessage(&(*(*o).Items)[i0])
	}
}

func fillRandomlyMessagesOutReadBy(o *models.MessagesOutReadBy) {
	(*o).Count = new(int)
	*(*o).Count = randInt()
	(*o).MemberIds = new([]int)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).MemberIds = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*o).MemberIds)[i0] = randInt()
	}
}

func fillRandomlyMessagesPinnedMessage(o *models.MessagesPinnedMessage) {
	(*o).Attachments = new([]models.MessagesMessageAttachment)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).Attachments = make([]models.MessagesMessageAttachment, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyMessagesMessageAttachment(&(*(*o).Attachments)[i0])
	}
	(*o).ConversationMessageId = new(int)
	*(*o).ConversationMessageId = randInt()
	(*o).Date = randInt()
	(*o).FromId = randInt()
	(*o).FwdMessages = new([]models.MessagesForeignMessage)
	l0 = randIntn(maxArrayLength + 1)
	*(*o).FwdMessages = make([]models.MessagesForeignMessage, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyMessagesForeignMessage(&(*(*o).FwdMessages)[i0])
	}
	(*o).Geo = new(models.BaseGeo)
	fillRandomlyBaseGeo((*o).Geo)
	(*o).Id = randInt()
	(*o).Keyboard = new(models.MessagesKeyboard)
	fillRandomlyMessagesKeyboard((*o).Keyboard)
	(*o).PeerId = randInt()
	(*o).ReplyMessage = new(models.MessagesForeignMessage)
	fillRandomlyMessagesForeignMessage((*o).ReplyMessage)
	(*o).Text = randString()
}

func fillRandomlyMessagesPushSettings(o *models.MessagesPushSettings) {
	(*o).DisabledForever = randBool()
	(*o).DisabledMassMentions = new(bool)
	*(*o).DisabledMassMentions = randBool()
	(*o).DisabledMentions = new(bool)
	*(*o).DisabledMentions = randBool()
	(*o).DisabledUntil = new(int)
	*(*o).DisabledUntil = randInt()
	(*o).NoSound = randBool()
}

func fillRandomlyMessagesSendUserIdsResponseItem(o *models.MessagesSendUserIdsResponseItem) {
	(*o).ConversationMessageId = new(int)
	*(*o).ConversationMessageId = randInt()
	(*o).Error = new(models.BaseMessageError)
	fillRandomlyBaseMessageError((*o).Error)
	(*o).MessageId = randInt()
	(*o).PeerId = randInt()
}

func fillRandomlyMessagesTemplateActionTypeNames(o *models.MessagesTemplateActionTypeNames) {
	switch randIntn(10) {
	case 0:
		*o = "text"
	case 1:
		*o = "start"
	case 2:
		*o = "location"
	case 3:
		*o = "vkpay"
	case 4:
		*o = "open_app"
	case 5:
		*o = "open_photo"
	case 6:
		*o = "open_link"
	case 7:
		*o = "callback"
	case 8:
		*o = "intent_subscribe"
	case 9:
		*o = "intent_unsubscribe"
	}
}

func fillRandomlyMessagesUserXtrInvitedBy(o *models.MessagesUserXtrInvitedBy) {
	fillRandomlyUsersUserXtrType(&(*o).UsersUserXtrType)
	(*o).InvitedBy = new(int)
	*(*o).InvitedBy = randInt()
}

func fillRandomlyNewsfeedCommentsFilters(o *models.NewsfeedCommentsFilters) {
	switch randIntn(5) {
	case 0:
		*o = "post"
	case 1:
		*o = "photo"
	case 2:
		*o = "video"
	case 3:
		*o = "topic"
	case 4:
		*o = "note"
	}
}

func fillRandomlyNewsfeedIgnoreItemType(o *models.NewsfeedIgnoreItemType) {
	switch randIntn(6) {
	case 0:
		*o = "wall"
	case 1:
		*o = "tag"
	case 2:
		*o = "profilephoto"
	case 3:
		*o = "video"
	case 4:
		*o = "photo"
	case 5:
		*o = "audio"
	}
}

func fillRandomlyNewsfeedItemAudio(o *models.NewsfeedItemAudio) {
	fillRandomlyNewsfeedItemBase(&(*o).NewsfeedItemBase)
	(*o).Audio = new(models.NewsfeedItemAudioAudio)
	fillRandomlyNewsfeedItemAudioAudio((*o).Audio)
	(*o).PostId = new(int)
	*(*o).PostId = randInt()
}

func fillRandomlyNewsfeedItemAudioAudio(o *models.NewsfeedItemAudioAudio) {
	(*o).Count = new(int)
	*(*o).Count = randInt()
	(*o).Items = new([]models.AudioAudio)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).Items = make([]models.AudioAudio, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyAudioAudio(&(*(*o).Items)[i0])
	}
}

func fillRandomlyNewsfeedItemBase(o *models.NewsfeedItemBase) {
	(*o).Date = randInt()
	(*o).SourceId = randInt()
	fillRandomlyNewsfeedNewsfeedItemType(&(*o).Type)
}

func fillRandomlyNewsfeedItemDigestTemplate(o *models.NewsfeedItemDigestTemplate) {
	switch randIntn(3) {
	case 0:
		*o = "list"
	case 1:
		*o = "grid"
	case 2:
		*o = "single"
	}
}

func fillRandomlyNewsfeedItemDigest(o *models.NewsfeedItemDigest) {
	fillRandomlyNewsfeedItemBase(&(*o).NewsfeedItemBase)
	(*o).FeedId = new(string)
	*(*o).FeedId = randString()
	(*o).Footer = new(models.NewsfeedItemDigestFooter)
	fillRandomlyNewsfeedItemDigestFooter((*o).Footer)
	(*o).Header = new(models.NewsfeedItemDigestHeader)
	fillRandomlyNewsfeedItemDigestHeader((*o).Header)
	(*o).Items = new([]models.NewsfeedItemDigestItem)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).Items = make([]models.NewsfeedItemDigestItem, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyNewsfeedItemDigestItem(&(*(*o).Items)[i0])
	}
	(*o).MainPostIds = new([]string)
	l0 = randIntn(maxArrayLength + 1)
	*(*o).MainPostIds = make([]string, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*o).MainPostIds)[i0] = randString()
	}
	(*o).Template = new(models.NewsfeedItemDigestTemplate)
	fillRandomlyNewsfeedItemDigestTemplate((*o).Template)
	(*o).TrackCode = new(string)
	*(*o).TrackCode = randString()
}

func fillRandomlyNewsfeedItemDigestButtonStyle(o *models.NewsfeedItemDigestButtonStyle) {
	switch randIntn(1) {
	case 0:
		*o = "primary"
	}
}

func fillRandomlyNewsfeedItemDigestButton(o *models.NewsfeedItemDigestButton) {
	(*o).Style = new(models.NewsfeedItemDigestButtonStyle)
	fillRandomlyNewsfeedItemDigestButtonStyle((*o).Style)
	(*o).Title = randString()
}

func fillRandomlyNewsfeedItemDigestFooterStyle(o *models.NewsfeedItemDigestFooterStyle) {
	switch randIntn(2) {
	case 0:
		*o = "text"
	case 1:
		*o = "button"
	}
}

func fillRandomlyNewsfeedItemDigestFooter(o *models.NewsfeedItemDigestFooter) {
	(*o).Button = new(models.NewsfeedItemDigestButton)
	fillRandomlyNewsfeedItemDigestButton((*o).Button)
	fillRandomlyNewsfeedItemDigestFooterStyle(&(*o).Style)
	(*o).Text = randString()
}

func fillRandomlyNewsfeedItemDigestFullItemStyle(o *models.NewsfeedItemDigestFullItemStyle) {
	switch randIntn(3) {
	case 0:
		*o = "default"
	case 1:
		*o = "inversed"
	case 2:
		*o = "spotlight"
	}
}

func fillRandomlyNewsfeedItemDigestFullItem(o *models.NewsfeedItemDigestFullItem) {
	(*o).Attachment = new(models.WallWallpostAttachment)
	fillRandomlyWallWallpostAttachment((*o).Attachment)
	(*o).AttachmentIndex = new(int)
	*(*o).AttachmentIndex = randInt()
	fillRandomlyWallWallpost(&(*o).Post)
	(*o).SourceName = new(string)
	*(*o).SourceName = randString()
	(*o).Style = new(models.NewsfeedItemDigestFullItemStyle)
	fillRandomlyNewsfeedItemDigestFullItemStyle((*o).Style)
	(*o).Text = new(string)
	*(*o).Text = randString()
}

func fillRandomlyNewsfeedItemDigestHeaderStyle(o *models.NewsfeedItemDigestHeaderStyle) {
	switch randIntn(2) {
	case 0:
		*o = "singleline"
	case 1:
		*o = "multiline"
	}
}

func fillRandomlyNewsfeedItemDigestHeader(o *models.NewsfeedItemDigestHeader) {
	(*o).Button = new(models.NewsfeedItemDigestButton)
	fillRandomlyNewsfeedItemDigestButton((*o).Button)
	fillRandomlyNewsfeedItemDigestHeaderStyle(&(*o).Style)
	(*o).Subtitle = new(string)
	*(*o).Subtitle = randString()
	(*o).Title = randString()
}

func fillRandomlyNewsfeedItemDigestItem(o *models.NewsfeedItemDigestItem) {
	r := models.WallWallpost(*o)
	fillRandomlyWallWallpost(&r)
	*o = models.NewsfeedItemDigestItem(r)
}

func fillRandomlyNewsfeedItemFriend(o *models.NewsfeedItemFriend) {
	fillRandomlyNewsfeedItemBase(&(*o).NewsfeedItemBase)
	(*o).Friends = new(models.NewsfeedItemFriendFriends)
	fillRandomlyNewsfeedItemFriendFriends((*o).Friends)
}

func fillRandomlyNewsfeedItemFriendFriends(o *models.NewsfeedItemFriendFriends) {
	(*o).Count = new(int)
	*(*o).Count = randInt()
	(*o).Items = new([]models.BaseUserId)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).Items = make([]models.BaseUserId, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyBaseUserId(&(*(*o).Items)[i0])
	}
}

func fillRandomlyNewsfeedItemHolidayRecommendationsBlockHeader(o *models.NewsfeedItemHolidayRecommendationsBlockHeader) {
	(*o).Action = new(models.BaseLinkButtonAction)
	fillRandomlyBaseLinkButtonAction((*o).Action)
	(*o).Image = new([]models.BaseImage)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).Image = make([]models.BaseImage, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyBaseImage(&(*(*o).Image)[i0])
	}
	(*o).Subtitle = new(string)
	*(*o).Subtitle = randString()
	(*o).Title = new(string)
	*(*o).Title = randString()
}

func fillRandomlyNewsfeedItemPhoto(o *models.NewsfeedItemPhoto) {
	fillRandomlyWallCarouselBase(&(*o).WallCarouselBase)
	fillRandomlyNewsfeedItemBase(&(*o).NewsfeedItemBase)
	(*o).Photos = new(models.NewsfeedItemPhotoPhotos)
	fillRandomlyNewsfeedItemPhotoPhotos((*o).Photos)
	(*o).PostId = new(int)
	*(*o).PostId = randInt()
}

func fillRandomlyNewsfeedItemPhotoPhotos(o *models.NewsfeedItemPhotoPhotos) {
	(*o).Count = new(int)
	*(*o).Count = randInt()
	(*o).Items = new([]models.NewsfeedNewsfeedPhoto)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).Items = make([]models.NewsfeedNewsfeedPhoto, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyNewsfeedNewsfeedPhoto(&(*(*o).Items)[i0])
	}
}

func fillRandomlyNewsfeedItemPhotoTag(o *models.NewsfeedItemPhotoTag) {
	fillRandomlyWallCarouselBase(&(*o).WallCarouselBase)
	fillRandomlyNewsfeedItemBase(&(*o).NewsfeedItemBase)
	(*o).PhotoTags = new(models.NewsfeedItemPhotoTagPhotoTags)
	fillRandomlyNewsfeedItemPhotoTagPhotoTags((*o).PhotoTags)
	(*o).PostId = new(int)
	*(*o).PostId = randInt()
}

func fillRandomlyNewsfeedItemPhotoTagPhotoTags(o *models.NewsfeedItemPhotoTagPhotoTags) {
	(*o).Count = new(int)
	*(*o).Count = randInt()
	(*o).Items = new([]models.NewsfeedNewsfeedPhoto)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).Items = make([]models.NewsfeedNewsfeedPhoto, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyNewsfeedNewsfeedPhoto(&(*(*o).Items)[i0])
	}
}

func fillRandomlyNewsfeedItemPromoButton(o *models.NewsfeedItemPromoButton) {
	fillRandomlyNewsfeedItemBase(&(*o).NewsfeedItemBase)
	(*o).Action = new(models.NewsfeedItemPromoButtonAction)
	fillRandomlyNewsfeedItemPromoButtonAction((*o).Action)
	(*o).Images = new([]models.NewsfeedItemPromoButtonImage)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).Images = make([]models.NewsfeedItemPromoButtonImage, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyNewsfeedItemPromoButtonImage(&(*(*o).Images)[i0])
	}
	(*o).Text = new(string)
	*(*o).Text = randString()
	(*o).Title = new(string)
	*(*o).Title = randString()
	(*o).TrackCode = new(string)
	*(*o).TrackCode = randString()
}

func fillRandomlyNewsfeedItemPromoButtonAction(o *models.NewsfeedItemPromoButtonAction) {
	(*o).Target = new(string)
	*(*o).Target = randString()
	(*o).Type = new(string)
	*(*o).Type = randString()
	(*o).Url = new(string)
	*(*o).Url = randString()
}

func fillRandomlyNewsfeedItemPromoButtonImage(o *models.NewsfeedItemPromoButtonImage) {
	(*o).Height = new(int)
	*(*o).Height = randInt()
	(*o).Url = new(string)
	*(*o).Url = randString()
	(*o).Width = new(int)
	*(*o).Width = randInt()
}

func fillRandomlyNewsfeedItemTopic(o *models.NewsfeedItemTopic) {
	fillRandomlyNewsfeedItemBase(&(*o).NewsfeedItemBase)
	(*o).Comments = new(models.BaseCommentsInfo)
	fillRandomlyBaseCommentsInfo((*o).Comments)
	(*o).Likes = new(models.BaseLikesInfo)
	fillRandomlyBaseLikesInfo((*o).Likes)
	(*o).PostId = randInt()
	(*o).Text = randString()
}

func fillRandomlyNewsfeedItemVideo(o *models.NewsfeedItemVideo) {
	fillRandomlyWallCarouselBase(&(*o).WallCarouselBase)
	fillRandomlyNewsfeedItemBase(&(*o).NewsfeedItemBase)
	(*o).Video = new(models.NewsfeedItemVideoVideo)
	fillRandomlyNewsfeedItemVideoVideo((*o).Video)
}

func fillRandomlyNewsfeedItemVideoVideo(o *models.NewsfeedItemVideoVideo) {
	(*o).Count = new(int)
	*(*o).Count = randInt()
	(*o).Items = new([]models.VideoVideo)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).Items = make([]models.VideoVideo, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyVideoVideo(&(*(*o).Items)[i0])
	}
}

func fillRandomlyNewsfeedItemWallpost(o *models.NewsfeedItemWallpost) {
	fillRandomlyWallCarouselBase(&(*o).WallCarouselBase)
	fillRandomlyNewsfeedItemBase(&(*o).NewsfeedItemBase)
	fillRandomlyWallWallpostFull(&(*o).WallWallpostFull)
	(*o).Feedback = new(models.NewsfeedItemWallpostFeedback)
	fillRandomlyNewsfeedItemWallpostFeedback((*o).Feedback)
}

func fillRandomlyNewsfeedItemWallpostFeedback(o *models.NewsfeedItemWallpostFeedback) {
	(*o).Answers = new([]models.NewsfeedItemWallpostFeedbackAnswer)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).Answers = make([]models.NewsfeedItemWallpostFeedbackAnswer, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyNewsfeedItemWallpostFeedbackAnswer(&(*(*o).Answers)[i0])
	}
	(*o).Gratitude = new(string)
	*(*o).Gratitude = randString()
	(*o).Question = randString()
	(*o).StarsCount = new(int)
	*(*o).StarsCount = randInt()
	fillRandomlyNewsfeedItemWallpostFeedbackType(&(*o).Type)
}

func fillRandomlyNewsfeedItemWallpostFeedbackAnswer(o *models.NewsfeedItemWallpostFeedbackAnswer) {
	(*o).Id = randString()
	(*o).Title = randString()
}

func fillRandomlyNewsfeedItemWallpostFeedbackType(o *models.NewsfeedItemWallpostFeedbackType) {
	switch randIntn(2) {
	case 0:
		*o = "buttons"
	case 1:
		*o = "stars"
	}
}

func fillRandomlyNewsfeedList(o *models.NewsfeedList) {
	(*o).Id = randInt()
	(*o).Title = randString()
}

func fillRandomlyNewsfeedListFull(o *models.NewsfeedListFull) {
	fillRandomlyNewsfeedList(&(*o).NewsfeedList)
	(*o).NoReposts = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).NoReposts)
	(*o).SourceIds = new([]int)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).SourceIds = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*o).SourceIds)[i0] = randInt()
	}
}

func fillRandomlyNewsfeedNewsfeedItem(o *models.NewsfeedNewsfeedItem) {
	var rawJSON []byte
	switch randIntn(9) {
	case 0:
		r := new(models.NewsfeedItemWallpost)
		fillRandomlyNewsfeedItemWallpost(r)
		rawJSON, _ = json.Marshal(*r)
	case 1:
		r := new(models.NewsfeedItemPhoto)
		fillRandomlyNewsfeedItemPhoto(r)
		rawJSON, _ = json.Marshal(*r)
	case 2:
		r := new(models.NewsfeedItemPhotoTag)
		fillRandomlyNewsfeedItemPhotoTag(r)
		rawJSON, _ = json.Marshal(*r)
	case 3:
		r := new(models.NewsfeedItemFriend)
		fillRandomlyNewsfeedItemFriend(r)
		rawJSON, _ = json.Marshal(*r)
	case 4:
		r := new(models.NewsfeedItemAudio)
		fillRandomlyNewsfeedItemAudio(r)
		rawJSON, _ = json.Marshal(*r)
	case 5:
		r := new(models.NewsfeedItemVideo)
		fillRandomlyNewsfeedItemVideo(r)
		rawJSON, _ = json.Marshal(*r)
	case 6:
		r := new(models.NewsfeedItemTopic)
		fillRandomlyNewsfeedItemTopic(r)
		rawJSON, _ = json.Marshal(*r)
	case 7:
		r := new(models.NewsfeedItemDigest)
		fillRandomlyNewsfeedItemDigest(r)
		rawJSON, _ = json.Marshal(*r)
	case 8:
		r := new(models.NewsfeedItemPromoButton)
		fillRandomlyNewsfeedItemPromoButton(r)
		rawJSON, _ = json.Marshal(*r)
	}
	o.Raws = rawJSON
}

func fillRandomlyNewsfeedNewsfeedItemType(o *models.NewsfeedNewsfeedItemType) {
	switch randIntn(13) {
	case 0:
		*o = "post"
	case 1:
		*o = "photo"
	case 2:
		*o = "photo_tag"
	case 3:
		*o = "wall_photo"
	case 4:
		*o = "friend"
	case 5:
		*o = "audio"
	case 6:
		*o = "video"
	case 7:
		*o = "topic"
	case 8:
		*o = "digest"
	case 9:
		*o = "stories"
	case 10:
		*o = "note"
	case 11:
		*o = "audio_playlist"
	case 12:
		*o = "clip"
	}
}

func fillRandomlyNewsfeedNewsfeedPhoto(o *models.NewsfeedNewsfeedPhoto) {
	fillRandomlyPhotosPhoto(&(*o).PhotosPhoto)
	(*o).CanRepost = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).CanRepost)
	(*o).Comments = new(models.BaseObjectCount)
	fillRandomlyBaseObjectCount((*o).Comments)
	(*o).Likes = new(models.BaseLikes)
	fillRandomlyBaseLikes((*o).Likes)
}

func fillRandomlyNotesNote(o *models.NotesNote) {
	(*o).CanComment = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).CanComment)
	(*o).Comments = randInt()
	(*o).Date = randInt()
	(*o).Id = randInt()
	(*o).OwnerId = randInt()
	(*o).PrivacyComment = new([]string)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).PrivacyComment = make([]string, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*o).PrivacyComment)[i0] = randString()
	}
	(*o).PrivacyView = new([]string)
	l0 = randIntn(maxArrayLength + 1)
	*(*o).PrivacyView = make([]string, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*o).PrivacyView)[i0] = randString()
	}
	(*o).ReadComments = new(int)
	*(*o).ReadComments = randInt()
	(*o).Text = new(string)
	*(*o).Text = randString()
	(*o).TextWiki = new(string)
	*(*o).TextWiki = randString()
	(*o).Title = randString()
	(*o).ViewUrl = randString()
}

func fillRandomlyNotesNoteComment(o *models.NotesNoteComment) {
	(*o).Date = randInt()
	(*o).Id = randInt()
	(*o).Message = randString()
	(*o).Nid = randInt()
	(*o).Oid = randInt()
	(*o).ReplyTo = new(int)
	*(*o).ReplyTo = randInt()
	(*o).Uid = randInt()
}

func fillRandomlyNotificationsFeedback(o *models.NotificationsFeedback) {
	(*o).Attachments = new([]models.WallWallpostAttachment)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).Attachments = make([]models.WallWallpostAttachment, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyWallWallpostAttachment(&(*(*o).Attachments)[i0])
	}
	(*o).FromId = new(int)
	*(*o).FromId = randInt()
	(*o).Geo = new(models.BaseGeo)
	fillRandomlyBaseGeo((*o).Geo)
	(*o).Id = new(int)
	*(*o).Id = randInt()
	(*o).Likes = new(models.BaseLikesInfo)
	fillRandomlyBaseLikesInfo((*o).Likes)
	(*o).Text = new(string)
	*(*o).Text = randString()
	(*o).ToId = new(int)
	*(*o).ToId = randInt()
}

func fillRandomlyNotificationsNotification(o *models.NotificationsNotification) {
	(*o).Date = new(int)
	*(*o).Date = randInt()
	(*o).Feedback = new(models.NotificationsFeedback)
	fillRandomlyNotificationsFeedback((*o).Feedback)
	(*o).Parent = new(models.NotificationsNotification)
	//fillRandomlyNotificationsNotification((*o).Parent)
	(*o).Reply = new(models.NotificationsReply)
	fillRandomlyNotificationsReply((*o).Reply)
	(*o).Type = new(string)
	*(*o).Type = randString()
}

func fillRandomlyNotificationsNotificationItem(o *models.NotificationsNotificationItem) {
	r := models.NotificationsNotification(*o)
	fillRandomlyNotificationsNotification(&r)
	*o = models.NotificationsNotificationItem(r)
}

func fillRandomlyNotificationsNotificationParent(o *models.NotificationsNotificationParent) {
	fillRandomlyWallWallpostToId(&(*o).WallWallpostToId)
	fillRandomlyPhotosPhoto(&(*o).PhotosPhoto)
	fillRandomlyBoardTopic(&(*o).BoardTopic)
	fillRandomlyVideoVideo(&(*o).VideoVideo)
	fillRandomlyNotificationsNotificationsComment(&(*o).NotificationsNotificationsComment)
}

func fillRandomlyNotificationsNotificationsComment(o *models.NotificationsNotificationsComment) {
	(*o).Date = new(int)
	*(*o).Date = randInt()
	(*o).Id = new(int)
	*(*o).Id = randInt()
	(*o).OwnerId = new(int)
	*(*o).OwnerId = randInt()
	(*o).Photo = new(models.PhotosPhoto)
	fillRandomlyPhotosPhoto((*o).Photo)
	(*o).Post = new(models.WallWallpost)
	fillRandomlyWallWallpost((*o).Post)
	(*o).Text = new(string)
	*(*o).Text = randString()
	(*o).Topic = new(models.BoardTopic)
	fillRandomlyBoardTopic((*o).Topic)
	(*o).Video = new(models.VideoVideo)
	fillRandomlyVideoVideo((*o).Video)
}

func fillRandomlyNotificationsReply(o *models.NotificationsReply) {
	(*o).Date = new(int)
	*(*o).Date = randInt()
	(*o).Id = new(int)
	*(*o).Id = randInt()
	(*o).Text = new(int)
	*(*o).Text = randInt()
}

func fillRandomlyNotificationsSendMessageErrorCode(o *models.NotificationsSendMessageErrorCode) {
	switch randIntn(4) {
	case 0:
		*o = 1
	case 1:
		*o = 2
	case 2:
		*o = 3
	case 3:
		*o = 4
	}
}

func fillRandomlyNotificationsSendMessageError(o *models.NotificationsSendMessageError) {
	(*o).Code = new(models.NotificationsSendMessageErrorCode)
	fillRandomlyNotificationsSendMessageErrorCode((*o).Code)
	(*o).Description = new(string)
	*(*o).Description = randString()
}

func fillRandomlyNotificationsSendMessageItem(o *models.NotificationsSendMessageItem) {
	(*o).Error = new(models.NotificationsSendMessageError)
	fillRandomlyNotificationsSendMessageError((*o).Error)
	(*o).Status = new(bool)
	*(*o).Status = randBool()
	(*o).UserId = new(int)
	*(*o).UserId = randInt()
}

func fillRandomlyOauthError(o *models.OauthError) {
	(*o).Error = randString()
	(*o).ErrorDescription = randString()
	(*o).RedirectUri = new(string)
	*(*o).RedirectUri = randString()
}

func fillRandomlyOrdersAmount(o *models.OrdersAmount) {
	(*o).Amounts = new([]models.OrdersAmountItem)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).Amounts = make([]models.OrdersAmountItem, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyOrdersAmountItem(&(*(*o).Amounts)[i0])
	}
	(*o).Currency = new(string)
	*(*o).Currency = randString()
}

func fillRandomlyOrdersAmountItem(o *models.OrdersAmountItem) {
	(*o).Amount = new(float64)
	*(*o).Amount = randFloat()
	(*o).Description = new(string)
	*(*o).Description = randString()
	(*o).Votes = new(string)
	*(*o).Votes = randString()
}

func fillRandomlyOrdersOrderStatus(o *models.OrdersOrderStatus) {
	switch randIntn(6) {
	case 0:
		*o = "created"
	case 1:
		*o = "charged"
	case 2:
		*o = "refunded"
	case 3:
		*o = "chargeable"
	case 4:
		*o = "cancelled"
	case 5:
		*o = "declined"
	}
}

func fillRandomlyOrdersOrder(o *models.OrdersOrder) {
	(*o).Amount = randString()
	(*o).AppOrderId = randString()
	(*o).CancelTransactionId = new(string)
	*(*o).CancelTransactionId = randString()
	(*o).Date = randString()
	(*o).Id = randString()
	(*o).Item = randString()
	(*o).ReceiverId = randString()
	fillRandomlyOrdersOrderStatus(&(*o).Status)
	(*o).TransactionId = new(string)
	*(*o).TransactionId = randString()
	(*o).UserId = randString()
}

func fillRandomlyOrdersSubscription(o *models.OrdersSubscription) {
	(*o).AppId = new(int)
	*(*o).AppId = randInt()
	(*o).ApplicationName = new(string)
	*(*o).ApplicationName = randString()
	(*o).CancelReason = new(string)
	*(*o).CancelReason = randString()
	(*o).CreateTime = randInt()
	(*o).ExpireTime = new(int)
	*(*o).ExpireTime = randInt()
	(*o).Id = randInt()
	(*o).ItemId = randString()
	(*o).NextBillTime = new(int)
	*(*o).NextBillTime = randInt()
	(*o).PendingCancel = new(bool)
	*(*o).PendingCancel = randBool()
	(*o).Period = randInt()
	(*o).PeriodStartTime = randInt()
	(*o).PhotoUrl = new(string)
	*(*o).PhotoUrl = randString()
	(*o).Price = randInt()
	(*o).Status = randString()
	(*o).TestMode = new(bool)
	*(*o).TestMode = randBool()
	(*o).Title = new(string)
	*(*o).Title = randString()
	(*o).TrialExpireTime = new(int)
	*(*o).TrialExpireTime = randInt()
	(*o).UpdateTime = randInt()
}

func fillRandomlyOwnerStateState(o *models.OwnerStateState) {
	switch randIntn(5) {
	case 0:
		*o = 1
	case 1:
		*o = 2
	case 2:
		*o = 3
	case 3:
		*o = 4
	case 4:
		*o = 5
	}
}

func fillRandomlyOwnerState(o *models.OwnerState) {
	(*o).Description = new(string)
	*(*o).Description = randString()
	(*o).State = new(models.OwnerStateState)
	fillRandomlyOwnerStateState((*o).State)
}

func fillRandomlyPagesPrivacySettings(o *models.PagesPrivacySettings) {
	switch randIntn(3) {
	case 0:
		*o = 0
	case 1:
		*o = 1
	case 2:
		*o = 2
	}
}

func fillRandomlyPagesWikipage(o *models.PagesWikipage) {
	(*o).CreatorId = new(int)
	*(*o).CreatorId = randInt()
	(*o).CreatorName = new(string)
	*(*o).CreatorName = randString()
	(*o).EditorId = new(int)
	*(*o).EditorId = randInt()
	(*o).EditorName = new(string)
	*(*o).EditorName = randString()
	(*o).GroupId = randInt()
	(*o).Id = randInt()
	(*o).Title = randString()
	(*o).Views = randInt()
	fillRandomlyPagesPrivacySettings(&(*o).WhoCanEdit)
	fillRandomlyPagesPrivacySettings(&(*o).WhoCanView)
}

func fillRandomlyPagesWikipageFull(o *models.PagesWikipageFull) {
	(*o).Created = randInt()
	(*o).CreatorId = new(int)
	*(*o).CreatorId = randInt()
	(*o).CurrentUserCanEdit = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).CurrentUserCanEdit)
	(*o).CurrentUserCanEditAccess = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).CurrentUserCanEditAccess)
	(*o).Edited = randInt()
	(*o).EditorId = new(int)
	*(*o).EditorId = randInt()
	(*o).GroupId = randInt()
	(*o).Html = new(string)
	*(*o).Html = randString()
	(*o).Id = randInt()
	(*o).OwnerId = new(int)
	*(*o).OwnerId = randInt()
	(*o).Parent = new(string)
	*(*o).Parent = randString()
	(*o).Parent2 = new(string)
	*(*o).Parent2 = randString()
	(*o).Source = new(string)
	*(*o).Source = randString()
	(*o).Title = randString()
	(*o).Url = new(string)
	*(*o).Url = randString()
	(*o).ViewUrl = randString()
	(*o).Views = randInt()
	fillRandomlyPagesPrivacySettings(&(*o).WhoCanEdit)
	fillRandomlyPagesPrivacySettings(&(*o).WhoCanView)
}

func fillRandomlyPagesWikipageHistory(o *models.PagesWikipageHistory) {
	(*o).Date = randInt()
	(*o).EditorId = randInt()
	(*o).EditorName = randString()
	(*o).Id = randInt()
	(*o).Length = randInt()
}

func fillRandomlyPhotosImage(o *models.PhotosImage) {
	(*o).Height = new(int)
	*(*o).Height = randInt()
	(*o).Type = new(models.PhotosImageType)
	fillRandomlyPhotosImageType((*o).Type)
	(*o).Url = new(string)
	*(*o).Url = randString()
	(*o).Width = new(int)
	*(*o).Width = randInt()
}

func fillRandomlyPhotosImageType(o *models.PhotosImageType) {
	switch randIntn(11) {
	case 0:
		*o = "s"
	case 1:
		*o = "m"
	case 2:
		*o = "x"
	case 3:
		*o = "l"
	case 4:
		*o = "o"
	case 5:
		*o = "p"
	case 6:
		*o = "q"
	case 7:
		*o = "r"
	case 8:
		*o = "y"
	case 9:
		*o = "z"
	case 10:
		*o = "w"
	}
}

func fillRandomlyPhotosPhoto(o *models.PhotosPhoto) {
	(*o).AccessKey = new(string)
	*(*o).AccessKey = randString()
	(*o).AlbumId = randInt()
	(*o).CanComment = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).CanComment)
	(*o).Comments = new(models.BaseObjectCount)
	fillRandomlyBaseObjectCount((*o).Comments)
	(*o).Date = randInt()
	(*o).HasTags = randBool()
	(*o).Height = new(int)
	*(*o).Height = randInt()
	(*o).Id = randInt()
	(*o).Images = new([]models.PhotosImage)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).Images = make([]models.PhotosImage, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyPhotosImage(&(*(*o).Images)[i0])
	}
	(*o).Lat = new(float64)
	*(*o).Lat = randFloat()
	(*o).Likes = new(models.BaseLikes)
	fillRandomlyBaseLikes((*o).Likes)
	(*o).Long = new(float64)
	*(*o).Long = randFloat()
	(*o).OwnerId = randInt()
	(*o).Photo256 = new(string)
	*(*o).Photo256 = randString()
	(*o).Place = new(string)
	*(*o).Place = randString()
	(*o).PostId = new(int)
	*(*o).PostId = randInt()
	(*o).Reposts = new(models.BaseRepostsInfo)
	fillRandomlyBaseRepostsInfo((*o).Reposts)
	(*o).Sizes = new([]models.PhotosPhotoSizes)
	l0 = randIntn(maxArrayLength + 1)
	*(*o).Sizes = make([]models.PhotosPhotoSizes, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyPhotosPhotoSizes(&(*(*o).Sizes)[i0])
	}
	(*o).Tags = new(models.BaseObjectCount)
	fillRandomlyBaseObjectCount((*o).Tags)
	(*o).Text = new(string)
	*(*o).Text = randString()
	(*o).UserId = new(int)
	*(*o).UserId = randInt()
	(*o).Width = new(int)
	*(*o).Width = randInt()
}

func fillRandomlyPhotosPhotoAlbum(o *models.PhotosPhotoAlbum) {
	(*o).Created = randInt()
	(*o).Description = new(string)
	*(*o).Description = randString()
	(*o).Id = randInt()
	(*o).OwnerId = randInt()
	(*o).Size = randInt()
	(*o).Thumb = new(models.PhotosPhoto)
	fillRandomlyPhotosPhoto((*o).Thumb)
	(*o).Title = randString()
	(*o).Updated = randInt()
}

func fillRandomlyPhotosPhotoAlbumFull(o *models.PhotosPhotoAlbumFull) {
	(*o).CanDelete = new(bool)
	*(*o).CanDelete = randBool()
	(*o).CanUpload = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).CanUpload)
	(*o).CommentsDisabled = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).CommentsDisabled)
	(*o).Created = randInt()
	(*o).Description = new(string)
	*(*o).Description = randString()
	(*o).Id = randInt()
	(*o).OwnerId = randInt()
	(*o).Size = randInt()
	(*o).Sizes = new([]models.PhotosPhotoSizes)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).Sizes = make([]models.PhotosPhotoSizes, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyPhotosPhotoSizes(&(*(*o).Sizes)[i0])
	}
	(*o).ThumbId = new(int)
	*(*o).ThumbId = randInt()
	(*o).ThumbIsLast = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).ThumbIsLast)
	(*o).ThumbSrc = new(string)
	*(*o).ThumbSrc = randString()
	(*o).Title = randString()
	(*o).Updated = randInt()
	(*o).UploadByAdminsOnly = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).UploadByAdminsOnly)
}

func fillRandomlyPhotosPhotoFalseable(o *models.PhotosPhotoFalseable) {
	var rawJSON []byte
	switch randIntn(2) {
	case 0:
		r := randBool()
		rawJSON, _ = json.Marshal(r)
	case 1:
		r := randString()
		rawJSON, _ = json.Marshal(r)
	}
	o.Raws = rawJSON
}

func fillRandomlyPhotosPhotoFullXtrRealOffset(o *models.PhotosPhotoFullXtrRealOffset) {
	(*o).AccessKey = new(string)
	*(*o).AccessKey = randString()
	(*o).AlbumId = randInt()
	(*o).CanComment = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).CanComment)
	(*o).Comments = new(models.BaseObjectCount)
	fillRandomlyBaseObjectCount((*o).Comments)
	(*o).Date = randInt()
	(*o).Height = new(int)
	*(*o).Height = randInt()
	(*o).Hidden = new(models.BasePropertyExists)
	fillRandomlyBasePropertyExists((*o).Hidden)
	(*o).Id = randInt()
	(*o).Lat = new(float64)
	*(*o).Lat = randFloat()
	(*o).Likes = new(models.BaseLikes)
	fillRandomlyBaseLikes((*o).Likes)
	(*o).Long = new(float64)
	*(*o).Long = randFloat()
	(*o).OwnerId = randInt()
	(*o).Photo1280 = new(string)
	*(*o).Photo1280 = randString()
	(*o).Photo130 = new(string)
	*(*o).Photo130 = randString()
	(*o).Photo2560 = new(string)
	*(*o).Photo2560 = randString()
	(*o).Photo604 = new(string)
	*(*o).Photo604 = randString()
	(*o).Photo75 = new(string)
	*(*o).Photo75 = randString()
	(*o).Photo807 = new(string)
	*(*o).Photo807 = randString()
	(*o).PostId = new(int)
	*(*o).PostId = randInt()
	(*o).RealOffset = new(int)
	*(*o).RealOffset = randInt()
	(*o).Reposts = new(models.BaseObjectCount)
	fillRandomlyBaseObjectCount((*o).Reposts)
	(*o).Sizes = new([]models.PhotosPhotoSizes)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).Sizes = make([]models.PhotosPhotoSizes, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyPhotosPhotoSizes(&(*(*o).Sizes)[i0])
	}
	(*o).Tags = new(models.BaseObjectCount)
	fillRandomlyBaseObjectCount((*o).Tags)
	(*o).Text = new(string)
	*(*o).Text = randString()
	(*o).UserId = new(int)
	*(*o).UserId = randInt()
	(*o).Width = new(int)
	*(*o).Width = randInt()
}

func fillRandomlyPhotosPhotoSizes(o *models.PhotosPhotoSizes) {
	(*o).Height = randInt()
	(*o).Src = new(string)
	*(*o).Src = randString()
	fillRandomlyPhotosPhotoSizesType(&(*o).Type)
	(*o).Url = randString()
	(*o).Width = randInt()
}

func fillRandomlyPhotosPhotoSizesType(o *models.PhotosPhotoSizesType) {
	switch randIntn(25) {
	case 0:
		*o = "s"
	case 1:
		*o = "m"
	case 2:
		*o = "x"
	case 3:
		*o = "o"
	case 4:
		*o = "p"
	case 5:
		*o = "q"
	case 6:
		*o = "r"
	case 7:
		*o = "k"
	case 8:
		*o = "l"
	case 9:
		*o = "y"
	case 10:
		*o = "z"
	case 11:
		*o = "c"
	case 12:
		*o = "w"
	case 13:
		*o = "a"
	case 14:
		*o = "b"
	case 15:
		*o = "e"
	case 16:
		*o = "i"
	case 17:
		*o = "d"
	case 18:
		*o = "j"
	case 19:
		*o = "temp"
	case 20:
		*o = "h"
	case 21:
		*o = "g"
	case 22:
		*o = "n"
	case 23:
		*o = "f"
	case 24:
		*o = "max"
	}
}

func fillRandomlyPhotosPhotoTag(o *models.PhotosPhotoTag) {
	(*o).Date = randInt()
	(*o).Description = new(string)
	*(*o).Description = randString()
	(*o).Id = randInt()
	(*o).PlacerId = randInt()
	(*o).TaggedName = randString()
	(*o).UserId = randInt()
	fillRandomlyBaseBoolInt(&(*o).Viewed)
	(*o).X = randFloat()
	(*o).X2 = randFloat()
	(*o).Y = randFloat()
	(*o).Y2 = randFloat()
}

func fillRandomlyPhotosPhotoUpload(o *models.PhotosPhotoUpload) {
	(*o).AlbumId = randInt()
	(*o).FallbackUploadUrl = new(string)
	*(*o).FallbackUploadUrl = randString()
	(*o).GroupId = new(int)
	*(*o).GroupId = randInt()
	(*o).UploadUrl = randString()
	(*o).UserId = randInt()
}

func fillRandomlyPhotosPhotoXtrRealOffset(o *models.PhotosPhotoXtrRealOffset) {
	(*o).AccessKey = new(string)
	*(*o).AccessKey = randString()
	(*o).AlbumId = randInt()
	(*o).Date = randInt()
	(*o).Height = new(int)
	*(*o).Height = randInt()
	(*o).Hidden = new(models.BasePropertyExists)
	fillRandomlyBasePropertyExists((*o).Hidden)
	(*o).Id = randInt()
	(*o).Lat = new(float64)
	*(*o).Lat = randFloat()
	(*o).Long = new(float64)
	*(*o).Long = randFloat()
	(*o).OwnerId = randInt()
	(*o).Photo1280 = new(string)
	*(*o).Photo1280 = randString()
	(*o).Photo130 = new(string)
	*(*o).Photo130 = randString()
	(*o).Photo2560 = new(string)
	*(*o).Photo2560 = randString()
	(*o).Photo604 = new(string)
	*(*o).Photo604 = randString()
	(*o).Photo75 = new(string)
	*(*o).Photo75 = randString()
	(*o).Photo807 = new(string)
	*(*o).Photo807 = randString()
	(*o).PostId = new(int)
	*(*o).PostId = randInt()
	(*o).RealOffset = new(int)
	*(*o).RealOffset = randInt()
	(*o).Sizes = new([]models.PhotosPhotoSizes)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).Sizes = make([]models.PhotosPhotoSizes, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyPhotosPhotoSizes(&(*(*o).Sizes)[i0])
	}
	(*o).Text = new(string)
	*(*o).Text = randString()
	(*o).UserId = new(int)
	*(*o).UserId = randInt()
	(*o).Width = new(int)
	*(*o).Width = randInt()
}

func fillRandomlyPhotosPhotoXtrTagInfo(o *models.PhotosPhotoXtrTagInfo) {
	(*o).AccessKey = new(string)
	*(*o).AccessKey = randString()
	(*o).AlbumId = randInt()
	(*o).Date = randInt()
	(*o).Height = new(int)
	*(*o).Height = randInt()
	(*o).Id = randInt()
	(*o).Lat = new(float64)
	*(*o).Lat = randFloat()
	(*o).Long = new(float64)
	*(*o).Long = randFloat()
	(*o).OwnerId = randInt()
	(*o).Photo1280 = new(string)
	*(*o).Photo1280 = randString()
	(*o).Photo130 = new(string)
	*(*o).Photo130 = randString()
	(*o).Photo2560 = new(string)
	*(*o).Photo2560 = randString()
	(*o).Photo604 = new(string)
	*(*o).Photo604 = randString()
	(*o).Photo75 = new(string)
	*(*o).Photo75 = randString()
	(*o).Photo807 = new(string)
	*(*o).Photo807 = randString()
	(*o).PlacerId = new(int)
	*(*o).PlacerId = randInt()
	(*o).PostId = new(int)
	*(*o).PostId = randInt()
	(*o).Sizes = new([]models.PhotosPhotoSizes)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).Sizes = make([]models.PhotosPhotoSizes, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyPhotosPhotoSizes(&(*(*o).Sizes)[i0])
	}
	(*o).TagCreated = new(int)
	*(*o).TagCreated = randInt()
	(*o).TagId = new(int)
	*(*o).TagId = randInt()
	(*o).Text = new(string)
	*(*o).Text = randString()
	(*o).UserId = new(int)
	*(*o).UserId = randInt()
	(*o).Width = new(int)
	*(*o).Width = randInt()
}

func fillRandomlyPhotosTagsSuggestionItem(o *models.PhotosTagsSuggestionItem) {
	(*o).Buttons = new([]models.PhotosTagsSuggestionItemButton)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).Buttons = make([]models.PhotosTagsSuggestionItemButton, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyPhotosTagsSuggestionItemButton(&(*(*o).Buttons)[i0])
	}
	(*o).Caption = new(string)
	*(*o).Caption = randString()
	(*o).Photo = new(models.PhotosPhoto)
	fillRandomlyPhotosPhoto((*o).Photo)
	(*o).Tags = new([]models.PhotosPhotoTag)
	l0 = randIntn(maxArrayLength + 1)
	*(*o).Tags = make([]models.PhotosPhotoTag, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyPhotosPhotoTag(&(*(*o).Tags)[i0])
	}
	(*o).Title = new(string)
	*(*o).Title = randString()
	(*o).TrackCode = new(string)
	*(*o).TrackCode = randString()
	(*o).Type = new(string)
	*(*o).Type = randString()
}

func fillRandomlyPhotosTagsSuggestionItemButtonAction(o *models.PhotosTagsSuggestionItemButtonAction) {
	switch randIntn(3) {
	case 0:
		*o = "confirm"
	case 1:
		*o = "decline"
	case 2:
		*o = "show_tags"
	}
}

func fillRandomlyPhotosTagsSuggestionItemButtonStyle(o *models.PhotosTagsSuggestionItemButtonStyle) {
	switch randIntn(2) {
	case 0:
		*o = "primary"
	case 1:
		*o = "secondary"
	}
}

func fillRandomlyPhotosTagsSuggestionItemButton(o *models.PhotosTagsSuggestionItemButton) {
	(*o).Action = new(models.PhotosTagsSuggestionItemButtonAction)
	fillRandomlyPhotosTagsSuggestionItemButtonAction((*o).Action)
	(*o).Style = new(models.PhotosTagsSuggestionItemButtonStyle)
	fillRandomlyPhotosTagsSuggestionItemButtonStyle((*o).Style)
	(*o).Title = new(string)
	*(*o).Title = randString()
}

func fillRandomlyPodcastCover(o *models.PodcastCover) {
	(*o).Sizes = new([]models.PhotosPhotoSizes)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).Sizes = make([]models.PhotosPhotoSizes, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyPhotosPhotoSizes(&(*(*o).Sizes)[i0])
	}
}

func fillRandomlyPodcastExternalData(o *models.PodcastExternalData) {
	(*o).Cover = new(models.PodcastCover)
	fillRandomlyPodcastCover((*o).Cover)
	(*o).OwnerName = new(string)
	*(*o).OwnerName = randString()
	(*o).OwnerUrl = new(string)
	*(*o).OwnerUrl = randString()
	(*o).Title = new(string)
	*(*o).Title = randString()
	(*o).Url = new(string)
	*(*o).Url = randString()
}

func fillRandomlyPollsAnswer(o *models.PollsAnswer) {
	(*o).Id = randInt()
	(*o).Rate = randFloat()
	(*o).Text = randString()
	(*o).Votes = randInt()
}

func fillRandomlyPollsBackgroundType(o *models.PollsBackgroundType) {
	switch randIntn(2) {
	case 0:
		*o = "gradient"
	case 1:
		*o = "tile"
	}
}

func fillRandomlyPollsBackground(o *models.PollsBackground) {
	(*o).Angle = new(int)
	*(*o).Angle = randInt()
	(*o).Color = new(string)
	*(*o).Color = randString()
	(*o).Height = new(int)
	*(*o).Height = randInt()
	(*o).Id = new(int)
	*(*o).Id = randInt()
	(*o).Images = new([]models.BaseImage)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).Images = make([]models.BaseImage, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyBaseImage(&(*(*o).Images)[i0])
	}
	(*o).Name = new(string)
	*(*o).Name = randString()
	(*o).Points = new([]models.BaseGradientPoint)
	l0 = randIntn(maxArrayLength + 1)
	*(*o).Points = make([]models.BaseGradientPoint, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyBaseGradientPoint(&(*(*o).Points)[i0])
	}
	(*o).Type = new(models.PollsBackgroundType)
	fillRandomlyPollsBackgroundType((*o).Type)
	(*o).Width = new(int)
	*(*o).Width = randInt()
}

func fillRandomlyPollsFriend(o *models.PollsFriend) {
	(*o).Id = randInt()
}

func fillRandomlyPollsPoll(o *models.PollsPoll) {
	(*o).Anonymous = new(models.PollsPollAnonymous)
	fillRandomlyPollsPollAnonymous((*o).Anonymous)
	(*o).AnswerId = new(int)
	*(*o).AnswerId = randInt()
	(*o).AnswerIds = new([]int)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).AnswerIds = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*o).AnswerIds)[i0] = randInt()
	}
	l0 = randIntn(maxArrayLength + 1)
	(*o).Answers = make([]models.PollsAnswer, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyPollsAnswer(&((*o).Answers)[i0])
	}
	(*o).AuthorId = new(int)
	*(*o).AuthorId = randInt()
	(*o).Background = new(models.PollsBackground)
	fillRandomlyPollsBackground((*o).Background)
	(*o).CanEdit = randBool()
	(*o).CanReport = randBool()
	(*o).CanShare = randBool()
	(*o).CanVote = randBool()
	(*o).Closed = randBool()
	(*o).Created = randInt()
	(*o).DisableUnvote = randBool()
	(*o).EmbedHash = new(string)
	*(*o).EmbedHash = randString()
	(*o).EndDate = randInt()
	(*o).Friends = new([]models.PollsFriend)
	l0 = randIntn(maxArrayLength + 1)
	*(*o).Friends = make([]models.PollsFriend, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyPollsFriend(&(*(*o).Friends)[i0])
	}
	(*o).Id = randInt()
	(*o).IsBoard = randBool()
	(*o).Multiple = randBool()
	(*o).OwnerId = randInt()
	(*o).Photo = new(models.PollsBackground)
	fillRandomlyPollsBackground((*o).Photo)
	(*o).Question = randString()
	(*o).Votes = randInt()
}

func fillRandomlyPollsPollAnonymous(o *models.PollsPollAnonymous) {
	*o = models.PollsPollAnonymous(randBool())
}

func fillRandomlyPollsVoters(o *models.PollsVoters) {
	(*o).AnswerId = new(int)
	*(*o).AnswerId = randInt()
	(*o).Users = new(models.PollsVotersUsers)
	fillRandomlyPollsVotersUsers((*o).Users)
}

func fillRandomlyPollsVotersUsers(o *models.PollsVotersUsers) {
	(*o).Count = new(int)
	*(*o).Count = randInt()
	(*o).Items = new([]int)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).Items = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*o).Items)[i0] = randInt()
	}
}

func fillRandomlyPrettyCardsPrettyCardButton(o *models.PrettyCardsPrettyCardButton) {
	var rawJSON []byte
	switch randIntn(2) {
	case 0:
		r := new(models.BaseLinkButton)
		fillRandomlyBaseLinkButton(r)
		rawJSON, _ = json.Marshal(*r)
	case 1:
		r := randString()
		rawJSON, _ = json.Marshal(r)
	}
	o.Raws = rawJSON
}

func fillRandomlyPrettyCardsPrettyCard(o *models.PrettyCardsPrettyCard) {
	(*o).Button = new(models.PrettyCardsPrettyCardButton)
	fillRandomlyPrettyCardsPrettyCardButton((*o).Button)
	(*o).ButtonText = new(string)
	*(*o).ButtonText = randString()
	(*o).CardId = randString()
	(*o).Images = new([]models.BaseImage)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).Images = make([]models.BaseImage, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyBaseImage(&(*(*o).Images)[i0])
	}
	(*o).LinkUrl = randString()
	(*o).Photo = randString()
	(*o).Price = new(string)
	*(*o).Price = randString()
	(*o).PriceOld = new(string)
	*(*o).PriceOld = randString()
	(*o).Title = randString()
}

func fillRandomlyPrettyCardsPrettyCardOrError(o *models.PrettyCardsPrettyCardOrError) {
	var rawJSON []byte
	switch randIntn(2) {
	case 0:
		r := new(models.PrettyCardsPrettyCard)
		fillRandomlyPrettyCardsPrettyCard(r)
		rawJSON, _ = json.Marshal(*r)
	case 1:
		r := new(models.BaseError)
		fillRandomlyBaseError(r)
		rawJSON, _ = json.Marshal(*r)
	}
	o.Raws = rawJSON
}

func fillRandomlySearchHint(o *models.SearchHint) {
	(*o).App = new(models.AppsApp)
	fillRandomlyAppsApp((*o).App)
	(*o).Description = randString()
	(*o).Global = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).Global)
	(*o).Group = new(models.GroupsGroup)
	fillRandomlyGroupsGroup((*o).Group)
	(*o).Link = new(models.BaseLink)
	fillRandomlyBaseLink((*o).Link)
	(*o).Profile = new(models.UsersUserMin)
	fillRandomlyUsersUserMin((*o).Profile)
	(*o).Section = new(models.SearchHintSection)
	fillRandomlySearchHintSection((*o).Section)
	fillRandomlySearchHintType(&(*o).Type)
}

func fillRandomlySearchHintSection(o *models.SearchHintSection) {
	switch randIntn(8) {
	case 0:
		*o = "groups"
	case 1:
		*o = "events"
	case 2:
		*o = "publics"
	case 3:
		*o = "correspondents"
	case 4:
		*o = "people"
	case 5:
		*o = "friends"
	case 6:
		*o = "mutual_friends"
	case 7:
		*o = "promo"
	}
}

func fillRandomlySearchHintType(o *models.SearchHintType) {
	switch randIntn(6) {
	case 0:
		*o = "group"
	case 1:
		*o = "profile"
	case 2:
		*o = "vk_app"
	case 3:
		*o = "app"
	case 4:
		*o = "html5_game"
	case 5:
		*o = "link"
	}
}

func fillRandomlySecureGiveEventStickerItem(o *models.SecureGiveEventStickerItem) {
	(*o).Status = new(string)
	*(*o).Status = randString()
	(*o).UserId = new(int)
	*(*o).UserId = randInt()
}

func fillRandomlySecureLevel(o *models.SecureLevel) {
	(*o).Level = new(int)
	*(*o).Level = randInt()
	(*o).Uid = new(int)
	*(*o).Uid = randInt()
}

func fillRandomlySecureSetCounterItem(o *models.SecureSetCounterItem) {
	(*o).Id = randInt()
	fillRandomlyBaseBoolInt(&(*o).Result)
}

func fillRandomlySecureSmsNotification(o *models.SecureSmsNotification) {
	(*o).AppId = new(string)
	*(*o).AppId = randString()
	(*o).Date = new(string)
	*(*o).Date = randString()
	(*o).Id = new(string)
	*(*o).Id = randString()
	(*o).Message = new(string)
	*(*o).Message = randString()
	(*o).UserId = new(string)
	*(*o).UserId = randString()
}

func fillRandomlySecureTokenChecked(o *models.SecureTokenChecked) {
	(*o).Date = new(int)
	*(*o).Date = randInt()
	(*o).Expire = new(int)
	*(*o).Expire = randInt()
	(*o).Success = new(int)
	*(*o).Success = randInt()
	(*o).UserId = new(int)
	*(*o).UserId = randInt()
}

func fillRandomlySecureTransaction(o *models.SecureTransaction) {
	(*o).Date = new(int)
	*(*o).Date = randInt()
	(*o).Id = new(int)
	*(*o).Id = randInt()
	(*o).UidFrom = new(int)
	*(*o).UidFrom = randInt()
	(*o).UidTo = new(int)
	*(*o).UidTo = randInt()
	(*o).Votes = new(int)
	*(*o).Votes = randInt()
}

func fillRandomlyStatsActivity(o *models.StatsActivity) {
	(*o).Comments = new(int)
	*(*o).Comments = randInt()
	(*o).Copies = new(int)
	*(*o).Copies = randInt()
	(*o).Hidden = new(int)
	*(*o).Hidden = randInt()
	(*o).Likes = new(int)
	*(*o).Likes = randInt()
	(*o).Subscribed = new(int)
	*(*o).Subscribed = randInt()
	(*o).Unsubscribed = new(int)
	*(*o).Unsubscribed = randInt()
}

func fillRandomlyStatsCity(o *models.StatsCity) {
	(*o).Count = new(int)
	*(*o).Count = randInt()
	(*o).Name = new(string)
	*(*o).Name = randString()
	(*o).Value = new(int)
	*(*o).Value = randInt()
}

func fillRandomlyStatsCountry(o *models.StatsCountry) {
	(*o).Code = new(string)
	*(*o).Code = randString()
	(*o).Count = new(int)
	*(*o).Count = randInt()
	(*o).Name = new(string)
	*(*o).Name = randString()
	(*o).Value = new(int)
	*(*o).Value = randInt()
}

func fillRandomlyStatsPeriod(o *models.StatsPeriod) {
	(*o).Activity = new(models.StatsActivity)
	fillRandomlyStatsActivity((*o).Activity)
	(*o).PeriodFrom = new(int)
	*(*o).PeriodFrom = randInt()
	(*o).PeriodTo = new(int)
	*(*o).PeriodTo = randInt()
	(*o).Reach = new(models.StatsReach)
	fillRandomlyStatsReach((*o).Reach)
	(*o).Visitors = new(models.StatsViews)
	fillRandomlyStatsViews((*o).Visitors)
}

func fillRandomlyStatsReach(o *models.StatsReach) {
	(*o).Age = new([]models.StatsSexAge)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).Age = make([]models.StatsSexAge, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyStatsSexAge(&(*(*o).Age)[i0])
	}
	(*o).Cities = new([]models.StatsCity)
	l0 = randIntn(maxArrayLength + 1)
	*(*o).Cities = make([]models.StatsCity, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyStatsCity(&(*(*o).Cities)[i0])
	}
	(*o).Countries = new([]models.StatsCountry)
	l0 = randIntn(maxArrayLength + 1)
	*(*o).Countries = make([]models.StatsCountry, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyStatsCountry(&(*(*o).Countries)[i0])
	}
	(*o).MobileReach = new(int)
	*(*o).MobileReach = randInt()
	(*o).Reach = new(int)
	*(*o).Reach = randInt()
	(*o).ReachSubscribers = new(int)
	*(*o).ReachSubscribers = randInt()
	(*o).Sex = new([]models.StatsSexAge)
	l0 = randIntn(maxArrayLength + 1)
	*(*o).Sex = make([]models.StatsSexAge, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyStatsSexAge(&(*(*o).Sex)[i0])
	}
	(*o).SexAge = new([]models.StatsSexAge)
	l0 = randIntn(maxArrayLength + 1)
	*(*o).SexAge = make([]models.StatsSexAge, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyStatsSexAge(&(*(*o).SexAge)[i0])
	}
}

func fillRandomlyStatsSexAge(o *models.StatsSexAge) {
	(*o).Count = new(int)
	*(*o).Count = randInt()
	(*o).CountSubscribers = new(int)
	*(*o).CountSubscribers = randInt()
	(*o).Reach = new(int)
	*(*o).Reach = randInt()
	(*o).ReachSubscribers = new(int)
	*(*o).ReachSubscribers = randInt()
	(*o).Value = randString()
}

func fillRandomlyStatsViews(o *models.StatsViews) {
	(*o).Age = new([]models.StatsSexAge)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).Age = make([]models.StatsSexAge, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyStatsSexAge(&(*(*o).Age)[i0])
	}
	(*o).Cities = new([]models.StatsCity)
	l0 = randIntn(maxArrayLength + 1)
	*(*o).Cities = make([]models.StatsCity, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyStatsCity(&(*(*o).Cities)[i0])
	}
	(*o).Countries = new([]models.StatsCountry)
	l0 = randIntn(maxArrayLength + 1)
	*(*o).Countries = make([]models.StatsCountry, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyStatsCountry(&(*(*o).Countries)[i0])
	}
	(*o).MobileViews = new(int)
	*(*o).MobileViews = randInt()
	(*o).Sex = new([]models.StatsSexAge)
	l0 = randIntn(maxArrayLength + 1)
	*(*o).Sex = make([]models.StatsSexAge, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyStatsSexAge(&(*(*o).Sex)[i0])
	}
	(*o).SexAge = new([]models.StatsSexAge)
	l0 = randIntn(maxArrayLength + 1)
	*(*o).SexAge = make([]models.StatsSexAge, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyStatsSexAge(&(*(*o).SexAge)[i0])
	}
	(*o).Views = new(int)
	*(*o).Views = randInt()
	(*o).Visitors = new(int)
	*(*o).Visitors = randInt()
}

func fillRandomlyStatsWallpostStat(o *models.StatsWallpostStat) {
	(*o).Hide = new(int)
	*(*o).Hide = randInt()
	(*o).JoinGroup = new(int)
	*(*o).JoinGroup = randInt()
	(*o).Links = new(int)
	*(*o).Links = randInt()
	(*o).PostId = new(int)
	*(*o).PostId = randInt()
	(*o).ReachAds = new(int)
	*(*o).ReachAds = randInt()
	(*o).ReachSubscribers = new(int)
	*(*o).ReachSubscribers = randInt()
	(*o).ReachSubscribersCount = new(int)
	*(*o).ReachSubscribersCount = randInt()
	(*o).ReachTotal = new(int)
	*(*o).ReachTotal = randInt()
	(*o).ReachTotalCount = new(int)
	*(*o).ReachTotalCount = randInt()
	(*o).ReachViral = new(int)
	*(*o).ReachViral = randInt()
	(*o).Report = new(int)
	*(*o).Report = randInt()
	(*o).SexAge = new([]models.StatsSexAge)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).SexAge = make([]models.StatsSexAge, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyStatsSexAge(&(*(*o).SexAge)[i0])
	}
	(*o).ToGroup = new(int)
	*(*o).ToGroup = randInt()
	(*o).Unsubscribe = new(int)
	*(*o).Unsubscribe = randInt()
}

func fillRandomlyStatusStatus(o *models.StatusStatus) {
	(*o).Audio = new(models.AudioAudio)
	fillRandomlyAudioAudio((*o).Audio)
	(*o).Text = randString()
}

func fillRandomlyStickersImageSet(o *models.StickersImageSet) {
	(*o).BaseUrl = randString()
	(*o).Version = new(int)
	*(*o).Version = randInt()
}

func fillRandomlyStorageValue(o *models.StorageValue) {
	(*o).Key = randString()
	(*o).Value = randString()
}

func fillRandomlyStoreProductType(o *models.StoreProductType) {
	switch randIntn(1) {
	case 0:
		*o = "stickers"
	}
}

func fillRandomlyStoreProduct(o *models.StoreProduct) {
	(*o).Active = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).Active)
	(*o).HasAnimation = new(bool)
	*(*o).HasAnimation = randBool()
	(*o).Icon = new(models.StoreProductIcon)
	fillRandomlyStoreProductIcon((*o).Icon)
	(*o).Id = randInt()
	(*o).IsNew = new(bool)
	*(*o).IsNew = randBool()
	(*o).PaymentRegion = new(string)
	*(*o).PaymentRegion = randString()
	(*o).Previews = new([]models.BaseImage)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).Previews = make([]models.BaseImage, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyBaseImage(&(*(*o).Previews)[i0])
	}
	(*o).Promoted = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).Promoted)
	(*o).PurchaseDate = new(int)
	*(*o).PurchaseDate = randInt()
	(*o).Purchased = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).Purchased)
	(*o).Stickers = new(models.BaseStickersList)
	fillRandomlyBaseStickersList((*o).Stickers)
	(*o).StyleStickerIds = new([]int)
	l0 = randIntn(maxArrayLength + 1)
	*(*o).StyleStickerIds = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*o).StyleStickerIds)[i0] = randInt()
	}
	(*o).Subtitle = new(string)
	*(*o).Subtitle = randString()
	(*o).Title = new(string)
	*(*o).Title = randString()
	fillRandomlyStoreProductType(&(*o).Type)
}

func fillRandomlyStoreProductIcon(o *models.StoreProductIcon) {
	l0 := randIntn(maxArrayLength + 1)
	*o = make([]models.BaseImage, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyBaseImage(&(*o)[i0])
	}
}

func fillRandomlyStoreStickersKeyword(o *models.StoreStickersKeyword) {
	(*o).PromotedStickers = new(models.StoreStickersKeywordStickers)
	fillRandomlyStoreStickersKeywordStickers((*o).PromotedStickers)
	(*o).Stickers = new([]models.StoreStickersKeywordSticker)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).Stickers = make([]models.StoreStickersKeywordSticker, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyStoreStickersKeywordSticker(&(*(*o).Stickers)[i0])
	}
	(*o).UserStickers = new(models.StoreStickersKeywordStickers)
	fillRandomlyStoreStickersKeywordStickers((*o).UserStickers)
	l0 = randIntn(maxArrayLength + 1)
	(*o).Words = make([]string, l0)
	for i0 := 0; i0 < l0; i0++ {
		((*o).Words)[i0] = randString()
	}
}

func fillRandomlyStoreStickersKeywordSticker(o *models.StoreStickersKeywordSticker) {
	(*o).PackId = randInt()
	(*o).StickerId = randInt()
}

func fillRandomlyStoreStickersKeywordStickers(o *models.StoreStickersKeywordStickers) {
	r := models.BaseStickersList(*o)
	fillRandomlyBaseStickersList(&r)
	*o = models.StoreStickersKeywordStickers(r)
}

func fillRandomlyStoriesClickableArea(o *models.StoriesClickableArea) {
	(*o).X = randInt()
	(*o).Y = randInt()
}

func fillRandomlyStoriesClickableStickerStyle(o *models.StoriesClickableStickerStyle) {
	switch randIntn(10) {
	case 0:
		*o = "transparent"
	case 1:
		*o = "blue_gradient"
	case 2:
		*o = "red_gradient"
	case 3:
		*o = "underline"
	case 4:
		*o = "blue"
	case 5:
		*o = "green"
	case 6:
		*o = "white"
	case 7:
		*o = "question_reply"
	case 8:
		*o = "light"
	case 9:
		*o = "impressive"
	}
}

func fillRandomlyStoriesClickableStickerSubtype(o *models.StoriesClickableStickerSubtype) {
	switch randIntn(2) {
	case 0:
		*o = "market_item"
	case 1:
		*o = "aliexpress_product"
	}
}

func fillRandomlyStoriesClickableStickerType(o *models.StoriesClickableStickerType) {
	switch randIntn(14) {
	case 0:
		*o = "hashtag"
	case 1:
		*o = "mention"
	case 2:
		*o = "link"
	case 3:
		*o = "question"
	case 4:
		*o = "place"
	case 5:
		*o = "market_item"
	case 6:
		*o = "music"
	case 7:
		*o = "story_reply"
	case 8:
		*o = "owner"
	case 9:
		*o = "post"
	case 10:
		*o = "poll"
	case 11:
		*o = "sticker"
	case 12:
		*o = "app"
	case 13:
		*o = "situational_theme"
	}
}

func fillRandomlyStoriesClickableSticker(o *models.StoriesClickableSticker) {
	(*o).App = new(models.AppsAppMin)
	fillRandomlyAppsAppMin((*o).App)
	(*o).AppContext = new(string)
	*(*o).AppContext = randString()
	(*o).Audio = new(models.AudioAudio)
	fillRandomlyAudioAudio((*o).Audio)
	(*o).AudioStartTime = new(int)
	*(*o).AudioStartTime = randInt()
	l0 := randIntn(maxArrayLength + 1)
	(*o).ClickableArea = make([]models.StoriesClickableArea, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyStoriesClickableArea(&((*o).ClickableArea)[i0])
	}
	(*o).Color = new(string)
	*(*o).Color = randString()
	(*o).HasNewInteractions = new(bool)
	*(*o).HasNewInteractions = randBool()
	(*o).Hashtag = new(string)
	*(*o).Hashtag = randString()
	(*o).Id = randInt()
	(*o).IsBroadcastNotifyAllowed = new(bool)
	*(*o).IsBroadcastNotifyAllowed = randBool()
	(*o).LinkObject = new(models.BaseLink)
	fillRandomlyBaseLink((*o).LinkObject)
	(*o).MarketItem = new(models.MarketMarketItem)
	fillRandomlyMarketMarketItem((*o).MarketItem)
	(*o).Mention = new(string)
	*(*o).Mention = randString()
	(*o).OwnerId = new(int)
	*(*o).OwnerId = randInt()
	(*o).PlaceId = new(int)
	*(*o).PlaceId = randInt()
	(*o).Poll = new(models.PollsPoll)
	fillRandomlyPollsPoll((*o).Poll)
	(*o).PostId = new(int)
	*(*o).PostId = randInt()
	(*o).PostOwnerId = new(int)
	*(*o).PostOwnerId = randInt()
	(*o).Question = new(string)
	*(*o).Question = randString()
	(*o).QuestionButton = new(string)
	*(*o).QuestionButton = randString()
	(*o).SituationalAppUrl = new(string)
	*(*o).SituationalAppUrl = randString()
	(*o).SituationalThemeId = new(int)
	*(*o).SituationalThemeId = randInt()
	(*o).StickerId = new(int)
	*(*o).StickerId = randInt()
	(*o).StickerPackId = new(int)
	*(*o).StickerPackId = randInt()
	(*o).StoryId = new(int)
	*(*o).StoryId = randInt()
	(*o).Style = new(models.StoriesClickableStickerStyle)
	fillRandomlyStoriesClickableStickerStyle((*o).Style)
	(*o).Subtype = new(models.StoriesClickableStickerSubtype)
	fillRandomlyStoriesClickableStickerSubtype((*o).Subtype)
	(*o).TooltipText = new(string)
	*(*o).TooltipText = randString()
	fillRandomlyStoriesClickableStickerType(&(*o).Type)
}

func fillRandomlyStoriesClickableStickers(o *models.StoriesClickableStickers) {
	l0 := randIntn(maxArrayLength + 1)
	(*o).ClickableStickers = make([]models.StoriesClickableSticker, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyStoriesClickableSticker(&((*o).ClickableStickers)[i0])
	}
	(*o).OriginalHeight = randInt()
	(*o).OriginalWidth = randInt()
}

func fillRandomlyStoriesFeedItemType(o *models.StoriesFeedItemType) {
	switch randIntn(9) {
	case 0:
		*o = "promo_stories"
	case 1:
		*o = "stories"
	case 2:
		*o = "live_active"
	case 3:
		*o = "live_finished"
	case 4:
		*o = "community_grouped_stories"
	case 5:
		*o = "app_grouped_stories"
	case 6:
		*o = "birthday"
	case 7:
		*o = "discover"
	case 8:
		*o = "advices"
	}
}

func fillRandomlyStoriesFeedItem(o *models.StoriesFeedItem) {
	(*o).App = new(models.AppsAppMin)
	fillRandomlyAppsAppMin((*o).App)
	(*o).BirthdayUserId = new(int)
	*(*o).BirthdayUserId = randInt()
	(*o).Grouped = new([]models.StoriesFeedItem)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).Grouped = make([]models.StoriesFeedItem, l0)
	for i0 := 0; i0 < l0; i0++ {
		//fillRandomlyStoriesFeedItem(&(*(*o).Grouped)[i0])
	}
	(*o).HasUnseen = new(bool)
	*(*o).HasUnseen = randBool()
	(*o).Id = new(string)
	*(*o).Id = randString()
	(*o).Name = new(string)
	*(*o).Name = randString()
	(*o).PromoData = new(models.StoriesPromoBlock)
	fillRandomlyStoriesPromoBlock((*o).PromoData)
	(*o).Stories = new([]models.StoriesStory)
	l0 = randIntn(maxArrayLength + 1)
	*(*o).Stories = make([]models.StoriesStory, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyStoriesStory(&(*(*o).Stories)[i0])
	}
	(*o).TrackCode = new(string)
	*(*o).TrackCode = randString()
	fillRandomlyStoriesFeedItemType(&(*o).Type)
}

func fillRandomlyStoriesPromoBlock(o *models.StoriesPromoBlock) {
	(*o).Name = randString()
	(*o).NotAnimated = randBool()
	(*o).Photo100 = randString()
	(*o).Photo50 = randString()
}

func fillRandomlyStoriesReplies(o *models.StoriesReplies) {
	(*o).Count = randInt()
	(*o).New = new(int)
	*(*o).New = randInt()
}

func fillRandomlyStoriesStatLine(o *models.StoriesStatLine) {
	(*o).Counter = new(int)
	*(*o).Counter = randInt()
	(*o).IsUnavailable = new(bool)
	*(*o).IsUnavailable = randBool()
	(*o).Name = randString()
}

func fillRandomlyStoriesStory(o *models.StoriesStory) {
	(*o).AccessKey = new(string)
	*(*o).AccessKey = randString()
	(*o).BirthdayWishUserId = new(int)
	*(*o).BirthdayWishUserId = randInt()
	(*o).CanAsk = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).CanAsk)
	(*o).CanAskAnonymous = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).CanAskAnonymous)
	(*o).CanComment = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).CanComment)
	(*o).CanHide = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).CanHide)
	(*o).CanLike = new(bool)
	*(*o).CanLike = randBool()
	(*o).CanReply = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).CanReply)
	(*o).CanSee = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).CanSee)
	(*o).CanShare = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).CanShare)
	(*o).CanUseInNarrative = new(bool)
	*(*o).CanUseInNarrative = randBool()
	(*o).ClickableStickers = new(models.StoriesClickableStickers)
	fillRandomlyStoriesClickableStickers((*o).ClickableStickers)
	(*o).Date = new(int)
	*(*o).Date = randInt()
	(*o).ExpiresAt = new(int)
	*(*o).ExpiresAt = randInt()
	(*o).FirstNarrativeTitle = new(string)
	*(*o).FirstNarrativeTitle = randString()
	(*o).Id = randInt()
	(*o).IsDeleted = new(bool)
	*(*o).IsDeleted = randBool()
	(*o).IsExpired = new(bool)
	*(*o).IsExpired = randBool()
	(*o).Link = new(models.StoriesStoryLink)
	fillRandomlyStoriesStoryLink((*o).Link)
	(*o).NarrativesCount = new(int)
	*(*o).NarrativesCount = randInt()
	(*o).OwnerId = randInt()
	(*o).ParentStory = new(models.StoriesStory)
	//fillRandomlyStoriesStory((*o).ParentStory)
	(*o).ParentStoryAccessKey = new(string)
	*(*o).ParentStoryAccessKey = randString()
	(*o).ParentStoryId = new(int)
	*(*o).ParentStoryId = randInt()
	(*o).ParentStoryOwnerId = new(int)
	*(*o).ParentStoryOwnerId = randInt()
	(*o).Photo = new(models.PhotosPhoto)
	fillRandomlyPhotosPhoto((*o).Photo)
	(*o).Replies = new(models.StoriesReplies)
	fillRandomlyStoriesReplies((*o).Replies)
	(*o).Seen = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).Seen)
	(*o).Type = new(models.StoriesStoryType)
	fillRandomlyStoriesStoryType((*o).Type)
	(*o).Video = new(models.VideoVideoFull)
	fillRandomlyVideoVideoFull((*o).Video)
	(*o).Views = new(int)
	*(*o).Views = randInt()
}

func fillRandomlyStoriesStoryLink(o *models.StoriesStoryLink) {
	(*o).LinkUrlTarget = new(string)
	*(*o).LinkUrlTarget = randString()
	(*o).Text = randString()
	(*o).Url = randString()
}

func fillRandomlyStoriesStoryStats(o *models.StoriesStoryStats) {
	fillRandomlyStoriesStoryStatsStat(&(*o).Answer)
	fillRandomlyStoriesStoryStatsStat(&(*o).Bans)
	fillRandomlyStoriesStoryStatsStat(&(*o).Likes)
	fillRandomlyStoriesStoryStatsStat(&(*o).OpenLink)
	fillRandomlyStoriesStoryStatsStat(&(*o).Replies)
	fillRandomlyStoriesStoryStatsStat(&(*o).Shares)
	fillRandomlyStoriesStoryStatsStat(&(*o).Subscribers)
	fillRandomlyStoriesStoryStatsStat(&(*o).Views)
}

func fillRandomlyStoriesStoryStatsStat(o *models.StoriesStoryStatsStat) {
	(*o).Count = new(int)
	*(*o).Count = randInt()
	fillRandomlyStoriesStoryStatsState(&(*o).State)
}

func fillRandomlyStoriesStoryStatsState(o *models.StoriesStoryStatsState) {
	switch randIntn(3) {
	case 0:
		*o = "on"
	case 1:
		*o = "off"
	case 2:
		*o = "hidden"
	}
}

func fillRandomlyStoriesStoryType(o *models.StoriesStoryType) {
	switch randIntn(5) {
	case 0:
		*o = "photo"
	case 1:
		*o = "video"
	case 2:
		*o = "live_active"
	case 3:
		*o = "live_finished"
	case 4:
		*o = "birthday_invite"
	}
}

func fillRandomlyStoriesUploadLinkText(o *models.StoriesUploadLinkText) {
	switch randIntn(21) {
	case 0:
		*o = "to_store"
	case 1:
		*o = "vote"
	case 2:
		*o = "more"
	case 3:
		*o = "book"
	case 4:
		*o = "order"
	case 5:
		*o = "enroll"
	case 6:
		*o = "fill"
	case 7:
		*o = "signup"
	case 8:
		*o = "buy"
	case 9:
		*o = "ticket"
	case 10:
		*o = "write"
	case 11:
		*o = "open"
	case 12:
		*o = "learn_more"
	case 13:
		*o = "view"
	case 14:
		*o = "go_to"
	case 15:
		*o = "contact"
	case 16:
		*o = "watch"
	case 17:
		*o = "play"
	case 18:
		*o = "install"
	case 19:
		*o = "read"
	case 20:
		*o = "calendar"
	}
}

func fillRandomlyStoriesViewersItem(o *models.StoriesViewersItem) {
	(*o).IsLiked = randBool()
	(*o).User = new(models.UsersUserFull)
	fillRandomlyUsersUserFull((*o).User)
	(*o).UserId = randInt()
}

func fillRandomlyUsersCareer(o *models.UsersCareer) {
	(*o).CityId = new(int)
	*(*o).CityId = randInt()
	(*o).CityName = new(string)
	*(*o).CityName = randString()
	(*o).Company = new(string)
	*(*o).Company = randString()
	(*o).CountryId = new(int)
	*(*o).CountryId = randInt()
	(*o).From = new(int)
	*(*o).From = randInt()
	(*o).GroupId = new(int)
	*(*o).GroupId = randInt()
	(*o).Id = new(int)
	*(*o).Id = randInt()
	(*o).Position = new(string)
	*(*o).Position = randString()
	(*o).Until = new(int)
	*(*o).Until = randInt()
}

func fillRandomlyUsersExports(o *models.UsersExports) {
	(*o).Facebook = new(int)
	*(*o).Facebook = randInt()
	(*o).Livejournal = new(int)
	*(*o).Livejournal = randInt()
	(*o).Twitter = new(int)
	*(*o).Twitter = randInt()
}

func fillRandomlyUsersFields(o *models.UsersFields) {
	switch randIntn(109) {
	case 0:
		*o = "first_name_nom"
	case 1:
		*o = "first_name_gen"
	case 2:
		*o = "first_name_dat"
	case 3:
		*o = "first_name_acc"
	case 4:
		*o = "first_name_ins"
	case 5:
		*o = "first_name_abl"
	case 6:
		*o = "last_name_nom"
	case 7:
		*o = "last_name_gen"
	case 8:
		*o = "last_name_dat"
	case 9:
		*o = "last_name_acc"
	case 10:
		*o = "last_name_ins"
	case 11:
		*o = "last_name_abl"
	case 12:
		*o = "photo_id"
	case 13:
		*o = "verified"
	case 14:
		*o = "sex"
	case 15:
		*o = "bdate"
	case 16:
		*o = "bdate_visibility"
	case 17:
		*o = "city"
	case 18:
		*o = "country"
	case 19:
		*o = "home_town"
	case 20:
		*o = "has_photo"
	case 21:
		*o = "photo"
	case 22:
		*o = "photo_rec"
	case 23:
		*o = "photo_50"
	case 24:
		*o = "photo_100"
	case 25:
		*o = "photo_200_orig"
	case 26:
		*o = "photo_200"
	case 27:
		*o = "photo_400"
	case 28:
		*o = "photo_400_orig"
	case 29:
		*o = "photo_big"
	case 30:
		*o = "photo_medium"
	case 31:
		*o = "photo_medium_rec"
	case 32:
		*o = "photo_max"
	case 33:
		*o = "photo_max_orig"
	case 34:
		*o = "photo_max_size"
	case 35:
		*o = "third_party_buttons"
	case 36:
		*o = "online"
	case 37:
		*o = "lists"
	case 38:
		*o = "domain"
	case 39:
		*o = "has_mobile"
	case 40:
		*o = "contacts"
	case 41:
		*o = "language"
	case 42:
		*o = "site"
	case 43:
		*o = "education"
	case 44:
		*o = "universities"
	case 45:
		*o = "schools"
	case 46:
		*o = "status"
	case 47:
		*o = "last_seen"
	case 48:
		*o = "followers_count"
	case 49:
		*o = "counters"
	case 50:
		*o = "common_count"
	case 51:
		*o = "online_info"
	case 52:
		*o = "occupation"
	case 53:
		*o = "nickname"
	case 54:
		*o = "relatives"
	case 55:
		*o = "relation"
	case 56:
		*o = "personal"
	case 57:
		*o = "connections"
	case 58:
		*o = "exports"
	case 59:
		*o = "wall_comments"
	case 60:
		*o = "wall_default"
	case 61:
		*o = "activities"
	case 62:
		*o = "activity"
	case 63:
		*o = "interests"
	case 64:
		*o = "music"
	case 65:
		*o = "movies"
	case 66:
		*o = "tv"
	case 67:
		*o = "books"
	case 68:
		*o = "is_no_index"
	case 69:
		*o = "games"
	case 70:
		*o = "about"
	case 71:
		*o = "quotes"
	case 72:
		*o = "can_post"
	case 73:
		*o = "can_see_all_posts"
	case 74:
		*o = "can_see_audio"
	case 75:
		*o = "can_see_gifts"
	case 76:
		*o = "work"
	case 77:
		*o = "places"
	case 78:
		*o = "can_write_private_message"
	case 79:
		*o = "can_send_friend_request"
	case 80:
		*o = "can_upload_doc"
	case 81:
		*o = "is_favorite"
	case 82:
		*o = "is_hidden_from_feed"
	case 83:
		*o = "timezone"
	case 84:
		*o = "screen_name"
	case 85:
		*o = "maiden_name"
	case 86:
		*o = "crop_photo"
	case 87:
		*o = "is_friend"
	case 88:
		*o = "friend_status"
	case 89:
		*o = "career"
	case 90:
		*o = "military"
	case 91:
		*o = "blacklisted"
	case 92:
		*o = "blacklisted_by_me"
	case 93:
		*o = "can_subscribe_posts"
	case 94:
		*o = "descriptions"
	case 95:
		*o = "trending"
	case 96:
		*o = "mutual"
	case 97:
		*o = "friendship_weeks"
	case 98:
		*o = "can_invite_to_chats"
	case 99:
		*o = "stories_archive_count"
	case 100:
		*o = "has_unseen_stories"
	case 101:
		*o = "video_live"
	case 102:
		*o = "video_live_level"
	case 103:
		*o = "video_live_count"
	case 104:
		*o = "clips_count"
	case 105:
		*o = "service_description"
	case 106:
		*o = "can_see_wishes"
	case 107:
		*o = "is_subscribed_podcasts"
	case 108:
		*o = "can_subscribe_podcasts"
	}
}

func fillRandomlyUsersLastSeen(o *models.UsersLastSeen) {
	(*o).Platform = new(int)
	*(*o).Platform = randInt()
	(*o).Time = new(int)
	*(*o).Time = randInt()
}

func fillRandomlyUsersMilitary(o *models.UsersMilitary) {
	(*o).CountryId = randInt()
	(*o).From = new(int)
	*(*o).From = randInt()
	(*o).Id = new(int)
	*(*o).Id = randInt()
	(*o).Unit = randString()
	(*o).UnitId = randInt()
	(*o).Until = new(int)
	*(*o).Until = randInt()
}

func fillRandomlyUsersOccupation(o *models.UsersOccupation) {
	(*o).Id = new(int)
	*(*o).Id = randInt()
	(*o).Name = new(string)
	*(*o).Name = randString()
	(*o).Type = new(string)
	*(*o).Type = randString()
}

func fillRandomlyUsersOnlineInfoStatus(o *models.UsersOnlineInfoStatus) {
	switch randIntn(5) {
	case 0:
		*o = "recently"
	case 1:
		*o = "last_week"
	case 2:
		*o = "last_month"
	case 3:
		*o = "long_ago"
	case 4:
		*o = "not_show"
	}
}

func fillRandomlyUsersOnlineInfo(o *models.UsersOnlineInfo) {
	(*o).AppId = new(int)
	*(*o).AppId = randInt()
	(*o).IsMobile = new(bool)
	*(*o).IsMobile = randBool()
	(*o).IsOnline = new(bool)
	*(*o).IsOnline = randBool()
	(*o).LastSeen = new(int)
	*(*o).LastSeen = randInt()
	(*o).Status = new(models.UsersOnlineInfoStatus)
	fillRandomlyUsersOnlineInfoStatus((*o).Status)
	(*o).Visible = randBool()
}

func fillRandomlyUsersPersonal(o *models.UsersPersonal) {
	(*o).Alcohol = new(int)
	*(*o).Alcohol = randInt()
	(*o).InspiredBy = new(string)
	*(*o).InspiredBy = randString()
	(*o).Langs = new([]string)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).Langs = make([]string, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*o).Langs)[i0] = randString()
	}
	(*o).LifeMain = new(int)
	*(*o).LifeMain = randInt()
	(*o).PeopleMain = new(int)
	*(*o).PeopleMain = randInt()
	(*o).Political = new(int)
	*(*o).Political = randInt()
	(*o).Religion = new(string)
	*(*o).Religion = randString()
	(*o).ReligionId = new(int)
	*(*o).ReligionId = randInt()
	(*o).Smoking = new(int)
	*(*o).Smoking = randInt()
}

func fillRandomlyUsersRelativeType(o *models.UsersRelativeType) {
	switch randIntn(5) {
	case 0:
		*o = "parent"
	case 1:
		*o = "child"
	case 2:
		*o = "grandparent"
	case 3:
		*o = "grandchild"
	case 4:
		*o = "sibling"
	}
}

func fillRandomlyUsersRelative(o *models.UsersRelative) {
	(*o).BirthDate = new(string)
	*(*o).BirthDate = randString()
	(*o).Id = new(int)
	*(*o).Id = randInt()
	(*o).Name = new(string)
	*(*o).Name = randString()
	fillRandomlyUsersRelativeType(&(*o).Type)
}

func fillRandomlyUsersSchool(o *models.UsersSchool) {
	(*o).City = new(int)
	*(*o).City = randInt()
	(*o).Class = new(string)
	*(*o).Class = randString()
	(*o).Country = new(int)
	*(*o).Country = randInt()
	(*o).Id = new(string)
	*(*o).Id = randString()
	(*o).Name = new(string)
	*(*o).Name = randString()
	(*o).Speciality = new(string)
	*(*o).Speciality = randString()
	(*o).Type = new(int)
	*(*o).Type = randInt()
	(*o).TypeStr = new(string)
	*(*o).TypeStr = randString()
	(*o).YearFrom = new(int)
	*(*o).YearFrom = randInt()
	(*o).YearGraduated = new(int)
	*(*o).YearGraduated = randInt()
	(*o).YearTo = new(int)
	*(*o).YearTo = randInt()
}

func fillRandomlyUsersSubscriptionsItem(o *models.UsersSubscriptionsItem) {
	var rawJSON []byte
	switch randIntn(2) {
	case 0:
		r := new(models.UsersUserXtrType)
		fillRandomlyUsersUserXtrType(r)
		rawJSON, _ = json.Marshal(*r)
	case 1:
		r := new(models.GroupsGroupFull)
		fillRandomlyGroupsGroupFull(r)
		rawJSON, _ = json.Marshal(*r)
	}
	o.Raws = rawJSON
}

func fillRandomlyUsersUniversity(o *models.UsersUniversity) {
	(*o).Chair = new(int)
	*(*o).Chair = randInt()
	(*o).ChairName = new(string)
	*(*o).ChairName = randString()
	(*o).City = new(int)
	*(*o).City = randInt()
	(*o).Country = new(int)
	*(*o).Country = randInt()
	(*o).EducationForm = new(string)
	*(*o).EducationForm = randString()
	(*o).EducationStatus = new(string)
	*(*o).EducationStatus = randString()
	(*o).Faculty = new(int)
	*(*o).Faculty = randInt()
	(*o).FacultyName = new(string)
	*(*o).FacultyName = randString()
	(*o).Graduation = new(int)
	*(*o).Graduation = randInt()
	(*o).Id = new(int)
	*(*o).Id = randInt()
	(*o).Name = new(string)
	*(*o).Name = randString()
	(*o).UniversityGroupId = new(int)
	*(*o).UniversityGroupId = randInt()
}

func fillRandomlyUsersUser(o *models.UsersUser) {
	fillRandomlyUsersUserMin(&(*o).UsersUserMin)
	(*o).FriendStatus = new(models.FriendsFriendStatusStatus)
	fillRandomlyFriendsFriendStatusStatus((*o).FriendStatus)
	(*o).Mutual = new(models.FriendsRequestsMutual)
	fillRandomlyFriendsRequestsMutual((*o).Mutual)
	(*o).Online = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).Online)
	(*o).OnlineApp = new(int)
	*(*o).OnlineApp = randInt()
	(*o).OnlineInfo = new(models.UsersOnlineInfo)
	fillRandomlyUsersOnlineInfo((*o).OnlineInfo)
	(*o).OnlineMobile = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).OnlineMobile)
	(*o).Photo100 = new(string)
	*(*o).Photo100 = randString()
	(*o).Photo50 = new(string)
	*(*o).Photo50 = randString()
	(*o).ScreenName = new(string)
	*(*o).ScreenName = randString()
	(*o).Sex = new(models.BaseSex)
	fillRandomlyBaseSex((*o).Sex)
	(*o).Trending = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).Trending)
	(*o).Verified = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).Verified)
}

func fillRandomlyUsersUserConnections(o *models.UsersUserConnections) {
	(*o).Facebook = randString()
	(*o).FacebookName = new(string)
	*(*o).FacebookName = randString()
	(*o).Instagram = randString()
	(*o).Livejournal = new(string)
	*(*o).Livejournal = randString()
	(*o).Skype = randString()
	(*o).Twitter = randString()
}

func fillRandomlyUsersUserCounters(o *models.UsersUserCounters) {
	(*o).Albums = new(int)
	*(*o).Albums = randInt()
	(*o).Articles = new(int)
	*(*o).Articles = randInt()
	(*o).Audios = new(int)
	*(*o).Audios = randInt()
	(*o).Badges = new(int)
	*(*o).Badges = randInt()
	(*o).Clips = new(int)
	*(*o).Clips = randInt()
	(*o).ClipsFollowers = new(int)
	*(*o).ClipsFollowers = randInt()
	(*o).Followers = new(int)
	*(*o).Followers = randInt()
	(*o).Friends = new(int)
	*(*o).Friends = randInt()
	(*o).Gifts = new(int)
	*(*o).Gifts = randInt()
	(*o).Groups = new(int)
	*(*o).Groups = randInt()
	(*o).MutualFriends = new(int)
	*(*o).MutualFriends = randInt()
	(*o).NewPhotoTags = new(int)
	*(*o).NewPhotoTags = randInt()
	(*o).NewRecognitionTags = new(int)
	*(*o).NewRecognitionTags = randInt()
	(*o).Notes = new(int)
	*(*o).Notes = randInt()
	(*o).OnlineFriends = new(int)
	*(*o).OnlineFriends = randInt()
	(*o).Pages = new(int)
	*(*o).Pages = randInt()
	(*o).Photos = new(int)
	*(*o).Photos = randInt()
	(*o).Podcasts = new(int)
	*(*o).Podcasts = randInt()
	(*o).Posts = new(int)
	*(*o).Posts = randInt()
	(*o).Subscriptions = new(int)
	*(*o).Subscriptions = randInt()
	(*o).UserPhotos = new(int)
	*(*o).UserPhotos = randInt()
	(*o).UserVideos = new(int)
	*(*o).UserVideos = randInt()
	(*o).Videos = new(int)
	*(*o).Videos = randInt()
	(*o).Wishes = new(int)
	*(*o).Wishes = randInt()
}

func fillRandomlyUsersUserFullWallDefault(o *models.UsersUserFullWallDefault) {
	switch randIntn(2) {
	case 0:
		*o = "owner"
	case 1:
		*o = "all"
	}
}

func fillRandomlyUsersUserFull(o *models.UsersUserFull) {
	fillRandomlyUsersUser(&(*o).UsersUser)
	(*o).About = new(string)
	*(*o).About = randString()
	(*o).AccessKey = new(string)
	*(*o).AccessKey = randString()
	(*o).Activities = new(string)
	*(*o).Activities = randString()
	(*o).Activity = new(string)
	*(*o).Activity = randString()
	(*o).Bdate = new(string)
	*(*o).Bdate = randString()
	(*o).Blacklisted = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).Blacklisted)
	(*o).BlacklistedByMe = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).BlacklistedByMe)
	(*o).Books = new(string)
	*(*o).Books = randString()
	(*o).CanBeInvitedGroup = new(bool)
	*(*o).CanBeInvitedGroup = randBool()
	(*o).CanCall = new(bool)
	*(*o).CanCall = randBool()
	(*o).CanCallFromGroup = new(bool)
	*(*o).CanCallFromGroup = randBool()
	(*o).CanPost = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).CanPost)
	(*o).CanSeeAllPosts = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).CanSeeAllPosts)
	(*o).CanSeeAudio = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).CanSeeAudio)
	(*o).CanSeeGifts = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).CanSeeGifts)
	(*o).CanSeeWishes = new(bool)
	*(*o).CanSeeWishes = randBool()
	(*o).CanSendFriendRequest = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).CanSendFriendRequest)
	(*o).CanSubscribePodcasts = new(bool)
	*(*o).CanSubscribePodcasts = randBool()
	(*o).CanSubscribePosts = new(bool)
	*(*o).CanSubscribePosts = randBool()
	(*o).CanUploadDoc = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).CanUploadDoc)
	(*o).CanWritePrivateMessage = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).CanWritePrivateMessage)
	(*o).Career = new([]models.UsersCareer)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).Career = make([]models.UsersCareer, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyUsersCareer(&(*(*o).Career)[i0])
	}
	(*o).City = new(models.BaseCity)
	fillRandomlyBaseCity((*o).City)
	(*o).ClipsCount = new(int)
	*(*o).ClipsCount = randInt()
	(*o).CommonCount = new(int)
	*(*o).CommonCount = randInt()
	(*o).ContactId = new(int)
	*(*o).ContactId = randInt()
	(*o).ContactName = new(string)
	*(*o).ContactName = randString()
	(*o).Counters = new(models.UsersUserCounters)
	fillRandomlyUsersUserCounters((*o).Counters)
	(*o).Country = new(models.BaseCountry)
	fillRandomlyBaseCountry((*o).Country)
	(*o).CropPhoto = new(models.BaseCropPhoto)
	fillRandomlyBaseCropPhoto((*o).CropPhoto)
	(*o).Descriptions = new([]string)
	l0 = randIntn(maxArrayLength + 1)
	*(*o).Descriptions = make([]string, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*o).Descriptions)[i0] = randString()
	}
	(*o).Domain = new(string)
	*(*o).Domain = randString()
	(*o).EducationForm = new(string)
	*(*o).EducationForm = randString()
	(*o).EducationStatus = new(string)
	*(*o).EducationStatus = randString()
	(*o).Email = new(string)
	*(*o).Email = randString()
	(*o).Exports = new(models.UsersExports)
	fillRandomlyUsersExports((*o).Exports)
	(*o).Facebook = new(string)
	*(*o).Facebook = randString()
	(*o).FacebookName = new(string)
	*(*o).FacebookName = randString()
	(*o).Faculty = new(int)
	*(*o).Faculty = randInt()
	(*o).FacultyName = new(string)
	*(*o).FacultyName = randString()
	(*o).FirstNameAbl = new(string)
	*(*o).FirstNameAbl = randString()
	(*o).FirstNameAcc = new(string)
	*(*o).FirstNameAcc = randString()
	(*o).FirstNameDat = new(string)
	*(*o).FirstNameDat = randString()
	(*o).FirstNameGen = new(string)
	*(*o).FirstNameGen = randString()
	(*o).FirstNameIns = new(string)
	*(*o).FirstNameIns = randString()
	(*o).FirstNameNom = new(string)
	*(*o).FirstNameNom = randString()
	(*o).FollowersCount = new(int)
	*(*o).FollowersCount = randInt()
	(*o).Games = new(string)
	*(*o).Games = randString()
	(*o).Graduation = new(int)
	*(*o).Graduation = randInt()
	(*o).HasMobile = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).HasMobile)
	(*o).HasPhoto = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).HasPhoto)
	(*o).HasUnseenStories = new(bool)
	*(*o).HasUnseenStories = randBool()
	(*o).Hash = new(string)
	*(*o).Hash = randString()
	(*o).HomePhone = new(string)
	*(*o).HomePhone = randString()
	(*o).HomeTown = new(string)
	*(*o).HomeTown = randString()
	(*o).Instagram = new(string)
	*(*o).Instagram = randString()
	(*o).Interests = new(string)
	*(*o).Interests = randString()
	(*o).IsFavorite = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).IsFavorite)
	(*o).IsFriend = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).IsFriend)
	(*o).IsHiddenFromFeed = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).IsHiddenFromFeed)
	(*o).IsMessageRequest = new(bool)
	*(*o).IsMessageRequest = randBool()
	(*o).IsNoIndex = new(bool)
	*(*o).IsNoIndex = randBool()
	(*o).IsService = new(bool)
	*(*o).IsService = randBool()
	(*o).IsSubscribedPodcasts = new(bool)
	*(*o).IsSubscribedPodcasts = randBool()
	(*o).IsVideoLiveNotificationsBlocked = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).IsVideoLiveNotificationsBlocked)
	(*o).Language = new(string)
	*(*o).Language = randString()
	(*o).LastNameAbl = new(string)
	*(*o).LastNameAbl = randString()
	(*o).LastNameAcc = new(string)
	*(*o).LastNameAcc = randString()
	(*o).LastNameDat = new(string)
	*(*o).LastNameDat = randString()
	(*o).LastNameGen = new(string)
	*(*o).LastNameGen = randString()
	(*o).LastNameIns = new(string)
	*(*o).LastNameIns = randString()
	(*o).LastNameNom = new(string)
	*(*o).LastNameNom = randString()
	(*o).LastSeen = new(models.UsersLastSeen)
	fillRandomlyUsersLastSeen((*o).LastSeen)
	(*o).Lists = new([]int)
	l0 = randIntn(maxArrayLength + 1)
	*(*o).Lists = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*o).Lists)[i0] = randInt()
	}
	(*o).Livejournal = new(string)
	*(*o).Livejournal = randString()
	(*o).MaidenName = new(string)
	*(*o).MaidenName = randString()
	(*o).Military = new([]models.UsersMilitary)
	l0 = randIntn(maxArrayLength + 1)
	*(*o).Military = make([]models.UsersMilitary, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyUsersMilitary(&(*(*o).Military)[i0])
	}
	(*o).MobilePhone = new(string)
	*(*o).MobilePhone = randString()
	(*o).Movies = new(string)
	*(*o).Movies = randString()
	(*o).Music = new(string)
	*(*o).Music = randString()
	(*o).Nickname = new(string)
	*(*o).Nickname = randString()
	(*o).Occupation = new(models.UsersOccupation)
	fillRandomlyUsersOccupation((*o).Occupation)
	(*o).OwnerState = new(models.OwnerState)
	fillRandomlyOwnerState((*o).OwnerState)
	(*o).Personal = new(models.UsersPersonal)
	fillRandomlyUsersPersonal((*o).Personal)
	(*o).Photo = new(string)
	*(*o).Photo = randString()
	(*o).Photo200 = new(string)
	*(*o).Photo200 = randString()
	(*o).Photo200Orig = new(string)
	*(*o).Photo200Orig = randString()
	(*o).Photo400 = new(string)
	*(*o).Photo400 = randString()
	(*o).Photo400Orig = new(string)
	*(*o).Photo400Orig = randString()
	(*o).PhotoBig = new(string)
	*(*o).PhotoBig = randString()
	(*o).PhotoId = new(string)
	*(*o).PhotoId = randString()
	(*o).PhotoMax = new(string)
	*(*o).PhotoMax = randString()
	(*o).PhotoMaxOrig = new(string)
	*(*o).PhotoMaxOrig = randString()
	(*o).PhotoMaxSize = new(models.PhotosPhoto)
	fillRandomlyPhotosPhoto((*o).PhotoMaxSize)
	(*o).PhotoMedium = new(models.PhotosPhotoFalseable)
	fillRandomlyPhotosPhotoFalseable((*o).PhotoMedium)
	(*o).PhotoMediumRec = new(models.PhotosPhotoFalseable)
	fillRandomlyPhotosPhotoFalseable((*o).PhotoMediumRec)
	(*o).PhotoRec = new(models.PhotosPhotoFalseable)
	fillRandomlyPhotosPhotoFalseable((*o).PhotoRec)
	(*o).Quotes = new(string)
	*(*o).Quotes = randString()
	(*o).Relation = new(models.UsersUserRelation)
	fillRandomlyUsersUserRelation((*o).Relation)
	(*o).RelationPartner = new(models.UsersUserMin)
	fillRandomlyUsersUserMin((*o).RelationPartner)
	(*o).Relatives = new([]models.UsersRelative)
	l0 = randIntn(maxArrayLength + 1)
	*(*o).Relatives = make([]models.UsersRelative, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyUsersRelative(&(*(*o).Relatives)[i0])
	}
	(*o).Schools = new([]models.UsersSchool)
	l0 = randIntn(maxArrayLength + 1)
	*(*o).Schools = make([]models.UsersSchool, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyUsersSchool(&(*(*o).Schools)[i0])
	}
	(*o).ServiceDescription = new(string)
	*(*o).ServiceDescription = randString()
	(*o).Site = new(string)
	*(*o).Site = randString()
	(*o).Skype = new(string)
	*(*o).Skype = randString()
	(*o).Status = new(string)
	*(*o).Status = randString()
	(*o).StatusAudio = new(models.AudioAudio)
	fillRandomlyAudioAudio((*o).StatusAudio)
	(*o).StoriesArchiveCount = new(int)
	*(*o).StoriesArchiveCount = randInt()
	(*o).Test = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).Test)
	(*o).Timezone = new(float64)
	*(*o).Timezone = randFloat()
	(*o).Tv = new(string)
	*(*o).Tv = randString()
	(*o).Twitter = new(string)
	*(*o).Twitter = randString()
	(*o).Type = new(models.UsersUserType)
	fillRandomlyUsersUserType((*o).Type)
	(*o).Universities = new([]models.UsersUniversity)
	l0 = randIntn(maxArrayLength + 1)
	*(*o).Universities = make([]models.UsersUniversity, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyUsersUniversity(&(*(*o).Universities)[i0])
	}
	(*o).University = new(int)
	*(*o).University = randInt()
	(*o).UniversityGroupId = new(int)
	*(*o).UniversityGroupId = randInt()
	(*o).UniversityName = new(string)
	*(*o).UniversityName = randString()
	(*o).VideoLive = new(models.VideoLiveInfo)
	fillRandomlyVideoLiveInfo((*o).VideoLive)
	(*o).VideoLiveCount = new(int)
	*(*o).VideoLiveCount = randInt()
	(*o).VideoLiveLevel = new(int)
	*(*o).VideoLiveLevel = randInt()
	(*o).WallComments = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).WallComments)
	(*o).WallDefault = new(models.UsersUserFullWallDefault)
	fillRandomlyUsersUserFullWallDefault((*o).WallDefault)
}

func fillRandomlyUsersUserMin(o *models.UsersUserMin) {
	(*o).CanAccessClosed = new(bool)
	*(*o).CanAccessClosed = randBool()
	(*o).Deactivated = new(string)
	*(*o).Deactivated = randString()
	(*o).FirstName = new(string)
	*(*o).FirstName = randString()
	(*o).Hidden = new(int)
	*(*o).Hidden = randInt()
	(*o).Id = randInt()
	(*o).IsClosed = new(bool)
	*(*o).IsClosed = randBool()
	(*o).LastName = new(string)
	*(*o).LastName = randString()
}

func fillRandomlyUsersUserRelation(o *models.UsersUserRelation) {
	switch randIntn(9) {
	case 0:
		*o = 0
	case 1:
		*o = 1
	case 2:
		*o = 2
	case 3:
		*o = 3
	case 4:
		*o = 4
	case 5:
		*o = 5
	case 6:
		*o = 6
	case 7:
		*o = 7
	case 8:
		*o = 8
	}
}

func fillRandomlyUsersUserSettingsXtr(o *models.UsersUserSettingsXtr) {
	(*o).Bdate = new(string)
	*(*o).Bdate = randString()
	(*o).BdateVisibility = new(int)
	*(*o).BdateVisibility = randInt()
	(*o).City = new(models.BaseCity)
	fillRandomlyBaseCity((*o).City)
	(*o).Connections = new(models.UsersUserConnections)
	fillRandomlyUsersUserConnections((*o).Connections)
	(*o).Country = new(models.BaseCountry)
	fillRandomlyBaseCountry((*o).Country)
	(*o).FirstName = new(string)
	*(*o).FirstName = randString()
	(*o).HomeTown = randString()
	(*o).Interests = new(models.AccountUserSettingsInterests)
	fillRandomlyAccountUserSettingsInterests((*o).Interests)
	(*o).Languages = new([]string)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).Languages = make([]string, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*o).Languages)[i0] = randString()
	}
	(*o).LastName = new(string)
	*(*o).LastName = randString()
	(*o).MaidenName = new(string)
	*(*o).MaidenName = randString()
	(*o).NameRequest = new(models.AccountNameRequest)
	fillRandomlyAccountNameRequest((*o).NameRequest)
	(*o).Personal = new(models.UsersPersonal)
	fillRandomlyUsersPersonal((*o).Personal)
	(*o).Phone = new(string)
	*(*o).Phone = randString()
	(*o).Relation = new(models.UsersUserRelation)
	fillRandomlyUsersUserRelation((*o).Relation)
	(*o).RelationPartner = new(models.UsersUserMin)
	fillRandomlyUsersUserMin((*o).RelationPartner)
	(*o).RelationPending = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).RelationPending)
	(*o).RelationRequests = new([]models.UsersUserMin)
	l0 = randIntn(maxArrayLength + 1)
	*(*o).RelationRequests = make([]models.UsersUserMin, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyUsersUserMin(&(*(*o).RelationRequests)[i0])
	}
	(*o).ScreenName = new(string)
	*(*o).ScreenName = randString()
	(*o).Sex = new(models.BaseSex)
	fillRandomlyBaseSex((*o).Sex)
	(*o).Status = randString()
	(*o).StatusAudio = new(models.AudioAudio)
	fillRandomlyAudioAudio((*o).StatusAudio)
}

func fillRandomlyUsersUserType(o *models.UsersUserType) {
	switch randIntn(1) {
	case 0:
		*o = "profile"
	}
}

func fillRandomlyUsersUserXtrType(o *models.UsersUserXtrType) {
	fillRandomlyUsersUser(&(*o).UsersUser)
	(*o).Type = new(models.UsersUserType)
	fillRandomlyUsersUserType((*o).Type)
}

func fillRandomlyUsersUsersArray(o *models.UsersUsersArray) {
	(*o).Count = randInt()
	l0 := randIntn(maxArrayLength + 1)
	(*o).Items = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		((*o).Items)[i0] = randInt()
	}
}

func fillRandomlyUtilsDomainResolved(o *models.UtilsDomainResolved) {
	(*o).GroupId = new(int)
	*(*o).GroupId = randInt()
	(*o).ObjectId = new(int)
	*(*o).ObjectId = randInt()
	(*o).Type = new(models.UtilsDomainResolvedType)
	fillRandomlyUtilsDomainResolvedType((*o).Type)
}

func fillRandomlyUtilsDomainResolvedType(o *models.UtilsDomainResolvedType) {
	switch randIntn(6) {
	case 0:
		*o = "user"
	case 1:
		*o = "group"
	case 2:
		*o = "application"
	case 3:
		*o = "page"
	case 4:
		*o = "vk_app"
	case 5:
		*o = "community_application"
	}
}

func fillRandomlyUtilsLastShortenedLink(o *models.UtilsLastShortenedLink) {
	(*o).AccessKey = new(string)
	*(*o).AccessKey = randString()
	(*o).Key = new(string)
	*(*o).Key = randString()
	(*o).ShortUrl = new(string)
	*(*o).ShortUrl = randString()
	(*o).Timestamp = new(int)
	*(*o).Timestamp = randInt()
	(*o).Url = new(string)
	*(*o).Url = randString()
	(*o).Views = new(int)
	*(*o).Views = randInt()
}

func fillRandomlyUtilsLinkChecked(o *models.UtilsLinkChecked) {
	(*o).Link = new(string)
	*(*o).Link = randString()
	(*o).Status = new(models.UtilsLinkCheckedStatus)
	fillRandomlyUtilsLinkCheckedStatus((*o).Status)
}

func fillRandomlyUtilsLinkCheckedStatus(o *models.UtilsLinkCheckedStatus) {
	switch randIntn(3) {
	case 0:
		*o = "not_banned"
	case 1:
		*o = "banned"
	case 2:
		*o = "processing"
	}
}

func fillRandomlyUtilsLinkStats(o *models.UtilsLinkStats) {
	(*o).Key = new(string)
	*(*o).Key = randString()
	(*o).Stats = new([]models.UtilsStats)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).Stats = make([]models.UtilsStats, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyUtilsStats(&(*(*o).Stats)[i0])
	}
}

func fillRandomlyUtilsLinkStatsExtended(o *models.UtilsLinkStatsExtended) {
	(*o).Key = new(string)
	*(*o).Key = randString()
	(*o).Stats = new([]models.UtilsStatsExtended)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).Stats = make([]models.UtilsStatsExtended, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyUtilsStatsExtended(&(*(*o).Stats)[i0])
	}
}

func fillRandomlyUtilsShortLink(o *models.UtilsShortLink) {
	(*o).AccessKey = new(string)
	*(*o).AccessKey = randString()
	(*o).Key = new(string)
	*(*o).Key = randString()
	(*o).ShortUrl = new(string)
	*(*o).ShortUrl = randString()
	(*o).Url = new(string)
	*(*o).Url = randString()
}

func fillRandomlyUtilsStats(o *models.UtilsStats) {
	(*o).Timestamp = new(int)
	*(*o).Timestamp = randInt()
	(*o).Views = new(int)
	*(*o).Views = randInt()
}

func fillRandomlyUtilsStatsCity(o *models.UtilsStatsCity) {
	(*o).CityId = new(int)
	*(*o).CityId = randInt()
	(*o).Views = new(int)
	*(*o).Views = randInt()
}

func fillRandomlyUtilsStatsCountry(o *models.UtilsStatsCountry) {
	(*o).CountryId = new(int)
	*(*o).CountryId = randInt()
	(*o).Views = new(int)
	*(*o).Views = randInt()
}

func fillRandomlyUtilsStatsExtended(o *models.UtilsStatsExtended) {
	(*o).Cities = new([]models.UtilsStatsCity)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).Cities = make([]models.UtilsStatsCity, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyUtilsStatsCity(&(*(*o).Cities)[i0])
	}
	(*o).Countries = new([]models.UtilsStatsCountry)
	l0 = randIntn(maxArrayLength + 1)
	*(*o).Countries = make([]models.UtilsStatsCountry, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyUtilsStatsCountry(&(*(*o).Countries)[i0])
	}
	(*o).SexAge = new([]models.UtilsStatsSexAge)
	l0 = randIntn(maxArrayLength + 1)
	*(*o).SexAge = make([]models.UtilsStatsSexAge, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyUtilsStatsSexAge(&(*(*o).SexAge)[i0])
	}
	(*o).Timestamp = new(int)
	*(*o).Timestamp = randInt()
	(*o).Views = new(int)
	*(*o).Views = randInt()
}

func fillRandomlyUtilsStatsSexAge(o *models.UtilsStatsSexAge) {
	(*o).AgeRange = new(string)
	*(*o).AgeRange = randString()
	(*o).Female = new(int)
	*(*o).Female = randInt()
	(*o).Male = new(int)
	*(*o).Male = randInt()
}

func fillRandomlyVideoLiveInfo(o *models.VideoLiveInfo) {
	fillRandomlyBaseBoolInt(&(*o).Enabled)
	(*o).IsNotificationsBlocked = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).IsNotificationsBlocked)
}

func fillRandomlyVideoLiveSettings(o *models.VideoLiveSettings) {
	(*o).CanRewind = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).CanRewind)
	(*o).IsEndless = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).IsEndless)
	(*o).MaxDuration = new(int)
	*(*o).MaxDuration = randInt()
}

func fillRandomlyVideoSaveResult(o *models.VideoSaveResult) {
	(*o).AccessKey = new(string)
	*(*o).AccessKey = randString()
	(*o).Description = new(string)
	*(*o).Description = randString()
	(*o).OwnerId = new(int)
	*(*o).OwnerId = randInt()
	(*o).Title = new(string)
	*(*o).Title = randString()
	(*o).UploadUrl = new(string)
	*(*o).UploadUrl = randString()
	(*o).VideoId = new(int)
	*(*o).VideoId = randInt()
}

func fillRandomlyVideoVideoLiveStatus(o *models.VideoVideoLiveStatus) {
	switch randIntn(5) {
	case 0:
		*o = "waiting"
	case 1:
		*o = "started"
	case 2:
		*o = "finished"
	case 3:
		*o = "failed"
	case 4:
		*o = "upcoming"
	}
}

func fillRandomlyVideoVideoType(o *models.VideoVideoType) {
	switch randIntn(3) {
	case 0:
		*o = "video"
	case 1:
		*o = "music_video"
	case 2:
		*o = "movie"
	}
}

func fillRandomlyVideoVideo(o *models.VideoVideo) {
	(*o).AccessKey = new(string)
	*(*o).AccessKey = randString()
	(*o).Added = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).Added)
	(*o).AddingDate = new(int)
	*(*o).AddingDate = randInt()
	(*o).Balance = new(int)
	*(*o).Balance = randInt()
	(*o).CanAdd = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).CanAdd)
	(*o).CanAddToFaves = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).CanAddToFaves)
	(*o).CanAttachLink = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).CanAttachLink)
	(*o).CanComment = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).CanComment)
	(*o).CanEdit = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).CanEdit)
	(*o).CanLike = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).CanLike)
	(*o).CanRepost = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).CanRepost)
	(*o).CanSubscribe = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).CanSubscribe)
	(*o).Comments = new(int)
	*(*o).Comments = randInt()
	(*o).ContentRestricted = new(int)
	*(*o).ContentRestricted = randInt()
	(*o).ContentRestrictedMessage = new(string)
	*(*o).ContentRestrictedMessage = randString()
	(*o).Converting = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).Converting)
	(*o).Date = new(int)
	*(*o).Date = randInt()
	(*o).Description = new(string)
	*(*o).Description = randString()
	(*o).Duration = new(int)
	*(*o).Duration = randInt()
	(*o).FirstFrame = new([]models.VideoVideoImage)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).FirstFrame = make([]models.VideoVideoImage, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyVideoVideoImage(&(*(*o).FirstFrame)[i0])
	}
	(*o).Height = new(int)
	*(*o).Height = randInt()
	(*o).Id = new(int)
	*(*o).Id = randInt()
	(*o).Image = new([]models.VideoVideoImage)
	l0 = randIntn(maxArrayLength + 1)
	*(*o).Image = make([]models.VideoVideoImage, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyVideoVideoImage(&(*(*o).Image)[i0])
	}
	(*o).IsFavorite = new(bool)
	*(*o).IsFavorite = randBool()
	(*o).IsPrivate = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).IsPrivate)
	(*o).IsSubscribed = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).IsSubscribed)
	(*o).Likes = new(models.BaseLikes)
	fillRandomlyBaseLikes((*o).Likes)
	(*o).Live = new(models.BasePropertyExists)
	fillRandomlyBasePropertyExists((*o).Live)
	(*o).LiveNotify = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).LiveNotify)
	(*o).LiveStartTime = new(int)
	*(*o).LiveStartTime = randInt()
	(*o).LiveStatus = new(models.VideoVideoLiveStatus)
	fillRandomlyVideoVideoLiveStatus((*o).LiveStatus)
	(*o).LocalViews = new(int)
	*(*o).LocalViews = randInt()
	(*o).OwnerId = new(int)
	*(*o).OwnerId = randInt()
	(*o).Platform = new(string)
	*(*o).Platform = randString()
	(*o).Player = new(string)
	*(*o).Player = randString()
	(*o).Processing = new(models.BasePropertyExists)
	fillRandomlyBasePropertyExists((*o).Processing)
	(*o).Repeat = new(models.BasePropertyExists)
	fillRandomlyBasePropertyExists((*o).Repeat)
	(*o).Reposts = new(models.BaseRepostsInfo)
	fillRandomlyBaseRepostsInfo((*o).Reposts)
	(*o).Spectators = new(int)
	*(*o).Spectators = randInt()
	(*o).Title = new(string)
	*(*o).Title = randString()
	(*o).TrackCode = new(string)
	*(*o).TrackCode = randString()
	(*o).Type = new(models.VideoVideoType)
	fillRandomlyVideoVideoType((*o).Type)
	(*o).Upcoming = new(models.BasePropertyExists)
	fillRandomlyBasePropertyExists((*o).Upcoming)
	(*o).UserId = new(int)
	*(*o).UserId = randInt()
	(*o).Views = new(int)
	*(*o).Views = randInt()
	(*o).Width = new(int)
	*(*o).Width = randInt()
}

func fillRandomlyVideoVideoAlbum(o *models.VideoVideoAlbum) {
	(*o).Id = randInt()
	(*o).OwnerId = randInt()
	(*o).Title = randString()
}

func fillRandomlyVideoVideoAlbumFull(o *models.VideoVideoAlbumFull) {
	fillRandomlyVideoVideoAlbum(&(*o).VideoVideoAlbum)
	(*o).Count = randInt()
	(*o).Image = new([]models.VideoVideoImage)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).Image = make([]models.VideoVideoImage, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyVideoVideoImage(&(*(*o).Image)[i0])
	}
	(*o).ImageBlur = new(models.BasePropertyExists)
	fillRandomlyBasePropertyExists((*o).ImageBlur)
	(*o).IsSystem = new(models.BasePropertyExists)
	fillRandomlyBasePropertyExists((*o).IsSystem)
	(*o).UpdatedTime = randInt()
}

func fillRandomlyVideoVideoFiles(o *models.VideoVideoFiles) {
	(*o).External = new(string)
	*(*o).External = randString()
	(*o).Flv320 = new(string)
	*(*o).Flv320 = randString()
	(*o).Mp41080 = new(string)
	*(*o).Mp41080 = randString()
	(*o).Mp4144 = new(string)
	*(*o).Mp4144 = randString()
	(*o).Mp41440 = new(string)
	*(*o).Mp41440 = randString()
	(*o).Mp42160 = new(string)
	*(*o).Mp42160 = randString()
	(*o).Mp4240 = new(string)
	*(*o).Mp4240 = randString()
	(*o).Mp4360 = new(string)
	*(*o).Mp4360 = randString()
	(*o).Mp4480 = new(string)
	*(*o).Mp4480 = randString()
	(*o).Mp4720 = new(string)
	*(*o).Mp4720 = randString()
}

func fillRandomlyVideoVideoFull(o *models.VideoVideoFull) {
	fillRandomlyVideoVideo(&(*o).VideoVideo)
	(*o).Files = new(models.VideoVideoFiles)
	fillRandomlyVideoVideoFiles((*o).Files)
	(*o).LiveSettings = new(models.VideoLiveSettings)
	fillRandomlyVideoLiveSettings((*o).LiveSettings)
	(*o).Trailer = new(models.VideoVideoFiles)
	fillRandomlyVideoVideoFiles((*o).Trailer)
}

func fillRandomlyVideoVideoImage(o *models.VideoVideoImage) {
	fillRandomlyBaseImage(&(*o).BaseImage)
	(*o).WithPadding = new(models.BasePropertyExists)
	fillRandomlyBasePropertyExists((*o).WithPadding)
}

func fillRandomlyWallAppPost(o *models.WallAppPost) {
	(*o).Id = new(int)
	*(*o).Id = randInt()
	(*o).Name = new(string)
	*(*o).Name = randString()
	(*o).Photo130 = new(string)
	*(*o).Photo130 = randString()
	(*o).Photo604 = new(string)
	*(*o).Photo604 = randString()
}

func fillRandomlyWallAttachedNote(o *models.WallAttachedNote) {
	(*o).CanComment = new(int)
	*(*o).CanComment = randInt()
	(*o).Comments = randInt()
	(*o).Date = randInt()
	(*o).Id = randInt()
	(*o).OwnerId = randInt()
	(*o).PrivacyComment = new([]string)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).PrivacyComment = make([]string, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*o).PrivacyComment)[i0] = randString()
	}
	(*o).PrivacyView = new([]string)
	l0 = randIntn(maxArrayLength + 1)
	*(*o).PrivacyView = make([]string, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*o).PrivacyView)[i0] = randString()
	}
	(*o).ReadComments = randInt()
	(*o).Text = new(string)
	*(*o).Text = randString()
	(*o).TextWiki = new(string)
	*(*o).TextWiki = randString()
	(*o).Title = randString()
	(*o).ViewUrl = randString()
}

func fillRandomlyWallCarouselBase(o *models.WallCarouselBase) {
	(*o).CarouselOffset = new(int)
	*(*o).CarouselOffset = randInt()
}

func fillRandomlyWallCommentAttachment(o *models.WallCommentAttachment) {
	(*o).Audio = new(models.AudioAudio)
	fillRandomlyAudioAudio((*o).Audio)
	(*o).Doc = new(models.DocsDoc)
	fillRandomlyDocsDoc((*o).Doc)
	(*o).Link = new(models.BaseLink)
	fillRandomlyBaseLink((*o).Link)
	(*o).Market = new(models.MarketMarketItem)
	fillRandomlyMarketMarketItem((*o).Market)
	(*o).MarketMarketAlbum = new(models.MarketMarketAlbum)
	fillRandomlyMarketMarketAlbum((*o).MarketMarketAlbum)
	(*o).Note = new(models.WallAttachedNote)
	fillRandomlyWallAttachedNote((*o).Note)
	(*o).Page = new(models.PagesWikipageFull)
	fillRandomlyPagesWikipageFull((*o).Page)
	(*o).Photo = new(models.PhotosPhoto)
	fillRandomlyPhotosPhoto((*o).Photo)
	(*o).Sticker = new(models.BaseSticker)
	fillRandomlyBaseSticker((*o).Sticker)
	fillRandomlyWallCommentAttachmentType(&(*o).Type)
	(*o).Video = new(models.VideoVideo)
	fillRandomlyVideoVideo((*o).Video)
}

func fillRandomlyWallCommentAttachmentType(o *models.WallCommentAttachmentType) {
	switch randIntn(10) {
	case 0:
		*o = "photo"
	case 1:
		*o = "audio"
	case 2:
		*o = "video"
	case 3:
		*o = "doc"
	case 4:
		*o = "link"
	case 5:
		*o = "note"
	case 6:
		*o = "page"
	case 7:
		*o = "market_market_album"
	case 8:
		*o = "market"
	case 9:
		*o = "sticker"
	}
}

func fillRandomlyWallGeoType(o *models.WallGeoType) {
	switch randIntn(2) {
	case 0:
		*o = "place"
	case 1:
		*o = "point"
	}
}

func fillRandomlyWallGeo(o *models.WallGeo) {
	(*o).Coordinates = new(string)
	*(*o).Coordinates = randString()
	(*o).Place = new(models.BasePlace)
	fillRandomlyBasePlace((*o).Place)
	(*o).Showmap = new(int)
	*(*o).Showmap = randInt()
	(*o).Type = new(models.WallGeoType)
	fillRandomlyWallGeoType((*o).Type)
}

func fillRandomlyWallGetFilter(o *models.WallGetFilter) {
	switch randIntn(7) {
	case 0:
		*o = "owner"
	case 1:
		*o = "others"
	case 2:
		*o = "all"
	case 3:
		*o = "postponed"
	case 4:
		*o = "suggests"
	case 5:
		*o = "archived"
	case 6:
		*o = "donut"
	}
}

func fillRandomlyWallGraffiti(o *models.WallGraffiti) {
	(*o).AccessKey = new(string)
	*(*o).AccessKey = randString()
	(*o).Height = new(int)
	*(*o).Height = randInt()
	(*o).Id = new(int)
	*(*o).Id = randInt()
	(*o).OwnerId = new(int)
	*(*o).OwnerId = randInt()
	(*o).Photo200 = new(string)
	*(*o).Photo200 = randString()
	(*o).Photo586 = new(string)
	*(*o).Photo586 = randString()
	(*o).Url = new(string)
	*(*o).Url = randString()
	(*o).Width = new(int)
	*(*o).Width = randInt()
}

func fillRandomlyWallPostCopyright(o *models.WallPostCopyright) {
	(*o).Id = new(int)
	*(*o).Id = randInt()
	(*o).Link = randString()
	(*o).Name = randString()
	(*o).Type = randString()
}

func fillRandomlyWallPostSource(o *models.WallPostSource) {
	(*o).Data = new(string)
	*(*o).Data = randString()
	(*o).Link = new(models.BaseLink)
	fillRandomlyBaseLink((*o).Link)
	(*o).Platform = new(string)
	*(*o).Platform = randString()
	(*o).Type = new(models.WallPostSourceType)
	fillRandomlyWallPostSourceType((*o).Type)
	(*o).Url = new(string)
	*(*o).Url = randString()
}

func fillRandomlyWallPostSourceType(o *models.WallPostSourceType) {
	switch randIntn(6) {
	case 0:
		*o = "vk"
	case 1:
		*o = "widget"
	case 2:
		*o = "api"
	case 3:
		*o = "rss"
	case 4:
		*o = "sms"
	case 5:
		*o = "mvk"
	}
}

func fillRandomlyWallPostType(o *models.WallPostType) {
	switch randIntn(8) {
	case 0:
		*o = "post"
	case 1:
		*o = "copy"
	case 2:
		*o = "reply"
	case 3:
		*o = "postpone"
	case 4:
		*o = "suggest"
	case 5:
		*o = "post_ads"
	case 6:
		*o = "photo"
	case 7:
		*o = "video"
	}
}

func fillRandomlyWallPostedPhoto(o *models.WallPostedPhoto) {
	(*o).Id = new(int)
	*(*o).Id = randInt()
	(*o).OwnerId = new(int)
	*(*o).OwnerId = randInt()
	(*o).Photo130 = new(string)
	*(*o).Photo130 = randString()
	(*o).Photo604 = new(string)
	*(*o).Photo604 = randString()
}

func fillRandomlyWallViews(o *models.WallViews) {
	(*o).Count = new(int)
	*(*o).Count = randInt()
}

func fillRandomlyWallWallComment(o *models.WallWallComment) {
	(*o).Attachments = new([]models.WallCommentAttachment)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).Attachments = make([]models.WallCommentAttachment, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyWallCommentAttachment(&(*(*o).Attachments)[i0])
	}
	(*o).CanEdit = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).CanEdit)
	(*o).Date = randInt()
	(*o).Deleted = new(bool)
	*(*o).Deleted = randBool()
	(*o).Donut = new(models.WallWallCommentDonut)
	fillRandomlyWallWallCommentDonut((*o).Donut)
	(*o).FromId = randInt()
	(*o).Id = randInt()
	(*o).Likes = new(models.BaseLikesInfo)
	fillRandomlyBaseLikesInfo((*o).Likes)
	(*o).OwnerId = new(int)
	*(*o).OwnerId = randInt()
	(*o).ParentsStack = new([]int)
	l0 = randIntn(maxArrayLength + 1)
	*(*o).ParentsStack = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*o).ParentsStack)[i0] = randInt()
	}
	(*o).PhotoId = new(int)
	*(*o).PhotoId = randInt()
	(*o).Pid = new(int)
	*(*o).Pid = randInt()
	(*o).PostId = new(int)
	*(*o).PostId = randInt()
	(*o).RealOffset = new(int)
	*(*o).RealOffset = randInt()
	(*o).ReplyToComment = new(int)
	*(*o).ReplyToComment = randInt()
	(*o).ReplyToUser = new(int)
	*(*o).ReplyToUser = randInt()
	(*o).Text = randString()
	(*o).Thread = new(models.CommentThread)
	fillRandomlyCommentThread((*o).Thread)
	(*o).VideoId = new(int)
	*(*o).VideoId = randInt()
}

func fillRandomlyWallWallCommentDonut(o *models.WallWallCommentDonut) {
	(*o).IsDon = new(bool)
	*(*o).IsDon = randBool()
	(*o).Placeholder = new(models.WallWallCommentDonutPlaceholder)
	fillRandomlyWallWallCommentDonutPlaceholder((*o).Placeholder)
}

func fillRandomlyWallWallCommentDonutPlaceholder(o *models.WallWallCommentDonutPlaceholder) {
	(*o).Text = randString()
}

func fillRandomlyWallWallpost(o *models.WallWallpost) {
	(*o).AccessKey = new(string)
	*(*o).AccessKey = randString()
	(*o).Attachments = new([]models.WallWallpostAttachment)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).Attachments = make([]models.WallWallpostAttachment, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyWallWallpostAttachment(&(*(*o).Attachments)[i0])
	}
	(*o).Copyright = new(models.WallPostCopyright)
	fillRandomlyWallPostCopyright((*o).Copyright)
	(*o).Date = new(int)
	*(*o).Date = randInt()
	(*o).Edited = new(int)
	*(*o).Edited = randInt()
	(*o).FromId = new(int)
	*(*o).FromId = randInt()
	(*o).Geo = new(models.WallGeo)
	fillRandomlyWallGeo((*o).Geo)
	(*o).Id = new(int)
	*(*o).Id = randInt()
	(*o).IsArchived = new(bool)
	*(*o).IsArchived = randBool()
	(*o).IsDeleted = new(bool)
	*(*o).IsDeleted = randBool()
	(*o).IsFavorite = new(bool)
	*(*o).IsFavorite = randBool()
	(*o).Likes = new(models.BaseLikesInfo)
	fillRandomlyBaseLikesInfo((*o).Likes)
	(*o).OwnerId = new(int)
	*(*o).OwnerId = randInt()
	(*o).ParentsStack = new([]int)
	l0 = randIntn(maxArrayLength + 1)
	*(*o).ParentsStack = make([]int, l0)
	for i0 := 0; i0 < l0; i0++ {
		(*(*o).ParentsStack)[i0] = randInt()
	}
	(*o).PostId = new(int)
	*(*o).PostId = randInt()
	(*o).PostSource = new(models.WallPostSource)
	fillRandomlyWallPostSource((*o).PostSource)
	(*o).PostType = new(models.WallPostType)
	fillRandomlyWallPostType((*o).PostType)
	(*o).Reposts = new(models.BaseRepostsInfo)
	fillRandomlyBaseRepostsInfo((*o).Reposts)
	(*o).SignerId = new(int)
	*(*o).SignerId = randInt()
	(*o).Text = new(string)
	*(*o).Text = randString()
	(*o).Views = new(models.WallViews)
	fillRandomlyWallViews((*o).Views)
}

func fillRandomlyWallWallpostAttachment(o *models.WallWallpostAttachment) {
	(*o).AccessKey = new(string)
	*(*o).AccessKey = randString()
	(*o).Album = new(models.PhotosPhotoAlbum)
	fillRandomlyPhotosPhotoAlbum((*o).Album)
	(*o).App = new(models.WallAppPost)
	fillRandomlyWallAppPost((*o).App)
	(*o).Audio = new(models.AudioAudio)
	fillRandomlyAudioAudio((*o).Audio)
	(*o).Doc = new(models.DocsDoc)
	fillRandomlyDocsDoc((*o).Doc)
	(*o).Event = new(models.EventsEventAttach)
	fillRandomlyEventsEventAttach((*o).Event)
	(*o).Graffiti = new(models.WallGraffiti)
	fillRandomlyWallGraffiti((*o).Graffiti)
	(*o).Group = new(models.GroupsGroupAttach)
	fillRandomlyGroupsGroupAttach((*o).Group)
	(*o).Link = new(models.BaseLink)
	fillRandomlyBaseLink((*o).Link)
	(*o).Market = new(models.MarketMarketItem)
	fillRandomlyMarketMarketItem((*o).Market)
	(*o).MarketAlbum = new(models.MarketMarketAlbum)
	fillRandomlyMarketMarketAlbum((*o).MarketAlbum)
	(*o).Note = new(models.NotesNote)
	fillRandomlyNotesNote((*o).Note)
	(*o).Page = new(models.PagesWikipageFull)
	fillRandomlyPagesWikipageFull((*o).Page)
	(*o).Photo = new(models.PhotosPhoto)
	fillRandomlyPhotosPhoto((*o).Photo)
	(*o).Poll = new(models.PollsPoll)
	fillRandomlyPollsPoll((*o).Poll)
	(*o).PostedPhoto = new(models.WallPostedPhoto)
	fillRandomlyWallPostedPhoto((*o).PostedPhoto)
	fillRandomlyWallWallpostAttachmentType(&(*o).Type)
	(*o).Video = new(models.VideoVideoFull)
	fillRandomlyVideoVideoFull((*o).Video)
}

func fillRandomlyWallWallpostAttachmentType(o *models.WallWallpostAttachmentType) {
	switch randIntn(26) {
	case 0:
		*o = "photo"
	case 1:
		*o = "photos_list"
	case 2:
		*o = "posted_photo"
	case 3:
		*o = "audio"
	case 4:
		*o = "audio_playlist"
	case 5:
		*o = "video"
	case 6:
		*o = "doc"
	case 7:
		*o = "link"
	case 8:
		*o = "graffiti"
	case 9:
		*o = "note"
	case 10:
		*o = "app"
	case 11:
		*o = "poll"
	case 12:
		*o = "page"
	case 13:
		*o = "album"
	case 14:
		*o = "market_album"
	case 15:
		*o = "market"
	case 16:
		*o = "event"
	case 17:
		*o = "donut_link"
	case 18:
		*o = "article"
	case 19:
		*o = "textlive"
	case 20:
		*o = "textpost"
	case 21:
		*o = "textpost_publish"
	case 22:
		*o = "situational_theme"
	case 23:
		*o = "group"
	case 24:
		*o = "sticker"
	case 25:
		*o = "podcast"
	}
}

func fillRandomlyWallWallpostCommentsDonut(o *models.WallWallpostCommentsDonut) {
	(*o).Placeholder = new(models.WallWallpostCommentsDonutPlaceholder)
	fillRandomlyWallWallpostCommentsDonutPlaceholder((*o).Placeholder)
}

func fillRandomlyWallWallpostCommentsDonutPlaceholder(o *models.WallWallpostCommentsDonutPlaceholder) {
	(*o).Text = randString()
}

func fillRandomlyWallWallpostDonutEditMode(o *models.WallWallpostDonutEditMode) {
	switch randIntn(2) {
	case 0:
		*o = "all"
	case 1:
		*o = "duration"
	}
}

func fillRandomlyWallWallpostDonut(o *models.WallWallpostDonut) {
	(*o).CanPublishFreeCopy = new(bool)
	*(*o).CanPublishFreeCopy = randBool()
	(*o).EditMode = new(models.WallWallpostDonutEditMode)
	fillRandomlyWallWallpostDonutEditMode((*o).EditMode)
	(*o).IsDonut = randBool()
	(*o).PaidDuration = new(int)
	*(*o).PaidDuration = randInt()
	(*o).Placeholder = new(models.WallWallpostDonutPlaceholder)
	fillRandomlyWallWallpostDonutPlaceholder((*o).Placeholder)
}

func fillRandomlyWallWallpostDonutPlaceholder(o *models.WallWallpostDonutPlaceholder) {
	(*o).Text = randString()
}

func fillRandomlyWallWallpostFullTopicId(o *models.WallWallpostFullTopicId) {
	switch randIntn(12) {
	case 0:
		*o = 0
	case 1:
		*o = 1
	case 2:
		*o = 7
	case 3:
		*o = 12
	case 4:
		*o = 16
	case 5:
		*o = 19
	case 6:
		*o = 21
	case 7:
		*o = 23
	case 8:
		*o = 25
	case 9:
		*o = 26
	case 10:
		*o = 32
	case 11:
		*o = 43
	}
}

func fillRandomlyWallWallpostFull(o *models.WallWallpostFull) {
	fillRandomlyWallCarouselBase(&(*o).WallCarouselBase)
	fillRandomlyWallWallpost(&(*o).WallWallpost)
	(*o).CanDelete = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).CanDelete)
	(*o).CanEdit = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).CanEdit)
	(*o).CanPin = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).CanPin)
	(*o).Comments = new(models.BaseCommentsInfo)
	fillRandomlyBaseCommentsInfo((*o).Comments)
	(*o).CopyHistory = new([]models.WallWallpostFull)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).CopyHistory = make([]models.WallWallpostFull, l0)
	for i0 := 0; i0 < l0; i0++ {
		//fillRandomlyWallWallpostFull(&(*(*o).CopyHistory)[i0])
	}
	(*o).CreatedBy = new(int)
	*(*o).CreatedBy = randInt()
	(*o).Donut = new(models.WallWallpostDonut)
	fillRandomlyWallWallpostDonut((*o).Donut)
	(*o).Hash = new(string)
	*(*o).Hash = randString()
	(*o).IsPinned = new(int)
	*(*o).IsPinned = randInt()
	(*o).MarkedAsAds = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).MarkedAsAds)
	(*o).ShortTextRate = new(float64)
	*(*o).ShortTextRate = randFloat()
	(*o).TopicId = new(models.WallWallpostFullTopicId)
	fillRandomlyWallWallpostFullTopicId((*o).TopicId)
}

func fillRandomlyWallWallpostToId(o *models.WallWallpostToId) {
	(*o).Attachments = new([]models.WallWallpostAttachment)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).Attachments = make([]models.WallWallpostAttachment, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyWallWallpostAttachment(&(*(*o).Attachments)[i0])
	}
	(*o).Comments = new(models.BaseCommentsInfo)
	fillRandomlyBaseCommentsInfo((*o).Comments)
	(*o).CopyOwnerId = new(int)
	*(*o).CopyOwnerId = randInt()
	(*o).CopyPostId = new(int)
	*(*o).CopyPostId = randInt()
	(*o).Date = new(int)
	*(*o).Date = randInt()
	(*o).FromId = new(int)
	*(*o).FromId = randInt()
	(*o).Geo = new(models.WallGeo)
	fillRandomlyWallGeo((*o).Geo)
	(*o).Id = new(int)
	*(*o).Id = randInt()
	(*o).IsFavorite = new(bool)
	*(*o).IsFavorite = randBool()
	(*o).Likes = new(models.BaseLikesInfo)
	fillRandomlyBaseLikesInfo((*o).Likes)
	(*o).PostId = new(int)
	*(*o).PostId = randInt()
	(*o).PostSource = new(models.WallPostSource)
	fillRandomlyWallPostSource((*o).PostSource)
	(*o).PostType = new(models.WallPostType)
	fillRandomlyWallPostType((*o).PostType)
	(*o).Reposts = new(models.BaseRepostsInfo)
	fillRandomlyBaseRepostsInfo((*o).Reposts)
	(*o).SignerId = new(int)
	*(*o).SignerId = randInt()
	(*o).Text = new(string)
	*(*o).Text = randString()
	(*o).ToId = new(int)
	*(*o).ToId = randInt()
}

func fillRandomlyWidgetsCommentMedia(o *models.WidgetsCommentMedia) {
	(*o).ItemId = new(int)
	*(*o).ItemId = randInt()
	(*o).OwnerId = new(int)
	*(*o).OwnerId = randInt()
	(*o).ThumbSrc = new(string)
	*(*o).ThumbSrc = randString()
	(*o).Type = new(models.WidgetsCommentMediaType)
	fillRandomlyWidgetsCommentMediaType((*o).Type)
}

func fillRandomlyWidgetsCommentMediaType(o *models.WidgetsCommentMediaType) {
	switch randIntn(3) {
	case 0:
		*o = "audio"
	case 1:
		*o = "photo"
	case 2:
		*o = "video"
	}
}

func fillRandomlyWidgetsCommentReplies(o *models.WidgetsCommentReplies) {
	(*o).CanPost = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).CanPost)
	(*o).Count = new(int)
	*(*o).Count = randInt()
	(*o).Replies = new([]models.WidgetsCommentRepliesItem)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).Replies = make([]models.WidgetsCommentRepliesItem, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyWidgetsCommentRepliesItem(&(*(*o).Replies)[i0])
	}
}

func fillRandomlyWidgetsCommentRepliesItem(o *models.WidgetsCommentRepliesItem) {
	(*o).Cid = new(int)
	*(*o).Cid = randInt()
	(*o).Date = new(int)
	*(*o).Date = randInt()
	(*o).Likes = new(models.WidgetsWidgetLikes)
	fillRandomlyWidgetsWidgetLikes((*o).Likes)
	(*o).Text = new(string)
	*(*o).Text = randString()
	(*o).Uid = new(int)
	*(*o).Uid = randInt()
	(*o).User = new(models.UsersUserFull)
	fillRandomlyUsersUserFull((*o).User)
}

func fillRandomlyWidgetsWidgetComment(o *models.WidgetsWidgetComment) {
	(*o).Attachments = new([]models.WallCommentAttachment)
	l0 := randIntn(maxArrayLength + 1)
	*(*o).Attachments = make([]models.WallCommentAttachment, l0)
	for i0 := 0; i0 < l0; i0++ {
		fillRandomlyWallCommentAttachment(&(*(*o).Attachments)[i0])
	}
	(*o).CanDelete = new(models.BaseBoolInt)
	fillRandomlyBaseBoolInt((*o).CanDelete)
	(*o).Comments = new(models.WidgetsCommentReplies)
	fillRandomlyWidgetsCommentReplies((*o).Comments)
	(*o).Date = randInt()
	(*o).FromId = randInt()
	(*o).Id = randInt()
	(*o).Likes = new(models.BaseLikesInfo)
	fillRandomlyBaseLikesInfo((*o).Likes)
	(*o).Media = new(models.WidgetsCommentMedia)
	fillRandomlyWidgetsCommentMedia((*o).Media)
	(*o).PostSource = new(models.WallPostSource)
	fillRandomlyWallPostSource((*o).PostSource)
	(*o).PostType = randInt()
	(*o).Reposts = new(models.BaseRepostsInfo)
	fillRandomlyBaseRepostsInfo((*o).Reposts)
	(*o).Text = randString()
	(*o).ToId = randInt()
	(*o).User = new(models.UsersUserFull)
	fillRandomlyUsersUserFull((*o).User)
}

func fillRandomlyWidgetsWidgetLikes(o *models.WidgetsWidgetLikes) {
	(*o).Count = new(int)
	*(*o).Count = randInt()
}

func fillRandomlyWidgetsWidgetPage(o *models.WidgetsWidgetPage) {
	(*o).Comments = new(models.BaseObjectCount)
	fillRandomlyBaseObjectCount((*o).Comments)
	(*o).Date = new(int)
	*(*o).Date = randInt()
	(*o).Description = new(string)
	*(*o).Description = randString()
	(*o).Id = new(int)
	*(*o).Id = randInt()
	(*o).Likes = new(models.BaseObjectCount)
	fillRandomlyBaseObjectCount((*o).Likes)
	(*o).PageId = new(string)
	*(*o).PageId = randString()
	(*o).Photo = new(string)
	*(*o).Photo = randString()
	(*o).Title = new(string)
	*(*o).Title = randString()
	(*o).Url = new(string)
	*(*o).Url = randString()
}

