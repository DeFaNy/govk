// Code generated by https://github.com/defany/govk. DO NOT EDIT.

package tests

import (
	"encoding/json"
	"github.com/defany/govk/api/gen/donut"
	"github.com/defany/govk/api/gen/models"
	"github.com/defany/govk/pkg/random"
	"github.com/defany/govk/vk"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func fillRandomlyDonutGetFriendsRequest(r *requests.DonutGetFriendsRequest) {
	r.WithOwnerId(random.RandInt())
	r.WithOffset(random.RandInt())
	r.WithCount(random.RandInt())
	lFields := random.RandIntn(random.MaxArrayLength + 1)
	r.WithFields(random.RandStringArr(lFields))
}

func TestVKDonutGetFriendsSuccess(t *testing.T) {
	params := requests.NewDonutGetFriendsRequest()
	fillRandomlyDonutGetFriendsRequest(&params)
	var expected models.GroupsGetMembersFieldsResponse
	fillRandomlyGroupsGetMembersFieldsResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "donut.getFriends", params.Params(), expectedJSON))
	resp, err := vk.Api.Donut.DonutGetFriends(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyDonutGetSubscriptionRequest(r *requests.DonutGetSubscriptionRequest) {
	r.WithOwnerId(random.RandInt())
}

func TestVKDonutGetSubscriptionSuccess(t *testing.T) {
	params := requests.NewDonutGetSubscriptionRequest()
	fillRandomlyDonutGetSubscriptionRequest(&params)
	var expected models.DonutGetSubscriptionResponse
	fillRandomlyDonutGetSubscriptionResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "donut.getSubscription", params.Params(), expectedJSON))
	resp, err := vk.Api.Donut.DonutGetSubscription(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyDonutGetSubscriptionsRequest(r *requests.DonutGetSubscriptionsRequest) {
	Fields := new([]models.BaseUserGroupFields)
	lFields := random.RandIntn(random.MaxArrayLength + 1)
	*Fields = make([]models.BaseUserGroupFields, lFields)
	for i0 := 0; i0 < lFields; i0++ {
		fillRandomlyBaseUserGroupFields(&(*Fields)[i0])
	}
	r.WithFields(*Fields)
	r.WithOffset(random.RandInt())
	r.WithCount(random.RandInt())
}

func TestVKDonutGetSubscriptionsSuccess(t *testing.T) {
	params := requests.NewDonutGetSubscriptionsRequest()
	fillRandomlyDonutGetSubscriptionsRequest(&params)
	var expected models.DonutGetSubscriptionsResponse
	fillRandomlyDonutGetSubscriptionsResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "donut.getSubscriptions", params.Params(), expectedJSON))
	resp, err := vk.Api.Donut.DonutGetSubscriptions(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyDonutIsDonRequest(r *requests.DonutIsDonRequest) {
	r.WithOwnerId(random.RandInt())
}

func TestVKDonutIsDonSuccess(t *testing.T) {
	params := requests.NewDonutIsDonRequest()
	fillRandomlyDonutIsDonRequest(&params)
	var expected models.BaseBoolResponse
	fillRandomlyBaseBoolResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.RandString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "donut.isDon", params.Params(), expectedJSON))
	resp, err := vk.Api.Donut.DonutIsDon(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}
