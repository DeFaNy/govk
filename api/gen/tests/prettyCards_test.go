// Code generated by https://github.com/defany/govk. DO NOT EDIT.

package tests

import (
	"encoding/json"
	"github.com/defany/govk/api/gen/models"
	"github.com/defany/govk/api/gen/prettycards"
	"github.com/defany/govk/pkg/random"
	"github.com/defany/govk/vk"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func fillRandomlyPrettyCardsCreateRequest(r *requests.PrettyCardsCreateRequest) {
	r.WithOwnerId(random.Int())
	r.WithPhoto(random.String())
	r.WithTitle(random.String())
	r.WithLink(random.String())
	r.WithPrice(random.String())
	r.WithPriceOld(random.String())
	r.WithButton(random.String())
}

func TestVKPrettyCardsCreateSuccess(t *testing.T) {
	params := requests.NewPrettyCardsCreateRequest()
	fillRandomlyPrettyCardsCreateRequest(&params)
	var expected models.PrettyCardsCreateResponse
	fillRandomlyPrettyCardsCreateResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.String()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "prettyCards.create", params.Params(), expectedJSON))
	resp, err := vk.Api.PrettyCards.PrettyCardsCreate(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyPrettyCardsDeleteRequest(r *requests.PrettyCardsDeleteRequest) {
	r.WithOwnerId(random.Int())
	r.WithCardId(random.Int())
}

func TestVKPrettyCardsDeleteSuccess(t *testing.T) {
	params := requests.NewPrettyCardsDeleteRequest()
	fillRandomlyPrettyCardsDeleteRequest(&params)
	var expected models.PrettyCardsDeleteResponse
	fillRandomlyPrettyCardsDeleteResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.String()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "prettyCards.delete", params.Params(), expectedJSON))
	resp, err := vk.Api.PrettyCards.PrettyCardsDelete(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyPrettyCardsEditRequest(r *requests.PrettyCardsEditRequest) {
	r.WithOwnerId(random.Int())
	r.WithCardId(random.Int())
	r.WithPhoto(random.String())
	r.WithTitle(random.String())
	r.WithLink(random.String())
	r.WithPrice(random.String())
	r.WithPriceOld(random.String())
	r.WithButton(random.String())
}

func TestVKPrettyCardsEditSuccess(t *testing.T) {
	params := requests.NewPrettyCardsEditRequest()
	fillRandomlyPrettyCardsEditRequest(&params)
	var expected models.PrettyCardsEditResponse
	fillRandomlyPrettyCardsEditResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.String()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "prettyCards.edit", params.Params(), expectedJSON))
	resp, err := vk.Api.PrettyCards.PrettyCardsEdit(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyPrettyCardsGetRequest(r *requests.PrettyCardsGetRequest) {
	r.WithOwnerId(random.Int())
	r.WithOffset(random.Int())
	r.WithCount(random.Int())
}

func TestVKPrettyCardsGetSuccess(t *testing.T) {
	params := requests.NewPrettyCardsGetRequest()
	fillRandomlyPrettyCardsGetRequest(&params)
	var expected models.PrettyCardsGetResponse
	fillRandomlyPrettyCardsGetResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.String()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "prettyCards.get", params.Params(), expectedJSON))
	resp, err := vk.Api.PrettyCards.PrettyCardsGet(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyPrettyCardsGetByIdRequest(r *requests.PrettyCardsGetByIdRequest) {
	r.WithOwnerId(random.Int())
	lCardIds := random.IntDiapason(random.MaxArrayLength + 1)
	r.WithCardIds(random.IntArr(lCardIds))
}

func TestVKPrettyCardsGetByIdSuccess(t *testing.T) {
	params := requests.NewPrettyCardsGetByIdRequest()
	fillRandomlyPrettyCardsGetByIdRequest(&params)
	var expected models.PrettyCardsGetByIdResponse
	fillRandomlyPrettyCardsGetByIdResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.String()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "prettyCards.getById", params.Params(), expectedJSON))
	resp, err := vk.Api.PrettyCards.PrettyCardsGetById(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func TestVKPrettyCardsGetUploadURLSuccess(t *testing.T) {
	var expected models.PrettyCardsGetUploadURLResponse
	fillRandomlyPrettyCardsGetUploadURLResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := random.String()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "prettyCards.getUploadURL", nil, expectedJSON))
	resp, err := vk.Api.PrettyCards.PrettyCardsGetUploadURL()
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}
