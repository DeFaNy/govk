// Code generated by https://github.com/defany/govk. DO NOT EDIT.

package tests

import (
	"github.com/defany/govk/api/gen/models"
	"github.com/defany/govk/api/gen/secure"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"github.com/defany/govk/vk"
	"testing"
	"encoding/json"
)

func fillRandomlySecureAddAppEventRequest(r *requests.SecureAddAppEventRequest) {
	r.WithUserId(randInt())
	r.WithActivityId(randInt())
	r.WithValue(randInt())
}

func TestVKSecureAddAppEventSuccess(t *testing.T) {
	params := requests.NewSecureAddAppEventRequest()
	fillRandomlySecureAddAppEventRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "secure.addAppEvent", params.Params(), expectedJSON))
	resp, err := vk.Api.Secure.SecureAddAppEvent(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlySecureCheckTokenRequest(r *requests.SecureCheckTokenRequest) {
	r.WithToken(randString())
	r.WithIp(randString())
}

func TestVKSecureCheckTokenSuccess(t *testing.T) {
	params := requests.NewSecureCheckTokenRequest()
	fillRandomlySecureCheckTokenRequest(&params)
	var expected models.SecureCheckTokenResponse
	fillRandomlySecureCheckTokenResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "secure.checkToken", params.Params(), expectedJSON))
	resp, err := vk.Api.Secure.SecureCheckToken(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func TestVKSecureGetAppBalanceSuccess(t *testing.T) {
	var expected models.SecureGetAppBalanceResponse
	fillRandomlySecureGetAppBalanceResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "secure.getAppBalance", nil, expectedJSON))
	resp, err := vk.Api.Secure.SecureGetAppBalance()
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlySecureGetSMSHistoryRequest(r *requests.SecureGetSMSHistoryRequest) {
	r.WithUserId(randInt())
	r.WithDateFrom(randInt())
	r.WithDateTo(randInt())
	r.WithLimit(randInt())
}

func TestVKSecureGetSMSHistorySuccess(t *testing.T) {
	params := requests.NewSecureGetSMSHistoryRequest()
	fillRandomlySecureGetSMSHistoryRequest(&params)
	var expected models.SecureGetSMSHistoryResponse
	fillRandomlySecureGetSMSHistoryResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "secure.getSMSHistory", params.Params(), expectedJSON))
	resp, err := vk.Api.Secure.SecureGetSMSHistory(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlySecureGetTransactionsHistoryRequest(r *requests.SecureGetTransactionsHistoryRequest) {
	r.WithType(randInt())
	r.WithUidFrom(randInt())
	r.WithUidTo(randInt())
	r.WithDateFrom(randInt())
	r.WithDateTo(randInt())
	r.WithLimit(randInt())
}

func TestVKSecureGetTransactionsHistorySuccess(t *testing.T) {
	params := requests.NewSecureGetTransactionsHistoryRequest()
	fillRandomlySecureGetTransactionsHistoryRequest(&params)
	var expected models.SecureGetTransactionsHistoryResponse
	fillRandomlySecureGetTransactionsHistoryResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "secure.getTransactionsHistory", params.Params(), expectedJSON))
	resp, err := vk.Api.Secure.SecureGetTransactionsHistory(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlySecureGetUserLevelRequest(r *requests.SecureGetUserLevelRequest) {
	lUserIds := randIntn(maxArrayLength + 1)
	r.WithUserIds(randIntArr(lUserIds))
}

func TestVKSecureGetUserLevelSuccess(t *testing.T) {
	params := requests.NewSecureGetUserLevelRequest()
	fillRandomlySecureGetUserLevelRequest(&params)
	var expected models.SecureGetUserLevelResponse
	fillRandomlySecureGetUserLevelResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "secure.getUserLevel", params.Params(), expectedJSON))
	resp, err := vk.Api.Secure.SecureGetUserLevel(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlySecureGiveEventStickerRequest(r *requests.SecureGiveEventStickerRequest) {
	lUserIds := randIntn(maxArrayLength + 1)
	r.WithUserIds(randIntArr(lUserIds))
	r.WithAchievementId(randInt())
}

func TestVKSecureGiveEventStickerSuccess(t *testing.T) {
	params := requests.NewSecureGiveEventStickerRequest()
	fillRandomlySecureGiveEventStickerRequest(&params)
	var expected models.SecureGiveEventStickerResponse
	fillRandomlySecureGiveEventStickerResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "secure.giveEventSticker", params.Params(), expectedJSON))
	resp, err := vk.Api.Secure.SecureGiveEventSticker(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlySecureSendNotificationRequest(r *requests.SecureSendNotificationRequest) {
	lUserIds := randIntn(maxArrayLength + 1)
	r.WithUserIds(randIntArr(lUserIds))
	r.WithUserId(randInt())
	r.WithMessage(randString())
}

func TestVKSecureSendNotificationSuccess(t *testing.T) {
	params := requests.NewSecureSendNotificationRequest()
	fillRandomlySecureSendNotificationRequest(&params)
	var expected models.SecureSendNotificationResponse
	fillRandomlySecureSendNotificationResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "secure.sendNotification", params.Params(), expectedJSON))
	resp, err := vk.Api.Secure.SecureSendNotification(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlySecureSendSMSNotificationRequest(r *requests.SecureSendSMSNotificationRequest) {
	r.WithUserId(randInt())
	r.WithMessage(randString())
}

func TestVKSecureSendSMSNotificationSuccess(t *testing.T) {
	params := requests.NewSecureSendSMSNotificationRequest()
	fillRandomlySecureSendSMSNotificationRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "secure.sendSMSNotification", params.Params(), expectedJSON))
	resp, err := vk.Api.Secure.SecureSendSMSNotification(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlySecureSetCounterRequest(r *requests.SecureSetCounterRequest) {
	lCounters := randIntn(maxArrayLength + 1)
	r.WithCounters(randStringArr(lCounters))
	r.WithUserId(randInt())
	r.WithCounter(randInt())
	r.WithIncrement(randBool())
}

func TestVKSecureSetCounterSuccess(t *testing.T) {
	params := requests.NewSecureSetCounterRequest()
	fillRandomlySecureSetCounterRequest(&params)
	var expected models.BaseBoolResponse
	fillRandomlyBaseBoolResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "secure.setCounter", params.Params(), expectedJSON))
	resp, err := vk.Api.Secure.SecureSetCounter(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlySecureSetCounterCountersRequest(r *requests.SecureSetCounterCountersRequest) {
	lCounters := randIntn(maxArrayLength + 1)
	r.WithCounters(randStringArr(lCounters))
	r.WithUserId(randInt())
	r.WithCounter(randInt())
	r.WithIncrement(randBool())
}

func TestVKSecureSetCounterCountersSuccess(t *testing.T) {
	params := requests.NewSecureSetCounterCountersRequest()
	fillRandomlySecureSetCounterCountersRequest(&params)
	var expected models.SecureSetCounterArrayResponse
	fillRandomlySecureSetCounterArrayResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "secure.setCounter", params.Params(), expectedJSON))
	resp, err := vk.Api.Secure.SecureSetCounterCounters(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlySecureSetCounterNotSecureRequest(r *requests.SecureSetCounterNotSecureRequest) {
	lCounters := randIntn(maxArrayLength + 1)
	r.WithCounters(randStringArr(lCounters))
	r.WithUserId(randInt())
	r.WithCounter(randInt())
	r.WithIncrement(randBool())
}

func TestVKSecureSetCounterNotSecureSuccess(t *testing.T) {
	params := requests.NewSecureSetCounterNotSecureRequest()
	fillRandomlySecureSetCounterNotSecureRequest(&params)
	var expected models.BaseBoolResponse
	fillRandomlyBaseBoolResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "setCounter", params.Params(), expectedJSON))
	resp, err := vk.Api.Secure.SecureSetCounterNotSecure(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

