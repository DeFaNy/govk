// Code generated by https://github.com/defany/govk. DO NOT EDIT.

package tests

import (
	"github.com/defany/govk/api/gen/models"
	"github.com/defany/govk/api/gen/stories"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"github.com/defany/govk/vk"
	"testing"
	"encoding/json"
)

func fillRandomlyStoriesBanOwnerRequest(r *requests.StoriesBanOwnerRequest) {
	lOwnersIds := randIntn(maxArrayLength + 1)
	r.WithOwnersIds(randIntArr(lOwnersIds))
}

func TestVKStoriesBanOwnerSuccess(t *testing.T) {
	params := requests.NewStoriesBanOwnerRequest()
	fillRandomlyStoriesBanOwnerRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "stories.banOwner", params.Params(), expectedJSON))
	resp, err := vk.Api.Stories.StoriesBanOwner(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyStoriesDeleteRequest(r *requests.StoriesDeleteRequest) {
	r.WithOwnerId(randInt())
	r.WithStoryId(randInt())
	lStories := randIntn(maxArrayLength + 1)
	r.WithStories(randStringArr(lStories))
}

func TestVKStoriesDeleteSuccess(t *testing.T) {
	params := requests.NewStoriesDeleteRequest()
	fillRandomlyStoriesDeleteRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "stories.delete", params.Params(), expectedJSON))
	resp, err := vk.Api.Stories.StoriesDelete(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyStoriesGetRequest(r *requests.StoriesGetRequest) {
	r.WithOwnerId(randInt())
	r.WithExtended(randBool())
	Fields := new([]models.BaseUserGroupFields)
	lFields := randIntn(maxArrayLength + 1)
	*Fields = make([]models.BaseUserGroupFields, lFields)
	for i0 := 0; i0 < lFields; i0++ {
		fillRandomlyBaseUserGroupFields(&(*Fields)[i0])
	}
	r.WithFields(*Fields)
}

func TestVKStoriesGetSuccess(t *testing.T) {
	params := requests.NewStoriesGetRequest()
	fillRandomlyStoriesGetRequest(&params)
	var expected models.StoriesGetV5113Response
	fillRandomlyStoriesGetV5113Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "stories.get", params.Params(), expectedJSON))
	resp, err := vk.Api.Stories.StoriesGet(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyStoriesGetBannedRequest(r *requests.StoriesGetBannedRequest) {
	r.WithExtended(randBool())
	Fields := new([]models.BaseUserGroupFields)
	lFields := randIntn(maxArrayLength + 1)
	*Fields = make([]models.BaseUserGroupFields, lFields)
	for i0 := 0; i0 < lFields; i0++ {
		fillRandomlyBaseUserGroupFields(&(*Fields)[i0])
	}
	r.WithFields(*Fields)
}

func TestVKStoriesGetBannedSuccess(t *testing.T) {
	params := requests.NewStoriesGetBannedRequest()
	fillRandomlyStoriesGetBannedRequest(&params)
	params.WithExtended(false)
	var expected models.StoriesGetBannedResponse
	fillRandomlyStoriesGetBannedResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "stories.getBanned", params.Params(), expectedJSON))
	resp, err := vk.Api.Stories.StoriesGetBanned(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func TestVKStoriesGetBannedExtendedSuccess(t *testing.T) {
	params := requests.NewStoriesGetBannedRequest()
	fillRandomlyStoriesGetBannedRequest(&params)
	params.WithExtended(true)
	var expected models.StoriesGetBannedExtendedResponse
	fillRandomlyStoriesGetBannedExtendedResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "stories.getBanned", params.Params(), expectedJSON))
	resp, err := vk.Api.Stories.StoriesGetBannedExtended(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyStoriesGetByIdRequest(r *requests.StoriesGetByIdRequest) {
	lStories := randIntn(maxArrayLength + 1)
	r.WithStories(randStringArr(lStories))
	r.WithExtended(randBool())
	Fields := new([]models.BaseUserGroupFields)
	lFields := randIntn(maxArrayLength + 1)
	*Fields = make([]models.BaseUserGroupFields, lFields)
	for i0 := 0; i0 < lFields; i0++ {
		fillRandomlyBaseUserGroupFields(&(*Fields)[i0])
	}
	r.WithFields(*Fields)
}

func TestVKStoriesGetByIdSuccess(t *testing.T) {
	params := requests.NewStoriesGetByIdRequest()
	fillRandomlyStoriesGetByIdRequest(&params)
	var expected models.StoriesGetByIdExtendedResponse
	fillRandomlyStoriesGetByIdExtendedResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "stories.getById", params.Params(), expectedJSON))
	resp, err := vk.Api.Stories.StoriesGetById(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyStoriesGetPhotoUploadServerRequest(r *requests.StoriesGetPhotoUploadServerRequest) {
	r.WithAddToNews(randBool())
	lUserIds := randIntn(maxArrayLength + 1)
	r.WithUserIds(randIntArr(lUserIds))
	r.WithReplyToStory(randString())
	LinkText := new(models.StoriesUploadLinkText)
	fillRandomlyStoriesUploadLinkText(LinkText)
	r.WithLinkText(*LinkText)
	r.WithLinkUrl(randString())
	r.WithGroupId(randInt())
	r.WithClickableStickers(randString())
}

func TestVKStoriesGetPhotoUploadServerSuccess(t *testing.T) {
	params := requests.NewStoriesGetPhotoUploadServerRequest()
	fillRandomlyStoriesGetPhotoUploadServerRequest(&params)
	var expected models.StoriesGetPhotoUploadServerResponse
	fillRandomlyStoriesGetPhotoUploadServerResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "stories.getPhotoUploadServer", params.Params(), expectedJSON))
	resp, err := vk.Api.Stories.StoriesGetPhotoUploadServer(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyStoriesGetRepliesRequest(r *requests.StoriesGetRepliesRequest) {
	r.WithOwnerId(randInt())
	r.WithStoryId(randInt())
	r.WithAccessKey(randString())
	r.WithExtended(randBool())
	Fields := new([]models.BaseUserGroupFields)
	lFields := randIntn(maxArrayLength + 1)
	*Fields = make([]models.BaseUserGroupFields, lFields)
	for i0 := 0; i0 < lFields; i0++ {
		fillRandomlyBaseUserGroupFields(&(*Fields)[i0])
	}
	r.WithFields(*Fields)
}

func TestVKStoriesGetRepliesSuccess(t *testing.T) {
	params := requests.NewStoriesGetRepliesRequest()
	fillRandomlyStoriesGetRepliesRequest(&params)
	var expected models.StoriesGetV5113Response
	fillRandomlyStoriesGetV5113Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "stories.getReplies", params.Params(), expectedJSON))
	resp, err := vk.Api.Stories.StoriesGetReplies(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyStoriesGetStatsRequest(r *requests.StoriesGetStatsRequest) {
	r.WithOwnerId(randInt())
	r.WithStoryId(randInt())
}

func TestVKStoriesGetStatsSuccess(t *testing.T) {
	params := requests.NewStoriesGetStatsRequest()
	fillRandomlyStoriesGetStatsRequest(&params)
	var expected models.StoriesGetStatsResponse
	fillRandomlyStoriesGetStatsResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "stories.getStats", params.Params(), expectedJSON))
	resp, err := vk.Api.Stories.StoriesGetStats(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyStoriesGetVideoUploadServerRequest(r *requests.StoriesGetVideoUploadServerRequest) {
	r.WithAddToNews(randBool())
	lUserIds := randIntn(maxArrayLength + 1)
	r.WithUserIds(randIntArr(lUserIds))
	r.WithReplyToStory(randString())
	LinkText := new(models.StoriesUploadLinkText)
	fillRandomlyStoriesUploadLinkText(LinkText)
	r.WithLinkText(*LinkText)
	r.WithLinkUrl(randString())
	r.WithGroupId(randInt())
	r.WithClickableStickers(randString())
}

func TestVKStoriesGetVideoUploadServerSuccess(t *testing.T) {
	params := requests.NewStoriesGetVideoUploadServerRequest()
	fillRandomlyStoriesGetVideoUploadServerRequest(&params)
	var expected models.StoriesGetVideoUploadServerResponse
	fillRandomlyStoriesGetVideoUploadServerResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "stories.getVideoUploadServer", params.Params(), expectedJSON))
	resp, err := vk.Api.Stories.StoriesGetVideoUploadServer(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyStoriesGetViewersRequest(r *requests.StoriesGetViewersRequest) {
	r.WithOwnerId(randInt())
	r.WithStoryId(randInt())
	r.WithCount(randInt())
	r.WithOffset(randInt())
	r.WithExtended(randBool())
	Fields := new([]models.BaseUserGroupFields)
	lFields := randIntn(maxArrayLength + 1)
	*Fields = make([]models.BaseUserGroupFields, lFields)
	for i0 := 0; i0 < lFields; i0++ {
		fillRandomlyBaseUserGroupFields(&(*Fields)[i0])
	}
	r.WithFields(*Fields)
}

func TestVKStoriesGetViewersSuccess(t *testing.T) {
	params := requests.NewStoriesGetViewersRequest()
	fillRandomlyStoriesGetViewersRequest(&params)
	params.WithExtended(false)
	var expected models.StoriesGetViewersExtendedV5115Response
	fillRandomlyStoriesGetViewersExtendedV5115Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "stories.getViewers", params.Params(), expectedJSON))
	resp, err := vk.Api.Stories.StoriesGetViewers(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func TestVKStoriesGetViewersExtendedSuccess(t *testing.T) {
	params := requests.NewStoriesGetViewersRequest()
	fillRandomlyStoriesGetViewersRequest(&params)
	params.WithExtended(true)
	var expected models.StoriesGetViewersExtendedV5115Response
	fillRandomlyStoriesGetViewersExtendedV5115Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "stories.getViewers", params.Params(), expectedJSON))
	resp, err := vk.Api.Stories.StoriesGetViewersExtended(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyStoriesHideAllRepliesRequest(r *requests.StoriesHideAllRepliesRequest) {
	r.WithOwnerId(randInt())
	r.WithGroupId(randInt())
}

func TestVKStoriesHideAllRepliesSuccess(t *testing.T) {
	params := requests.NewStoriesHideAllRepliesRequest()
	fillRandomlyStoriesHideAllRepliesRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "stories.hideAllReplies", params.Params(), expectedJSON))
	resp, err := vk.Api.Stories.StoriesHideAllReplies(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyStoriesHideReplyRequest(r *requests.StoriesHideReplyRequest) {
	r.WithOwnerId(randInt())
	r.WithStoryId(randInt())
}

func TestVKStoriesHideReplySuccess(t *testing.T) {
	params := requests.NewStoriesHideReplyRequest()
	fillRandomlyStoriesHideReplyRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "stories.hideReply", params.Params(), expectedJSON))
	resp, err := vk.Api.Stories.StoriesHideReply(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyStoriesSaveRequest(r *requests.StoriesSaveRequest) {
	lUploadResults := randIntn(maxArrayLength + 1)
	r.WithUploadResults(randStringArr(lUploadResults))
	r.WithExtended(randBool())
	Fields := new([]models.BaseUserGroupFields)
	lFields := randIntn(maxArrayLength + 1)
	*Fields = make([]models.BaseUserGroupFields, lFields)
	for i0 := 0; i0 < lFields; i0++ {
		fillRandomlyBaseUserGroupFields(&(*Fields)[i0])
	}
	r.WithFields(*Fields)
}

func TestVKStoriesSaveSuccess(t *testing.T) {
	params := requests.NewStoriesSaveRequest()
	fillRandomlyStoriesSaveRequest(&params)
	var expected models.StoriesSaveResponse
	fillRandomlyStoriesSaveResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "stories.save", params.Params(), expectedJSON))
	resp, err := vk.Api.Stories.StoriesSave(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyStoriesSearchRequest(r *requests.StoriesSearchRequest) {
	r.WithQ(randString())
	r.WithPlaceId(randInt())
	r.WithLatitude(randFloat())
	r.WithLongitude(randFloat())
	r.WithRadius(randInt())
	r.WithMentionedId(randInt())
	r.WithCount(randInt())
	r.WithExtended(randBool())
	Fields := new([]models.BaseUserGroupFields)
	lFields := randIntn(maxArrayLength + 1)
	*Fields = make([]models.BaseUserGroupFields, lFields)
	for i0 := 0; i0 < lFields; i0++ {
		fillRandomlyBaseUserGroupFields(&(*Fields)[i0])
	}
	r.WithFields(*Fields)
}

func TestVKStoriesSearchSuccess(t *testing.T) {
	params := requests.NewStoriesSearchRequest()
	fillRandomlyStoriesSearchRequest(&params)
	var expected models.StoriesGetV5113Response
	fillRandomlyStoriesGetV5113Response(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "stories.search", params.Params(), expectedJSON))
	resp, err := vk.Api.Stories.StoriesSearch(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyStoriesSendInteractionRequest(r *requests.StoriesSendInteractionRequest) {
	r.WithAccessKey(randString())
	r.WithMessage(randString())
	r.WithIsBroadcast(randBool())
	r.WithIsAnonymous(randBool())
	r.WithUnseenMarker(randBool())
}

func TestVKStoriesSendInteractionSuccess(t *testing.T) {
	params := requests.NewStoriesSendInteractionRequest()
	fillRandomlyStoriesSendInteractionRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "stories.sendInteraction", params.Params(), expectedJSON))
	resp, err := vk.Api.Stories.StoriesSendInteraction(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyStoriesUnbanOwnerRequest(r *requests.StoriesUnbanOwnerRequest) {
	lOwnersIds := randIntn(maxArrayLength + 1)
	r.WithOwnersIds(randIntArr(lOwnersIds))
}

func TestVKStoriesUnbanOwnerSuccess(t *testing.T) {
	params := requests.NewStoriesUnbanOwnerRequest()
	fillRandomlyStoriesUnbanOwnerRequest(&params)
	var expected models.BaseOkResponse
	fillRandomlyBaseOkResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "stories.unbanOwner", params.Params(), expectedJSON))
	resp, err := vk.Api.Stories.StoriesUnbanOwner(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

