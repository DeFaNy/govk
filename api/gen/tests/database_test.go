// Code generated by https://github.com/defany/govk. DO NOT EDIT.

package tests

import (
	"github.com/defany/govk/api/gen/models"
	"github.com/defany/govk/api/gen/database"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"github.com/defany/govk/vk"
	"testing"
	"encoding/json"
)

func fillRandomlyDatabaseGetChairsRequest(r *requests.DatabaseGetChairsRequest) {
	r.WithFacultyId(randInt())
	r.WithOffset(randInt())
	r.WithCount(randInt())
}

func TestVKDatabaseGetChairsSuccess(t *testing.T) {
	params := requests.NewDatabaseGetChairsRequest()
	fillRandomlyDatabaseGetChairsRequest(&params)
	var expected models.DatabaseGetChairsResponse
	fillRandomlyDatabaseGetChairsResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "database.getChairs", params.Params(), expectedJSON))
	resp, err := vk.Api.Database.DatabaseGetChairs(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyDatabaseGetCitiesRequest(r *requests.DatabaseGetCitiesRequest) {
	r.WithCountryId(randInt())
	r.WithRegionId(randInt())
	r.WithQ(randString())
	r.WithNeedAll(randBool())
	r.WithOffset(randInt())
	r.WithCount(randInt())
}

func TestVKDatabaseGetCitiesSuccess(t *testing.T) {
	params := requests.NewDatabaseGetCitiesRequest()
	fillRandomlyDatabaseGetCitiesRequest(&params)
	var expected models.DatabaseGetCitiesResponse
	fillRandomlyDatabaseGetCitiesResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "database.getCities", params.Params(), expectedJSON))
	resp, err := vk.Api.Database.DatabaseGetCities(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyDatabaseGetCitiesByIdRequest(r *requests.DatabaseGetCitiesByIdRequest) {
	lCityIds := randIntn(maxArrayLength + 1)
	r.WithCityIds(randIntArr(lCityIds))
}

func TestVKDatabaseGetCitiesByIdSuccess(t *testing.T) {
	params := requests.NewDatabaseGetCitiesByIdRequest()
	fillRandomlyDatabaseGetCitiesByIdRequest(&params)
	var expected models.DatabaseGetCitiesByIdResponse
	fillRandomlyDatabaseGetCitiesByIdResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "database.getCitiesById", params.Params(), expectedJSON))
	resp, err := vk.Api.Database.DatabaseGetCitiesById(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyDatabaseGetCountriesRequest(r *requests.DatabaseGetCountriesRequest) {
	r.WithNeedAll(randBool())
	r.WithCode(randString())
	r.WithOffset(randInt())
	r.WithCount(randInt())
}

func TestVKDatabaseGetCountriesSuccess(t *testing.T) {
	params := requests.NewDatabaseGetCountriesRequest()
	fillRandomlyDatabaseGetCountriesRequest(&params)
	var expected models.DatabaseGetCountriesResponse
	fillRandomlyDatabaseGetCountriesResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "database.getCountries", params.Params(), expectedJSON))
	resp, err := vk.Api.Database.DatabaseGetCountries(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyDatabaseGetCountriesByIdRequest(r *requests.DatabaseGetCountriesByIdRequest) {
	lCountryIds := randIntn(maxArrayLength + 1)
	r.WithCountryIds(randIntArr(lCountryIds))
}

func TestVKDatabaseGetCountriesByIdSuccess(t *testing.T) {
	params := requests.NewDatabaseGetCountriesByIdRequest()
	fillRandomlyDatabaseGetCountriesByIdRequest(&params)
	var expected models.DatabaseGetCountriesByIdResponse
	fillRandomlyDatabaseGetCountriesByIdResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "database.getCountriesById", params.Params(), expectedJSON))
	resp, err := vk.Api.Database.DatabaseGetCountriesById(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyDatabaseGetFacultiesRequest(r *requests.DatabaseGetFacultiesRequest) {
	r.WithUniversityId(randInt())
	r.WithOffset(randInt())
	r.WithCount(randInt())
}

func TestVKDatabaseGetFacultiesSuccess(t *testing.T) {
	params := requests.NewDatabaseGetFacultiesRequest()
	fillRandomlyDatabaseGetFacultiesRequest(&params)
	var expected models.DatabaseGetFacultiesResponse
	fillRandomlyDatabaseGetFacultiesResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "database.getFaculties", params.Params(), expectedJSON))
	resp, err := vk.Api.Database.DatabaseGetFaculties(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyDatabaseGetMetroStationsRequest(r *requests.DatabaseGetMetroStationsRequest) {
	r.WithCityId(randInt())
	r.WithOffset(randInt())
	r.WithCount(randInt())
	r.WithExtended(randBool())
}

func TestVKDatabaseGetMetroStationsSuccess(t *testing.T) {
	params := requests.NewDatabaseGetMetroStationsRequest()
	fillRandomlyDatabaseGetMetroStationsRequest(&params)
	var expected models.DatabaseGetMetroStationsResponse
	fillRandomlyDatabaseGetMetroStationsResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "database.getMetroStations", params.Params(), expectedJSON))
	resp, err := vk.Api.Database.DatabaseGetMetroStations(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyDatabaseGetMetroStationsByIdRequest(r *requests.DatabaseGetMetroStationsByIdRequest) {
	lStationIds := randIntn(maxArrayLength + 1)
	r.WithStationIds(randIntArr(lStationIds))
}

func TestVKDatabaseGetMetroStationsByIdSuccess(t *testing.T) {
	params := requests.NewDatabaseGetMetroStationsByIdRequest()
	fillRandomlyDatabaseGetMetroStationsByIdRequest(&params)
	var expected models.DatabaseGetMetroStationsByIdResponse
	fillRandomlyDatabaseGetMetroStationsByIdResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "database.getMetroStationsById", params.Params(), expectedJSON))
	resp, err := vk.Api.Database.DatabaseGetMetroStationsById(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyDatabaseGetRegionsRequest(r *requests.DatabaseGetRegionsRequest) {
	r.WithCountryId(randInt())
	r.WithQ(randString())
	r.WithOffset(randInt())
	r.WithCount(randInt())
}

func TestVKDatabaseGetRegionsSuccess(t *testing.T) {
	params := requests.NewDatabaseGetRegionsRequest()
	fillRandomlyDatabaseGetRegionsRequest(&params)
	var expected models.DatabaseGetRegionsResponse
	fillRandomlyDatabaseGetRegionsResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "database.getRegions", params.Params(), expectedJSON))
	resp, err := vk.Api.Database.DatabaseGetRegions(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyDatabaseGetSchoolClassesRequest(r *requests.DatabaseGetSchoolClassesRequest) {
	r.WithCountryId(randInt())
}

func TestVKDatabaseGetSchoolClassesSuccess(t *testing.T) {
	params := requests.NewDatabaseGetSchoolClassesRequest()
	fillRandomlyDatabaseGetSchoolClassesRequest(&params)
	var expected models.DatabaseGetSchoolClassesResponse
	fillRandomlyDatabaseGetSchoolClassesResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "database.getSchoolClasses", params.Params(), expectedJSON))
	resp, err := vk.Api.Database.DatabaseGetSchoolClasses(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyDatabaseGetSchoolsRequest(r *requests.DatabaseGetSchoolsRequest) {
	r.WithQ(randString())
	r.WithCityId(randInt())
	r.WithOffset(randInt())
	r.WithCount(randInt())
}

func TestVKDatabaseGetSchoolsSuccess(t *testing.T) {
	params := requests.NewDatabaseGetSchoolsRequest()
	fillRandomlyDatabaseGetSchoolsRequest(&params)
	var expected models.DatabaseGetSchoolsResponse
	fillRandomlyDatabaseGetSchoolsResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "database.getSchools", params.Params(), expectedJSON))
	resp, err := vk.Api.Database.DatabaseGetSchools(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

func fillRandomlyDatabaseGetUniversitiesRequest(r *requests.DatabaseGetUniversitiesRequest) {
	r.WithQ(randString())
	r.WithCountryId(randInt())
	r.WithCityId(randInt())
	r.WithOffset(randInt())
	r.WithCount(randInt())
}

func TestVKDatabaseGetUniversitiesSuccess(t *testing.T) {
	params := requests.NewDatabaseGetUniversitiesRequest()
	fillRandomlyDatabaseGetUniversitiesRequest(&params)
	var expected models.DatabaseGetUniversitiesResponse
	fillRandomlyDatabaseGetUniversitiesResponse(&expected)
	expectedJSON, err := json.Marshal(expected)
	require.NoError(t, err)
	token := randString()
	vk, err := govk.NewVK(token)
	assert.NoError(t, err)
	vk.Api.WithHTTP(NewTestClient(t, "database.getUniversities", params.Params(), expectedJSON))
	resp, err := vk.Api.Database.DatabaseGetUniversities(params)
	assert.EqualValues(t, expected, resp)
	assert.NoError(t, err)
}

