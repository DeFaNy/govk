// Code generated by https://github.com/defany/govk. DO NOT EDIT.

package requests

import (
	"github.com/defany/govk/api"
	"github.com/defany/govk/api/gen/models"
)

type Wall struct {
	api *api.API
}

func NewWall(api *api.API) *Wall {
	return &Wall{
		api: api,
	}
}

// WallCheckCopyrightLink ...
type WallCheckCopyrightLinkRequest api.Params

func NewWallCheckCopyrightLinkRequest() WallCheckCopyrightLinkRequest {
	params := make(WallCheckCopyrightLinkRequest, 2)
	return params
}

func (w WallCheckCopyrightLinkRequest) WithLink(w_link string) WallCheckCopyrightLinkRequest {
	w["link"] = w_link
	return w
}

func (w WallCheckCopyrightLinkRequest) Params() api.Params {
	return api.Params(w)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_WallCheckLinkCantDetermineSource ]
//
// https://dev.vk.com/method/wall.checkCopyrightLink
func (w *Wall) WallCheckCopyrightLink(params ...api.MethodParams) (resp models.BaseBoolResponse, err error) {
	req := api.NewRequest[models.BaseBoolResponse](w.api)

	res, err := req.Execute("wall.checkCopyrightLink", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// WallCloseComments ...
type WallCloseCommentsRequest api.Params

func NewWallCloseCommentsRequest() WallCloseCommentsRequest {
	params := make(WallCloseCommentsRequest, 3)
	return params
}

func (w WallCloseCommentsRequest) WithOwnerId(w_owner_id int) WallCloseCommentsRequest {
	w["owner_id"] = w_owner_id
	return w
}

func (w WallCloseCommentsRequest) WithPostId(w_post_id int) WallCloseCommentsRequest {
	w["post_id"] = w_post_id
	return w
}

func (w WallCloseCommentsRequest) Params() api.Params {
	return api.Params(w)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/wall.closeComments
func (w *Wall) WallCloseComments(params ...api.MethodParams) (resp models.BaseBoolResponse, err error) {
	req := api.NewRequest[models.BaseBoolResponse](w.api)

	res, err := req.Execute("wall.closeComments", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// WallCreateComment Adds a comment to a post on a user wall or community wall.
type WallCreateCommentRequest api.Params

func NewWallCreateCommentRequest() WallCreateCommentRequest {
	params := make(WallCreateCommentRequest, 9)
	return params
}

func (w WallCreateCommentRequest) WithOwnerId(w_owner_id int) WallCreateCommentRequest {
	w["owner_id"] = w_owner_id
	return w
}

func (w WallCreateCommentRequest) WithPostId(w_post_id int) WallCreateCommentRequest {
	w["post_id"] = w_post_id
	return w
}

func (w WallCreateCommentRequest) WithFromGroup(w_from_group int) WallCreateCommentRequest {
	w["from_group"] = w_from_group
	return w
}

func (w WallCreateCommentRequest) WithMessage(w_message string) WallCreateCommentRequest {
	w["message"] = w_message
	return w
}

func (w WallCreateCommentRequest) WithReplyToComment(w_reply_to_comment int) WallCreateCommentRequest {
	w["reply_to_comment"] = w_reply_to_comment
	return w
}

func (w WallCreateCommentRequest) WithAttachments(w_attachments []string) WallCreateCommentRequest {
	w["attachments"] = w_attachments
	return w
}

func (w WallCreateCommentRequest) WithStickerId(w_sticker_id int) WallCreateCommentRequest {
	w["sticker_id"] = w_sticker_id
	return w
}

func (w WallCreateCommentRequest) WithGuid(w_guid string) WallCreateCommentRequest {
	w["guid"] = w_guid
	return w
}

func (w WallCreateCommentRequest) Params() api.Params {
	return api.Params(w)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_WallAccessAddReply, Error_WallReplyOwnerFlood, Error_WallLinksForbidden, Error_WallAccessReplies ]
//
// https://dev.vk.com/method/wall.createComment
func (w *Wall) WallCreateComment(params ...api.MethodParams) (resp models.WallCreateCommentResponse, err error) {
	req := api.NewRequest[models.WallCreateCommentResponse](w.api)

	res, err := req.Execute("wall.createComment", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// WallDelete Deletes a post from a user wall or community wall.
type WallDeleteRequest api.Params

func NewWallDeleteRequest() WallDeleteRequest {
	params := make(WallDeleteRequest, 3)
	return params
}

func (w WallDeleteRequest) WithOwnerId(w_owner_id int) WallDeleteRequest {
	w["owner_id"] = w_owner_id
	return w
}

func (w WallDeleteRequest) WithPostId(w_post_id int) WallDeleteRequest {
	w["post_id"] = w_post_id
	return w
}

func (w WallDeleteRequest) Params() api.Params {
	return api.Params(w)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_WallAccessPost ]
//
// https://dev.vk.com/method/wall.delete
func (w *Wall) WallDelete(params ...api.MethodParams) (resp models.BaseOkResponse, err error) {
	req := api.NewRequest[models.BaseOkResponse](w.api)

	res, err := req.Execute("wall.delete", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// WallDeleteComment Deletes a comment on a post on a user wall or community wall.
type WallDeleteCommentRequest api.Params

func NewWallDeleteCommentRequest() WallDeleteCommentRequest {
	params := make(WallDeleteCommentRequest, 3)
	return params
}

func (w WallDeleteCommentRequest) WithOwnerId(w_owner_id int) WallDeleteCommentRequest {
	w["owner_id"] = w_owner_id
	return w
}

func (w WallDeleteCommentRequest) WithCommentId(w_comment_id int) WallDeleteCommentRequest {
	w["comment_id"] = w_comment_id
	return w
}

func (w WallDeleteCommentRequest) Params() api.Params {
	return api.Params(w)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_WallAccessComment ]
//
// https://dev.vk.com/method/wall.deleteComment
func (w *Wall) WallDeleteComment(params ...api.MethodParams) (resp models.BaseOkResponse, err error) {
	req := api.NewRequest[models.BaseOkResponse](w.api)

	res, err := req.Execute("wall.deleteComment", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// WallEdit Edits a post on a user wall or community wall.
type WallEditRequest api.Params

func NewWallEditRequest() WallEditRequest {
	params := make(WallEditRequest, 20)
	return params
}

func (w WallEditRequest) WithOwnerId(w_owner_id int) WallEditRequest {
	w["owner_id"] = w_owner_id
	return w
}

func (w WallEditRequest) WithPostId(w_post_id int) WallEditRequest {
	w["post_id"] = w_post_id
	return w
}

func (w WallEditRequest) WithFriendsOnly(w_friends_only bool) WallEditRequest {
	w["friends_only"] = w_friends_only
	return w
}

func (w WallEditRequest) WithMessage(w_message string) WallEditRequest {
	w["message"] = w_message
	return w
}

func (w WallEditRequest) WithAttachments(w_attachments []string) WallEditRequest {
	w["attachments"] = w_attachments
	return w
}

func (w WallEditRequest) WithServices(w_services string) WallEditRequest {
	w["services"] = w_services
	return w
}

func (w WallEditRequest) WithSigned(w_signed bool) WallEditRequest {
	w["signed"] = w_signed
	return w
}

func (w WallEditRequest) WithPublishDate(w_publish_date int) WallEditRequest {
	w["publish_date"] = w_publish_date
	return w
}

func (w WallEditRequest) WithLat(w_lat float64) WallEditRequest {
	w["lat"] = w_lat
	return w
}

func (w WallEditRequest) WithLong(w_long float64) WallEditRequest {
	w["long"] = w_long
	return w
}

func (w WallEditRequest) WithPlaceId(w_place_id int) WallEditRequest {
	w["place_id"] = w_place_id
	return w
}

func (w WallEditRequest) WithMarkAsAds(w_mark_as_ads bool) WallEditRequest {
	w["mark_as_ads"] = w_mark_as_ads
	return w
}

func (w WallEditRequest) WithCloseComments(w_close_comments bool) WallEditRequest {
	w["close_comments"] = w_close_comments
	return w
}

func (w WallEditRequest) WithDonutPaidDuration(w_donut_paid_duration int) WallEditRequest {
	w["donut_paid_duration"] = w_donut_paid_duration
	return w
}

func (w WallEditRequest) WithPosterBkgId(w_poster_bkg_id int) WallEditRequest {
	w["poster_bkg_id"] = w_poster_bkg_id
	return w
}

func (w WallEditRequest) WithPosterBkgOwnerId(w_poster_bkg_owner_id int) WallEditRequest {
	w["poster_bkg_owner_id"] = w_poster_bkg_owner_id
	return w
}

func (w WallEditRequest) WithPosterBkgAccessHash(w_poster_bkg_access_hash string) WallEditRequest {
	w["poster_bkg_access_hash"] = w_poster_bkg_access_hash
	return w
}

func (w WallEditRequest) WithCopyright(w_copyright string) WallEditRequest {
	w["copyright"] = w_copyright
	return w
}

func (w WallEditRequest) WithTopicId(w_topic_id int) WallEditRequest {
	w["topic_id"] = w_topic_id
	return w
}

func (w WallEditRequest) Params() api.Params {
	return api.Params(w)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_WallAdsPostLimitReached, Error_WallDonut ]
//
// https://dev.vk.com/method/wall.edit
func (w *Wall) WallEdit(params ...api.MethodParams) (resp models.WallEditResponse, err error) {
	req := api.NewRequest[models.WallEditResponse](w.api)

	res, err := req.Execute("wall.edit", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// WallEditAdsStealth Allows to edit hidden post.
type WallEditAdsStealthRequest api.Params

func NewWallEditAdsStealthRequest() WallEditAdsStealthRequest {
	params := make(WallEditAdsStealthRequest, 13)
	return params
}

func (w WallEditAdsStealthRequest) WithOwnerId(w_owner_id int) WallEditAdsStealthRequest {
	w["owner_id"] = w_owner_id
	return w
}

func (w WallEditAdsStealthRequest) WithPostId(w_post_id int) WallEditAdsStealthRequest {
	w["post_id"] = w_post_id
	return w
}

func (w WallEditAdsStealthRequest) WithMessage(w_message string) WallEditAdsStealthRequest {
	w["message"] = w_message
	return w
}

func (w WallEditAdsStealthRequest) WithAttachments(w_attachments []string) WallEditAdsStealthRequest {
	w["attachments"] = w_attachments
	return w
}

func (w WallEditAdsStealthRequest) WithSigned(w_signed bool) WallEditAdsStealthRequest {
	w["signed"] = w_signed
	return w
}

func (w WallEditAdsStealthRequest) WithLat(w_lat float64) WallEditAdsStealthRequest {
	w["lat"] = w_lat
	return w
}

func (w WallEditAdsStealthRequest) WithLong(w_long float64) WallEditAdsStealthRequest {
	w["long"] = w_long
	return w
}

func (w WallEditAdsStealthRequest) WithPlaceId(w_place_id int) WallEditAdsStealthRequest {
	w["place_id"] = w_place_id
	return w
}

func (w WallEditAdsStealthRequest) WithLinkButton(w_link_button string) WallEditAdsStealthRequest {
	w["link_button"] = w_link_button
	return w
}

func (w WallEditAdsStealthRequest) WithLinkTitle(w_link_title string) WallEditAdsStealthRequest {
	w["link_title"] = w_link_title
	return w
}

func (w WallEditAdsStealthRequest) WithLinkImage(w_link_image string) WallEditAdsStealthRequest {
	w["link_image"] = w_link_image
	return w
}

func (w WallEditAdsStealthRequest) WithLinkVideo(w_link_video string) WallEditAdsStealthRequest {
	w["link_video"] = w_link_video
	return w
}

func (w WallEditAdsStealthRequest) Params() api.Params {
	return api.Params(w)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_WallAdsPostLimitReached ]
//
// https://dev.vk.com/method/wall.editAdsStealth
func (w *Wall) WallEditAdsStealth(params ...api.MethodParams) (resp models.BaseOkResponse, err error) {
	req := api.NewRequest[models.BaseOkResponse](w.api)

	res, err := req.Execute("wall.editAdsStealth", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// WallEditComment Edits a comment on a user wall or community wall.
type WallEditCommentRequest api.Params

func NewWallEditCommentRequest() WallEditCommentRequest {
	params := make(WallEditCommentRequest, 5)
	return params
}

func (w WallEditCommentRequest) WithOwnerId(w_owner_id int) WallEditCommentRequest {
	w["owner_id"] = w_owner_id
	return w
}

func (w WallEditCommentRequest) WithCommentId(w_comment_id int) WallEditCommentRequest {
	w["comment_id"] = w_comment_id
	return w
}

func (w WallEditCommentRequest) WithMessage(w_message string) WallEditCommentRequest {
	w["message"] = w_message
	return w
}

func (w WallEditCommentRequest) WithAttachments(w_attachments []string) WallEditCommentRequest {
	w["attachments"] = w_attachments
	return w
}

func (w WallEditCommentRequest) Params() api.Params {
	return api.Params(w)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/wall.editComment
func (w *Wall) WallEditComment(params ...api.MethodParams) (resp models.BaseOkResponse, err error) {
	req := api.NewRequest[models.BaseOkResponse](w.api)

	res, err := req.Execute("wall.editComment", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// WallGet Returns a list of posts on a user wall or community wall.
type WallGetRequest api.Params

func NewWallGetRequest() WallGetRequest {
	params := make(WallGetRequest, 9)
	return params
}

func (w WallGetRequest) WithOwnerId(w_owner_id int) WallGetRequest {
	w["owner_id"] = w_owner_id
	return w
}

func (w WallGetRequest) WithDomain(w_domain string) WallGetRequest {
	w["domain"] = w_domain
	return w
}

func (w WallGetRequest) WithOffset(w_offset int) WallGetRequest {
	w["offset"] = w_offset
	return w
}

func (w WallGetRequest) WithCount(w_count int) WallGetRequest {
	w["count"] = w_count
	return w
}

func (w WallGetRequest) WithFilter(w_filter models.WallGetFilter) WallGetRequest {
	w["filter"] = w_filter
	return w
}

func (w WallGetRequest) WithExtended(w_extended bool) WallGetRequest {
	w["extended"] = w_extended
	return w
}

func (w WallGetRequest) WithFields(w_fields []models.BaseUserGroupFields) WallGetRequest {
	w["fields"] = w_fields
	return w
}

func (w WallGetRequest) Params() api.Params {
	return api.Params(w)
}

// May execute with listed access token types:
//
//	[ user, service ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_Blocked ]
//
// https://dev.vk.com/method/wall.get
func (w *Wall) WallGet(params ...api.MethodParams) (resp models.WallGetResponse, err error) {
	req := api.NewRequest[models.WallGetResponse](w.api)

	res, err := req.Execute("wall.get", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// WallGetExtended Returns a list of posts on a user wall or community wall.
// May execute with listed access token types:
//
//	[ user, service ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_Blocked ]
//
// https://dev.vk.com/method/wall.get
func (w *Wall) WallGetExtended(params ...api.MethodParams) (resp models.WallGetExtendedResponse, err error) {
	req := api.NewRequest[models.WallGetExtendedResponse](w.api)

	res, err := req.Execute("wall.get", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// WallGetById Returns a list of posts from user or community walls by their IDs.
type WallGetByIdRequest api.Params

func NewWallGetByIdRequest() WallGetByIdRequest {
	params := make(WallGetByIdRequest, 6)
	return params
}

func (w WallGetByIdRequest) WithPosts(w_posts []string) WallGetByIdRequest {
	w["posts"] = w_posts
	return w
}

func (w WallGetByIdRequest) WithExtended(w_extended bool) WallGetByIdRequest {
	w["extended"] = w_extended
	return w
}

func (w WallGetByIdRequest) WithCopyHistoryDepth(w_copy_history_depth int) WallGetByIdRequest {
	w["copy_history_depth"] = w_copy_history_depth
	return w
}

func (w WallGetByIdRequest) WithFields(w_fields []models.BaseUserGroupFields) WallGetByIdRequest {
	w["fields"] = w_fields
	return w
}

func (w WallGetByIdRequest) Params() api.Params {
	return api.Params(w)
}

// May execute with listed access token types:
//
//	[ user, service ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/wall.getById
func (w *Wall) WallGetById(params ...api.MethodParams) (resp models.WallGetByIdLegacyResponse, err error) {
	req := api.NewRequest[models.WallGetByIdLegacyResponse](w.api)

	res, err := req.Execute("wall.getById", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// WallGetByIdExtended Returns a list of posts from user or community walls by their IDs.
// May execute with listed access token types:
//
//	[ user, service ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/wall.getById
func (w *Wall) WallGetByIdExtended(params ...api.MethodParams) (resp models.WallGetByIdExtendedResponse, err error) {
	req := api.NewRequest[models.WallGetByIdExtendedResponse](w.api)

	res, err := req.Execute("wall.getById", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// WallGetComment Returns a comment on a post on a user wall or community wall.
type WallGetCommentRequest api.Params

func NewWallGetCommentRequest() WallGetCommentRequest {
	params := make(WallGetCommentRequest, 6)
	return params
}

func (w WallGetCommentRequest) WithOwnerId(w_owner_id int) WallGetCommentRequest {
	w["owner_id"] = w_owner_id
	return w
}

func (w WallGetCommentRequest) WithCommentId(w_comment_id int) WallGetCommentRequest {
	w["comment_id"] = w_comment_id
	return w
}

func (w WallGetCommentRequest) WithExtended(w_extended bool) WallGetCommentRequest {
	w["extended"] = w_extended
	return w
}

func (w WallGetCommentRequest) WithFields(w_fields []models.BaseUserGroupFields) WallGetCommentRequest {
	w["fields"] = w_fields
	return w
}

func (w WallGetCommentRequest) Params() api.Params {
	return api.Params(w)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_WallAccessReplies ]
//
// https://dev.vk.com/method/wall.getComment
func (w *Wall) WallGetComment(params ...api.MethodParams) (resp models.WallGetCommentResponse, err error) {
	req := api.NewRequest[models.WallGetCommentResponse](w.api)

	res, err := req.Execute("wall.getComment", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// WallGetCommentExtended Returns a comment on a post on a user wall or community wall.
// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_WallAccessReplies ]
//
// https://dev.vk.com/method/wall.getComment
func (w *Wall) WallGetCommentExtended(params ...api.MethodParams) (resp models.WallGetCommentExtendedResponse, err error) {
	req := api.NewRequest[models.WallGetCommentExtendedResponse](w.api)

	res, err := req.Execute("wall.getComment", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// WallGetComments Returns a list of comments on a post on a user wall or community wall.
type WallGetCommentsRequest api.Params

func NewWallGetCommentsRequest() WallGetCommentsRequest {
	params := make(WallGetCommentsRequest, 14)
	return params
}

func (w WallGetCommentsRequest) WithOwnerId(w_owner_id int) WallGetCommentsRequest {
	w["owner_id"] = w_owner_id
	return w
}

func (w WallGetCommentsRequest) WithPostId(w_post_id int) WallGetCommentsRequest {
	w["post_id"] = w_post_id
	return w
}

func (w WallGetCommentsRequest) WithNeedLikes(w_need_likes bool) WallGetCommentsRequest {
	w["need_likes"] = w_need_likes
	return w
}

func (w WallGetCommentsRequest) WithStartCommentId(w_start_comment_id int) WallGetCommentsRequest {
	w["start_comment_id"] = w_start_comment_id
	return w
}

func (w WallGetCommentsRequest) WithOffset(w_offset int) WallGetCommentsRequest {
	w["offset"] = w_offset
	return w
}

func (w WallGetCommentsRequest) WithCount(w_count int) WallGetCommentsRequest {
	w["count"] = w_count
	return w
}

func (w WallGetCommentsRequest) WithSort(w_sort string) WallGetCommentsRequest {
	w["sort"] = w_sort
	return w
}

func (w WallGetCommentsRequest) WithPreviewLength(w_preview_length int) WallGetCommentsRequest {
	w["preview_length"] = w_preview_length
	return w
}

func (w WallGetCommentsRequest) WithExtended(w_extended bool) WallGetCommentsRequest {
	w["extended"] = w_extended
	return w
}

func (w WallGetCommentsRequest) WithFields(w_fields []models.BaseUserGroupFields) WallGetCommentsRequest {
	w["fields"] = w_fields
	return w
}

func (w WallGetCommentsRequest) WithCommentId(w_comment_id int) WallGetCommentsRequest {
	w["comment_id"] = w_comment_id
	return w
}

func (w WallGetCommentsRequest) WithThreadItemsCount(w_thread_items_count int) WallGetCommentsRequest {
	w["thread_items_count"] = w_thread_items_count
	return w
}

func (w WallGetCommentsRequest) Params() api.Params {
	return api.Params(w)
}

// May execute with listed access token types:
//
//	[ user, service ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_WallAccessReplies ]
//
// https://dev.vk.com/method/wall.getComments
func (w *Wall) WallGetComments(params ...api.MethodParams) (resp models.WallGetCommentsResponse, err error) {
	req := api.NewRequest[models.WallGetCommentsResponse](w.api)

	res, err := req.Execute("wall.getComments", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// WallGetCommentsExtended Returns a list of comments on a post on a user wall or community wall.
// May execute with listed access token types:
//
//	[ user, service ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_WallAccessReplies ]
//
// https://dev.vk.com/method/wall.getComments
func (w *Wall) WallGetCommentsExtended(params ...api.MethodParams) (resp models.WallGetCommentsExtendedResponse, err error) {
	req := api.NewRequest[models.WallGetCommentsExtendedResponse](w.api)

	res, err := req.Execute("wall.getComments", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// WallGetReposts Returns information about reposts of a post on user wall or community wall.
type WallGetRepostsRequest api.Params

func NewWallGetRepostsRequest() WallGetRepostsRequest {
	params := make(WallGetRepostsRequest, 5)
	return params
}

func (w WallGetRepostsRequest) WithOwnerId(w_owner_id int) WallGetRepostsRequest {
	w["owner_id"] = w_owner_id
	return w
}

func (w WallGetRepostsRequest) WithPostId(w_post_id int) WallGetRepostsRequest {
	w["post_id"] = w_post_id
	return w
}

func (w WallGetRepostsRequest) WithOffset(w_offset int) WallGetRepostsRequest {
	w["offset"] = w_offset
	return w
}

func (w WallGetRepostsRequest) WithCount(w_count int) WallGetRepostsRequest {
	w["count"] = w_count
	return w
}

func (w WallGetRepostsRequest) Params() api.Params {
	return api.Params(w)
}

// May execute with listed access token types:
//
//	[ user, service ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/wall.getReposts
func (w *Wall) WallGetReposts(params ...api.MethodParams) (resp models.WallGetRepostsResponse, err error) {
	req := api.NewRequest[models.WallGetRepostsResponse](w.api)

	res, err := req.Execute("wall.getReposts", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// WallOpenComments ...
type WallOpenCommentsRequest api.Params

func NewWallOpenCommentsRequest() WallOpenCommentsRequest {
	params := make(WallOpenCommentsRequest, 3)
	return params
}

func (w WallOpenCommentsRequest) WithOwnerId(w_owner_id int) WallOpenCommentsRequest {
	w["owner_id"] = w_owner_id
	return w
}

func (w WallOpenCommentsRequest) WithPostId(w_post_id int) WallOpenCommentsRequest {
	w["post_id"] = w_post_id
	return w
}

func (w WallOpenCommentsRequest) Params() api.Params {
	return api.Params(w)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/wall.openComments
func (w *Wall) WallOpenComments(params ...api.MethodParams) (resp models.BaseBoolResponse, err error) {
	req := api.NewRequest[models.BaseBoolResponse](w.api)

	res, err := req.Execute("wall.openComments", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// WallPin Pins the post on wall.
type WallPinRequest api.Params

func NewWallPinRequest() WallPinRequest {
	params := make(WallPinRequest, 3)
	return params
}

func (w WallPinRequest) WithOwnerId(w_owner_id int) WallPinRequest {
	w["owner_id"] = w_owner_id
	return w
}

func (w WallPinRequest) WithPostId(w_post_id int) WallPinRequest {
	w["post_id"] = w_post_id
	return w
}

func (w WallPinRequest) Params() api.Params {
	return api.Params(w)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/wall.pin
func (w *Wall) WallPin(params ...api.MethodParams) (resp models.BaseOkResponse, err error) {
	req := api.NewRequest[models.BaseOkResponse](w.api)

	res, err := req.Execute("wall.pin", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// WallPost Adds a new post on a user wall or community wall. Can also be used to publish suggested or scheduled posts.
type WallPostRequest api.Params

func NewWallPostRequest() WallPostRequest {
	params := make(WallPostRequest, 20)
	return params
}

func (w WallPostRequest) WithOwnerId(w_owner_id int) WallPostRequest {
	w["owner_id"] = w_owner_id
	return w
}

func (w WallPostRequest) WithFriendsOnly(w_friends_only bool) WallPostRequest {
	w["friends_only"] = w_friends_only
	return w
}

func (w WallPostRequest) WithFromGroup(w_from_group bool) WallPostRequest {
	w["from_group"] = w_from_group
	return w
}

func (w WallPostRequest) WithMessage(w_message string) WallPostRequest {
	w["message"] = w_message
	return w
}

func (w WallPostRequest) WithAttachments(w_attachments []string) WallPostRequest {
	w["attachments"] = w_attachments
	return w
}

func (w WallPostRequest) WithServices(w_services string) WallPostRequest {
	w["services"] = w_services
	return w
}

func (w WallPostRequest) WithSigned(w_signed bool) WallPostRequest {
	w["signed"] = w_signed
	return w
}

func (w WallPostRequest) WithPublishDate(w_publish_date int) WallPostRequest {
	w["publish_date"] = w_publish_date
	return w
}

func (w WallPostRequest) WithLat(w_lat float64) WallPostRequest {
	w["lat"] = w_lat
	return w
}

func (w WallPostRequest) WithLong(w_long float64) WallPostRequest {
	w["long"] = w_long
	return w
}

func (w WallPostRequest) WithPlaceId(w_place_id int) WallPostRequest {
	w["place_id"] = w_place_id
	return w
}

func (w WallPostRequest) WithPostId(w_post_id int) WallPostRequest {
	w["post_id"] = w_post_id
	return w
}

func (w WallPostRequest) WithGuid(w_guid string) WallPostRequest {
	w["guid"] = w_guid
	return w
}

func (w WallPostRequest) WithMarkAsAds(w_mark_as_ads bool) WallPostRequest {
	w["mark_as_ads"] = w_mark_as_ads
	return w
}

func (w WallPostRequest) WithCloseComments(w_close_comments bool) WallPostRequest {
	w["close_comments"] = w_close_comments
	return w
}

func (w WallPostRequest) WithDonutPaidDuration(w_donut_paid_duration int) WallPostRequest {
	w["donut_paid_duration"] = w_donut_paid_duration
	return w
}

func (w WallPostRequest) WithMuteNotifications(w_mute_notifications bool) WallPostRequest {
	w["mute_notifications"] = w_mute_notifications
	return w
}

func (w WallPostRequest) WithCopyright(w_copyright string) WallPostRequest {
	w["copyright"] = w_copyright
	return w
}

func (w WallPostRequest) WithTopicId(w_topic_id int) WallPostRequest {
	w["topic_id"] = w_topic_id
	return w
}

func (w WallPostRequest) Params() api.Params {
	return api.Params(w)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_WallAdsPublished, Error_WallAddPost, Error_WallTooManyRecipients, Error_WallLinksForbidden, Error_WallAdsPostLimitReached, Error_WallDonut ]
//
// https://dev.vk.com/method/wall.post
func (w *Wall) WallPost(params ...api.MethodParams) (resp models.WallPostResponse, err error) {
	req := api.NewRequest[models.WallPostResponse](w.api)

	res, err := req.Execute("wall.post", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// WallPostAdsStealth Allows to create hidden post which will not be shown on the community's wall and can be used for creating an ad with type "Community post".
type WallPostAdsStealthRequest api.Params

func NewWallPostAdsStealthRequest() WallPostAdsStealthRequest {
	params := make(WallPostAdsStealthRequest, 13)
	return params
}

func (w WallPostAdsStealthRequest) WithOwnerId(w_owner_id int) WallPostAdsStealthRequest {
	w["owner_id"] = w_owner_id
	return w
}

func (w WallPostAdsStealthRequest) WithMessage(w_message string) WallPostAdsStealthRequest {
	w["message"] = w_message
	return w
}

func (w WallPostAdsStealthRequest) WithAttachments(w_attachments []string) WallPostAdsStealthRequest {
	w["attachments"] = w_attachments
	return w
}

func (w WallPostAdsStealthRequest) WithSigned(w_signed bool) WallPostAdsStealthRequest {
	w["signed"] = w_signed
	return w
}

func (w WallPostAdsStealthRequest) WithLat(w_lat float64) WallPostAdsStealthRequest {
	w["lat"] = w_lat
	return w
}

func (w WallPostAdsStealthRequest) WithLong(w_long float64) WallPostAdsStealthRequest {
	w["long"] = w_long
	return w
}

func (w WallPostAdsStealthRequest) WithPlaceId(w_place_id int) WallPostAdsStealthRequest {
	w["place_id"] = w_place_id
	return w
}

func (w WallPostAdsStealthRequest) WithGuid(w_guid string) WallPostAdsStealthRequest {
	w["guid"] = w_guid
	return w
}

func (w WallPostAdsStealthRequest) WithLinkButton(w_link_button string) WallPostAdsStealthRequest {
	w["link_button"] = w_link_button
	return w
}

func (w WallPostAdsStealthRequest) WithLinkTitle(w_link_title string) WallPostAdsStealthRequest {
	w["link_title"] = w_link_title
	return w
}

func (w WallPostAdsStealthRequest) WithLinkImage(w_link_image string) WallPostAdsStealthRequest {
	w["link_image"] = w_link_image
	return w
}

func (w WallPostAdsStealthRequest) WithLinkVideo(w_link_video string) WallPostAdsStealthRequest {
	w["link_video"] = w_link_video
	return w
}

func (w WallPostAdsStealthRequest) Params() api.Params {
	return api.Params(w)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_WallAdsPublished, Error_WallAddPost, Error_WallTooManyRecipients, Error_WallLinksForbidden ]
//
// https://dev.vk.com/method/wall.postAdsStealth
func (w *Wall) WallPostAdsStealth(params ...api.MethodParams) (resp models.WallPostAdsStealthResponse, err error) {
	req := api.NewRequest[models.WallPostAdsStealthResponse](w.api)

	res, err := req.Execute("wall.postAdsStealth", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// WallReportComment Reports (submits a complaint about) a comment on a post on a user wall or community wall.
type WallReportCommentRequest api.Params

func NewWallReportCommentRequest() WallReportCommentRequest {
	params := make(WallReportCommentRequest, 4)
	return params
}

func (w WallReportCommentRequest) WithOwnerId(w_owner_id int) WallReportCommentRequest {
	w["owner_id"] = w_owner_id
	return w
}

func (w WallReportCommentRequest) WithCommentId(w_comment_id int) WallReportCommentRequest {
	w["comment_id"] = w_comment_id
	return w
}

func (w WallReportCommentRequest) WithReason(w_reason int) WallReportCommentRequest {
	w["reason"] = w_reason
	return w
}

func (w WallReportCommentRequest) Params() api.Params {
	return api.Params(w)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/wall.reportComment
func (w *Wall) WallReportComment(params ...api.MethodParams) (resp models.BaseOkResponse, err error) {
	req := api.NewRequest[models.BaseOkResponse](w.api)

	res, err := req.Execute("wall.reportComment", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// WallReportPost Reports (submits a complaint about) a post on a user wall or community wall.
type WallReportPostRequest api.Params

func NewWallReportPostRequest() WallReportPostRequest {
	params := make(WallReportPostRequest, 4)
	return params
}

func (w WallReportPostRequest) WithOwnerId(w_owner_id int) WallReportPostRequest {
	w["owner_id"] = w_owner_id
	return w
}

func (w WallReportPostRequest) WithPostId(w_post_id int) WallReportPostRequest {
	w["post_id"] = w_post_id
	return w
}

func (w WallReportPostRequest) WithReason(w_reason int) WallReportPostRequest {
	w["reason"] = w_reason
	return w
}

func (w WallReportPostRequest) Params() api.Params {
	return api.Params(w)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/wall.reportPost
func (w *Wall) WallReportPost(params ...api.MethodParams) (resp models.BaseOkResponse, err error) {
	req := api.NewRequest[models.BaseOkResponse](w.api)

	res, err := req.Execute("wall.reportPost", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// WallRepost Reposts (copies) an object to a user wall or community wall.
type WallRepostRequest api.Params

func NewWallRepostRequest() WallRepostRequest {
	params := make(WallRepostRequest, 6)
	return params
}

func (w WallRepostRequest) WithObject(w_object string) WallRepostRequest {
	w["object"] = w_object
	return w
}

func (w WallRepostRequest) WithMessage(w_message string) WallRepostRequest {
	w["message"] = w_message
	return w
}

func (w WallRepostRequest) WithGroupId(w_group_id int) WallRepostRequest {
	w["group_id"] = w_group_id
	return w
}

func (w WallRepostRequest) WithMarkAsAds(w_mark_as_ads bool) WallRepostRequest {
	w["mark_as_ads"] = w_mark_as_ads
	return w
}

func (w WallRepostRequest) WithMuteNotifications(w_mute_notifications bool) WallRepostRequest {
	w["mute_notifications"] = w_mute_notifications
	return w
}

func (w WallRepostRequest) Params() api.Params {
	return api.Params(w)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_WallAdsPublished, Error_WallAddPost, Error_WallAdsPostLimitReached ]
//
// https://dev.vk.com/method/wall.repost
func (w *Wall) WallRepost(params ...api.MethodParams) (resp models.WallRepostResponse, err error) {
	req := api.NewRequest[models.WallRepostResponse](w.api)

	res, err := req.Execute("wall.repost", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// WallRestore Restores a post deleted from a user wall or community wall.
type WallRestoreRequest api.Params

func NewWallRestoreRequest() WallRestoreRequest {
	params := make(WallRestoreRequest, 3)
	return params
}

func (w WallRestoreRequest) WithOwnerId(w_owner_id int) WallRestoreRequest {
	w["owner_id"] = w_owner_id
	return w
}

func (w WallRestoreRequest) WithPostId(w_post_id int) WallRestoreRequest {
	w["post_id"] = w_post_id
	return w
}

func (w WallRestoreRequest) Params() api.Params {
	return api.Params(w)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_WallAccessPost, Error_WallAddPost ]
//
// https://dev.vk.com/method/wall.restore
func (w *Wall) WallRestore(params ...api.MethodParams) (resp models.BaseOkResponse, err error) {
	req := api.NewRequest[models.BaseOkResponse](w.api)

	res, err := req.Execute("wall.restore", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// WallRestoreComment Restores a comment deleted from a user wall or community wall.
type WallRestoreCommentRequest api.Params

func NewWallRestoreCommentRequest() WallRestoreCommentRequest {
	params := make(WallRestoreCommentRequest, 3)
	return params
}

func (w WallRestoreCommentRequest) WithOwnerId(w_owner_id int) WallRestoreCommentRequest {
	w["owner_id"] = w_owner_id
	return w
}

func (w WallRestoreCommentRequest) WithCommentId(w_comment_id int) WallRestoreCommentRequest {
	w["comment_id"] = w_comment_id
	return w
}

func (w WallRestoreCommentRequest) Params() api.Params {
	return api.Params(w)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_WallAccessComment ]
//
// https://dev.vk.com/method/wall.restoreComment
func (w *Wall) WallRestoreComment(params ...api.MethodParams) (resp models.BaseOkResponse, err error) {
	req := api.NewRequest[models.BaseOkResponse](w.api)

	res, err := req.Execute("wall.restoreComment", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// WallSearch Allows to search posts on user or community walls.
type WallSearchRequest api.Params

func NewWallSearchRequest() WallSearchRequest {
	params := make(WallSearchRequest, 10)
	return params
}

func (w WallSearchRequest) WithOwnerId(w_owner_id int) WallSearchRequest {
	w["owner_id"] = w_owner_id
	return w
}

func (w WallSearchRequest) WithDomain(w_domain string) WallSearchRequest {
	w["domain"] = w_domain
	return w
}

func (w WallSearchRequest) WithQuery(w_query string) WallSearchRequest {
	w["query"] = w_query
	return w
}

func (w WallSearchRequest) WithOwnersOnly(w_owners_only bool) WallSearchRequest {
	w["owners_only"] = w_owners_only
	return w
}

func (w WallSearchRequest) WithCount(w_count int) WallSearchRequest {
	w["count"] = w_count
	return w
}

func (w WallSearchRequest) WithOffset(w_offset int) WallSearchRequest {
	w["offset"] = w_offset
	return w
}

func (w WallSearchRequest) WithExtended(w_extended bool) WallSearchRequest {
	w["extended"] = w_extended
	return w
}

func (w WallSearchRequest) WithFields(w_fields []models.BaseUserGroupFields) WallSearchRequest {
	w["fields"] = w_fields
	return w
}

func (w WallSearchRequest) Params() api.Params {
	return api.Params(w)
}

// May execute with listed access token types:
//
//	[ user, service ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_WallAccessPost ]
//
// https://dev.vk.com/method/wall.search
func (w *Wall) WallSearch(params ...api.MethodParams) (resp models.WallSearchResponse, err error) {
	req := api.NewRequest[models.WallSearchResponse](w.api)

	res, err := req.Execute("wall.search", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// WallSearchExtended Allows to search posts on user or community walls.
// May execute with listed access token types:
//
//	[ user, service ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_WallAccessPost ]
//
// https://dev.vk.com/method/wall.search
func (w *Wall) WallSearchExtended(params ...api.MethodParams) (resp models.WallSearchExtendedResponse, err error) {
	req := api.NewRequest[models.WallSearchExtendedResponse](w.api)

	res, err := req.Execute("wall.search", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// WallUnpin Unpins the post on wall.
type WallUnpinRequest api.Params

func NewWallUnpinRequest() WallUnpinRequest {
	params := make(WallUnpinRequest, 3)
	return params
}

func (w WallUnpinRequest) WithOwnerId(w_owner_id int) WallUnpinRequest {
	w["owner_id"] = w_owner_id
	return w
}

func (w WallUnpinRequest) WithPostId(w_post_id int) WallUnpinRequest {
	w["post_id"] = w_post_id
	return w
}

func (w WallUnpinRequest) Params() api.Params {
	return api.Params(w)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/wall.unpin
func (w *Wall) WallUnpin(params ...api.MethodParams) (resp models.BaseOkResponse, err error) {
	req := api.NewRequest[models.BaseOkResponse](w.api)

	res, err := req.Execute("wall.unpin", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}
