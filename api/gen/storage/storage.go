// Code generated by https://github.com/defany/govk. DO NOT EDIT.

package requests

import (
	"github.com/defany/govk/api"
	"github.com/defany/govk/api/gen/models"
)

type Storage struct {
	api *api.API
}

func NewStorage(api *api.API) *Storage {
	return &Storage{
		api: api,
	}
}

// StorageGet Returns a value of variable with the name set by key parameter.
type StorageGetRequest api.Params

func NewStorageGetRequest() StorageGetRequest {
	params := make(StorageGetRequest, 4)
	return params
}

func (s StorageGetRequest) WithKey(s_key string) StorageGetRequest {
	s["key"] = s_key
	return s
}

func (s StorageGetRequest) WithKeys(s_keys []string) StorageGetRequest {
	s["keys"] = s_keys
	return s
}

func (s StorageGetRequest) WithUserId(s_user_id int) StorageGetRequest {
	s["user_id"] = s_user_id
	return s
}

func (s StorageGetRequest) Params() api.Params {
	return api.Params(s)
}

// May execute with listed access token types:
//
//	[ user, group, service ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/storage.get
func (s *Storage) StorageGet(params ...api.MethodParams) (resp models.StorageGetResponse, err error) {
	req := api.NewRequest[models.StorageGetResponse](s.api)

	res, err := req.Execute("storage.get", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// StorageGetKeys Returns the names of all variables.
type StorageGetKeysRequest api.Params

func NewStorageGetKeysRequest() StorageGetKeysRequest {
	params := make(StorageGetKeysRequest, 4)
	return params
}

func (s StorageGetKeysRequest) WithUserId(s_user_id int) StorageGetKeysRequest {
	s["user_id"] = s_user_id
	return s
}

func (s StorageGetKeysRequest) WithOffset(s_offset int) StorageGetKeysRequest {
	s["offset"] = s_offset
	return s
}

func (s StorageGetKeysRequest) WithCount(s_count int) StorageGetKeysRequest {
	s["count"] = s_count
	return s
}

func (s StorageGetKeysRequest) Params() api.Params {
	return api.Params(s)
}

// May execute with listed access token types:
//
//	[ user, group, service ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/storage.getKeys
func (s *Storage) StorageGetKeys(params ...api.MethodParams) (resp models.StorageGetKeysResponse, err error) {
	req := api.NewRequest[models.StorageGetKeysResponse](s.api)

	res, err := req.Execute("storage.getKeys", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// StorageSet Saves a value of variable with the name set by 'key' parameter.
type StorageSetRequest api.Params

func NewStorageSetRequest() StorageSetRequest {
	params := make(StorageSetRequest, 4)
	return params
}

func (s StorageSetRequest) WithKey(s_key string) StorageSetRequest {
	s["key"] = s_key
	return s
}

func (s StorageSetRequest) WithValue(s_value string) StorageSetRequest {
	s["value"] = s_value
	return s
}

func (s StorageSetRequest) WithUserId(s_user_id int) StorageSetRequest {
	s["user_id"] = s_user_id
	return s
}

func (s StorageSetRequest) Params() api.Params {
	return api.Params(s)
}

// May execute with listed access token types:
//
//	[ user, group, service ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_Limits ]
//
// https://dev.vk.com/method/storage.set
func (s *Storage) StorageSet(params ...api.MethodParams) (resp models.BaseOkResponse, err error) {
	req := api.NewRequest[models.BaseOkResponse](s.api)

	res, err := req.Execute("storage.set", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}
