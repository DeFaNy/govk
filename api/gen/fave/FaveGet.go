// Code generated by https://github.com/defany/govk. DO NOT EDIT.

package requests

import (
	"github.com/defany/govk/api"
	"github.com/defany/govk/api/gen/models"
)

// FaveGet ...
type FaveGetRequest api.Params

func NewFaveGetRequest() FaveGetRequest {
	params := make(FaveGetRequest, 9)
	return params
}

func (f FaveGetRequest) WithExtended(f_extended bool) FaveGetRequest{
	f["extended"] = f_extended
	return f
}

func (f FaveGetRequest) WithItemType(f_item_type string) FaveGetRequest{
	f["item_type"] = f_item_type
	return f
}

func (f FaveGetRequest) WithTagId(f_tag_id int) FaveGetRequest{
	f["tag_id"] = f_tag_id
	return f
}

func (f FaveGetRequest) WithOffset(f_offset int) FaveGetRequest{
	f["offset"] = f_offset
	return f
}

func (f FaveGetRequest) WithCount(f_count int) FaveGetRequest{
	f["count"] = f_count
	return f
}

func (f FaveGetRequest) WithFields(f_fields []models.UsersFields) FaveGetRequest{
	f["fields"] = f_fields
	return f
}

func (f FaveGetRequest) WithIsFromSnackbar(f_is_from_snackbar bool) FaveGetRequest{
	f["is_from_snackbar"] = f_is_from_snackbar
	return f
}

func (f FaveGetRequest) Params() api.Params {
	return api.Params(f)
}

// May execute with listed access token types:
//    [ user ]
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/fave.get
func (f *Fave) FaveGet(params ...api.MethodParams) (resp models.FaveGetResponse, err error) {
	req := api.NewRequest[models.FaveGetResponse](f.api)

	res, err := req.Execute("fave.get", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// FaveGetExtended ...
// May execute with listed access token types:
//    [ user ]
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/fave.get
func (f *Fave) FaveGetExtended(params ...api.MethodParams) (resp models.FaveGetExtendedResponse, err error) {
	req := api.NewRequest[models.FaveGetExtendedResponse](f.api)

	res, err := req.Execute("fave.get", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

