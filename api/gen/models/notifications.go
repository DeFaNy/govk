// Code generated by https://github.com/defany/govk. DO NOT EDIT.

package models

import (
	"encoding/json"
)

// suppress unused package warning
var _ *json.RawMessage

type NotificationsFeedback struct {
	Attachments *[]WallWallpostAttachment `json:"attachments,omitempty"`
	// Reply author's ID
	FromId *int `json:"from_id,omitempty"`
	Geo *BaseGeo `json:"geo,omitempty"`
	// Item ID
	Id *int `json:"id,omitempty"`
	Likes *BaseLikesInfo `json:"likes,omitempty"`
	// Reply text
	Text *string `json:"text,omitempty"`
	// Wall owner's ID
	ToId *int `json:"to_id,omitempty"`
}

type NotificationsNotification struct {
	// Date when the event has been occurred
	Date *int `json:"date,omitempty"`
	Feedback *NotificationsFeedback `json:"feedback,omitempty"`
	Parent *NotificationsNotification `json:"parent,omitempty"`
	Reply *NotificationsReply `json:"reply,omitempty"`
	// Notification type
	Type *string `json:"type,omitempty"`
}

type NotificationsNotificationItem NotificationsNotification

//easyjson:skip
type NotificationsNotificationParent struct {
	WallWallpostToId
	PhotosPhoto
	BoardTopic
	VideoVideo
	NotificationsNotificationsComment
}

type NotificationsNotificationsComment struct {
	// Date when the comment has been added in Unixtime
	//  Minimum: 0
	Date *int `json:"date,omitempty"`
	// Comment ID
	//  Minimum: 1
	Id *int `json:"id,omitempty"`
	// Author ID
	//  Format: int64
	OwnerId *int `json:"owner_id,omitempty"`
	Photo *PhotosPhoto `json:"photo,omitempty"`
	Post *WallWallpost `json:"post,omitempty"`
	// Comment text
	Text *string `json:"text,omitempty"`
	Topic *BoardTopic `json:"topic,omitempty"`
	Video *VideoVideo `json:"video,omitempty"`
}

type NotificationsReply struct {
	// Date when the reply has been created in Unixtime
	Date *int `json:"date,omitempty"`
	// Reply ID
	Id *int `json:"id,omitempty"`
	// Reply text
	Text *int `json:"text,omitempty"`
}

type NotificationsSendMessageErrorCode int

const (
	NotificationsSendMessageErrorCodeNotificationsDisabled NotificationsSendMessageErrorCode = 1
	NotificationsSendMessageErrorCodeFloodControlPerHour NotificationsSendMessageErrorCode = 2
	NotificationsSendMessageErrorCodeFloodControlPerDay NotificationsSendMessageErrorCode = 3
	NotificationsSendMessageErrorCodeAppIsNotInstalled NotificationsSendMessageErrorCode = 4
)

type NotificationsSendMessageError struct {
	// Error code
	Code *NotificationsSendMessageErrorCode`json:"code,omitempty"`
	// Error description
	Description *string `json:"description,omitempty"`
}

type NotificationsSendMessageItem struct {
	Error *NotificationsSendMessageError `json:"error,omitempty"`
	// Notification status
	Status *bool `json:"status,omitempty"`
	// User ID
	//  Format: int64
	UserId *int `json:"user_id,omitempty"`
}

type NotificationsGetResponse struct {
	Notifications struct {
		Apps *[]AppsApp `json:"apps,omitempty"`
		// Total number
		Count *int `json:"count,omitempty"`
		Groups *[]GroupsGroup `json:"groups,omitempty"`
		Items *[]NotificationsNotificationItem `json:"items,omitempty"`
		// Time when user has been checked notifications last time
		LastViewed *int `json:"last_viewed,omitempty"`
		NextFrom *string `json:"next_from,omitempty"`
		Photos *[]PhotosPhoto `json:"photos,omitempty"`
		Profiles *[]UsersUser `json:"profiles,omitempty"`
		Ttl *int `json:"ttl,omitempty"`
		Videos *[]VideoVideo `json:"videos,omitempty"`
	} `json:"notifications"`
}

type NotificationsMarkAsViewedResponse struct {
	// Result
	Response BaseBoolInt `json:"response"`
}

type NotificationsSendMessageResponse struct {
	Response []NotificationsSendMessageItem `json:"response"`
}

