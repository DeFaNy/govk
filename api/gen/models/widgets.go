// Code generated by https://github.com/defany/govk. DO NOT EDIT.

package models

import (
	"encoding/json"
)

// suppress unused package warning
var _ *json.RawMessage

type WidgetsCommentMedia struct {
	// Media item ID
	ItemId *int `json:"item_id,omitempty"`
	// Media owner's ID
	//  Format: int64
	OwnerId *int `json:"owner_id,omitempty"`
	// URL of the preview image (type=photo only)
	//  Format: uri
	ThumbSrc *string `json:"thumb_src,omitempty"`
	Type *WidgetsCommentMediaType `json:"type,omitempty"`
}

// WidgetsCommentMediaType Media type
type WidgetsCommentMediaType string

const (
	WidgetsCommentMediaTypeAudio WidgetsCommentMediaType = "audio"
	WidgetsCommentMediaTypePhoto WidgetsCommentMediaType = "photo"
	WidgetsCommentMediaTypeVideo WidgetsCommentMediaType = "video"
)

type WidgetsCommentReplies struct {
	// Information whether current user can comment the post
	CanPost *BaseBoolInt `json:"can_post,omitempty"`
	// Comments number
	//  Minimum: 0
	Count *int `json:"count,omitempty"`
	Replies *[]WidgetsCommentRepliesItem `json:"replies,omitempty"`
}

type WidgetsCommentRepliesItem struct {
	// Comment ID
	Cid *int `json:"cid,omitempty"`
	// Date when the comment has been added in Unixtime
	Date *int `json:"date,omitempty"`
	Likes *WidgetsWidgetLikes `json:"likes,omitempty"`
	// Comment text
	Text *string `json:"text,omitempty"`
	// User ID
	Uid *int `json:"uid,omitempty"`
	User *UsersUserFull `json:"user,omitempty"`
}

type WidgetsWidgetComment struct {
	Attachments *[]WallCommentAttachment `json:"attachments,omitempty"`
	// Information whether current user can delete the comment
	CanDelete *BaseBoolInt `json:"can_delete,omitempty"`
	Comments *WidgetsCommentReplies `json:"comments,omitempty"`
	// Date when the comment has been added in Unixtime
	Date int `json:"date"`
	// Comment author ID
	FromId int `json:"from_id"`
	// Comment ID
	Id int `json:"id"`
	Likes *BaseLikesInfo `json:"likes,omitempty"`
	Media *WidgetsCommentMedia `json:"media,omitempty"`
	PostSource *WallPostSource `json:"post_source,omitempty"`
	// Post type
	PostType int `json:"post_type"`
	Reposts *BaseRepostsInfo `json:"reposts,omitempty"`
	// Comment text
	Text string `json:"text"`
	// Wall owner
	ToId int `json:"to_id"`
	User *UsersUserFull `json:"user,omitempty"`
}

type WidgetsWidgetLikes struct {
	// Likes number
	//  Minimum: 0
	Count *int `json:"count,omitempty"`
}

type WidgetsWidgetPage struct {
	Comments *BaseObjectCount `json:"comments,omitempty"`
	// Date when widgets on the page has been initialized firstly in Unixtime
	Date *int `json:"date,omitempty"`
	// Page description
	Description *string `json:"description,omitempty"`
	// Page ID
	Id *int `json:"id,omitempty"`
	Likes *BaseObjectCount `json:"likes,omitempty"`
	// page_id parameter value
	PageId *string `json:"page_id,omitempty"`
	// URL of the preview image
	//  Format: uri
	Photo *string `json:"photo,omitempty"`
	// Page title
	Title *string `json:"title,omitempty"`
	// Page absolute URL
	//  Format: uri
	Url *string `json:"url,omitempty"`
}

type WidgetsGetCommentsResponse struct {
	Widgets struct {
		// Total number
		Count int `json:"count"`
		Posts []WidgetsWidgetComment `json:"posts"`
	} `json:"widgets"`
}

type WidgetsGetPagesResponse struct {
	Widgets struct {
		// Total number
		Count int `json:"count"`
		Pages []WidgetsWidgetPage `json:"pages"`
	} `json:"widgets"`
}

