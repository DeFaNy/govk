// Code generated by https://github.com/defany/govk. DO NOT EDIT.

package models

import (
	"encoding/json"
)

// suppress unused package warning
var _ *json.RawMessage

type BaseBoolInt int

const (
	BaseBoolIntNo BaseBoolInt = 0
	BaseBoolIntYes BaseBoolInt = 1
)

type BaseCity struct {
	// City ID
	//  Minimum: 1
	Id int `json:"id"`
	// City title
	Title string `json:"title"`
}

type BaseCommentsInfo struct {
	CanClose *BaseBoolInt `json:"can_close,omitempty"`
	CanOpen *BaseBoolInt `json:"can_open,omitempty"`
	// Information whether current user can comment the post
	CanPost *BaseBoolInt `json:"can_post,omitempty"`
	// Comments number
	//  Minimum: 0
	Count *int `json:"count,omitempty"`
	Donut *WallWallpostCommentsDonut `json:"donut,omitempty"`
	// Information whether groups can comment the post
	GroupsCanPost *bool `json:"groups_can_post,omitempty"`
}

type BaseCountry struct {
	// Country ID
	//  Minimum: 1
	Id int `json:"id"`
	// Country title
	Title string `json:"title"`
}

type BaseCropPhoto struct {
	Crop BaseCropPhotoCrop `json:"crop"`
	Photo PhotosPhoto `json:"photo"`
	Rect BaseCropPhotoRect `json:"rect"`
}

type BaseCropPhotoCrop struct {
	// Coordinate X of the left upper corner
	X float64 `json:"x"`
	// Coordinate X of the right lower corner
	X2 float64 `json:"x2"`
	// Coordinate Y of the left upper corner
	Y float64 `json:"y"`
	// Coordinate Y of the right lower corner
	Y2 float64 `json:"y2"`
}

type BaseCropPhotoRect struct {
	// Coordinate X of the left upper corner
	X float64 `json:"x"`
	// Coordinate X of the right lower corner
	X2 float64 `json:"x2"`
	// Coordinate Y of the left upper corner
	Y float64 `json:"y"`
	// Coordinate Y of the right lower corner
	Y2 float64 `json:"y2"`
}

type BaseError struct {
	// Error code
	ErrorCode int `json:"error_code"`
	// Error message
	ErrorMsg *string `json:"error_msg,omitempty"`
	// Error subcode
	ErrorSubcode *int `json:"error_subcode,omitempty"`
	// Localized error message
	ErrorText *string `json:"error_text,omitempty"`
	RequestParams *[]BaseRequestParam `json:"request_params,omitempty"`
}

type BaseGeo struct {
	Coordinates *BaseGeoCoordinates `json:"coordinates,omitempty"`
	Place *BasePlace `json:"place,omitempty"`
	// Information whether a map is showed
	Showmap *int `json:"showmap,omitempty"`
	// Place type
	Type *string `json:"type,omitempty"`
}

type BaseGeoCoordinates struct {
	Latitude float64 `json:"latitude"`
	Longitude float64 `json:"longitude"`
}

type BaseGradientPoint struct {
	// Hex color code without #
	Color string `json:"color"`
	// Point position
	//  Minimum: 0
	//  Maximum: 1
	Position float64 `json:"position"`
}

type BaseImage struct {
	// Image height
	//  Minimum: 0
	Height int `json:"height"`
	Id *string `json:"id,omitempty"`
	// Image url
	//  Format: uri
	Url string `json:"url"`
	// Image width
	//  Minimum: 0
	Width int `json:"width"`
}

type BaseLikes struct {
	// Likes number
	//  Minimum: 0
	Count *int `json:"count,omitempty"`
	// Information whether current user likes the photo
	UserLikes *BaseBoolInt `json:"user_likes,omitempty"`
}

type BaseLikesInfo struct {
	// Information whether current user can like the post
	CanLike BaseBoolInt `json:"can_like"`
	// Information whether current user can repost
	CanPublish *BaseBoolInt `json:"can_publish,omitempty"`
	// Likes number
	//  Minimum: 0
	Count int `json:"count"`
	// Information whether current uer has liked the post
	UserLikes int `json:"user_likes"`
}

type BaseLink struct {
	Application *BaseLinkApplication `json:"application,omitempty"`
	Button *BaseLinkButton `json:"button,omitempty"`
	// Link caption
	Caption *string `json:"caption,omitempty"`
	// Link description
	Description *string `json:"description,omitempty"`
	// Link ID
	Id *string `json:"id,omitempty"`
	// Information whether the current link is external
	IsExternal *bool `json:"is_external,omitempty"`
	IsFavorite *bool `json:"is_favorite,omitempty"`
	Photo *PhotosPhoto `json:"photo,omitempty"`
	// String ID of the page with article preview
	PreviewPage *string `json:"preview_page,omitempty"`
	// URL of the page with article preview
	//  Format: uri
	PreviewUrl *string `json:"preview_url,omitempty"`
	Product *BaseLinkProduct `json:"product,omitempty"`
	Rating *BaseLinkRating `json:"rating,omitempty"`
	TargetObject *LinkTargetObject `json:"target_object,omitempty"`
	// Link title
	Title *string `json:"title,omitempty"`
	// Link URL
	Url string `json:"url"`
	// Video from link
	Video *VideoVideo `json:"video,omitempty"`
}

type BaseLinkApplication struct {
	// Application Id
	AppId *float64 `json:"app_id,omitempty"`
	Store *BaseLinkApplicationStore `json:"store,omitempty"`
}

type BaseLinkApplicationStore struct {
	// Store Id
	Id *float64 `json:"id,omitempty"`
	// Store name
	Name *string `json:"name,omitempty"`
}

type BaseLinkButton struct {
	// Button action
	Action *BaseLinkButtonAction `json:"action,omitempty"`
	// Video album id
	//  Minimum: 1
	AlbumId *int `json:"album_id,omitempty"`
	// Target block id
	BlockId *string `json:"block_id,omitempty"`
	// curator id
	CuratorId *int `json:"curator_id,omitempty"`
	// Button icon name, e.g. 'phone' or 'gift'
	Icon *string `json:"icon,omitempty"`
	// Owner id
	//  Format: int64
	OwnerId *int `json:"owner_id,omitempty"`
	// Target section id
	SectionId *string `json:"section_id,omitempty"`
	Style *BaseLinkButtonStyle `json:"style,omitempty"`
	// Button title
	Title *string `json:"title,omitempty"`
}

type BaseLinkButtonAction struct {
	ConsumeReason *string `json:"consume_reason,omitempty"`
	Type BaseLinkButtonActionType `json:"type"`
	// Action URL
	//  Format: uri
	Url *string `json:"url,omitempty"`
}

// BaseLinkButtonActionType Action type
type BaseLinkButtonActionType string

const (
	BaseLinkButtonActionTypeOpenUrl BaseLinkButtonActionType = "open_url"
)

// BaseLinkButtonStyle Button style
type BaseLinkButtonStyle string

const (
	BaseLinkButtonStylePrimary BaseLinkButtonStyle = "primary"
	BaseLinkButtonStyleSecondary BaseLinkButtonStyle = "secondary"
)

type BaseLinkProduct struct {
	Merchant *string `json:"merchant,omitempty"`
	OrdersCount *int `json:"orders_count,omitempty"`
	Price MarketPrice `json:"price"`
}

type BaseLinkProductCategory string

// BaseLinkProductStatus Status representation
type BaseLinkProductStatus string

const (
	BaseLinkProductStatusActive BaseLinkProductStatus = "active"
	BaseLinkProductStatusBlocked BaseLinkProductStatus = "blocked"
	BaseLinkProductStatusSold BaseLinkProductStatus = "sold"
	BaseLinkProductStatusDeleted BaseLinkProductStatus = "deleted"
	BaseLinkProductStatusArchived BaseLinkProductStatus = "archived"
)

type BaseLinkRating struct {
	// Count of reviews
	ReviewsCount *int `json:"reviews_count,omitempty"`
	// Count of stars
	Stars *float64 `json:"stars,omitempty"`
}

type BaseMessageError struct {
	// Error code
	Code *int `json:"code,omitempty"`
	// Error message
	Description *string `json:"description,omitempty"`
}

type BaseObject struct {
	// Object ID
	Id int `json:"id"`
	// Object title
	Title string `json:"title"`
}

type BaseObjectCount struct {
	// Items count
	//  Minimum: 0
	Count *int `json:"count,omitempty"`
}

type BaseObjectWithName struct {
	// Object ID
	Id int `json:"id"`
	// Object name
	Name string `json:"name"`
}

type BasePlace struct {
	// Place address
	Address *string `json:"address,omitempty"`
	// Checkins number
	Checkins *int `json:"checkins,omitempty"`
	// City name
	City *string `json:"city,omitempty"`
	// Country name
	Country *string `json:"country,omitempty"`
	// Date of the place creation in Unixtime
	Created *int `json:"created,omitempty"`
	// URL of the place's icon
	//  Format: uri
	Icon *string `json:"icon,omitempty"`
	// Place ID
	Id *int `json:"id,omitempty"`
	// Place latitude
	Latitude *float64 `json:"latitude,omitempty"`
	// Place longitude
	Longitude *float64 `json:"longitude,omitempty"`
	// Place title
	Title *string `json:"title,omitempty"`
	// Place type
	Type *string `json:"type,omitempty"`
}

type BasePropertyExists int

const (
	BasePropertyExistsPropertyExists BasePropertyExists = 1
)

// BaseRepostsInfo Count of views
type BaseRepostsInfo struct {
	// Total reposts counter. Sum of wall and mail reposts counters
	//  Minimum: 0
	Count int `json:"count"`
	// Mail reposts counter
	//  Minimum: 0
	MailCount *int `json:"mail_count,omitempty"`
	// Information whether current user has reposted the post
	UserReposted *int `json:"user_reposted,omitempty"`
	// Wall reposts counter
	//  Minimum: 0
	WallCount *int `json:"wall_count,omitempty"`
}

type BaseRequestParam struct {
	// Parameter name
	Key *string `json:"key,omitempty"`
	// Parameter value
	Value *string `json:"value,omitempty"`
}

type BaseSex int

const (
	BaseSexUnknown BaseSex = 0
	BaseSexFemale BaseSex = 1
	BaseSexMale BaseSex = 2
)

//easyjson:skip
type BaseSticker struct{
	Raws []byte
}

func (o *BaseSticker) MarshalJSON() ([]byte, error) {
	return o.Raws, nil
}

func (o *BaseSticker) UnmarshalJSON(body []byte) (err error) {
	o.Raws = body
	return nil
}

func (o BaseSticker) Raw() []byte {
	return o.Raws
}

type BaseStickerAnimationType string

const (
	BaseStickerAnimationTypeLight BaseStickerAnimationType = "light"
	BaseStickerAnimationTypeDark BaseStickerAnimationType = "dark"
)

type BaseStickerAnimation struct {
	// Type of animation script
	Type *BaseStickerAnimationType`json:"type,omitempty"`
	// URL of animation script
	//  Format: uri
	Url *string `json:"url,omitempty"`
}

type BaseStickerNew struct {
	// URL of sticker animation script
	//  Format: uri
	AnimationUrl *string `json:"animation_url,omitempty"`
	// Array of sticker animation script objects
	Animations *[]BaseStickerAnimation `json:"animations,omitempty"`
	Images *[]BaseImage `json:"images,omitempty"`
	ImagesWithBackground *[]BaseImage `json:"images_with_background,omitempty"`
	// Information whether the sticker is allowed
	IsAllowed *bool `json:"is_allowed,omitempty"`
	// Pack ID
	ProductId *int `json:"product_id,omitempty"`
	// Sticker ID
	StickerId *int `json:"sticker_id,omitempty"`
}

type BaseStickerOld struct {
	// Height in px
	Height *int `json:"height,omitempty"`
	// Sticker ID
	Id *int `json:"id,omitempty"`
	// Information whether the sticker is allowed
	IsAllowed *bool `json:"is_allowed,omitempty"`
	// URL of the preview image with 128 px in height
	//  Format: uri
	Photo128 *string `json:"photo_128,omitempty"`
	// URL of the preview image with 256 px in height
	//  Format: uri
	Photo256 *string `json:"photo_256,omitempty"`
	// URL of the preview image with 352 px in height
	//  Format: uri
	Photo352 *string `json:"photo_352,omitempty"`
	// URL of the preview image with 512 px in height
	//  Format: uri
	Photo512 *string `json:"photo_512,omitempty"`
	// URL of the preview image with 64 px in height
	//  Format: uri
	Photo64 *string `json:"photo_64,omitempty"`
	// Pack ID
	ProductId *int `json:"product_id,omitempty"`
	// Width in px
	Width *int `json:"width,omitempty"`
}

type BaseStickersList []BaseStickerNew

type BaseUploadServer struct {
	// Upload URL
	//  Format: uri
	UploadUrl string `json:"upload_url"`
}

type BaseUserGroupFields string

const (
	BaseUserGroupFieldsAbout BaseUserGroupFields = "about"
	BaseUserGroupFieldsActionButton BaseUserGroupFields = "action_button"
	BaseUserGroupFieldsActivities BaseUserGroupFields = "activities"
	BaseUserGroupFieldsActivity BaseUserGroupFields = "activity"
	BaseUserGroupFieldsAddresses BaseUserGroupFields = "addresses"
	BaseUserGroupFieldsAdminLevel BaseUserGroupFields = "admin_level"
	BaseUserGroupFieldsAgeLimits BaseUserGroupFields = "age_limits"
	BaseUserGroupFieldsAuthorId BaseUserGroupFields = "author_id"
	BaseUserGroupFieldsBanInfo BaseUserGroupFields = "ban_info"
	BaseUserGroupFieldsBdate BaseUserGroupFields = "bdate"
	BaseUserGroupFieldsBlacklisted BaseUserGroupFields = "blacklisted"
	BaseUserGroupFieldsBlacklistedByMe BaseUserGroupFields = "blacklisted_by_me"
	BaseUserGroupFieldsBooks BaseUserGroupFields = "books"
	BaseUserGroupFieldsCanCreateTopic BaseUserGroupFields = "can_create_topic"
	BaseUserGroupFieldsCanMessage BaseUserGroupFields = "can_message"
	BaseUserGroupFieldsCanPost BaseUserGroupFields = "can_post"
	BaseUserGroupFieldsCanSeeAllPosts BaseUserGroupFields = "can_see_all_posts"
	BaseUserGroupFieldsCanSeeAudio BaseUserGroupFields = "can_see_audio"
	BaseUserGroupFieldsCanSendFriendRequest BaseUserGroupFields = "can_send_friend_request"
	BaseUserGroupFieldsCanUploadVideo BaseUserGroupFields = "can_upload_video"
	BaseUserGroupFieldsCanWritePrivateMessage BaseUserGroupFields = "can_write_private_message"
	BaseUserGroupFieldsCareer BaseUserGroupFields = "career"
	BaseUserGroupFieldsCity BaseUserGroupFields = "city"
	BaseUserGroupFieldsCommonCount BaseUserGroupFields = "common_count"
	BaseUserGroupFieldsConnections BaseUserGroupFields = "connections"
	BaseUserGroupFieldsContacts BaseUserGroupFields = "contacts"
	BaseUserGroupFieldsCounters BaseUserGroupFields = "counters"
	BaseUserGroupFieldsCountry BaseUserGroupFields = "country"
	BaseUserGroupFieldsCover BaseUserGroupFields = "cover"
	BaseUserGroupFieldsCropPhoto BaseUserGroupFields = "crop_photo"
	BaseUserGroupFieldsDeactivated BaseUserGroupFields = "deactivated"
	BaseUserGroupFieldsDescription BaseUserGroupFields = "description"
	BaseUserGroupFieldsDomain BaseUserGroupFields = "domain"
	BaseUserGroupFieldsEducation BaseUserGroupFields = "education"
	BaseUserGroupFieldsExports BaseUserGroupFields = "exports"
	BaseUserGroupFieldsFinishDate BaseUserGroupFields = "finish_date"
	BaseUserGroupFieldsFixedPost BaseUserGroupFields = "fixed_post"
	BaseUserGroupFieldsFollowersCount BaseUserGroupFields = "followers_count"
	BaseUserGroupFieldsFriendStatus BaseUserGroupFields = "friend_status"
	BaseUserGroupFieldsGames BaseUserGroupFields = "games"
	BaseUserGroupFieldsHasMarketApp BaseUserGroupFields = "has_market_app"
	BaseUserGroupFieldsHasMobile BaseUserGroupFields = "has_mobile"
	BaseUserGroupFieldsHasPhoto BaseUserGroupFields = "has_photo"
	BaseUserGroupFieldsHomeTown BaseUserGroupFields = "home_town"
	BaseUserGroupFieldsId BaseUserGroupFields = "id"
	BaseUserGroupFieldsInterests BaseUserGroupFields = "interests"
	BaseUserGroupFieldsIsAdmin BaseUserGroupFields = "is_admin"
	BaseUserGroupFieldsIsClosed BaseUserGroupFields = "is_closed"
	BaseUserGroupFieldsIsFavorite BaseUserGroupFields = "is_favorite"
	BaseUserGroupFieldsIsFriend BaseUserGroupFields = "is_friend"
	BaseUserGroupFieldsIsHiddenFromFeed BaseUserGroupFields = "is_hidden_from_feed"
	BaseUserGroupFieldsIsMember BaseUserGroupFields = "is_member"
	BaseUserGroupFieldsIsMessagesBlocked BaseUserGroupFields = "is_messages_blocked"
	BaseUserGroupFieldsCanSendNotify BaseUserGroupFields = "can_send_notify"
	BaseUserGroupFieldsIsSubscribed BaseUserGroupFields = "is_subscribed"
	BaseUserGroupFieldsLastSeen BaseUserGroupFields = "last_seen"
	BaseUserGroupFieldsLinks BaseUserGroupFields = "links"
	BaseUserGroupFieldsLists BaseUserGroupFields = "lists"
	BaseUserGroupFieldsMaidenName BaseUserGroupFields = "maiden_name"
	BaseUserGroupFieldsMainAlbumId BaseUserGroupFields = "main_album_id"
	BaseUserGroupFieldsMainSection BaseUserGroupFields = "main_section"
	BaseUserGroupFieldsMarket BaseUserGroupFields = "market"
	BaseUserGroupFieldsMemberStatus BaseUserGroupFields = "member_status"
	BaseUserGroupFieldsMembersCount BaseUserGroupFields = "members_count"
	BaseUserGroupFieldsMilitary BaseUserGroupFields = "military"
	BaseUserGroupFieldsMovies BaseUserGroupFields = "movies"
	BaseUserGroupFieldsMusic BaseUserGroupFields = "music"
	BaseUserGroupFieldsName BaseUserGroupFields = "name"
	BaseUserGroupFieldsNickname BaseUserGroupFields = "nickname"
	BaseUserGroupFieldsOccupation BaseUserGroupFields = "occupation"
	BaseUserGroupFieldsOnline BaseUserGroupFields = "online"
	BaseUserGroupFieldsOnlineStatus BaseUserGroupFields = "online_status"
	BaseUserGroupFieldsPersonal BaseUserGroupFields = "personal"
	BaseUserGroupFieldsPhone BaseUserGroupFields = "phone"
	BaseUserGroupFieldsPhoto100 BaseUserGroupFields = "photo_100"
	BaseUserGroupFieldsPhoto200 BaseUserGroupFields = "photo_200"
	BaseUserGroupFieldsPhoto200Orig BaseUserGroupFields = "photo_200_orig"
	BaseUserGroupFieldsPhoto400Orig BaseUserGroupFields = "photo_400_orig"
	BaseUserGroupFieldsPhoto50 BaseUserGroupFields = "photo_50"
	BaseUserGroupFieldsPhotoId BaseUserGroupFields = "photo_id"
	BaseUserGroupFieldsPhotoMax BaseUserGroupFields = "photo_max"
	BaseUserGroupFieldsPhotoMaxOrig BaseUserGroupFields = "photo_max_orig"
	BaseUserGroupFieldsQuotes BaseUserGroupFields = "quotes"
	BaseUserGroupFieldsRelation BaseUserGroupFields = "relation"
	BaseUserGroupFieldsRelatives BaseUserGroupFields = "relatives"
	BaseUserGroupFieldsSchools BaseUserGroupFields = "schools"
	BaseUserGroupFieldsScreenName BaseUserGroupFields = "screen_name"
	BaseUserGroupFieldsSex BaseUserGroupFields = "sex"
	BaseUserGroupFieldsSite BaseUserGroupFields = "site"
	BaseUserGroupFieldsStartDate BaseUserGroupFields = "start_date"
	BaseUserGroupFieldsStatus BaseUserGroupFields = "status"
	BaseUserGroupFieldsTimezone BaseUserGroupFields = "timezone"
	BaseUserGroupFieldsTrending BaseUserGroupFields = "trending"
	BaseUserGroupFieldsTv BaseUserGroupFields = "tv"
	BaseUserGroupFieldsType BaseUserGroupFields = "type"
	BaseUserGroupFieldsUniversities BaseUserGroupFields = "universities"
	BaseUserGroupFieldsVerified BaseUserGroupFields = "verified"
	BaseUserGroupFieldsWallComments BaseUserGroupFields = "wall_comments"
	BaseUserGroupFieldsWikiPage BaseUserGroupFields = "wiki_page"
	BaseUserGroupFieldsFirstName BaseUserGroupFields = "first_name"
	BaseUserGroupFieldsFirstNameAcc BaseUserGroupFields = "first_name_acc"
	BaseUserGroupFieldsFirstNameDat BaseUserGroupFields = "first_name_dat"
	BaseUserGroupFieldsFirstNameGen BaseUserGroupFields = "first_name_gen"
	BaseUserGroupFieldsLastName BaseUserGroupFields = "last_name"
	BaseUserGroupFieldsLastNameAcc BaseUserGroupFields = "last_name_acc"
	BaseUserGroupFieldsLastNameDat BaseUserGroupFields = "last_name_dat"
	BaseUserGroupFieldsLastNameGen BaseUserGroupFields = "last_name_gen"
	BaseUserGroupFieldsCanSubscribeStories BaseUserGroupFields = "can_subscribe_stories"
	BaseUserGroupFieldsIsSubscribedStories BaseUserGroupFields = "is_subscribed_stories"
	BaseUserGroupFieldsVkAdminStatus BaseUserGroupFields = "vk_admin_status"
	BaseUserGroupFieldsCanUploadStory BaseUserGroupFields = "can_upload_story"
)

type BaseUserId struct {
	// User ID
	//  Format: int64
	UserId *int `json:"user_id,omitempty"`
}

type BaseBoolResponse struct {
	Response BaseBoolInt `json:"response"`
}

type BaseGetUploadServerResponse struct {
	Response BaseUploadServer `json:"response"`
}

type BaseOkResponseResponse int

const (
	BaseOkResponseResponseOk BaseOkResponseResponse = 1
)

type BaseOkResponse struct {
	//  Default: 1
	Response BaseOkResponseResponse`json:"response"`
}

