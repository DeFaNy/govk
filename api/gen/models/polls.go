// Code generated by https://github.com/defany/govk. DO NOT EDIT.

package models

import (
	"encoding/json"
)

// suppress unused package warning
var _ *json.RawMessage

type PollsAnswer struct {
	// Answer ID
	//  Minimum: 0
	Id int `json:"id"`
	// Answer rate in percents
	//  Minimum: 0
	Rate float64 `json:"rate"`
	// Answer text
	Text string `json:"text"`
	// Votes number
	//  Minimum: 0
	Votes int `json:"votes"`
}

type PollsBackgroundType string

const (
	PollsBackgroundTypeGradient PollsBackgroundType = "gradient"
	PollsBackgroundTypeTile PollsBackgroundType = "tile"
)

type PollsBackground struct {
	// Gradient angle with 0 on positive X axis
	Angle *int `json:"angle,omitempty"`
	// Hex color code without #
	Color *string `json:"color,omitempty"`
	// Original height of pattern tile
	//  Minimum: 0
	Height *int `json:"height,omitempty"`
	Id *int `json:"id,omitempty"`
	// Pattern tiles
	Images *[]BaseImage `json:"images,omitempty"`
	Name *string `json:"name,omitempty"`
	// Gradient points
	Points *[]BaseGradientPoint `json:"points,omitempty"`
	Type *PollsBackgroundType`json:"type,omitempty"`
	// Original with of pattern tile
	//  Minimum: 0
	Width *int `json:"width,omitempty"`
}

type PollsFriend struct {
	//  Format: int64
	//  Minimum: 0
	Id int `json:"id"`
}

type PollsPoll struct {
	Anonymous *PollsPollAnonymous `json:"anonymous,omitempty"`
	// Current user's answer ID
	//  Minimum: 0
	AnswerId *int `json:"answer_id,omitempty"`
	// Current user's answer IDs
	//  Minimum: 0
	AnswerIds *[]int `json:"answer_ids,omitempty"`
	Answers []PollsAnswer `json:"answers"`
	// Poll author's ID
	AuthorId *int `json:"author_id,omitempty"`
	Background *PollsBackground `json:"background,omitempty"`
	CanEdit bool `json:"can_edit"`
	CanReport bool `json:"can_report"`
	CanShare bool `json:"can_share"`
	CanVote bool `json:"can_vote"`
	Closed bool `json:"closed"`
	// Date when poll has been created in Unixtime
	//  Minimum: 0
	Created int `json:"created"`
	DisableUnvote bool `json:"disable_unvote"`
	EmbedHash *string `json:"embed_hash,omitempty"`
	//  Minimum: 0
	EndDate int `json:"end_date"`
	Friends *[]PollsFriend `json:"friends,omitempty"`
	// Poll ID
	//  Minimum: 1
	Id int `json:"id"`
	IsBoard bool `json:"is_board"`
	// Information whether the poll with multiple choices
	Multiple bool `json:"multiple"`
	// Poll owner's ID
	//  Format: int64
	OwnerId int `json:"owner_id"`
	Photo *PollsBackground `json:"photo,omitempty"`
	// Poll question
	Question string `json:"question"`
	// Votes number
	//  Minimum: 0
	Votes int `json:"votes"`
}

// PollsPollAnonymous Information whether the field is anonymous
type PollsPollAnonymous bool

type PollsVoters struct {
	// Answer ID
	AnswerId *int `json:"answer_id,omitempty"`
	Users *PollsVotersUsers `json:"users,omitempty"`
}

type PollsVotersUsers struct {
	// Votes number
	//  Minimum: 0
	Count *int `json:"count,omitempty"`
	//  Format: int64
	Items *[]int `json:"items,omitempty"`
}

type PollsAddVoteResponse struct {
	// Result
	Response BaseBoolInt `json:"response"`
}

type PollsCreateResponse struct {
	Response PollsPoll `json:"response"`
}

type PollsDeleteVoteResponse struct {
	// Result
	Response BaseBoolInt `json:"response"`
}

type PollsGetBackgroundsResponse struct {
	Response []PollsBackground `json:"response"`
}

type PollsGetByIdResponse struct {
	Response PollsPoll `json:"response"`
}

type PollsGetVotersResponse struct {
	Response []PollsVoters `json:"response"`
}

type PollsSavePhotoResponse struct {
	Response PollsBackground `json:"response"`
}

