// Code generated by https://github.com/defany/govk. DO NOT EDIT.

package models

import (
	"encoding/json"
)

// suppress unused package warning
var _ *json.RawMessage

type DocsDoc struct {
	// Access key for the document
	AccessKey *string `json:"access_key,omitempty"`
	// Date when file has been uploaded in Unixtime
	//  Minimum: 0
	Date int `json:"date"`
	// File extension
	Ext string `json:"ext"`
	// Document ID
	//  Minimum: 0
	Id int `json:"id"`
	IsLicensed *BaseBoolInt `json:"is_licensed,omitempty"`
	// Document owner ID
	//  Format: int64
	OwnerId int `json:"owner_id"`
	Preview *DocsDocPreview `json:"preview,omitempty"`
	// File size in bites
	//  Minimum: 0
	Size int `json:"size"`
	// Document tags
	Tags *[]string `json:"tags,omitempty"`
	// Document title
	Title string `json:"title"`
	// Document type
	Type int `json:"type"`
	// File URL
	//  Format: uri
	Url *string `json:"url,omitempty"`
}

// DocsDocAttachmentType Doc attachment type
type DocsDocAttachmentType string

const (
	DocsDocAttachmentTypeDoc DocsDocAttachmentType = "doc"
	DocsDocAttachmentTypeGraffiti DocsDocAttachmentType = "graffiti"
	DocsDocAttachmentTypeAudioMessage DocsDocAttachmentType = "audio_message"
)

type DocsDocPreview struct {
	AudioMsg *DocsDocPreviewAudioMsg `json:"audio_msg,omitempty"`
	Graffiti *DocsDocPreviewGraffiti `json:"graffiti,omitempty"`
	Photo *DocsDocPreviewPhoto `json:"photo,omitempty"`
	Video *DocsDocPreviewVideo `json:"video,omitempty"`
}

type DocsDocPreviewAudioMsg struct {
	// Audio message duration in seconds
	//  Minimum: 0
	Duration int `json:"duration"`
	// MP3 file URL
	//  Format: uri
	LinkMp3 string `json:"link_mp3"`
	// OGG file URL
	//  Format: uri
	LinkOgg string `json:"link_ogg"`
	//  Minimum: 0
	Waveform []int `json:"waveform"`
}

type DocsDocPreviewGraffiti struct {
	// Graffiti height
	//  Minimum: 0
	Height int `json:"height"`
	// Graffiti file URL
	//  Format: uri
	Src string `json:"src"`
	// Graffiti width
	//  Minimum: 0
	Width int `json:"width"`
}

type DocsDocPreviewPhoto struct {
	Sizes *[]DocsDocPreviewPhotoSizes `json:"sizes,omitempty"`
}

type DocsDocPreviewPhotoSizes struct {
	// Height in px
	//  Minimum: 0
	Height int `json:"height"`
	// URL of the image
	//  Format: uri
	Src string `json:"src"`
	Type PhotosPhotoSizesType `json:"type"`
	// Width in px
	//  Minimum: 0
	Width int `json:"width"`
}

type DocsDocPreviewVideo struct {
	// Video file size in bites
	//  Minimum: 0
	FileSize int `json:"file_size"`
	// Video's height in pixels
	//  Minimum: 0
	Height int `json:"height"`
	// Video URL
	//  Format: uri
	Src string `json:"src"`
	// Video's width in pixels
	//  Minimum: 0
	Width int `json:"width"`
}

type DocsDocTypes struct {
	// Number of docs
	//  Minimum: 0
	Count int `json:"count"`
	// Doc type ID
	Id int `json:"id"`
	// Doc type title
	Name string `json:"name"`
}

type DocsAddResponse struct {
	// Document ID
	Response int `json:"response"`
}

type DocsDocUploadResponse struct {
	Docs struct {
		// Uploaded file data
		File *string `json:"file,omitempty"`
	} `json:"docs"`
}

type DocsGetByIdResponse struct {
	Response []DocsDoc `json:"response"`
}

type DocsGetTypesResponse struct {
	Docs struct {
		// Total number
		Count *int `json:"count,omitempty"`
		Items *[]DocsDocTypes `json:"items,omitempty"`
	} `json:"docs"`
}

type DocsGetUploadServerResponse struct {
	Response BaseUploadServer `json:"response"`
}

type DocsGetResponse struct {
	Docs struct {
		// Total number
		Count int `json:"count"`
		Items []DocsDoc `json:"items"`
	} `json:"docs"`
}

type DocsSaveResponse struct {
	Docs struct {
		AudioMessage *MessagesAudioMessage `json:"audio_message,omitempty"`
		Doc *DocsDoc `json:"doc,omitempty"`
		Graffiti *MessagesGraffiti `json:"graffiti,omitempty"`
		Type *DocsDocAttachmentType `json:"type,omitempty"`
	} `json:"docs"`
}

type DocsSearchResponse struct {
	Docs struct {
		// Total number
		Count int `json:"count"`
		Items []DocsDoc `json:"items"`
	} `json:"docs"`
}

