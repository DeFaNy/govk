// Code generated by https://github.com/defany/govk. DO NOT EDIT.

package models

import (
	"encoding/json"
)

// suppress unused package warning
var _ *json.RawMessage

type UsersCareer struct {
	// City ID
	CityId *int `json:"city_id,omitempty"`
	// City name
	CityName *string `json:"city_name,omitempty"`
	// Company name
	Company *string `json:"company,omitempty"`
	// Country ID
	CountryId *int `json:"country_id,omitempty"`
	// From year
	From *int `json:"from,omitempty"`
	// Community ID
	//  Format: int64
	GroupId *int `json:"group_id,omitempty"`
	// Career ID
	Id *int `json:"id,omitempty"`
	// Position
	Position *string `json:"position,omitempty"`
	// Till year
	Until *int `json:"until,omitempty"`
}

type UsersExports struct {
	Facebook *int `json:"facebook,omitempty"`
	Livejournal *int `json:"livejournal,omitempty"`
	Twitter *int `json:"twitter,omitempty"`
}

type UsersFields string

const (
	UsersFieldsFirstNameNom UsersFields = "first_name_nom"
	UsersFieldsFirstNameGen UsersFields = "first_name_gen"
	UsersFieldsFirstNameDat UsersFields = "first_name_dat"
	UsersFieldsFirstNameAcc UsersFields = "first_name_acc"
	UsersFieldsFirstNameIns UsersFields = "first_name_ins"
	UsersFieldsFirstNameAbl UsersFields = "first_name_abl"
	UsersFieldsLastNameNom UsersFields = "last_name_nom"
	UsersFieldsLastNameGen UsersFields = "last_name_gen"
	UsersFieldsLastNameDat UsersFields = "last_name_dat"
	UsersFieldsLastNameAcc UsersFields = "last_name_acc"
	UsersFieldsLastNameIns UsersFields = "last_name_ins"
	UsersFieldsLastNameAbl UsersFields = "last_name_abl"
	UsersFieldsPhotoId UsersFields = "photo_id"
	UsersFieldsVerified UsersFields = "verified"
	UsersFieldsSex UsersFields = "sex"
	UsersFieldsBdate UsersFields = "bdate"
	UsersFieldsBdateVisibility UsersFields = "bdate_visibility"
	UsersFieldsCity UsersFields = "city"
	UsersFieldsCountry UsersFields = "country"
	UsersFieldsHomeTown UsersFields = "home_town"
	UsersFieldsHasPhoto UsersFields = "has_photo"
	UsersFieldsPhoto UsersFields = "photo"
	UsersFieldsPhotoRec UsersFields = "photo_rec"
	UsersFieldsPhoto50 UsersFields = "photo_50"
	UsersFieldsPhoto100 UsersFields = "photo_100"
	UsersFieldsPhoto200Orig UsersFields = "photo_200_orig"
	UsersFieldsPhoto200 UsersFields = "photo_200"
	UsersFieldsPhoto400 UsersFields = "photo_400"
	UsersFieldsPhoto400Orig UsersFields = "photo_400_orig"
	UsersFieldsPhotoBig UsersFields = "photo_big"
	UsersFieldsPhotoMedium UsersFields = "photo_medium"
	UsersFieldsPhotoMediumRec UsersFields = "photo_medium_rec"
	UsersFieldsPhotoMax UsersFields = "photo_max"
	UsersFieldsPhotoMaxOrig UsersFields = "photo_max_orig"
	UsersFieldsPhotoMaxSize UsersFields = "photo_max_size"
	UsersFieldsThirdPartyButtons UsersFields = "third_party_buttons"
	UsersFieldsOnline UsersFields = "online"
	UsersFieldsLists UsersFields = "lists"
	UsersFieldsDomain UsersFields = "domain"
	UsersFieldsHasMobile UsersFields = "has_mobile"
	UsersFieldsContacts UsersFields = "contacts"
	UsersFieldsLanguage UsersFields = "language"
	UsersFieldsSite UsersFields = "site"
	UsersFieldsEducation UsersFields = "education"
	UsersFieldsUniversities UsersFields = "universities"
	UsersFieldsSchools UsersFields = "schools"
	UsersFieldsStatus UsersFields = "status"
	UsersFieldsLastSeen UsersFields = "last_seen"
	UsersFieldsFollowersCount UsersFields = "followers_count"
	UsersFieldsCounters UsersFields = "counters"
	UsersFieldsCommonCount UsersFields = "common_count"
	UsersFieldsOnlineInfo UsersFields = "online_info"
	UsersFieldsOccupation UsersFields = "occupation"
	UsersFieldsNickname UsersFields = "nickname"
	UsersFieldsRelatives UsersFields = "relatives"
	UsersFieldsRelation UsersFields = "relation"
	UsersFieldsPersonal UsersFields = "personal"
	UsersFieldsConnections UsersFields = "connections"
	UsersFieldsExports UsersFields = "exports"
	UsersFieldsWallComments UsersFields = "wall_comments"
	UsersFieldsWallDefault UsersFields = "wall_default"
	UsersFieldsActivities UsersFields = "activities"
	UsersFieldsActivity UsersFields = "activity"
	UsersFieldsInterests UsersFields = "interests"
	UsersFieldsMusic UsersFields = "music"
	UsersFieldsMovies UsersFields = "movies"
	UsersFieldsTv UsersFields = "tv"
	UsersFieldsBooks UsersFields = "books"
	UsersFieldsIsNoIndex UsersFields = "is_no_index"
	UsersFieldsGames UsersFields = "games"
	UsersFieldsAbout UsersFields = "about"
	UsersFieldsQuotes UsersFields = "quotes"
	UsersFieldsCanPost UsersFields = "can_post"
	UsersFieldsCanSeeAllPosts UsersFields = "can_see_all_posts"
	UsersFieldsCanSeeAudio UsersFields = "can_see_audio"
	UsersFieldsCanSeeGifts UsersFields = "can_see_gifts"
	UsersFieldsWork UsersFields = "work"
	UsersFieldsPlaces UsersFields = "places"
	UsersFieldsCanWritePrivateMessage UsersFields = "can_write_private_message"
	UsersFieldsCanSendFriendRequest UsersFields = "can_send_friend_request"
	UsersFieldsCanUploadDoc UsersFields = "can_upload_doc"
	UsersFieldsIsFavorite UsersFields = "is_favorite"
	UsersFieldsIsHiddenFromFeed UsersFields = "is_hidden_from_feed"
	UsersFieldsTimezone UsersFields = "timezone"
	UsersFieldsScreenName UsersFields = "screen_name"
	UsersFieldsMaidenName UsersFields = "maiden_name"
	UsersFieldsCropPhoto UsersFields = "crop_photo"
	UsersFieldsIsFriend UsersFields = "is_friend"
	UsersFieldsFriendStatus UsersFields = "friend_status"
	UsersFieldsCareer UsersFields = "career"
	UsersFieldsMilitary UsersFields = "military"
	UsersFieldsBlacklisted UsersFields = "blacklisted"
	UsersFieldsBlacklistedByMe UsersFields = "blacklisted_by_me"
	UsersFieldsCanSubscribePosts UsersFields = "can_subscribe_posts"
	UsersFieldsDescriptions UsersFields = "descriptions"
	UsersFieldsTrending UsersFields = "trending"
	UsersFieldsMutual UsersFields = "mutual"
	UsersFieldsFriendshipWeeks UsersFields = "friendship_weeks"
	UsersFieldsCanInviteToChats UsersFields = "can_invite_to_chats"
	UsersFieldsStoriesArchiveCount UsersFields = "stories_archive_count"
	UsersFieldsHasUnseenStories UsersFields = "has_unseen_stories"
	UsersFieldsVideoLive UsersFields = "video_live"
	UsersFieldsVideoLiveLevel UsersFields = "video_live_level"
	UsersFieldsVideoLiveCount UsersFields = "video_live_count"
	UsersFieldsClipsCount UsersFields = "clips_count"
	UsersFieldsServiceDescription UsersFields = "service_description"
	UsersFieldsCanSeeWishes UsersFields = "can_see_wishes"
	UsersFieldsIsSubscribedPodcasts UsersFields = "is_subscribed_podcasts"
	UsersFieldsCanSubscribePodcasts UsersFields = "can_subscribe_podcasts"
)

type UsersLastSeen struct {
	// Type of the platform that used for the last authorization
	Platform *int `json:"platform,omitempty"`
	// Last visit date (in Unix time)
	Time *int `json:"time,omitempty"`
}

type UsersMilitary struct {
	// Country ID
	CountryId int `json:"country_id"`
	// From year
	From *int `json:"from,omitempty"`
	// Military ID
	Id *int `json:"id,omitempty"`
	// Unit name
	Unit string `json:"unit"`
	// Unit ID
	UnitId int `json:"unit_id"`
	// Till year
	Until *int `json:"until,omitempty"`
}

type UsersOccupation struct {
	// ID of school, university, company group
	//  Minimum: 0
	Id *int `json:"id,omitempty"`
	// Name of occupation
	Name *string `json:"name,omitempty"`
	// Type of occupation
	Type *string `json:"type,omitempty"`
}

type UsersOnlineInfoStatus string

const (
	UsersOnlineInfoStatusRecently UsersOnlineInfoStatus = "recently"
	UsersOnlineInfoStatusLastWeek UsersOnlineInfoStatus = "last_week"
	UsersOnlineInfoStatusLastMonth UsersOnlineInfoStatus = "last_month"
	UsersOnlineInfoStatusLongAgo UsersOnlineInfoStatus = "long_ago"
	UsersOnlineInfoStatusNotShow UsersOnlineInfoStatus = "not_show"
)

type UsersOnlineInfo struct {
	// Application id from which user is currently online or was last seen online
	//  Minimum: 0
	AppId *int `json:"app_id,omitempty"`
	// Is user online from desktop app or mobile app
	IsMobile *bool `json:"is_mobile,omitempty"`
	// Whether user is currently online or not
	IsOnline *bool `json:"is_online,omitempty"`
	// Last time we saw user being active
	//  Minimum: 0
	LastSeen *int `json:"last_seen,omitempty"`
	// In case user online is not visible, it indicates approximate timeframe of user online
	Status *UsersOnlineInfoStatus`json:"status,omitempty"`
	// Whether you can see real online status of user or not
	Visible bool `json:"visible"`
}

type UsersPersonal struct {
	// User's views on alcohol
	Alcohol *int `json:"alcohol,omitempty"`
	// User's inspired by
	InspiredBy *string `json:"inspired_by,omitempty"`
	Langs *[]string `json:"langs,omitempty"`
	// User's personal priority in life
	LifeMain *int `json:"life_main,omitempty"`
	// User's personal priority in people
	PeopleMain *int `json:"people_main,omitempty"`
	// User's political views
	Political *int `json:"political,omitempty"`
	// User's religion
	Religion *string `json:"religion,omitempty"`
	// User's religion id
	ReligionId *int `json:"religion_id,omitempty"`
	// User's views on smoking
	Smoking *int `json:"smoking,omitempty"`
}

type UsersRelativeType string

const (
	UsersRelativeTypeParent UsersRelativeType = "parent"
	UsersRelativeTypeChild UsersRelativeType = "child"
	UsersRelativeTypeGrandparent UsersRelativeType = "grandparent"
	UsersRelativeTypeGrandchild UsersRelativeType = "grandchild"
	UsersRelativeTypeSibling UsersRelativeType = "sibling"
)

type UsersRelative struct {
	// Date of child birthday (format dd.mm.yyyy)
	BirthDate *string `json:"birth_date,omitempty"`
	// Relative ID
	//  Format: int64
	Id *int `json:"id,omitempty"`
	// Name of relative
	Name *string `json:"name,omitempty"`
	// Relative type
	Type UsersRelativeType`json:"type"`
}

type UsersSchool struct {
	// City ID
	City *int `json:"city,omitempty"`
	// School class letter
	Class *string `json:"class,omitempty"`
	// Country ID
	Country *int `json:"country,omitempty"`
	// School ID
	Id *string `json:"id,omitempty"`
	// School name
	Name *string `json:"name,omitempty"`
	Speciality *string `json:"speciality,omitempty"`
	// School type ID
	Type *int `json:"type,omitempty"`
	// School type name
	TypeStr *string `json:"type_str,omitempty"`
	// Year the user started to study
	YearFrom *int `json:"year_from,omitempty"`
	// Graduation year
	YearGraduated *int `json:"year_graduated,omitempty"`
	// Year the user finished to study
	YearTo *int `json:"year_to,omitempty"`
}

//easyjson:skip
type UsersSubscriptionsItem struct{
	Raws []byte
}

func (o *UsersSubscriptionsItem) MarshalJSON() ([]byte, error) {
	return o.Raws, nil
}

func (o *UsersSubscriptionsItem) UnmarshalJSON(body []byte) (err error) {
	o.Raws = body
	return nil
}

func (o UsersSubscriptionsItem) Raw() []byte {
	return o.Raws
}

type UsersUniversity struct {
	// Chair ID
	Chair *int `json:"chair,omitempty"`
	// Chair name
	ChairName *string `json:"chair_name,omitempty"`
	// City ID
	City *int `json:"city,omitempty"`
	// Country ID
	Country *int `json:"country,omitempty"`
	// Education form
	EducationForm *string `json:"education_form,omitempty"`
	// Education status
	EducationStatus *string `json:"education_status,omitempty"`
	// Faculty ID
	Faculty *int `json:"faculty,omitempty"`
	// Faculty name
	FacultyName *string `json:"faculty_name,omitempty"`
	// Graduation year
	Graduation *int `json:"graduation,omitempty"`
	// University ID
	Id *int `json:"id,omitempty"`
	// University name
	Name *string `json:"name,omitempty"`
	UniversityGroupId *int `json:"university_group_id,omitempty"`
}

type UsersUser struct {
	UsersUserMin
	FriendStatus *FriendsFriendStatusStatus `json:"friend_status,omitempty"`
	Mutual *FriendsRequestsMutual `json:"mutual,omitempty"`
	// Information whether the user is online
	Online *BaseBoolInt `json:"online,omitempty"`
	// Application ID
	OnlineApp *int `json:"online_app,omitempty"`
	OnlineInfo *UsersOnlineInfo `json:"online_info,omitempty"`
	// Information whether the user is online in mobile site or application
	OnlineMobile *BaseBoolInt `json:"online_mobile,omitempty"`
	// URL of square photo of the user with 100 pixels in width
	//  Format: uri
	Photo100 *string `json:"photo_100,omitempty"`
	// URL of square photo of the user with 50 pixels in width
	//  Format: uri
	Photo50 *string `json:"photo_50,omitempty"`
	// Domain name of the user's page
	ScreenName *string `json:"screen_name,omitempty"`
	// User sex
	Sex *BaseSex `json:"sex,omitempty"`
	// Information whether the user has a "fire" pictogram.
	Trending *BaseBoolInt `json:"trending,omitempty"`
	// Information whether the user is verified
	Verified *BaseBoolInt `json:"verified,omitempty"`
}

type UsersUserConnections struct {
	// User's Facebook account
	Facebook string `json:"facebook"`
	// User's Facebook name
	FacebookName *string `json:"facebook_name,omitempty"`
	// User's Instagram account
	Instagram string `json:"instagram"`
	// User's Livejournal account
	Livejournal *string `json:"livejournal,omitempty"`
	// User's Skype nickname
	Skype string `json:"skype"`
	// User's Twitter account
	Twitter string `json:"twitter"`
}

type UsersUserCounters struct {
	// Albums number
	Albums *int `json:"albums,omitempty"`
	Articles *int `json:"articles,omitempty"`
	// Audios number
	Audios *int `json:"audios,omitempty"`
	// Badges number
	Badges *int `json:"badges,omitempty"`
	Clips *int `json:"clips,omitempty"`
	ClipsFollowers *int `json:"clips_followers,omitempty"`
	// Followers number
	Followers *int `json:"followers,omitempty"`
	// Friends number
	Friends *int `json:"friends,omitempty"`
	// Gifts number
	Gifts *int `json:"gifts,omitempty"`
	// Communities number
	Groups *int `json:"groups,omitempty"`
	MutualFriends *int `json:"mutual_friends,omitempty"`
	NewPhotoTags *int `json:"new_photo_tags,omitempty"`
	NewRecognitionTags *int `json:"new_recognition_tags,omitempty"`
	// Notes number
	Notes *int `json:"notes,omitempty"`
	// Online friends number
	OnlineFriends *int `json:"online_friends,omitempty"`
	// Public pages number
	Pages *int `json:"pages,omitempty"`
	// Photos number
	Photos *int `json:"photos,omitempty"`
	Podcasts *int `json:"podcasts,omitempty"`
	Posts *int `json:"posts,omitempty"`
	// Subscriptions number
	Subscriptions *int `json:"subscriptions,omitempty"`
	// Number of photos with user
	UserPhotos *int `json:"user_photos,omitempty"`
	// Number of videos with user
	UserVideos *int `json:"user_videos,omitempty"`
	// Videos number
	Videos *int `json:"videos,omitempty"`
	Wishes *int `json:"wishes,omitempty"`
}

type UsersUserFullWallDefault string

const (
	UsersUserFullWallDefaultOwner UsersUserFullWallDefault = "owner"
	UsersUserFullWallDefaultAll UsersUserFullWallDefault = "all"
)

type UsersUserFull struct {
	UsersUser
	About *string `json:"about,omitempty"`
	AccessKey *string `json:"access_key,omitempty"`
	Activities *string `json:"activities,omitempty"`
	// User's status
	Activity *string `json:"activity,omitempty"`
	// User's date of birth
	Bdate *string `json:"bdate,omitempty"`
	// Information whether current user is in the requested user's blacklist.
	Blacklisted *BaseBoolInt `json:"blacklisted,omitempty"`
	// Information whether the requested user is in current user's blacklist
	BlacklistedByMe *BaseBoolInt `json:"blacklisted_by_me,omitempty"`
	Books *string `json:"books,omitempty"`
	// Information whether current user can be invited to the community
	CanBeInvitedGroup *bool `json:"can_be_invited_group,omitempty"`
	// Information whether current user can call
	CanCall *bool `json:"can_call,omitempty"`
	// Information whether group can call user
	CanCallFromGroup *bool `json:"can_call_from_group,omitempty"`
	// Information whether current user can post on the user's wall
	CanPost *BaseBoolInt `json:"can_post,omitempty"`
	// Information whether current user can see other users' audio on the wall
	CanSeeAllPosts *BaseBoolInt `json:"can_see_all_posts,omitempty"`
	// Information whether current user can see the user's audio
	CanSeeAudio *BaseBoolInt `json:"can_see_audio,omitempty"`
	// Information whether current user can see the user's gifts
	CanSeeGifts *BaseBoolInt `json:"can_see_gifts,omitempty"`
	// Information whether current user can see the user's wishes
	CanSeeWishes *bool `json:"can_see_wishes,omitempty"`
	// Information whether current user can send a friend request
	CanSendFriendRequest *BaseBoolInt `json:"can_send_friend_request,omitempty"`
	// Owner in whitelist or not
	CanSubscribePodcasts *bool `json:"can_subscribe_podcasts,omitempty"`
	// Can subscribe to wall
	CanSubscribePosts *bool `json:"can_subscribe_posts,omitempty"`
	CanUploadDoc *BaseBoolInt `json:"can_upload_doc,omitempty"`
	// Information whether current user can write private message
	CanWritePrivateMessage *BaseBoolInt `json:"can_write_private_message,omitempty"`
	Career *[]UsersCareer `json:"career,omitempty"`
	City *BaseCity `json:"city,omitempty"`
	// Number of user's clips
	//  Minimum: 0
	ClipsCount *int `json:"clips_count,omitempty"`
	// Number of common friends with current user
	//  Minimum: 0
	CommonCount *int `json:"common_count,omitempty"`
	// Contact person ID
	ContactId *int `json:"contact_id,omitempty"`
	// User contact name
	ContactName *string `json:"contact_name,omitempty"`
	Counters *UsersUserCounters `json:"counters,omitempty"`
	Country *BaseCountry `json:"country,omitempty"`
	CropPhoto *BaseCropPhoto `json:"crop_photo,omitempty"`
	Descriptions *[]string `json:"descriptions,omitempty"`
	// Domain name of the user's page
	Domain *string `json:"domain,omitempty"`
	// Education form
	EducationForm *string `json:"education_form,omitempty"`
	// User's education status
	EducationStatus *string `json:"education_status,omitempty"`
	Email *string `json:"email,omitempty"`
	Exports *UsersExports `json:"exports,omitempty"`
	Facebook *string `json:"facebook,omitempty"`
	FacebookName *string `json:"facebook_name,omitempty"`
	// Faculty ID
	Faculty *int `json:"faculty,omitempty"`
	// Faculty name
	FacultyName *string `json:"faculty_name,omitempty"`
	// User's first name in prepositional case
	FirstNameAbl *string `json:"first_name_abl,omitempty"`
	// User's first name in accusative case
	FirstNameAcc *string `json:"first_name_acc,omitempty"`
	// User's first name in dative case
	FirstNameDat *string `json:"first_name_dat,omitempty"`
	// User's first name in genitive case
	FirstNameGen *string `json:"first_name_gen,omitempty"`
	// User's first name in instrumental case
	FirstNameIns *string `json:"first_name_ins,omitempty"`
	// User's first name in nominative case
	FirstNameNom *string `json:"first_name_nom,omitempty"`
	// Number of user's followers
	//  Minimum: 0
	FollowersCount *int `json:"followers_count,omitempty"`
	Games *string `json:"games,omitempty"`
	// Graduation year
	Graduation *int `json:"graduation,omitempty"`
	// Information whether the user specified his phone number
	HasMobile *BaseBoolInt `json:"has_mobile,omitempty"`
	// Information whether the user has main photo
	HasPhoto *BaseBoolInt `json:"has_photo,omitempty"`
	HasUnseenStories *bool `json:"has_unseen_stories,omitempty"`
	Hash *string `json:"hash,omitempty"`
	// User's additional phone number
	HomePhone *string `json:"home_phone,omitempty"`
	// User hometown
	HomeTown *string `json:"home_town,omitempty"`
	Instagram *string `json:"instagram,omitempty"`
	Interests *string `json:"interests,omitempty"`
	// Information whether the requested user is in faves of current user
	IsFavorite *BaseBoolInt `json:"is_favorite,omitempty"`
	// Information whether the user is a friend of current user
	IsFriend *BaseBoolInt `json:"is_friend,omitempty"`
	// Information whether the requested user is hidden from current user's newsfeed
	IsHiddenFromFeed *BaseBoolInt `json:"is_hidden_from_feed,omitempty"`
	IsMessageRequest *bool `json:"is_message_request,omitempty"`
	// Access to user profile is restricted for search engines
	IsNoIndex *bool `json:"is_no_index,omitempty"`
	IsService *bool `json:"is_service,omitempty"`
	// Information whether current user is subscribed to podcasts
	IsSubscribedPodcasts *bool `json:"is_subscribed_podcasts,omitempty"`
	IsVideoLiveNotificationsBlocked *BaseBoolInt `json:"is_video_live_notifications_blocked,omitempty"`
	Language *string `json:"language,omitempty"`
	// User's last name in prepositional case
	LastNameAbl *string `json:"last_name_abl,omitempty"`
	// User's last name in accusative case
	LastNameAcc *string `json:"last_name_acc,omitempty"`
	// User's last name in dative case
	LastNameDat *string `json:"last_name_dat,omitempty"`
	// User's last name in genitive case
	LastNameGen *string `json:"last_name_gen,omitempty"`
	// User's last name in instrumental case
	LastNameIns *string `json:"last_name_ins,omitempty"`
	// User's last name in nominative case
	LastNameNom *string `json:"last_name_nom,omitempty"`
	LastSeen *UsersLastSeen `json:"last_seen,omitempty"`
	Lists *[]int `json:"lists,omitempty"`
	Livejournal *string `json:"livejournal,omitempty"`
	// User maiden name
	MaidenName *string `json:"maiden_name,omitempty"`
	Military *[]UsersMilitary `json:"military,omitempty"`
	// User's mobile phone number
	MobilePhone *string `json:"mobile_phone,omitempty"`
	Movies *string `json:"movies,omitempty"`
	Music *string `json:"music,omitempty"`
	// User nickname
	Nickname *string `json:"nickname,omitempty"`
	Occupation *UsersOccupation `json:"occupation,omitempty"`
	OwnerState *OwnerState `json:"owner_state,omitempty"`
	Personal *UsersPersonal `json:"personal,omitempty"`
	Photo *string `json:"photo,omitempty"`
	// URL of square photo of the user with 200 pixels in width
	//  Format: uri
	Photo200 *string `json:"photo_200,omitempty"`
	// URL of user's photo with 200 pixels in width
	//  Format: uri
	Photo200Orig *string `json:"photo_200_orig,omitempty"`
	Photo400 *string `json:"photo_400,omitempty"`
	// URL of user's photo with 400 pixels in width
	//  Format: uri
	Photo400Orig *string `json:"photo_400_orig,omitempty"`
	PhotoBig *string `json:"photo_big,omitempty"`
	// ID of the user's main photo
	PhotoId *string `json:"photo_id,omitempty"`
	// URL of square photo of the user with maximum width
	//  Format: uri
	PhotoMax *string `json:"photo_max,omitempty"`
	// URL of user's photo of maximum size
	//  Format: uri
	PhotoMaxOrig *string `json:"photo_max_orig,omitempty"`
	PhotoMaxSize *PhotosPhoto `json:"photo_max_size,omitempty"`
	PhotoMedium *PhotosPhotoFalseable `json:"photo_medium,omitempty"`
	PhotoMediumRec *PhotosPhotoFalseable `json:"photo_medium_rec,omitempty"`
	PhotoRec *PhotosPhotoFalseable `json:"photo_rec,omitempty"`
	Quotes *string `json:"quotes,omitempty"`
	// User relationship status
	Relation *UsersUserRelation `json:"relation,omitempty"`
	RelationPartner *UsersUserMin `json:"relation_partner,omitempty"`
	Relatives *[]UsersRelative `json:"relatives,omitempty"`
	Schools *[]UsersSchool `json:"schools,omitempty"`
	ServiceDescription *string `json:"service_description,omitempty"`
	// User's website
	Site *string `json:"site,omitempty"`
	Skype *string `json:"skype,omitempty"`
	// User's status
	Status *string `json:"status,omitempty"`
	StatusAudio *AudioAudio `json:"status_audio,omitempty"`
	StoriesArchiveCount *int `json:"stories_archive_count,omitempty"`
	Test *BaseBoolInt `json:"test,omitempty"`
	// User's timezone
	Timezone *float64 `json:"timezone,omitempty"`
	Tv *string `json:"tv,omitempty"`
	Twitter *string `json:"twitter,omitempty"`
	Type *UsersUserType `json:"type,omitempty"`
	Universities *[]UsersUniversity `json:"universities,omitempty"`
	// University ID
	University *int `json:"university,omitempty"`
	UniversityGroupId *int `json:"university_group_id,omitempty"`
	// University name
	UniversityName *string `json:"university_name,omitempty"`
	VideoLive *VideoLiveInfo `json:"video_live,omitempty"`
	// Number of user's live streams
	//  Minimum: 0
	VideoLiveCount *int `json:"video_live_count,omitempty"`
	// User level in live streams achievements
	//  Minimum: 0
	VideoLiveLevel *int `json:"video_live_level,omitempty"`
	// Information whether current user can comment wall posts
	WallComments *BaseBoolInt `json:"wall_comments,omitempty"`
	WallDefault *UsersUserFullWallDefault`json:"wall_default,omitempty"`
}

type UsersUserMin struct {
	CanAccessClosed *bool `json:"can_access_closed,omitempty"`
	// Returns if a profile is deleted or blocked
	Deactivated *string `json:"deactivated,omitempty"`
	// User first name
	FirstName *string `json:"first_name,omitempty"`
	// Returns if a profile is hidden.
	Hidden *int `json:"hidden,omitempty"`
	// User ID
	//  Format: int64
	Id int `json:"id"`
	IsClosed *bool `json:"is_closed,omitempty"`
	// User last name
	LastName *string `json:"last_name,omitempty"`
}

type UsersUserRelation int

const (
	UsersUserRelationNotSpecified UsersUserRelation = 0
	UsersUserRelationSingle UsersUserRelation = 1
	UsersUserRelationInARelationship UsersUserRelation = 2
	UsersUserRelationEngaged UsersUserRelation = 3
	UsersUserRelationMarried UsersUserRelation = 4
	UsersUserRelationComplicated UsersUserRelation = 5
	UsersUserRelationActivelySearching UsersUserRelation = 6
	UsersUserRelationInLove UsersUserRelation = 7
	UsersUserRelationInACivilUnion UsersUserRelation = 8
)

type UsersUserSettingsXtr struct {
	// User's date of birth
	Bdate *string `json:"bdate,omitempty"`
	// Information whether user's birthdate are hidden
	//  Minimum: 0
	BdateVisibility *int `json:"bdate_visibility,omitempty"`
	City *BaseCity `json:"city,omitempty"`
	Connections *UsersUserConnections `json:"connections,omitempty"`
	Country *BaseCountry `json:"country,omitempty"`
	// User first name
	FirstName *string `json:"first_name,omitempty"`
	// User's hometown
	HomeTown string `json:"home_town"`
	Interests *AccountUserSettingsInterests `json:"interests,omitempty"`
	Languages *[]string `json:"languages,omitempty"`
	// User last name
	LastName *string `json:"last_name,omitempty"`
	// User maiden name
	MaidenName *string `json:"maiden_name,omitempty"`
	NameRequest *AccountNameRequest `json:"name_request,omitempty"`
	Personal *UsersPersonal `json:"personal,omitempty"`
	// User phone number with some hidden digits
	Phone *string `json:"phone,omitempty"`
	// User relationship status
	Relation *UsersUserRelation `json:"relation,omitempty"`
	RelationPartner *UsersUserMin `json:"relation_partner,omitempty"`
	// Information whether relation status is pending
	RelationPending *BaseBoolInt `json:"relation_pending,omitempty"`
	RelationRequests *[]UsersUserMin `json:"relation_requests,omitempty"`
	// Domain name of the user's page
	ScreenName *string `json:"screen_name,omitempty"`
	// User sex
	Sex *BaseSex `json:"sex,omitempty"`
	// User status
	Status string `json:"status"`
	StatusAudio *AudioAudio `json:"status_audio,omitempty"`
}

// UsersUserType Object type
type UsersUserType string

const (
	UsersUserTypeProfile UsersUserType = "profile"
)

type UsersUserXtrType struct {
	UsersUser
	Type *UsersUserType `json:"type,omitempty"`
}

type UsersUsersArray struct {
	// Users number
	//  Minimum: 0
	Count int `json:"count"`
	//  Format: int64
	Items []int `json:"items"`
}

type UsersGetFollowersFieldsResponse struct {
	Users struct {
		// Total number of available results
		//  Minimum: 0
		Count int `json:"count"`
		Items []UsersUserFull `json:"items"`
	} `json:"users"`
}

type UsersGetFollowersResponse struct {
	Users struct {
		// Total friends number
		//  Minimum: 0
		Count int `json:"count"`
		//  Format: int64
		//  Minimum: 1
		Items []int `json:"items"`
	} `json:"users"`
}

type UsersGetSubscriptionsExtendedResponse struct {
	Users struct {
		// Total number of available results
		//  Minimum: 0
		Count int `json:"count"`
		Items []UsersSubscriptionsItem `json:"items"`
	} `json:"users"`
}

type UsersGetSubscriptionsResponse struct {
	Users struct {
		Groups GroupsGroupsArray `json:"groups"`
		Users UsersUsersArray `json:"users"`
	} `json:"users"`
}

type UsersGetResponse struct {
	Response []UsersUserFull `json:"response"`
}

type UsersSearchResponse struct {
	Users struct {
		// Total number of available results
		Count int `json:"count"`
		Items []UsersUserFull `json:"items"`
	} `json:"users"`
}

