// Code generated by https://github.com/defany/govk. DO NOT EDIT.

package models

import (
	"encoding/json"
)

// suppress unused package warning
var _ *json.RawMessage

type NotesNote struct {
	// Information whether current user can comment the note
	CanComment *BaseBoolInt `json:"can_comment,omitempty"`
	// Comments number
	//  Minimum: 0
	Comments int `json:"comments"`
	// Date when the note has been created in Unixtime
	//  Minimum: 0
	Date int `json:"date"`
	// Note ID
	//  Minimum: 1
	Id int `json:"id"`
	// Note owner's ID
	//  Format: int64
	//  Minimum: 1
	OwnerId int `json:"owner_id"`
	PrivacyComment *[]string `json:"privacy_comment,omitempty"`
	PrivacyView *[]string `json:"privacy_view,omitempty"`
	//  Minimum: 0
	ReadComments *int `json:"read_comments,omitempty"`
	// Note text
	Text *string `json:"text,omitempty"`
	// Note text in wiki format
	TextWiki *string `json:"text_wiki,omitempty"`
	// Note title
	Title string `json:"title"`
	// URL of the page with note preview
	//  Format: uri
	ViewUrl string `json:"view_url"`
}

type NotesNoteComment struct {
	// Date when the comment has beed added in Unixtime
	Date int `json:"date"`
	// Comment ID
	Id int `json:"id"`
	// Comment text
	Message string `json:"message"`
	// Note ID
	Nid int `json:"nid"`
	// Note ID
	Oid int `json:"oid"`
	// ID of replied comment 
	ReplyTo *int `json:"reply_to,omitempty"`
	// Comment author's ID
	Uid int `json:"uid"`
}

type NotesAddResponse struct {
	// Note ID
	Response int `json:"response"`
}

type NotesCreateCommentResponse struct {
	// Comment ID
	Response int `json:"response"`
}

type NotesGetByIdResponse struct {
	Response NotesNote `json:"response"`
}

type NotesGetCommentsResponse struct {
	Notes struct {
		// Total number
		Count int `json:"count"`
		Items []NotesNoteComment `json:"items"`
	} `json:"notes"`
}

type NotesGetResponse struct {
	Notes struct {
		// Total number
		Count int `json:"count"`
		Items []NotesNote `json:"items"`
	} `json:"notes"`
}

