// Code generated by https://github.com/defany/govk. DO NOT EDIT.

package models

import (
	"encoding/json"
)

// suppress unused package warning
var _ *json.RawMessage

type MarketCurrency struct {
	// Currency ID
	//  Minimum: 0
	Id int `json:"id"`
	// Currency sign
	Name string `json:"name"`
	// Currency title
	Title string `json:"title"`
}

type MarketMarketAlbum struct {
	// Items number
	//  Minimum: 0
	Count int `json:"count"`
	// Market album ID
	//  Minimum: 1
	Id int `json:"id"`
	// Is album hidden
	IsHidden *bool `json:"is_hidden,omitempty"`
	// Is album main for owner
	IsMain *bool `json:"is_main,omitempty"`
	// Market album owner's ID
	//  Format: int64
	OwnerId int `json:"owner_id"`
	Photo *PhotosPhoto `json:"photo,omitempty"`
	// Market album title
	Title string `json:"title"`
	// Date when album has been updated last time in Unixtime
	//  Minimum: 0
	UpdatedTime int `json:"updated_time"`
}

type MarketMarketCategory MarketMarketCategoryOld

type MarketMarketCategoryNested struct {
	// Category ID
	Id int `json:"id"`
	// Category name
	Name string `json:"name"`
	Parent *MarketMarketCategoryNested `json:"parent,omitempty"`
}

type MarketMarketCategoryOld struct {
	// Category ID
	Id int `json:"id"`
	// Category name
	Name string `json:"name"`
	Section MarketSection `json:"section"`
}

type MarketMarketCategoryTree struct {
	Children *[]MarketMarketCategoryTree `json:"children,omitempty"`
	// Category ID
	Id int `json:"id"`
	// Category name
	Name string `json:"name"`
}

type MarketMarketItem struct {
	// Access key for the market item
	AccessKey *string `json:"access_key,omitempty"`
	Availability MarketMarketItemAvailability `json:"availability"`
	// Title for button for url
	ButtonTitle *string `json:"button_title,omitempty"`
	Category MarketMarketCategory `json:"category"`
	// Date when the item has been created in Unixtime
	//  Minimum: 0
	Date *int `json:"date,omitempty"`
	// Item description
	Description string `json:"description"`
	ExternalId *string `json:"external_id,omitempty"`
	// Item ID
	//  Minimum: 0
	Id int `json:"id"`
	IsFavorite *bool `json:"is_favorite,omitempty"`
	IsMainVariant *bool `json:"is_main_variant,omitempty"`
	// Item owner's ID
	//  Format: int64
	OwnerId int `json:"owner_id"`
	Price MarketPrice `json:"price"`
	//  MaxLength: 50
	Sku *string `json:"sku,omitempty"`
	// URL of the preview image
	//  Format: uri
	ThumbPhoto *string `json:"thumb_photo,omitempty"`
	// Item title
	Title string `json:"title"`
	// URL to item
	//  Format: uri
	Url *string `json:"url,omitempty"`
	//  Minimum: 0
	VariantsGroupingId *int `json:"variants_grouping_id,omitempty"`
}

// MarketMarketItemAvailability Information whether the item is available
type MarketMarketItemAvailability int

const (
	MarketMarketItemAvailabilityAvailable MarketMarketItemAvailability = 0
	MarketMarketItemAvailabilityRemoved MarketMarketItemAvailability = 1
	MarketMarketItemAvailabilityUnavailable MarketMarketItemAvailability = 2
)

type MarketMarketItemFull struct {
	MarketMarketItem
	// Contains ad ID if it has
	AdId *int `json:"ad_id,omitempty"`
	AlbumsIds *[]int `json:"albums_ids,omitempty"`
	// Information whether current use can comment the item
	CanComment *BaseBoolInt `json:"can_comment,omitempty"`
	// Information whether current use can repost the item
	CanRepost *BaseBoolInt `json:"can_repost,omitempty"`
	// Information for cancel and revert order
	CancelInfo *BaseLink `json:"cancel_info,omitempty"`
	Likes *BaseLikes `json:"likes,omitempty"`
	Photos *[]PhotosPhoto `json:"photos,omitempty"`
	Reposts *BaseRepostsInfo `json:"reposts,omitempty"`
	// User agreement info
	UserAgreementInfo *string `json:"user_agreement_info,omitempty"`
	// Views number
	ViewsCount *int `json:"views_count,omitempty"`
	// Object identifier in wishlist of viewer
	WishlistItemId *int `json:"wishlist_item_id,omitempty"`
}

type MarketOrder struct {
	Address *string `json:"address,omitempty"`
	// Information for cancel and revert order
	CancelInfo *BaseLink `json:"cancel_info,omitempty"`
	Comment *string `json:"comment,omitempty"`
	//  Minimum: 0
	Date int `json:"date"`
	DisplayOrderId *string `json:"display_order_id,omitempty"`
	//  Format: int64
	//  Minimum: 0
	GroupId int `json:"group_id"`
	//  Minimum: 0
	Id int `json:"id"`
	//  Minimum: 0
	ItemsCount int `json:"items_count"`
	MerchantComment *string `json:"merchant_comment,omitempty"`
	// Several order items for preview
	PreviewOrderItems *[]MarketOrderItem `json:"preview_order_items,omitempty"`
	//  Minimum: 0
	Status int `json:"status"`
	TotalPrice MarketPrice `json:"total_price"`
	TrackLink *string `json:"track_link,omitempty"`
	TrackNumber *string `json:"track_number,omitempty"`
	//  Format: int64
	//  Minimum: 0
	UserId int `json:"user_id"`
	//  Minimum: 0
	Weight *int `json:"weight,omitempty"`
}

type MarketOrderItem struct {
	Item MarketMarketItem `json:"item"`
	ItemId int `json:"item_id"`
	//  Format: int64
	OwnerId int `json:"owner_id"`
	Photo *PhotosPhoto `json:"photo,omitempty"`
	Price MarketPrice `json:"price"`
	//  Minimum: 0
	Quantity int `json:"quantity"`
	Title *string `json:"title,omitempty"`
	Variants *[]string `json:"variants,omitempty"`
}

type MarketPrice struct {
	// Amount
	Amount string `json:"amount"`
	Currency MarketCurrency `json:"currency"`
	DiscountRate *int `json:"discount_rate,omitempty"`
	OldAmount *string `json:"old_amount,omitempty"`
	// Textual representation of old price
	OldAmountText *string `json:"old_amount_text,omitempty"`
	// Text
	Text string `json:"text"`
}

type MarketSection struct {
	// Section ID
	//  Minimum: 0
	Id int `json:"id"`
	// Section name
	Name string `json:"name"`
}

// MarketServicesViewType Type of view. 1 - cards, 2 - rows
type MarketServicesViewType int

const (
	MarketServicesViewTypeCards MarketServicesViewType = 1
	MarketServicesViewTypeRows MarketServicesViewType = 2
)

type MarketAddAlbumResponse struct {
	Market struct {
		// Albums count
		AlbumsCount *int `json:"albums_count,omitempty"`
		// Album ID
		MarketAlbumId *int `json:"market_album_id,omitempty"`
	} `json:"market"`
}

type MarketAddResponse struct {
	Market struct {
		// Item ID
		MarketItemId int `json:"market_item_id"`
	} `json:"market"`
}

type MarketCreateCommentResponse struct {
	// Comment ID
	Response int `json:"response"`
}

type MarketDeleteCommentResponse struct {
	// Returns 1 if request has been processed successfully (0 if the comment is not found)
	Response BaseBoolInt `json:"response"`
}

type MarketGetAlbumByIdResponse struct {
	Market struct {
		// Total number
		Count *int `json:"count,omitempty"`
		Items *[]MarketMarketAlbum `json:"items,omitempty"`
	} `json:"market"`
}

type MarketGetAlbumsResponse struct {
	Market struct {
		// Total number
		Count *int `json:"count,omitempty"`
		Items *[]MarketMarketAlbum `json:"items,omitempty"`
	} `json:"market"`
}

type MarketGetByIdExtendedResponse struct {
	Market struct {
		// Total number
		Count *int `json:"count,omitempty"`
		Items *[]MarketMarketItemFull `json:"items,omitempty"`
	} `json:"market"`
}

type MarketGetByIdResponse struct {
	Market struct {
		// Total number
		Count *int `json:"count,omitempty"`
		Items *[]MarketMarketItem `json:"items,omitempty"`
	} `json:"market"`
}

type MarketGetCategoriesNewResponse struct {
	Market struct {
		Items []MarketMarketCategoryTree `json:"items"`
	} `json:"market"`
}

type MarketGetCategoriesResponse struct {
	Market struct {
		// Total number
		Count *int `json:"count,omitempty"`
		Items *[]MarketMarketCategory `json:"items,omitempty"`
	} `json:"market"`
}

type MarketGetCommentsResponse struct {
	Market struct {
		// Total number
		Count *int `json:"count,omitempty"`
		Items *[]WallWallComment `json:"items,omitempty"`
	} `json:"market"`
}

type MarketGetGroupOrdersResponse struct {
	Market struct {
		// Total number
		//  Minimum: 0
		Count int `json:"count"`
		Items []MarketOrder `json:"items"`
	} `json:"market"`
}

type MarketGetOrderByIdResponse struct {
	Market struct {
		Order *MarketOrder `json:"order,omitempty"`
	} `json:"market"`
}

type MarketGetOrderItemsResponse struct {
	Market struct {
		// Total number
		Count int `json:"count"`
		Items []MarketOrderItem `json:"items"`
	} `json:"market"`
}

type MarketGetOrdersExtendedResponse struct {
	Market struct {
		// Total number
		//  Minimum: 0
		Count int `json:"count"`
		Groups *[]GroupsGroupFull `json:"groups,omitempty"`
		Items []MarketOrder `json:"items"`
	} `json:"market"`
}

type MarketGetOrdersResponse struct {
	Market struct {
		// Total number
		//  Minimum: 0
		Count int `json:"count"`
		Items []MarketOrder `json:"items"`
	} `json:"market"`
}

type MarketGetExtendedResponse struct {
	Market struct {
		// Total number
		Count *int `json:"count,omitempty"`
		Items *[]MarketMarketItemFull `json:"items,omitempty"`
		Variants *[]MarketMarketItemFull `json:"variants,omitempty"`
	} `json:"market"`
}

type MarketGetResponse struct {
	Market struct {
		// Total number
		Count *int `json:"count,omitempty"`
		Items *[]MarketMarketItem `json:"items,omitempty"`
		Variants *[]MarketMarketItem `json:"variants,omitempty"`
	} `json:"market"`
}

type MarketRestoreCommentResponse struct {
	// Returns 1 if request has been processed successfully (0 if the comment is not found)
	Response BaseBoolInt `json:"response"`
}

type MarketSearchExtendedResponse struct {
	Market struct {
		// Total number
		Count int `json:"count"`
		Items []MarketMarketItemFull `json:"items"`
		Variants *[]MarketMarketItemFull `json:"variants,omitempty"`
		ViewType MarketServicesViewType `json:"view_type"`
	} `json:"market"`
}

type MarketSearchResponse struct {
	Market struct {
		// Total number
		Count int `json:"count"`
		Groups *[]GroupsGroupFull `json:"groups,omitempty"`
		Items []MarketMarketItem `json:"items"`
		Variants *[]MarketMarketItem `json:"variants,omitempty"`
		ViewType MarketServicesViewType `json:"view_type"`
	} `json:"market"`
}

