// Code generated by https://github.com/defany/govk. DO NOT EDIT.

package models

import (
	"encoding/json"
)

// suppress unused package warning
var _ *json.RawMessage

type WallAppPost struct {
	// Application ID
	Id *int `json:"id,omitempty"`
	// Application name
	Name *string `json:"name,omitempty"`
	// URL of the preview image with 130 px in width
	//  Format: uri
	Photo130 *string `json:"photo_130,omitempty"`
	// URL of the preview image with 604 px in width
	//  Format: uri
	Photo604 *string `json:"photo_604,omitempty"`
}

type WallAttachedNote struct {
	CanComment *int `json:"can_comment,omitempty"`
	// Comments number
	//  Minimum: 0
	Comments int `json:"comments"`
	// Date when the note has been created in Unixtime
	//  Minimum: 0
	Date int `json:"date"`
	// Note ID
	//  Minimum: 1
	Id int `json:"id"`
	// Note owner's ID
	//  Format: int64
	//  Minimum: 1
	OwnerId int `json:"owner_id"`
	PrivacyComment *[]string `json:"privacy_comment,omitempty"`
	PrivacyView *[]string `json:"privacy_view,omitempty"`
	// Read comments number
	//  Minimum: 0
	ReadComments int `json:"read_comments"`
	// Note text
	Text *string `json:"text,omitempty"`
	// Note wiki text
	TextWiki *string `json:"text_wiki,omitempty"`
	// Note title
	Title string `json:"title"`
	// URL of the page with note preview
	//  Format: uri
	ViewUrl string `json:"view_url"`
}

type WallCarouselBase struct {
	// Index of current carousel element
	//  Minimum: 0
	CarouselOffset *int `json:"carousel_offset,omitempty"`
}

type WallCommentAttachment struct {
	Audio *AudioAudio `json:"audio,omitempty"`
	Doc *DocsDoc `json:"doc,omitempty"`
	Link *BaseLink `json:"link,omitempty"`
	Market *MarketMarketItem `json:"market,omitempty"`
	MarketMarketAlbum *MarketMarketAlbum `json:"market_market_album,omitempty"`
	Note *WallAttachedNote `json:"note,omitempty"`
	Page *PagesWikipageFull `json:"page,omitempty"`
	Photo *PhotosPhoto `json:"photo,omitempty"`
	Sticker *BaseSticker `json:"sticker,omitempty"`
	Type WallCommentAttachmentType `json:"type"`
	Video *VideoVideo `json:"video,omitempty"`
}

// WallCommentAttachmentType Attachment type
type WallCommentAttachmentType string

const (
	WallCommentAttachmentTypePhoto WallCommentAttachmentType = "photo"
	WallCommentAttachmentTypeAudio WallCommentAttachmentType = "audio"
	WallCommentAttachmentTypeVideo WallCommentAttachmentType = "video"
	WallCommentAttachmentTypeDoc WallCommentAttachmentType = "doc"
	WallCommentAttachmentTypeLink WallCommentAttachmentType = "link"
	WallCommentAttachmentTypeNote WallCommentAttachmentType = "note"
	WallCommentAttachmentTypePage WallCommentAttachmentType = "page"
	WallCommentAttachmentTypeMarketMarketAlbum WallCommentAttachmentType = "market_market_album"
	WallCommentAttachmentTypeMarket WallCommentAttachmentType = "market"
	WallCommentAttachmentTypeSticker WallCommentAttachmentType = "sticker"
)

type WallGeoType string

const (
	WallGeoTypePlace WallGeoType = "place"
	WallGeoTypePoint WallGeoType = "point"
)

type WallGeo struct {
	// Coordinates as string. <latitude> <longtitude>
	Coordinates *string `json:"coordinates,omitempty"`
	Place *BasePlace `json:"place,omitempty"`
	// Information whether a map is showed
	Showmap *int `json:"showmap,omitempty"`
	// Place type
	Type *WallGeoType`json:"type,omitempty"`
}

// WallGetFilter Filter to apply: 'owner' — posts by the wall owner, 'others' — posts by someone else, 'all' — posts by the wall owner and others (default), 'postponed' — timed posts (only available for calls with an 'access_token'), 'suggests' — suggested posts on a community wall
type WallGetFilter string

const (
	WallGetFilterOwner WallGetFilter = "owner"
	WallGetFilterOthers WallGetFilter = "others"
	WallGetFilterAll WallGetFilter = "all"
	WallGetFilterPostponed WallGetFilter = "postponed"
	WallGetFilterSuggests WallGetFilter = "suggests"
	WallGetFilterArchived WallGetFilter = "archived"
	WallGetFilterDonut WallGetFilter = "donut"
)

type WallGraffiti struct {
	// Access key for graffiti
	AccessKey *string `json:"access_key,omitempty"`
	// Graffiti height
	//  Minimum: 0
	Height *int `json:"height,omitempty"`
	// Graffiti ID
	Id *int `json:"id,omitempty"`
	// Graffiti owner's ID
	//  Format: int64
	OwnerId *int `json:"owner_id,omitempty"`
	// URL of the preview image with 200 px in width
	//  Format: uri
	Photo200 *string `json:"photo_200,omitempty"`
	// URL of the preview image with 586 px in width
	//  Format: uri
	Photo586 *string `json:"photo_586,omitempty"`
	// Graffiti URL
	//  Format: uri
	Url *string `json:"url,omitempty"`
	// Graffiti width
	//  Minimum: 0
	Width *int `json:"width,omitempty"`
}

type WallPostCopyright struct {
	//  Format: int64
	Id *int `json:"id,omitempty"`
	Link string `json:"link"`
	Name string `json:"name"`
	Type string `json:"type"`
}

type WallPostSource struct {
	// Additional data
	Data *string `json:"data,omitempty"`
	Link *BaseLink `json:"link,omitempty"`
	// Platform name
	Platform *string `json:"platform,omitempty"`
	Type *WallPostSourceType `json:"type,omitempty"`
	// URL to an external site used to publish the post
	//  Format: uri
	Url *string `json:"url,omitempty"`
}

// WallPostSourceType Type of post source
type WallPostSourceType string

const (
	WallPostSourceTypeVk WallPostSourceType = "vk"
	WallPostSourceTypeWidget WallPostSourceType = "widget"
	WallPostSourceTypeApi WallPostSourceType = "api"
	WallPostSourceTypeRss WallPostSourceType = "rss"
	WallPostSourceTypeSms WallPostSourceType = "sms"
	WallPostSourceTypeMvk WallPostSourceType = "mvk"
)

// WallPostType Post type
type WallPostType string

const (
	WallPostTypePost WallPostType = "post"
	WallPostTypeCopy WallPostType = "copy"
	WallPostTypeReply WallPostType = "reply"
	WallPostTypePostpone WallPostType = "postpone"
	WallPostTypeSuggest WallPostType = "suggest"
	WallPostTypePostAds WallPostType = "post_ads"
	WallPostTypePhoto WallPostType = "photo"
	WallPostTypeVideo WallPostType = "video"
)

type WallPostedPhoto struct {
	// Photo ID
	Id *int `json:"id,omitempty"`
	// Photo owner's ID
	//  Format: int64
	OwnerId *int `json:"owner_id,omitempty"`
	// URL of the preview image with 130 px in width
	//  Format: uri
	Photo130 *string `json:"photo_130,omitempty"`
	// URL of the preview image with 604 px in width
	//  Format: uri
	Photo604 *string `json:"photo_604,omitempty"`
}

type WallViews struct {
	// Count
	//  Minimum: 0
	Count *int `json:"count,omitempty"`
}

type WallWallComment struct {
	Attachments *[]WallCommentAttachment `json:"attachments,omitempty"`
	CanEdit *BaseBoolInt `json:"can_edit,omitempty"`
	// Date when the comment has been added in Unixtime
	//  Minimum: 0
	Date int `json:"date"`
	Deleted *bool `json:"deleted,omitempty"`
	Donut *WallWallCommentDonut `json:"donut,omitempty"`
	// Author ID
	//  Format: int64
	FromId int `json:"from_id"`
	// Comment ID
	//  Minimum: 1
	Id int `json:"id"`
	Likes *BaseLikesInfo `json:"likes,omitempty"`
	//  Format: int64
	OwnerId *int `json:"owner_id,omitempty"`
	ParentsStack *[]int `json:"parents_stack,omitempty"`
	PhotoId *int `json:"photo_id,omitempty"`
	// Photo ID
	//  Minimum: 0
	Pid *int `json:"pid,omitempty"`
	PostId *int `json:"post_id,omitempty"`
	// Real position of the comment
	RealOffset *int `json:"real_offset,omitempty"`
	// Replied comment ID
	ReplyToComment *int `json:"reply_to_comment,omitempty"`
	// Replied user ID
	//  Format: int64
	ReplyToUser *int `json:"reply_to_user,omitempty"`
	// Comment text
	Text string `json:"text"`
	Thread *CommentThread `json:"thread,omitempty"`
	VideoId *int `json:"video_id,omitempty"`
}

type WallWallCommentDonut struct {
	// Means commentator is donator
	IsDon *bool `json:"is_don,omitempty"`
	Placeholder *WallWallCommentDonutPlaceholder `json:"placeholder,omitempty"`
}

type WallWallCommentDonutPlaceholder struct {
	Text string `json:"text"`
}

type WallWallpost struct {
	// Access key to private object
	AccessKey *string `json:"access_key,omitempty"`
	Attachments *[]WallWallpostAttachment `json:"attachments,omitempty"`
	// Information about the source of the post
	Copyright *WallPostCopyright `json:"copyright,omitempty"`
	// Date of publishing in Unixtime
	Date *int `json:"date,omitempty"`
	// Date of editing in Unixtime
	//  Minimum: 0
	Edited *int `json:"edited,omitempty"`
	// Post author ID
	//  Format: int64
	FromId *int `json:"from_id,omitempty"`
	Geo *WallGeo `json:"geo,omitempty"`
	// Post ID
	Id *int `json:"id,omitempty"`
	// Is post archived, only for post owners
	IsArchived *bool `json:"is_archived,omitempty"`
	IsDeleted *bool `json:"is_deleted,omitempty"`
	// Information whether the post in favorites list
	IsFavorite *bool `json:"is_favorite,omitempty"`
	// Count of likes
	Likes *BaseLikesInfo `json:"likes,omitempty"`
	// Wall owner's ID
	//  Format: int64
	OwnerId *int `json:"owner_id,omitempty"`
	// If post type 'reply', contains original parent IDs stack
	ParentsStack *[]int `json:"parents_stack,omitempty"`
	// If post type 'reply', contains original post ID
	PostId *int `json:"post_id,omitempty"`
	PostSource *WallPostSource `json:"post_source,omitempty"`
	PostType *WallPostType `json:"post_type,omitempty"`
	Reposts *BaseRepostsInfo `json:"reposts,omitempty"`
	// Post signer ID
	//  Format: int64
	SignerId *int `json:"signer_id,omitempty"`
	// Post text
	Text *string `json:"text,omitempty"`
	// Count of views
	Views *WallViews `json:"views,omitempty"`
}

type WallWallpostAttachment struct {
	// Access key for the audio
	AccessKey *string `json:"access_key,omitempty"`
	Album *PhotosPhotoAlbum `json:"album,omitempty"`
	App *WallAppPost `json:"app,omitempty"`
	Audio *AudioAudio `json:"audio,omitempty"`
	Doc *DocsDoc `json:"doc,omitempty"`
	Event *EventsEventAttach `json:"event,omitempty"`
	Graffiti *WallGraffiti `json:"graffiti,omitempty"`
	Group *GroupsGroupAttach `json:"group,omitempty"`
	Link *BaseLink `json:"link,omitempty"`
	Market *MarketMarketItem `json:"market,omitempty"`
	MarketAlbum *MarketMarketAlbum `json:"market_album,omitempty"`
	Note *NotesNote `json:"note,omitempty"`
	Page *PagesWikipageFull `json:"page,omitempty"`
	Photo *PhotosPhoto `json:"photo,omitempty"`
	Poll *PollsPoll `json:"poll,omitempty"`
	PostedPhoto *WallPostedPhoto `json:"posted_photo,omitempty"`
	Type WallWallpostAttachmentType `json:"type"`
	Video *VideoVideoFull `json:"video,omitempty"`
}

// WallWallpostAttachmentType Attachment type
type WallWallpostAttachmentType string

const (
	WallWallpostAttachmentTypePhoto WallWallpostAttachmentType = "photo"
	WallWallpostAttachmentTypePhotosList WallWallpostAttachmentType = "photos_list"
	WallWallpostAttachmentTypePostedPhoto WallWallpostAttachmentType = "posted_photo"
	WallWallpostAttachmentTypeAudio WallWallpostAttachmentType = "audio"
	WallWallpostAttachmentTypeAudioPlaylist WallWallpostAttachmentType = "audio_playlist"
	WallWallpostAttachmentTypeVideo WallWallpostAttachmentType = "video"
	WallWallpostAttachmentTypeDoc WallWallpostAttachmentType = "doc"
	WallWallpostAttachmentTypeLink WallWallpostAttachmentType = "link"
	WallWallpostAttachmentTypeGraffiti WallWallpostAttachmentType = "graffiti"
	WallWallpostAttachmentTypeNote WallWallpostAttachmentType = "note"
	WallWallpostAttachmentTypeApp WallWallpostAttachmentType = "app"
	WallWallpostAttachmentTypePoll WallWallpostAttachmentType = "poll"
	WallWallpostAttachmentTypePage WallWallpostAttachmentType = "page"
	WallWallpostAttachmentTypeAlbum WallWallpostAttachmentType = "album"
	WallWallpostAttachmentTypeMarketAlbum WallWallpostAttachmentType = "market_album"
	WallWallpostAttachmentTypeMarket WallWallpostAttachmentType = "market"
	WallWallpostAttachmentTypeEvent WallWallpostAttachmentType = "event"
	WallWallpostAttachmentTypeDonutLink WallWallpostAttachmentType = "donut_link"
	WallWallpostAttachmentTypeArticle WallWallpostAttachmentType = "article"
	WallWallpostAttachmentTypeTextlive WallWallpostAttachmentType = "textlive"
	WallWallpostAttachmentTypeTextpost WallWallpostAttachmentType = "textpost"
	WallWallpostAttachmentTypeTextpostPublish WallWallpostAttachmentType = "textpost_publish"
	WallWallpostAttachmentTypeSituationalTheme WallWallpostAttachmentType = "situational_theme"
	WallWallpostAttachmentTypeGroup WallWallpostAttachmentType = "group"
	WallWallpostAttachmentTypeSticker WallWallpostAttachmentType = "sticker"
	WallWallpostAttachmentTypePodcast WallWallpostAttachmentType = "podcast"
)

type WallWallpostCommentsDonut struct {
	Placeholder *WallWallpostCommentsDonutPlaceholder `json:"placeholder,omitempty"`
}

// WallWallpostCommentsDonutPlaceholder Info about paid comments feature
type WallWallpostCommentsDonutPlaceholder struct {
	Text string `json:"text"`
}

type WallWallpostDonutEditMode string

const (
	WallWallpostDonutEditModeAll WallWallpostDonutEditMode = "all"
	WallWallpostDonutEditModeDuration WallWallpostDonutEditMode = "duration"
)

// WallWallpostDonut Info about paid wall post
type WallWallpostDonut struct {
	// Says whether group admin can post free copy of this donut post
	CanPublishFreeCopy *bool `json:"can_publish_free_copy,omitempty"`
	// Says what user can edit in post about donut properties
	EditMode *WallWallpostDonutEditMode`json:"edit_mode,omitempty"`
	// Post only for dons
	IsDonut bool `json:"is_donut"`
	// Value of this field need to pass in wall.post/edit in donut_paid_duration
	PaidDuration *int `json:"paid_duration,omitempty"`
	// If placeholder was respond, text and all attachments will be hidden
	Placeholder *WallWallpostDonutPlaceholder `json:"placeholder,omitempty"`
}

type WallWallpostDonutPlaceholder struct {
	Text string `json:"text"`
}

type WallWallpostFullTopicId int

const (
	WallWallpostFullTopicIdEmptyTopic WallWallpostFullTopicId = 0
	WallWallpostFullTopicIdArt WallWallpostFullTopicId = 1
	WallWallpostFullTopicIdIt WallWallpostFullTopicId = 7
	WallWallpostFullTopicIdGames WallWallpostFullTopicId = 12
	WallWallpostFullTopicIdMusic WallWallpostFullTopicId = 16
	WallWallpostFullTopicIdPhoto WallWallpostFullTopicId = 19
	WallWallpostFullTopicIdScienceAndTech WallWallpostFullTopicId = 21
	WallWallpostFullTopicIdSport WallWallpostFullTopicId = 23
	WallWallpostFullTopicIdTravel WallWallpostFullTopicId = 25
	WallWallpostFullTopicIdTvAndCinema WallWallpostFullTopicId = 26
	WallWallpostFullTopicIdHumor WallWallpostFullTopicId = 32
	WallWallpostFullTopicIdFashion WallWallpostFullTopicId = 43
)

type WallWallpostFull struct {
	WallCarouselBase
	WallWallpost
	// Information whether current user can delete the post
	CanDelete *BaseBoolInt `json:"can_delete,omitempty"`
	// Information whether current user can edit the post
	CanEdit *BaseBoolInt `json:"can_edit,omitempty"`
	// Information whether current user can pin the post
	CanPin *BaseBoolInt `json:"can_pin,omitempty"`
	Comments *BaseCommentsInfo `json:"comments,omitempty"`
	CopyHistory *[]WallWallpostFull `json:"copy_history,omitempty"`
	// Post creator ID (if post still can be edited)
	//  Format: int64
	CreatedBy *int `json:"created_by,omitempty"`
	Donut *WallWallpostDonut `json:"donut,omitempty"`
	// Hash for sharing
	Hash *string `json:"hash,omitempty"`
	// Information whether the post is pinned
	IsPinned *int `json:"is_pinned,omitempty"`
	// Information whether the post is marked as ads
	MarkedAsAds *BaseBoolInt `json:"marked_as_ads,omitempty"`
	// Preview length control parameter
	//  Minimum: 0
	//  Maximum: 1
	ShortTextRate *float64 `json:"short_text_rate,omitempty"`
	// Topic ID. Allowed values can be obtained from newsfeed.getPostTopics method
	//  Minimum: 0
	TopicId *WallWallpostFullTopicId`json:"topic_id,omitempty"`
}

type WallWallpostToId struct {
	Attachments *[]WallWallpostAttachment `json:"attachments,omitempty"`
	Comments *BaseCommentsInfo `json:"comments,omitempty"`
	// ID of the source post owner
	//  Format: int64
	CopyOwnerId *int `json:"copy_owner_id,omitempty"`
	// ID of the source post
	CopyPostId *int `json:"copy_post_id,omitempty"`
	// Date of publishing in Unixtime
	Date *int `json:"date,omitempty"`
	// Post author ID
	//  Format: int64
	FromId *int `json:"from_id,omitempty"`
	Geo *WallGeo `json:"geo,omitempty"`
	// Post ID
	Id *int `json:"id,omitempty"`
	// Information whether the post in favorites list
	IsFavorite *bool `json:"is_favorite,omitempty"`
	Likes *BaseLikesInfo `json:"likes,omitempty"`
	// wall post ID (if comment)
	PostId *int `json:"post_id,omitempty"`
	PostSource *WallPostSource `json:"post_source,omitempty"`
	PostType *WallPostType `json:"post_type,omitempty"`
	Reposts *BaseRepostsInfo `json:"reposts,omitempty"`
	// Post signer ID
	//  Format: int64
	SignerId *int `json:"signer_id,omitempty"`
	// Post text
	Text *string `json:"text,omitempty"`
	// Wall owner's ID
	//  Format: int64
	ToId *int `json:"to_id,omitempty"`
}

type WallCreateCommentResponse struct {
	Wall struct {
		// Created comment ID
		CommentId int `json:"comment_id"`
	} `json:"wall"`
}

type WallEditResponse struct {
	Wall struct {
		// Edited post ID
		//  Minimum: 0
		PostId int `json:"post_id"`
	} `json:"wall"`
}

type WallGetByIdExtendedResponse struct {
	Wall struct {
		Groups []GroupsGroupFull `json:"groups"`
		Items []WallWallpostFull `json:"items"`
		Profiles []UsersUserFull `json:"profiles"`
	} `json:"wall"`
}

type WallGetByIdLegacyResponse struct {
	Response []WallWallpostFull `json:"response"`
}

type WallGetByIdResponse struct {
	Wall struct {
		Items *[]WallWallpostFull `json:"items,omitempty"`
	} `json:"wall"`
}

type WallGetCommentExtendedResponse struct {
	Wall struct {
		Groups []GroupsGroup `json:"groups"`
		Items []WallWallComment `json:"items"`
		Profiles []UsersUser `json:"profiles"`
	} `json:"wall"`
}

type WallGetCommentResponse struct {
	Wall struct {
		Items []WallWallComment `json:"items"`
	} `json:"wall"`
}

type WallGetCommentsExtendedResponse struct {
	Wall struct {
		// Information whether current user can comment the post
		CanPost *bool `json:"can_post,omitempty"`
		// Total number
		Count int `json:"count"`
		// Count of replies of current level
		CurrentLevelCount *int `json:"current_level_count,omitempty"`
		Groups []GroupsGroup `json:"groups"`
		// Information whether groups can comment the post
		GroupsCanPost *bool `json:"groups_can_post,omitempty"`
		Items []WallWallComment `json:"items"`
		Profiles []UsersUser `json:"profiles"`
		ShowReplyButton *bool `json:"show_reply_button,omitempty"`
	} `json:"wall"`
}

type WallGetCommentsResponse struct {
	Wall struct {
		// Information whether current user can comment the post
		CanPost *bool `json:"can_post,omitempty"`
		// Total number
		Count int `json:"count"`
		// Count of replies of current level
		CurrentLevelCount *int `json:"current_level_count,omitempty"`
		// Information whether groups can comment the post
		GroupsCanPost *bool `json:"groups_can_post,omitempty"`
		Items []WallWallComment `json:"items"`
		ShowReplyButton *bool `json:"show_reply_button,omitempty"`
	} `json:"wall"`
}

type WallGetRepostsResponse struct {
	Wall struct {
		Groups []GroupsGroup `json:"groups"`
		Items []WallWallpostFull `json:"items"`
		Profiles []UsersUser `json:"profiles"`
	} `json:"wall"`
}

type WallGetExtendedResponse struct {
	Wall struct {
		// Total number
		Count int `json:"count"`
		Groups []GroupsGroupFull `json:"groups"`
		Items []WallWallpostFull `json:"items"`
		Profiles []UsersUserFull `json:"profiles"`
	} `json:"wall"`
}

type WallGetResponse struct {
	Wall struct {
		// Total number
		Count int `json:"count"`
		Items []WallWallpostFull `json:"items"`
	} `json:"wall"`
}

type WallPostAdsStealthResponse struct {
	Wall struct {
		// Created post ID
		PostId int `json:"post_id"`
	} `json:"wall"`
}

type WallPostResponse struct {
	Wall struct {
		// Created post ID
		PostId int `json:"post_id"`
	} `json:"wall"`
}

type WallRepostResponse struct {
	Wall struct {
		// Reposts number
		//  Minimum: 0
		LikesCount int `json:"likes_count"`
		// Reposts to mail number
		//  Minimum: 0
		MailRepostCount *int `json:"mail_repost_count,omitempty"`
		// Created post ID
		PostId int `json:"post_id"`
		// Reposts number
		//  Minimum: 1
		RepostsCount int `json:"reposts_count"`
		//  Default: 1
		Success int `json:"success"`
		// Reposts to wall number
		//  Minimum: 0
		WallRepostCount *int `json:"wall_repost_count,omitempty"`
	} `json:"wall"`
}

type WallSearchExtendedResponse struct {
	Wall struct {
		// Total number
		Count int `json:"count"`
		Groups []GroupsGroupFull `json:"groups"`
		Items []WallWallpostFull `json:"items"`
		Profiles []UsersUserFull `json:"profiles"`
	} `json:"wall"`
}

type WallSearchResponse struct {
	Wall struct {
		// Total number
		Count int `json:"count"`
		Items []WallWallpostFull `json:"items"`
	} `json:"wall"`
}

