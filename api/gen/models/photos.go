// Code generated by https://github.com/defany/govk. DO NOT EDIT.

package models

import (
	"encoding/json"
)

// suppress unused package warning
var _ *json.RawMessage

type PhotosImage struct {
	// Height of the photo in px.
	Height *int `json:"height,omitempty"`
	Type *PhotosImageType `json:"type,omitempty"`
	// Photo URL.
	//  Format: uri
	Url *string `json:"url,omitempty"`
	// Width of the photo in px.
	Width *int `json:"width,omitempty"`
}

// PhotosImageType Photo's type.
type PhotosImageType string

const (
	PhotosImageTypeS PhotosImageType = "s"
	PhotosImageTypeM PhotosImageType = "m"
	PhotosImageTypeX PhotosImageType = "x"
	PhotosImageTypeL PhotosImageType = "l"
	PhotosImageTypeO PhotosImageType = "o"
	PhotosImageTypeP PhotosImageType = "p"
	PhotosImageTypeQ PhotosImageType = "q"
	PhotosImageTypeR PhotosImageType = "r"
	PhotosImageTypeY PhotosImageType = "y"
	PhotosImageTypeZ PhotosImageType = "z"
	PhotosImageTypeW PhotosImageType = "w"
)

type PhotosPhoto struct {
	// Access key for the photo
	AccessKey *string `json:"access_key,omitempty"`
	// Album ID
	AlbumId int `json:"album_id"`
	// Information whether current user can comment the photo
	CanComment *BaseBoolInt `json:"can_comment,omitempty"`
	Comments *BaseObjectCount `json:"comments,omitempty"`
	// Date when uploaded
	//  Minimum: 0
	Date int `json:"date"`
	// Whether photo has attached tag links
	HasTags bool `json:"has_tags"`
	// Original photo height
	//  Minimum: 0
	Height *int `json:"height,omitempty"`
	// Photo ID
	//  Minimum: 0
	Id int `json:"id"`
	Images *[]PhotosImage `json:"images,omitempty"`
	// Latitude
	Lat *float64 `json:"lat,omitempty"`
	Likes *BaseLikes `json:"likes,omitempty"`
	// Longitude
	Long *float64 `json:"long,omitempty"`
	// Photo owner's ID
	//  Format: int64
	OwnerId int `json:"owner_id"`
	// URL of image with 2560 px width
	//  Format: uri
	Photo256 *string `json:"photo_256,omitempty"`
	Place *string `json:"place,omitempty"`
	// Post ID
	//  Minimum: 1
	PostId *int `json:"post_id,omitempty"`
	Reposts *BaseRepostsInfo `json:"reposts,omitempty"`
	Sizes *[]PhotosPhotoSizes `json:"sizes,omitempty"`
	Tags *BaseObjectCount `json:"tags,omitempty"`
	// Photo caption
	Text *string `json:"text,omitempty"`
	// ID of the user who have uploaded the photo
	//  Format: int64
	//  Minimum: 1
	UserId *int `json:"user_id,omitempty"`
	// Original photo width
	//  Minimum: 0
	Width *int `json:"width,omitempty"`
}

type PhotosPhotoAlbum struct {
	// Date when the album has been created in Unixtime
	//  Minimum: 0
	Created int `json:"created"`
	// Photo album description
	Description *string `json:"description,omitempty"`
	// Photo album ID
	Id int `json:"id"`
	// Album owner's ID
	//  Format: int64
	OwnerId int `json:"owner_id"`
	// Photos number
	//  Minimum: 0
	Size int `json:"size"`
	Thumb *PhotosPhoto `json:"thumb,omitempty"`
	// Photo album title
	Title string `json:"title"`
	// Date when the album has been updated last time in Unixtime
	//  Minimum: 0
	Updated int `json:"updated"`
}

type PhotosPhotoAlbumFull struct {
	// album can delete
	CanDelete *bool `json:"can_delete,omitempty"`
	// Information whether current user can upload photo to the album
	CanUpload *BaseBoolInt `json:"can_upload,omitempty"`
	// Information whether album comments are disabled
	CommentsDisabled *BaseBoolInt `json:"comments_disabled,omitempty"`
	// Date when the album has been created in Unixtime
	//  Minimum: 0
	Created int `json:"created"`
	// Photo album description
	Description *string `json:"description,omitempty"`
	// Photo album ID
	Id int `json:"id"`
	// Album owner's ID
	//  Format: int64
	OwnerId int `json:"owner_id"`
	// Photos number
	//  Minimum: 0
	Size int `json:"size"`
	Sizes *[]PhotosPhotoSizes `json:"sizes,omitempty"`
	// Thumb photo ID
	//  Minimum: 0
	ThumbId *int `json:"thumb_id,omitempty"`
	// Information whether the album thumb is last photo
	ThumbIsLast *BaseBoolInt `json:"thumb_is_last,omitempty"`
	// URL of the thumb image
	//  Format: uri
	ThumbSrc *string `json:"thumb_src,omitempty"`
	// Photo album title
	Title string `json:"title"`
	// Date when the album has been updated last time in Unixtime
	//  Minimum: 0
	Updated int `json:"updated"`
	// Information whether only community administrators can upload photos
	UploadByAdminsOnly *BaseBoolInt `json:"upload_by_admins_only,omitempty"`
}

//easyjson:skip
type PhotosPhotoFalseable struct{
	Raws []byte
}

func (o *PhotosPhotoFalseable) MarshalJSON() ([]byte, error) {
	return o.Raws, nil
}

func (o *PhotosPhotoFalseable) UnmarshalJSON(body []byte) (err error) {
	o.Raws = body
	return nil
}

func (o PhotosPhotoFalseable) Raw() []byte {
	return o.Raws
}

type PhotosPhotoFullXtrRealOffset struct {
	// Access key for the photo
	AccessKey *string `json:"access_key,omitempty"`
	// Album ID
	AlbumId int `json:"album_id"`
	CanComment *BaseBoolInt `json:"can_comment,omitempty"`
	Comments *BaseObjectCount `json:"comments,omitempty"`
	// Date when uploaded
	//  Minimum: 0
	Date int `json:"date"`
	// Original photo height
	//  Minimum: 0
	Height *int `json:"height,omitempty"`
	// Returns if the photo is hidden above the wall
	Hidden *BasePropertyExists `json:"hidden,omitempty"`
	// Photo ID
	//  Minimum: 0
	Id int `json:"id"`
	// Latitude
	Lat *float64 `json:"lat,omitempty"`
	Likes *BaseLikes `json:"likes,omitempty"`
	// Longitude
	Long *float64 `json:"long,omitempty"`
	// Photo owner's ID
	//  Format: int64
	OwnerId int `json:"owner_id"`
	// URL of image with 1280 px width
	//  Format: uri
	Photo1280 *string `json:"photo_1280,omitempty"`
	// URL of image with 130 px width
	//  Format: uri
	Photo130 *string `json:"photo_130,omitempty"`
	// URL of image with 2560 px width
	//  Format: uri
	Photo2560 *string `json:"photo_2560,omitempty"`
	// URL of image with 604 px width
	//  Format: uri
	Photo604 *string `json:"photo_604,omitempty"`
	// URL of image with 75 px width
	//  Format: uri
	Photo75 *string `json:"photo_75,omitempty"`
	// URL of image with 807 px width
	//  Format: uri
	Photo807 *string `json:"photo_807,omitempty"`
	// Post ID
	//  Minimum: 1
	PostId *int `json:"post_id,omitempty"`
	// Real position of the photo
	RealOffset *int `json:"real_offset,omitempty"`
	Reposts *BaseObjectCount `json:"reposts,omitempty"`
	Sizes *[]PhotosPhotoSizes `json:"sizes,omitempty"`
	Tags *BaseObjectCount `json:"tags,omitempty"`
	// Photo caption
	Text *string `json:"text,omitempty"`
	// ID of the user who have uploaded the photo
	//  Format: int64
	//  Minimum: 1
	UserId *int `json:"user_id,omitempty"`
	// Original photo width
	//  Minimum: 0
	Width *int `json:"width,omitempty"`
}

type PhotosPhotoSizes struct {
	// Height in px
	//  Minimum: 0
	Height int `json:"height"`
	// URL of the image
	//  Format: uri
	Src *string `json:"src,omitempty"`
	Type PhotosPhotoSizesType `json:"type"`
	// URL of the image
	//  Format: uri
	Url string `json:"url"`
	// Width in px
	//  Minimum: 0
	Width int `json:"width"`
}

// PhotosPhotoSizesType Size type
type PhotosPhotoSizesType string

const (
	PhotosPhotoSizesTypeS PhotosPhotoSizesType = "s"
	PhotosPhotoSizesTypeM PhotosPhotoSizesType = "m"
	PhotosPhotoSizesTypeX PhotosPhotoSizesType = "x"
	PhotosPhotoSizesTypeO PhotosPhotoSizesType = "o"
	PhotosPhotoSizesTypeP PhotosPhotoSizesType = "p"
	PhotosPhotoSizesTypeQ PhotosPhotoSizesType = "q"
	PhotosPhotoSizesTypeR PhotosPhotoSizesType = "r"
	PhotosPhotoSizesTypeK PhotosPhotoSizesType = "k"
	PhotosPhotoSizesTypeL PhotosPhotoSizesType = "l"
	PhotosPhotoSizesTypeY PhotosPhotoSizesType = "y"
	PhotosPhotoSizesTypeZ PhotosPhotoSizesType = "z"
	PhotosPhotoSizesTypeC PhotosPhotoSizesType = "c"
	PhotosPhotoSizesTypeW PhotosPhotoSizesType = "w"
	PhotosPhotoSizesTypeA PhotosPhotoSizesType = "a"
	PhotosPhotoSizesTypeB PhotosPhotoSizesType = "b"
	PhotosPhotoSizesTypeE PhotosPhotoSizesType = "e"
	PhotosPhotoSizesTypeI PhotosPhotoSizesType = "i"
	PhotosPhotoSizesTypeD PhotosPhotoSizesType = "d"
	PhotosPhotoSizesTypeJ PhotosPhotoSizesType = "j"
	PhotosPhotoSizesTypeTemp PhotosPhotoSizesType = "temp"
	PhotosPhotoSizesTypeH PhotosPhotoSizesType = "h"
	PhotosPhotoSizesTypeG PhotosPhotoSizesType = "g"
	PhotosPhotoSizesTypeN PhotosPhotoSizesType = "n"
	PhotosPhotoSizesTypeF PhotosPhotoSizesType = "f"
	PhotosPhotoSizesTypeMax PhotosPhotoSizesType = "max"
)

type PhotosPhotoTag struct {
	// Date when tag has been added in Unixtime
	//  Minimum: 0
	Date int `json:"date"`
	// Tagged description.
	Description *string `json:"description,omitempty"`
	// Tag ID
	Id int `json:"id"`
	// ID of the tag creator
	PlacerId int `json:"placer_id"`
	// Tag description
	TaggedName string `json:"tagged_name"`
	// Tagged user ID
	//  Format: int64
	UserId int `json:"user_id"`
	// Information whether the tag is reviewed
	Viewed BaseBoolInt `json:"viewed"`
	// Coordinate X of the left upper corner
	X float64 `json:"x"`
	// Coordinate X of the right lower corner
	X2 float64 `json:"x2"`
	// Coordinate Y of the left upper corner
	Y float64 `json:"y"`
	// Coordinate Y of the right lower corner
	Y2 float64 `json:"y2"`
}

type PhotosPhotoUpload struct {
	// Album ID
	AlbumId int `json:"album_id"`
	// Fallback URL if upload_url returned error
	//  Format: uri
	FallbackUploadUrl *string `json:"fallback_upload_url,omitempty"`
	// Group ID
	//  Format: int64
	GroupId *int `json:"group_id,omitempty"`
	// URL to upload photo
	//  Format: uri
	UploadUrl string `json:"upload_url"`
	// User ID
	//  Format: int64
	UserId int `json:"user_id"`
}

type PhotosPhotoXtrRealOffset struct {
	// Access key for the photo
	AccessKey *string `json:"access_key,omitempty"`
	// Album ID
	AlbumId int `json:"album_id"`
	// Date when uploaded
	//  Minimum: 0
	Date int `json:"date"`
	// Original photo height
	//  Minimum: 0
	Height *int `json:"height,omitempty"`
	// Returns if the photo is hidden above the wall
	Hidden *BasePropertyExists `json:"hidden,omitempty"`
	// Photo ID
	//  Minimum: 0
	Id int `json:"id"`
	// Latitude
	Lat *float64 `json:"lat,omitempty"`
	// Longitude
	Long *float64 `json:"long,omitempty"`
	// Photo owner's ID
	//  Format: int64
	OwnerId int `json:"owner_id"`
	// URL of image with 1280 px width
	//  Format: uri
	Photo1280 *string `json:"photo_1280,omitempty"`
	// URL of image with 130 px width
	//  Format: uri
	Photo130 *string `json:"photo_130,omitempty"`
	// URL of image with 2560 px width
	//  Format: uri
	Photo2560 *string `json:"photo_2560,omitempty"`
	// URL of image with 604 px width
	//  Format: uri
	Photo604 *string `json:"photo_604,omitempty"`
	// URL of image with 75 px width
	//  Format: uri
	Photo75 *string `json:"photo_75,omitempty"`
	// URL of image with 807 px width
	//  Format: uri
	Photo807 *string `json:"photo_807,omitempty"`
	// Post ID
	//  Minimum: 1
	PostId *int `json:"post_id,omitempty"`
	// Real position of the photo
	RealOffset *int `json:"real_offset,omitempty"`
	Sizes *[]PhotosPhotoSizes `json:"sizes,omitempty"`
	// Photo caption
	Text *string `json:"text,omitempty"`
	// ID of the user who have uploaded the photo
	//  Format: int64
	//  Minimum: 1
	UserId *int `json:"user_id,omitempty"`
	// Original photo width
	//  Minimum: 0
	Width *int `json:"width,omitempty"`
}

type PhotosPhotoXtrTagInfo struct {
	// Access key for the photo
	AccessKey *string `json:"access_key,omitempty"`
	// Album ID
	AlbumId int `json:"album_id"`
	// Date when uploaded
	//  Minimum: 0
	Date int `json:"date"`
	// Original photo height
	//  Minimum: 0
	Height *int `json:"height,omitempty"`
	// Photo ID
	//  Minimum: 0
	Id int `json:"id"`
	// Latitude
	Lat *float64 `json:"lat,omitempty"`
	// Longitude
	Long *float64 `json:"long,omitempty"`
	// Photo owner's ID
	//  Format: int64
	OwnerId int `json:"owner_id"`
	// URL of image with 1280 px width
	//  Format: uri
	Photo1280 *string `json:"photo_1280,omitempty"`
	// URL of image with 130 px width
	//  Format: uri
	Photo130 *string `json:"photo_130,omitempty"`
	// URL of image with 2560 px width
	//  Format: uri
	Photo2560 *string `json:"photo_2560,omitempty"`
	// URL of image with 604 px width
	//  Format: uri
	Photo604 *string `json:"photo_604,omitempty"`
	// URL of image with 75 px width
	//  Format: uri
	Photo75 *string `json:"photo_75,omitempty"`
	// URL of image with 807 px width
	//  Format: uri
	Photo807 *string `json:"photo_807,omitempty"`
	// ID of the tag creator
	PlacerId *int `json:"placer_id,omitempty"`
	// Post ID
	//  Minimum: 1
	PostId *int `json:"post_id,omitempty"`
	Sizes *[]PhotosPhotoSizes `json:"sizes,omitempty"`
	// Date when tag has been added in Unixtime
	//  Minimum: 0
	TagCreated *int `json:"tag_created,omitempty"`
	// Tag ID
	TagId *int `json:"tag_id,omitempty"`
	// Photo caption
	Text *string `json:"text,omitempty"`
	// ID of the user who have uploaded the photo
	//  Format: int64
	//  Minimum: 1
	UserId *int `json:"user_id,omitempty"`
	// Original photo width
	//  Minimum: 0
	Width *int `json:"width,omitempty"`
}

type PhotosTagsSuggestionItem struct {
	Buttons *[]PhotosTagsSuggestionItemButton `json:"buttons,omitempty"`
	Caption *string `json:"caption,omitempty"`
	Photo *PhotosPhoto `json:"photo,omitempty"`
	Tags *[]PhotosPhotoTag `json:"tags,omitempty"`
	Title *string `json:"title,omitempty"`
	TrackCode *string `json:"track_code,omitempty"`
	Type *string `json:"type,omitempty"`
}

type PhotosTagsSuggestionItemButtonAction string

const (
	PhotosTagsSuggestionItemButtonActionConfirm PhotosTagsSuggestionItemButtonAction = "confirm"
	PhotosTagsSuggestionItemButtonActionDecline PhotosTagsSuggestionItemButtonAction = "decline"
	PhotosTagsSuggestionItemButtonActionShowTags PhotosTagsSuggestionItemButtonAction = "show_tags"
)

type PhotosTagsSuggestionItemButtonStyle string

const (
	PhotosTagsSuggestionItemButtonStylePrimary PhotosTagsSuggestionItemButtonStyle = "primary"
	PhotosTagsSuggestionItemButtonStyleSecondary PhotosTagsSuggestionItemButtonStyle = "secondary"
)

type PhotosTagsSuggestionItemButton struct {
	Action *PhotosTagsSuggestionItemButtonAction`json:"action,omitempty"`
	Style *PhotosTagsSuggestionItemButtonStyle`json:"style,omitempty"`
	Title *string `json:"title,omitempty"`
}

type PhotosCopyResponse struct {
	// Photo ID
	//  Minimum: 1
	Response int `json:"response"`
}

type PhotosCreateAlbumResponse struct {
	Response PhotosPhotoAlbumFull `json:"response"`
}

type PhotosCreateCommentResponse struct {
	// Created comment ID
	Response int `json:"response"`
}

type PhotosDeleteCommentResponse struct {
	// Returns 1 if request has been processed successfully, 0 if the comment is not found
	Response BaseBoolInt `json:"response"`
}

type PhotosGetAlbumsCountResponse struct {
	// Albums number
	//  Minimum: 0
	Response int `json:"response"`
}

type PhotosGetAlbumsResponse struct {
	Photos struct {
		// Total number
		Count int `json:"count"`
		Items []PhotosPhotoAlbumFull `json:"items"`
	} `json:"photos"`
}

type PhotosGetAllCommentsResponse struct {
	Photos struct {
		// Total number
		Count *int `json:"count,omitempty"`
		Items *[]WallWallComment `json:"items,omitempty"`
	} `json:"photos"`
}

type PhotosGetAllExtendedResponse struct {
	Photos struct {
		// Total number
		Count *int `json:"count,omitempty"`
		Items *[]PhotosPhotoFullXtrRealOffset `json:"items,omitempty"`
		// Information whether next page is presented
		More *BaseBoolInt `json:"more,omitempty"`
	} `json:"photos"`
}

type PhotosGetAllResponse struct {
	Photos struct {
		// Total number
		Count *int `json:"count,omitempty"`
		Items *[]PhotosPhotoXtrRealOffset `json:"items,omitempty"`
		// Information whether next page is presented
		More *BaseBoolInt `json:"more,omitempty"`
	} `json:"photos"`
}

type PhotosGetByIdResponse struct {
	Response []PhotosPhoto `json:"response"`
}

type PhotosGetCommentsExtendedResponse struct {
	Photos struct {
		// Total number
		Count int `json:"count"`
		Groups []GroupsGroupFull `json:"groups"`
		Items []WallWallComment `json:"items"`
		Profiles []UsersUserFull `json:"profiles"`
		// Real offset of the comments
		//  Minimum: 0
		RealOffset *int `json:"real_offset,omitempty"`
	} `json:"photos"`
}

type PhotosGetCommentsResponse struct {
	Photos struct {
		// Total number
		Count *int `json:"count,omitempty"`
		Items *[]WallWallComment `json:"items,omitempty"`
		// Real offset of the comments
		//  Minimum: 0
		RealOffset *int `json:"real_offset,omitempty"`
	} `json:"photos"`
}

type PhotosGetMarketUploadServerResponse struct {
	Response BaseUploadServer `json:"response"`
}

type PhotosGetMessagesUploadServerResponse struct {
	Response PhotosPhotoUpload `json:"response"`
}

type PhotosGetNewTagsResponse struct {
	Photos struct {
		// Total number
		Count int `json:"count"`
		Items []PhotosPhotoXtrTagInfo `json:"items"`
	} `json:"photos"`
}

type PhotosGetTagsResponse struct {
	Response []PhotosPhotoTag `json:"response"`
}

type PhotosGetUploadServerResponse struct {
	Response PhotosPhotoUpload `json:"response"`
}

type PhotosGetUserPhotosResponse struct {
	Photos struct {
		// Total number
		Count int `json:"count"`
		Items []PhotosPhoto `json:"items"`
	} `json:"photos"`
}

type PhotosGetWallUploadServerResponse struct {
	Response PhotosPhotoUpload `json:"response"`
}

type PhotosGetResponse struct {
	Photos struct {
		// Total number
		Count int `json:"count"`
		Items []PhotosPhoto `json:"items"`
	} `json:"photos"`
}

type PhotosMarketAlbumUploadResponse struct {
	Photos struct {
		// Community ID
		Gid *int `json:"gid,omitempty"`
		// Uploading hash
		Hash *string `json:"hash,omitempty"`
		// Uploaded photo data
		Photo *string `json:"photo,omitempty"`
		// Upload server number
		Server *int `json:"server,omitempty"`
	} `json:"photos"`
}

type PhotosMarketUploadResponse struct {
	Photos struct {
		// Crop data
		CropData *string `json:"crop_data,omitempty"`
		// Crop hash
		CropHash *string `json:"crop_hash,omitempty"`
		// Community ID
		//  Format: int64
		GroupId *int `json:"group_id,omitempty"`
		// Uploading hash
		Hash *string `json:"hash,omitempty"`
		// Uploaded photo data
		Photo *string `json:"photo,omitempty"`
		// Upload server number
		Server *int `json:"server,omitempty"`
	} `json:"photos"`
}

type PhotosMessageUploadResponse struct {
	Photos struct {
		// Uploading hash
		Hash *string `json:"hash,omitempty"`
		// Uploaded photo data
		Photo *string `json:"photo,omitempty"`
		// Upload server number
		Server *int `json:"server,omitempty"`
	} `json:"photos"`
}

type PhotosOwnerCoverUploadResponse struct {
	Photos struct {
		// Uploading hash
		Hash *string `json:"hash,omitempty"`
		// Uploaded photo data
		Photo *string `json:"photo,omitempty"`
	} `json:"photos"`
}

type PhotosOwnerUploadResponse struct {
	Photos struct {
		// Uploading hash
		Hash *string `json:"hash,omitempty"`
		// Uploaded photo data
		Photo *string `json:"photo,omitempty"`
		// Upload server number
		Server *int `json:"server,omitempty"`
	} `json:"photos"`
}

type PhotosPhotoUploadResponse struct {
	Photos struct {
		// Album ID
		Aid *int `json:"aid,omitempty"`
		// Uploading hash
		Hash *string `json:"hash,omitempty"`
		// Uploaded photo data
		Photo *string `json:"photo,omitempty"`
		// Uploaded photos data
		PhotosList *string `json:"photos_list,omitempty"`
		// Upload server number
		Server *int `json:"server,omitempty"`
	} `json:"photos"`
}

type PhotosPutTagResponse struct {
	// Created tag ID
	Response int `json:"response"`
}

type PhotosRestoreCommentResponse struct {
	// Returns 1 if request has been processed successfully, 0 if the comment is not found
	Response BaseBoolInt `json:"response"`
}

type PhotosSaveMarketAlbumPhotoResponse struct {
	Response []PhotosPhoto `json:"response"`
}

type PhotosSaveMarketPhotoResponse struct {
	Response []PhotosPhoto `json:"response"`
}

type PhotosSaveMessagesPhotoResponse struct {
	Response []PhotosPhoto `json:"response"`
}

type PhotosSaveOwnerCoverPhotoResponse struct {
	Photos struct {
		Images *[]BaseImage `json:"images,omitempty"`
	} `json:"photos"`
}

type PhotosSaveOwnerPhotoResponse struct {
	Photos struct {
		// Photo hash
		PhotoHash string `json:"photo_hash"`
		// Uploaded image url
		PhotoSrc string `json:"photo_src"`
		// Uploaded image url
		PhotoSrcBig *string `json:"photo_src_big,omitempty"`
		// Uploaded image url
		PhotoSrcSmall *string `json:"photo_src_small,omitempty"`
		// Created post ID
		PostId *int `json:"post_id,omitempty"`
		// Returns 1 if profile photo is saved
		Saved *int `json:"saved,omitempty"`
	} `json:"photos"`
}

type PhotosSaveWallPhotoResponse struct {
	Response []PhotosPhoto `json:"response"`
}

type PhotosSaveResponse struct {
	Response []PhotosPhoto `json:"response"`
}

type PhotosSearchResponse struct {
	Photos struct {
		// Total number
		Count *int `json:"count,omitempty"`
		Items *[]PhotosPhoto `json:"items,omitempty"`
	} `json:"photos"`
}

type PhotosWallUploadResponse struct {
	Photos struct {
		// Uploading hash
		Hash *string `json:"hash,omitempty"`
		// Uploaded photo data
		Photo *string `json:"photo,omitempty"`
		// Upload server number
		Server *int `json:"server,omitempty"`
	} `json:"photos"`
}

