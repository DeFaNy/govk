// Code generated by https://github.com/defany/govk. DO NOT EDIT.

package models

import (
	"encoding/json"
)

// suppress unused package warning
var _ *json.RawMessage

type NewsfeedCommentsFilters string

const (
	NewsfeedCommentsFiltersPost NewsfeedCommentsFilters = "post"
	NewsfeedCommentsFiltersPhoto NewsfeedCommentsFilters = "photo"
	NewsfeedCommentsFiltersVideo NewsfeedCommentsFilters = "video"
	NewsfeedCommentsFiltersTopic NewsfeedCommentsFilters = "topic"
	NewsfeedCommentsFiltersNote NewsfeedCommentsFilters = "note"
)

type NewsfeedIgnoreItemType string

const (
	NewsfeedIgnoreItemTypePostOnTheWall NewsfeedIgnoreItemType = "wall"
	NewsfeedIgnoreItemTypeTagOnAPhoto NewsfeedIgnoreItemType = "tag"
	NewsfeedIgnoreItemTypeProfilePhoto NewsfeedIgnoreItemType = "profilephoto"
	NewsfeedIgnoreItemTypeVideo NewsfeedIgnoreItemType = "video"
	NewsfeedIgnoreItemTypePhoto NewsfeedIgnoreItemType = "photo"
	NewsfeedIgnoreItemTypeAudio NewsfeedIgnoreItemType = "audio"
)

type NewsfeedItemAudio struct {
	NewsfeedItemBase
	Audio *NewsfeedItemAudioAudio `json:"audio,omitempty"`
	// Post ID
	PostId *int `json:"post_id,omitempty"`
}

type NewsfeedItemAudioAudio struct {
	// Audios number
	//  Minimum: 0
	Count *int `json:"count,omitempty"`
	Items *[]AudioAudio `json:"items,omitempty"`
}

type NewsfeedItemBase struct {
	// Date when item has been added in Unixtime
	Date int `json:"date"`
	// Item source ID
	//  Format: int64
	SourceId int `json:"source_id"`
	Type NewsfeedNewsfeedItemType `json:"type"`
}

type NewsfeedItemDigestTemplate string

const (
	NewsfeedItemDigestTemplateList NewsfeedItemDigestTemplate = "list"
	NewsfeedItemDigestTemplateGrid NewsfeedItemDigestTemplate = "grid"
	NewsfeedItemDigestTemplateSingle NewsfeedItemDigestTemplate = "single"
)

type NewsfeedItemDigest struct {
	NewsfeedItemBase
	// id of feed in digest
	FeedId *string `json:"feed_id,omitempty"`
	Footer *NewsfeedItemDigestFooter `json:"footer,omitempty"`
	Header *NewsfeedItemDigestHeader `json:"header,omitempty"`
	Items *[]NewsfeedItemDigestItem `json:"items,omitempty"`
	MainPostIds *[]string `json:"main_post_ids,omitempty"`
	// type of digest
	Template *NewsfeedItemDigestTemplate`json:"template,omitempty"`
	TrackCode *string `json:"track_code,omitempty"`
}

type NewsfeedItemDigestButtonStyle string

const (
	NewsfeedItemDigestButtonStylePrimary NewsfeedItemDigestButtonStyle = "primary"
)

type NewsfeedItemDigestButton struct {
	Style *NewsfeedItemDigestButtonStyle`json:"style,omitempty"`
	Title string `json:"title"`
}

type NewsfeedItemDigestFooterStyle string

const (
	NewsfeedItemDigestFooterStyleText NewsfeedItemDigestFooterStyle = "text"
	NewsfeedItemDigestFooterStyleButton NewsfeedItemDigestFooterStyle = "button"
)

type NewsfeedItemDigestFooter struct {
	Button *NewsfeedItemDigestButton `json:"button,omitempty"`
	Style NewsfeedItemDigestFooterStyle`json:"style"`
	// text for invite to enable smart feed
	Text string `json:"text"`
}

type NewsfeedItemDigestFullItemStyle string

const (
	NewsfeedItemDigestFullItemStyleDefault NewsfeedItemDigestFullItemStyle = "default"
	NewsfeedItemDigestFullItemStyleInversed NewsfeedItemDigestFullItemStyle = "inversed"
	NewsfeedItemDigestFullItemStyleSpotlight NewsfeedItemDigestFullItemStyle = "spotlight"
)

type NewsfeedItemDigestFullItem struct {
	Attachment *WallWallpostAttachment `json:"attachment,omitempty"`
	AttachmentIndex *int `json:"attachment_index,omitempty"`
	Post WallWallpost `json:"post"`
	SourceName *string `json:"source_name,omitempty"`
	Style *NewsfeedItemDigestFullItemStyle`json:"style,omitempty"`
	Text *string `json:"text,omitempty"`
}

type NewsfeedItemDigestHeaderStyle string

const (
	NewsfeedItemDigestHeaderStyleSingleline NewsfeedItemDigestHeaderStyle = "singleline"
	NewsfeedItemDigestHeaderStyleMultiline NewsfeedItemDigestHeaderStyle = "multiline"
)

type NewsfeedItemDigestHeader struct {
	Button *NewsfeedItemDigestButton `json:"button,omitempty"`
	Style NewsfeedItemDigestHeaderStyle`json:"style"`
	// Subtitle of the header, when title have two strings
	Subtitle *string `json:"subtitle,omitempty"`
	// Title of the header
	Title string `json:"title"`
}

type NewsfeedItemDigestItem WallWallpost

type NewsfeedItemFriend struct {
	NewsfeedItemBase
	Friends *NewsfeedItemFriendFriends `json:"friends,omitempty"`
}

type NewsfeedItemFriendFriends struct {
	// Number of friends has been added
	//  Minimum: 0
	Count *int `json:"count,omitempty"`
	Items *[]BaseUserId `json:"items,omitempty"`
}

type NewsfeedItemHolidayRecommendationsBlockHeader struct {
	Action *BaseLinkButtonAction `json:"action,omitempty"`
	Image *[]BaseImage `json:"image,omitempty"`
	// Subtitle of the header
	Subtitle *string `json:"subtitle,omitempty"`
	// Title of the header
	Title *string `json:"title,omitempty"`
}

type NewsfeedItemPhoto struct {
	WallCarouselBase
	NewsfeedItemBase
	Photos *NewsfeedItemPhotoPhotos `json:"photos,omitempty"`
	// Post ID
	PostId *int `json:"post_id,omitempty"`
}

type NewsfeedItemPhotoPhotos struct {
	// Photos number
	//  Minimum: 0
	Count *int `json:"count,omitempty"`
	Items *[]NewsfeedNewsfeedPhoto `json:"items,omitempty"`
}

type NewsfeedItemPhotoTag struct {
	WallCarouselBase
	NewsfeedItemBase
	PhotoTags *NewsfeedItemPhotoTagPhotoTags `json:"photo_tags,omitempty"`
	// Post ID
	PostId *int `json:"post_id,omitempty"`
}

type NewsfeedItemPhotoTagPhotoTags struct {
	// Tags number
	//  Minimum: 0
	Count *int `json:"count,omitempty"`
	Items *[]NewsfeedNewsfeedPhoto `json:"items,omitempty"`
}

type NewsfeedItemPromoButton struct {
	NewsfeedItemBase
	Action *NewsfeedItemPromoButtonAction `json:"action,omitempty"`
	Images *[]NewsfeedItemPromoButtonImage `json:"images,omitempty"`
	Text *string `json:"text,omitempty"`
	Title *string `json:"title,omitempty"`
	TrackCode *string `json:"track_code,omitempty"`
}

type NewsfeedItemPromoButtonAction struct {
	Target *string `json:"target,omitempty"`
	Type *string `json:"type,omitempty"`
	Url *string `json:"url,omitempty"`
}

type NewsfeedItemPromoButtonImage struct {
	Height *int `json:"height,omitempty"`
	Url *string `json:"url,omitempty"`
	Width *int `json:"width,omitempty"`
}

type NewsfeedItemTopic struct {
	NewsfeedItemBase
	Comments *BaseCommentsInfo `json:"comments,omitempty"`
	Likes *BaseLikesInfo `json:"likes,omitempty"`
	// Topic post ID
	PostId int `json:"post_id"`
	// Post text
	Text string `json:"text"`
}

type NewsfeedItemVideo struct {
	WallCarouselBase
	NewsfeedItemBase
	Video *NewsfeedItemVideoVideo `json:"video,omitempty"`
}

type NewsfeedItemVideoVideo struct {
	// Tags number
	//  Minimum: 0
	Count *int `json:"count,omitempty"`
	Items *[]VideoVideo `json:"items,omitempty"`
}

//easyjson:skip
type NewsfeedItemWallpost struct {
	WallCarouselBase
	NewsfeedItemBase
	WallWallpostFull
	Feedback *NewsfeedItemWallpostFeedback `json:"feedback,omitempty"`
}

type NewsfeedItemWallpostFeedback struct {
	Answers *[]NewsfeedItemWallpostFeedbackAnswer `json:"answers,omitempty"`
	Gratitude *string `json:"gratitude,omitempty"`
	Question string `json:"question"`
	//  Minimum: 2
	//  Maximum: 5
	StarsCount *int `json:"stars_count,omitempty"`
	Type NewsfeedItemWallpostFeedbackType `json:"type"`
}

type NewsfeedItemWallpostFeedbackAnswer struct {
	Id string `json:"id"`
	Title string `json:"title"`
}

type NewsfeedItemWallpostFeedbackType string

const (
	NewsfeedItemWallpostFeedbackTypeButtons NewsfeedItemWallpostFeedbackType = "buttons"
	NewsfeedItemWallpostFeedbackTypeStars NewsfeedItemWallpostFeedbackType = "stars"
)

type NewsfeedList struct {
	// List ID
	Id int `json:"id"`
	// List title
	Title string `json:"title"`
}

type NewsfeedListFull struct {
	NewsfeedList
	// Information whether reposts hiding is enabled
	NoReposts *BaseBoolInt `json:"no_reposts,omitempty"`
	//  Format: int64
	SourceIds *[]int `json:"source_ids,omitempty"`
}

//easyjson:skip
type NewsfeedNewsfeedItem struct{
	Raws []byte
}

func (o *NewsfeedNewsfeedItem) MarshalJSON() ([]byte, error) {
	return o.Raws, nil
}

func (o *NewsfeedNewsfeedItem) UnmarshalJSON(body []byte) (err error) {
	o.Raws = body
	return nil
}

func (o NewsfeedNewsfeedItem) Raw() []byte {
	return o.Raws
}

// NewsfeedNewsfeedItemType Item type
type NewsfeedNewsfeedItemType string

const (
	NewsfeedNewsfeedItemTypePost NewsfeedNewsfeedItemType = "post"
	NewsfeedNewsfeedItemTypePhoto NewsfeedNewsfeedItemType = "photo"
	NewsfeedNewsfeedItemTypePhotoTag NewsfeedNewsfeedItemType = "photo_tag"
	NewsfeedNewsfeedItemTypeWallPhoto NewsfeedNewsfeedItemType = "wall_photo"
	NewsfeedNewsfeedItemTypeFriend NewsfeedNewsfeedItemType = "friend"
	NewsfeedNewsfeedItemTypeAudio NewsfeedNewsfeedItemType = "audio"
	NewsfeedNewsfeedItemTypeVideo NewsfeedNewsfeedItemType = "video"
	NewsfeedNewsfeedItemTypeTopic NewsfeedNewsfeedItemType = "topic"
	NewsfeedNewsfeedItemTypeDigest NewsfeedNewsfeedItemType = "digest"
	NewsfeedNewsfeedItemTypeStories NewsfeedNewsfeedItemType = "stories"
	NewsfeedNewsfeedItemTypeNote NewsfeedNewsfeedItemType = "note"
	NewsfeedNewsfeedItemTypeAudioPlaylist NewsfeedNewsfeedItemType = "audio_playlist"
	NewsfeedNewsfeedItemTypeClip NewsfeedNewsfeedItemType = "clip"
)

type NewsfeedNewsfeedPhoto struct {
	PhotosPhoto
	// Information whether current user can repost the photo
	CanRepost *BaseBoolInt `json:"can_repost,omitempty"`
	Comments *BaseObjectCount `json:"comments,omitempty"`
	Likes *BaseLikes `json:"likes,omitempty"`
}

type NewsfeedGenericResponse struct {
	Newsfeed struct {
		Groups []GroupsGroupFull `json:"groups"`
		Items []NewsfeedNewsfeedItem `json:"items"`
		//  Minimum: 0
		NewReturnedNewsItemsCount *int `json:"new_returned_news_items_count,omitempty"`
		Profiles []UsersUserFull `json:"profiles"`
	} `json:"newsfeed"`
}

type NewsfeedGetBannedExtendedResponse struct {
	Newsfeed struct {
		Groups *[]GroupsGroupFull `json:"groups,omitempty"`
		Profiles *[]UsersUserFull `json:"profiles,omitempty"`
	} `json:"newsfeed"`
}

type NewsfeedGetBannedResponse struct {
	Newsfeed struct {
		Groups *[]int `json:"groups,omitempty"`
		Members *[]int `json:"members,omitempty"`
	} `json:"newsfeed"`
}

type NewsfeedGetCommentsResponse struct {
	Newsfeed struct {
		Groups []GroupsGroupFull `json:"groups"`
		Items []NewsfeedNewsfeedItem `json:"items"`
		// Next from value
		NextFrom *string `json:"next_from,omitempty"`
		Profiles []UsersUserFull `json:"profiles"`
	} `json:"newsfeed"`
}

type NewsfeedGetListsExtendedResponse struct {
	Newsfeed struct {
		// Total number
		Count int `json:"count"`
		Items []NewsfeedListFull `json:"items"`
	} `json:"newsfeed"`
}

type NewsfeedGetListsResponse struct {
	Newsfeed struct {
		// Total number
		Count int `json:"count"`
		Items []NewsfeedList `json:"items"`
	} `json:"newsfeed"`
}

type NewsfeedGetMentionsResponse struct {
	Newsfeed struct {
		// Total number
		Count int `json:"count"`
		Items []WallWallpostToId `json:"items"`
	} `json:"newsfeed"`
}

type NewsfeedGetSuggestedSourcesResponse struct {
	Newsfeed struct {
		// Total number
		Count *int `json:"count,omitempty"`
		Items *[]UsersSubscriptionsItem `json:"items,omitempty"`
	} `json:"newsfeed"`
}

type NewsfeedIgnoreItemResponse struct {
	Newsfeed struct {
		//  Default: 1
		Status bool `json:"status"`
	} `json:"newsfeed"`
}

type NewsfeedSaveListResponse struct {
	// List ID
	Response int `json:"response"`
}

type NewsfeedSearchExtendedResponse struct {
	Newsfeed struct {
		// Filtered number
		//  Minimum: 0
		Count *int `json:"count,omitempty"`
		Groups *[]GroupsGroupFull `json:"groups,omitempty"`
		Items *[]WallWallpostFull `json:"items,omitempty"`
		NextFrom *string `json:"next_from,omitempty"`
		Profiles *[]UsersUserFull `json:"profiles,omitempty"`
		SuggestedQueries *[]string `json:"suggested_queries,omitempty"`
		// Total number
		//  Minimum: 0
		TotalCount *int `json:"total_count,omitempty"`
	} `json:"newsfeed"`
}

type NewsfeedSearchResponse struct {
	Newsfeed struct {
		// Filtered number
		//  Minimum: 0
		Count *int `json:"count,omitempty"`
		Items *[]WallWallpostFull `json:"items,omitempty"`
		NextFrom *string `json:"next_from,omitempty"`
		SuggestedQueries *[]string `json:"suggested_queries,omitempty"`
		// Total number
		//  Minimum: 0
		TotalCount *int `json:"total_count,omitempty"`
	} `json:"newsfeed"`
}

