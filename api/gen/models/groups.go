// Code generated by https://github.com/defany/govk. DO NOT EDIT.

package models

import (
	"encoding/json"
)

// suppress unused package warning
var _ *json.RawMessage

type GroupsAddress struct {
	// Additional address to the place (6 floor, left door)
	AdditionalAddress *string `json:"additional_address,omitempty"`
	// String address to the place (Nevsky, 28)
	Address *string `json:"address,omitempty"`
	// City id of address
	//  Minimum: 0
	CityId *int `json:"city_id,omitempty"`
	// Country id of address
	//  Minimum: 0
	CountryId *int `json:"country_id,omitempty"`
	// Distance from the point
	Distance *int `json:"distance,omitempty"`
	// Address id
	Id int `json:"id"`
	// Address latitude
	Latitude *float64 `json:"latitude,omitempty"`
	// Address longitude
	Longitude *float64 `json:"longitude,omitempty"`
	// Metro id of address
	//  Minimum: 0
	MetroStationId *int `json:"metro_station_id,omitempty"`
	// Address phone
	Phone *string `json:"phone,omitempty"`
	PlaceId *int `json:"place_id,omitempty"`
	// Time offset int minutes from utc time
	TimeOffset *int `json:"time_offset,omitempty"`
	// Week timetable for the address
	Timetable *GroupsAddressTimetable `json:"timetable,omitempty"`
	// Title of the place (Zinger, etc)
	Title *string `json:"title,omitempty"`
	// Status of information about timetable
	WorkInfoStatus *GroupsAddressWorkInfoStatus `json:"work_info_status,omitempty"`
}

// GroupsAddressTimetable Timetable for a week
type GroupsAddressTimetable struct {
	// Timetable for friday
	Fri *GroupsAddressTimetableDay `json:"fri,omitempty"`
	// Timetable for monday
	Mon *GroupsAddressTimetableDay `json:"mon,omitempty"`
	// Timetable for saturday
	Sat *GroupsAddressTimetableDay `json:"sat,omitempty"`
	// Timetable for sunday
	Sun *GroupsAddressTimetableDay `json:"sun,omitempty"`
	// Timetable for thursday
	Thu *GroupsAddressTimetableDay `json:"thu,omitempty"`
	// Timetable for tuesday
	Tue *GroupsAddressTimetableDay `json:"tue,omitempty"`
	// Timetable for wednesday
	Wed *GroupsAddressTimetableDay `json:"wed,omitempty"`
}

// GroupsAddressTimetableDay Timetable for one day
type GroupsAddressTimetableDay struct {
	// Close time of the break in minutes
	BreakCloseTime *int `json:"break_close_time,omitempty"`
	// Start time of the break in minutes
	BreakOpenTime *int `json:"break_open_time,omitempty"`
	// Close time in minutes
	CloseTime int `json:"close_time"`
	// Open time in minutes
	OpenTime int `json:"open_time"`
}

// GroupsAddressWorkInfoStatus Status of information about timetable
type GroupsAddressWorkInfoStatus string

const (
	GroupsAddressWorkInfoStatusNoInformation GroupsAddressWorkInfoStatus = "no_information"
	GroupsAddressWorkInfoStatusTemporarilyClosed GroupsAddressWorkInfoStatus = "temporarily_closed"
	GroupsAddressWorkInfoStatusAlwaysOpened GroupsAddressWorkInfoStatus = "always_opened"
	GroupsAddressWorkInfoStatusTimetable GroupsAddressWorkInfoStatus = "timetable"
	GroupsAddressWorkInfoStatusForeverClosed GroupsAddressWorkInfoStatus = "forever_closed"
)

type GroupsAddressesInfo struct {
	// Information whether addresses is enabled
	IsEnabled bool `json:"is_enabled"`
	// Main address id for group
	MainAddressId *int `json:"main_address_id,omitempty"`
}

type GroupsBanInfo struct {
	// Administrator ID
	//  Minimum: 1
	AdminId *int `json:"admin_id,omitempty"`
	// Comment for a ban
	Comment *string `json:"comment,omitempty"`
	// Show comment for user
	CommentVisible *bool `json:"comment_visible,omitempty"`
	// Date when user has been added to blacklist in Unixtime
	//  Minimum: 0
	Date *int `json:"date,omitempty"`
	// Date when user will be removed from blacklist in Unixtime
	//  Minimum: 0
	EndDate *int `json:"end_date,omitempty"`
	IsClosed *bool `json:"is_closed,omitempty"`
	Reason *GroupsBanInfoReason `json:"reason,omitempty"`
}

// GroupsBanInfoReason Ban reason
type GroupsBanInfoReason int

const (
	GroupsBanInfoReasonOther GroupsBanInfoReason = 0
	GroupsBanInfoReasonSpam GroupsBanInfoReason = 1
	GroupsBanInfoReasonVerbalAbuse GroupsBanInfoReason = 2
	GroupsBanInfoReasonStrongLanguage GroupsBanInfoReason = 3
	GroupsBanInfoReasonFlood GroupsBanInfoReason = 4
)

type GroupsBannedItem GroupsOwnerXtrBanInfo

type GroupsCallbackServerStatus string

const (
	GroupsCallbackServerStatusUnconfigured GroupsCallbackServerStatus = "unconfigured"
	GroupsCallbackServerStatusFailed GroupsCallbackServerStatus = "failed"
	GroupsCallbackServerStatusWait GroupsCallbackServerStatus = "wait"
	GroupsCallbackServerStatusOk GroupsCallbackServerStatus = "ok"
)

type GroupsCallbackServer struct {
	//  Minimum: 0
	CreatorId int `json:"creator_id"`
	//  Minimum: 0
	Id int `json:"id"`
	SecretKey string `json:"secret_key"`
	Status GroupsCallbackServerStatus`json:"status"`
	Title string `json:"title"`
	Url string `json:"url"`
}

type GroupsCallbackSettings struct {
	// API version used for the events
	ApiVersion *string `json:"api_version,omitempty"`
	Events *GroupsLongPollEvents `json:"events,omitempty"`
}

type GroupsContactsItem struct {
	// Contact description
	Desc *string `json:"desc,omitempty"`
	// Contact email
	Email *string `json:"email,omitempty"`
	// Contact phone
	Phone *string `json:"phone,omitempty"`
	// User ID
	//  Format: int64
	UserId *int `json:"user_id,omitempty"`
}

type GroupsCountersGroup struct {
	// Addresses number
	Addresses *int `json:"addresses,omitempty"`
	// Photo albums number
	Albums *int `json:"albums,omitempty"`
	// Articles number
	Articles *int `json:"articles,omitempty"`
	// Audio playlists number
	AudioPlaylists *int `json:"audio_playlists,omitempty"`
	// Audios number
	Audios *int `json:"audios,omitempty"`
	// Clips number
	Clips *int `json:"clips,omitempty"`
	// Clips followers number
	ClipsFollowers *int `json:"clips_followers,omitempty"`
	// Docs number
	Docs *int `json:"docs,omitempty"`
	// Market items number
	Market *int `json:"market,omitempty"`
	// Market services number
	MarketServices *int `json:"market_services,omitempty"`
	// Narratives number
	Narratives *int `json:"narratives,omitempty"`
	// Photos number
	Photos *int `json:"photos,omitempty"`
	// Podcasts number
	Podcasts *int `json:"podcasts,omitempty"`
	// Topics number
	Topics *int `json:"topics,omitempty"`
	// Videos number
	Videos *int `json:"videos,omitempty"`
}

type GroupsCover struct {
	// Information whether cover is enabled
	Enabled BaseBoolInt `json:"enabled"`
	Images *[]BaseImage `json:"images,omitempty"`
}

type GroupsFields string

const (
	GroupsFieldsMarket GroupsFields = "market"
	GroupsFieldsMemberStatus GroupsFields = "member_status"
	GroupsFieldsIsFavorite GroupsFields = "is_favorite"
	GroupsFieldsIsSubscribed GroupsFields = "is_subscribed"
	GroupsFieldsIsSubscribedPodcasts GroupsFields = "is_subscribed_podcasts"
	GroupsFieldsCanSubscribePodcasts GroupsFields = "can_subscribe_podcasts"
	GroupsFieldsCity GroupsFields = "city"
	GroupsFieldsCountry GroupsFields = "country"
	GroupsFieldsVerified GroupsFields = "verified"
	GroupsFieldsDescription GroupsFields = "description"
	GroupsFieldsWikiPage GroupsFields = "wiki_page"
	GroupsFieldsMembersCount GroupsFields = "members_count"
	GroupsFieldsRequestsCount GroupsFields = "requests_count"
	GroupsFieldsCounters GroupsFields = "counters"
	GroupsFieldsCover GroupsFields = "cover"
	GroupsFieldsCanPost GroupsFields = "can_post"
	GroupsFieldsCanSuggest GroupsFields = "can_suggest"
	GroupsFieldsCanUploadStory GroupsFields = "can_upload_story"
	GroupsFieldsCanUploadDoc GroupsFields = "can_upload_doc"
	GroupsFieldsCanUploadVideo GroupsFields = "can_upload_video"
	GroupsFieldsCanUploadClip GroupsFields = "can_upload_clip"
	GroupsFieldsCanSeeAllPosts GroupsFields = "can_see_all_posts"
	GroupsFieldsCanCreateTopic GroupsFields = "can_create_topic"
	GroupsFieldsCropPhoto GroupsFields = "crop_photo"
	GroupsFieldsActivity GroupsFields = "activity"
	GroupsFieldsFixedPost GroupsFields = "fixed_post"
	GroupsFieldsHasPhoto GroupsFields = "has_photo"
	GroupsFieldsStatus GroupsFields = "status"
	GroupsFieldsMainAlbumId GroupsFields = "main_album_id"
	GroupsFieldsLinks GroupsFields = "links"
	GroupsFieldsContacts GroupsFields = "contacts"
	GroupsFieldsSite GroupsFields = "site"
	GroupsFieldsMainSection GroupsFields = "main_section"
	GroupsFieldsSecondarySection GroupsFields = "secondary_section"
	GroupsFieldsWall GroupsFields = "wall"
	GroupsFieldsTrending GroupsFields = "trending"
	GroupsFieldsCanMessage GroupsFields = "can_message"
	GroupsFieldsIsMarketCartEnabled GroupsFields = "is_market_cart_enabled"
	GroupsFieldsIsMessagesBlocked GroupsFields = "is_messages_blocked"
	GroupsFieldsCanSendNotify GroupsFields = "can_send_notify"
	GroupsFieldsHasGroupChannel GroupsFields = "has_group_channel"
	GroupsFieldsGroupChannel GroupsFields = "group_channel"
	GroupsFieldsOnlineStatus GroupsFields = "online_status"
	GroupsFieldsStartDate GroupsFields = "start_date"
	GroupsFieldsFinishDate GroupsFields = "finish_date"
	GroupsFieldsAgeLimits GroupsFields = "age_limits"
	GroupsFieldsBanInfo GroupsFields = "ban_info"
	GroupsFieldsActionButton GroupsFields = "action_button"
	GroupsFieldsAuthorId GroupsFields = "author_id"
	GroupsFieldsPhone GroupsFields = "phone"
	GroupsFieldsHasMarketApp GroupsFields = "has_market_app"
	GroupsFieldsAddresses GroupsFields = "addresses"
	GroupsFieldsLiveCovers GroupsFields = "live_covers"
	GroupsFieldsIsAdult GroupsFields = "is_adult"
	GroupsFieldsIsHiddenFromFeed GroupsFields = "is_hidden_from_feed"
	GroupsFieldsCanSubscribePosts GroupsFields = "can_subscribe_posts"
	GroupsFieldsWarningNotification GroupsFields = "warning_notification"
	GroupsFieldsMsgPushAllowed GroupsFields = "msg_push_allowed"
	GroupsFieldsStoriesArchiveCount GroupsFields = "stories_archive_count"
	GroupsFieldsVideoLiveLevel GroupsFields = "video_live_level"
	GroupsFieldsVideoLiveCount GroupsFields = "video_live_count"
	GroupsFieldsClipsCount GroupsFields = "clips_count"
	GroupsFieldsHasUnseenStories GroupsFields = "has_unseen_stories"
	GroupsFieldsIsBusiness GroupsFields = "is_business"
	GroupsFieldsTextlivesCount GroupsFields = "textlives_count"
	GroupsFieldsMembersCountText GroupsFields = "members_count_text"
)

type GroupsFilter string

const (
	GroupsFilterAdmin GroupsFilter = "admin"
	GroupsFilterEditor GroupsFilter = "editor"
	GroupsFilterModer GroupsFilter = "moder"
	GroupsFilterAdvertiser GroupsFilter = "advertiser"
	GroupsFilterGroups GroupsFilter = "groups"
	GroupsFilterPublics GroupsFilter = "publics"
	GroupsFilterEvents GroupsFilter = "events"
	GroupsFilterHasAddresses GroupsFilter = "has_addresses"
)

type GroupsGroup struct {
	AdminLevel *GroupsGroupAdminLevel `json:"admin_level,omitempty"`
	// Information whether community is banned
	Deactivated *string `json:"deactivated,omitempty"`
	// Established date
	EstDate *string `json:"est_date,omitempty"`
	// Finish date in Unixtime format
	FinishDate *int `json:"finish_date,omitempty"`
	// Community ID
	//  Format: int64
	Id int `json:"id"`
	// Information whether current user is administrator
	IsAdmin *BaseBoolInt `json:"is_admin,omitempty"`
	// Information whether current user is advertiser
	IsAdvertiser *BaseBoolInt `json:"is_advertiser,omitempty"`
	IsClosed *GroupsGroupIsClosed `json:"is_closed,omitempty"`
	// Information whether current user is member
	IsMember *BaseBoolInt `json:"is_member,omitempty"`
	IsVideoLiveNotificationsBlocked *BaseBoolInt `json:"is_video_live_notifications_blocked,omitempty"`
	// Community name
	Name *string `json:"name,omitempty"`
	// URL of square photo of the community with 100 pixels in width
	//  Format: uri
	Photo100 *string `json:"photo_100,omitempty"`
	// URL of square photo of the community with 200 pixels in width
	//  Format: uri
	Photo200 *string `json:"photo_200,omitempty"`
	// URL of square photo of the community with 200 pixels in width original
	//  Format: uri
	Photo200Orig *string `json:"photo_200_orig,omitempty"`
	// URL of square photo of the community with 400 pixels in width
	//  Format: uri
	Photo400 *string `json:"photo_400,omitempty"`
	// URL of square photo of the community with 400 pixels in width original
	//  Format: uri
	Photo400Orig *string `json:"photo_400_orig,omitempty"`
	// URL of square photo of the community with 50 pixels in width
	//  Format: uri
	Photo50 *string `json:"photo_50,omitempty"`
	// URL of square photo of the community with max pixels in width
	//  Format: uri
	PhotoMax *string `json:"photo_max,omitempty"`
	// URL of square photo of the community with max pixels in width original
	//  Format: uri
	PhotoMaxOrig *string `json:"photo_max_orig,omitempty"`
	PhotoMaxSize *GroupsPhotoSize `json:"photo_max_size,omitempty"`
	// Public date label
	PublicDateLabel *string `json:"public_date_label,omitempty"`
	// Domain of the community page
	ScreenName *string `json:"screen_name,omitempty"`
	// Start date in Unixtime format
	StartDate *int `json:"start_date,omitempty"`
	Type *GroupsGroupType `json:"type,omitempty"`
	VideoLive *VideoLiveInfo `json:"video_live,omitempty"`
}

type GroupsGroupAccess int

const (
	GroupsGroupAccessOpen GroupsGroupAccess = 0
	GroupsGroupAccessClosed GroupsGroupAccess = 1
	GroupsGroupAccessPrivate GroupsGroupAccess = 2
)

// GroupsGroupAdminLevel Level of current user's credentials as manager
type GroupsGroupAdminLevel int

const (
	GroupsGroupAdminLevelModerator GroupsGroupAdminLevel = 1
	GroupsGroupAdminLevelEditor GroupsGroupAdminLevel = 2
	GroupsGroupAdminLevelAdministrator GroupsGroupAdminLevel = 3
)

type GroupsGroupAgeLimits int

const (
	GroupsGroupAgeLimitsUnlimited GroupsGroupAgeLimits = 1
	GroupsGroupAgeLimits16Plus GroupsGroupAgeLimits = 2
	GroupsGroupAgeLimits18Plus GroupsGroupAgeLimits = 3
)

type GroupsGroupAttach struct {
	// group ID
	//  Minimum: 0
	Id int `json:"id"`
	// is favorite
	IsFavorite bool `json:"is_favorite"`
	// size of group
	Size int `json:"size"`
	// activity or category of group
	Status string `json:"status"`
	// text of attach
	Text string `json:"text"`
}

type GroupsGroupAudio int

const (
	GroupsGroupAudioDisabled GroupsGroupAudio = 0
	GroupsGroupAudioOpen GroupsGroupAudio = 1
	GroupsGroupAudioLimited GroupsGroupAudio = 2
)

type GroupsGroupBanInfo struct {
	// Ban comment
	Comment *string `json:"comment,omitempty"`
	// End date of ban in Unixtime
	EndDate *int `json:"end_date,omitempty"`
	Reason *GroupsBanInfoReason `json:"reason,omitempty"`
}

type GroupsGroupCategory struct {
	// Category ID
	//  Minimum: 0
	Id int `json:"id"`
	// Category name
	Name string `json:"name"`
	Subcategories *[]BaseObjectWithName `json:"subcategories,omitempty"`
}

type GroupsGroupCategoryFull struct {
	// Category ID
	//  Minimum: 0
	Id int `json:"id"`
	// Category name
	Name string `json:"name"`
	// Pages number
	PageCount int `json:"page_count"`
	PagePreviews []GroupsGroup `json:"page_previews"`
	Subcategories *[]GroupsGroupCategory `json:"subcategories,omitempty"`
}

type GroupsGroupCategoryType struct {
	Id int `json:"id"`
	Name string `json:"name"`
}

type GroupsGroupDocs int

const (
	GroupsGroupDocsDisabled GroupsGroupDocs = 0
	GroupsGroupDocsOpen GroupsGroupDocs = 1
	GroupsGroupDocsLimited GroupsGroupDocs = 2
)

type GroupsGroupFullWall int

const (
	GroupsGroupFullWallDisabled GroupsGroupFullWall = 0
	GroupsGroupFullWallOpen GroupsGroupFullWall = 1
	GroupsGroupFullWallLimited GroupsGroupFullWall = 2
	GroupsGroupFullWallRestricted GroupsGroupFullWall = 3
)

type GroupsGroupFull struct {
	GroupsGroup
	// Type of group, start date of event or category of public page
	Activity *string `json:"activity,omitempty"`
	// Info about addresses in groups
	Addresses *GroupsAddressesInfo `json:"addresses,omitempty"`
	// Information whether age limit
	AgeLimits *GroupsGroupFullAgeLimits `json:"age_limits,omitempty"`
	// User ban info
	BanInfo *GroupsGroupBanInfo `json:"ban_info,omitempty"`
	// Information whether current user can create topic
	CanCreateTopic *BaseBoolInt `json:"can_create_topic,omitempty"`
	// Information whether current user can send a message to community
	CanMessage *BaseBoolInt `json:"can_message,omitempty"`
	// Information whether current user can post on community's wall
	CanPost *BaseBoolInt `json:"can_post,omitempty"`
	// Information whether current user can see all posts on community's wall
	CanSeeAllPosts *BaseBoolInt `json:"can_see_all_posts,omitempty"`
	// Information whether community can send notifications by phone number to current user
	CanSendNotify *BaseBoolInt `json:"can_send_notify,omitempty"`
	// Owner in whitelist or not
	CanSubscribePodcasts *bool `json:"can_subscribe_podcasts,omitempty"`
	// Can subscribe to wall
	CanSubscribePosts *bool `json:"can_subscribe_posts,omitempty"`
	CanSuggest *BaseBoolInt `json:"can_suggest,omitempty"`
	// Information whether current user can upload doc
	CanUploadDoc *BaseBoolInt `json:"can_upload_doc,omitempty"`
	// Information whether current user can upload story
	CanUploadStory *BaseBoolInt `json:"can_upload_story,omitempty"`
	// Information whether current user can upload video
	CanUploadVideo *BaseBoolInt `json:"can_upload_video,omitempty"`
	City *BaseObject `json:"city,omitempty"`
	// Number of community's clips
	//  Minimum: 0
	ClipsCount *int `json:"clips_count,omitempty"`
	Contacts *[]GroupsContactsItem `json:"contacts,omitempty"`
	Counters *GroupsCountersGroup `json:"counters,omitempty"`
	Country *BaseCountry `json:"country,omitempty"`
	Cover *GroupsCover `json:"cover,omitempty"`
	// Данные о точках, по которым вырезаны профильная и миниатюрная фотографии сообщества
	CropPhoto *BaseCropPhoto `json:"crop_photo,omitempty"`
	// Community description
	Description *string `json:"description,omitempty"`
	// Fixed post ID
	FixedPost *int `json:"fixed_post,omitempty"`
	HasGroupChannel *bool `json:"has_group_channel,omitempty"`
	// Information whether community has installed market app
	HasMarketApp *bool `json:"has_market_app,omitempty"`
	// Information whether community has photo
	HasPhoto *BaseBoolInt `json:"has_photo,omitempty"`
	HasUnseenStories *bool `json:"has_unseen_stories,omitempty"`
	// Inviter ID
	//  Minimum: 1
	InvitedBy *int `json:"invited_by,omitempty"`
	// Information whether community is adult
	IsAdult *BaseBoolInt `json:"is_adult,omitempty"`
	// Information whether community is in faves
	IsFavorite *BaseBoolInt `json:"is_favorite,omitempty"`
	// Information whether community is hidden from current user's newsfeed
	IsHiddenFromFeed *BaseBoolInt `json:"is_hidden_from_feed,omitempty"`
	// Information whether community can send a message to current user
	IsMessagesBlocked *BaseBoolInt `json:"is_messages_blocked,omitempty"`
	// Information whether current user is subscribed
	IsSubscribed *BaseBoolInt `json:"is_subscribed,omitempty"`
	// Information whether current user is subscribed to podcasts
	IsSubscribedPodcasts *bool `json:"is_subscribed_podcasts,omitempty"`
	Links *[]GroupsLinksItem `json:"links,omitempty"`
	// Live covers state
	LiveCovers *GroupsLiveCovers `json:"live_covers,omitempty"`
	// Community's main photo album ID
	MainAlbumId *int `json:"main_album_id,omitempty"`
	MainSection *GroupsGroupFullSection `json:"main_section,omitempty"`
	Market *GroupsMarketInfo `json:"market,omitempty"`
	// Current user's member status
	MemberStatus *GroupsGroupFullMemberStatus `json:"member_status,omitempty"`
	// Community members number
	//  Minimum: 0
	MembersCount *int `json:"members_count,omitempty"`
	// Info about number of users in group
	MembersCountText *string `json:"members_count_text,omitempty"`
	// Status of replies in community messages
	OnlineStatus *GroupsOnlineStatus `json:"online_status,omitempty"`
	// The number of incoming requests to the community
	//  Minimum: 0
	RequestsCount *int `json:"requests_count,omitempty"`
	SecondarySection *GroupsGroupFullSection `json:"secondary_section,omitempty"`
	// Community's website
	Site *string `json:"site,omitempty"`
	// Community status
	Status *string `json:"status,omitempty"`
	StatusAudio *AudioAudio `json:"status_audio,omitempty"`
	StoriesArchiveCount *int `json:"stories_archive_count,omitempty"`
	// Information whether the community has a "fire" pictogram.
	Trending *BaseBoolInt `json:"trending,omitempty"`
	UsingVkpayMarketApp *bool `json:"using_vkpay_market_app,omitempty"`
	// Information whether community is verified
	Verified *BaseBoolInt `json:"verified,omitempty"`
	// Number of community's live streams
	//  Minimum: 0
	VideoLiveCount *int `json:"video_live_count,omitempty"`
	// Community level live streams achievements
	//  Minimum: 0
	VideoLiveLevel *int `json:"video_live_level,omitempty"`
	// Information about wall status in community
	Wall *GroupsGroupFullWall`json:"wall,omitempty"`
	// Community's main wiki page title
	WikiPage *string `json:"wiki_page,omitempty"`
}

type GroupsGroupFullAgeLimits int

const (
	GroupsGroupFullAgeLimitsNo GroupsGroupFullAgeLimits = 1
	GroupsGroupFullAgeLimitsOver16 GroupsGroupFullAgeLimits = 2
	GroupsGroupFullAgeLimitsOver18 GroupsGroupFullAgeLimits = 3
)

type GroupsGroupFullMemberStatus int

const (
	GroupsGroupFullMemberStatusNotAMember GroupsGroupFullMemberStatus = 0
	GroupsGroupFullMemberStatusMember GroupsGroupFullMemberStatus = 1
	GroupsGroupFullMemberStatusNotSure GroupsGroupFullMemberStatus = 2
	GroupsGroupFullMemberStatusDeclined GroupsGroupFullMemberStatus = 3
	GroupsGroupFullMemberStatusHasSentARequest GroupsGroupFullMemberStatus = 4
	GroupsGroupFullMemberStatusInvited GroupsGroupFullMemberStatus = 5
)

// GroupsGroupFullSection Main section of community
type GroupsGroupFullSection int

const (
	GroupsGroupFullSectionNone GroupsGroupFullSection = 0
	GroupsGroupFullSectionPhotos GroupsGroupFullSection = 1
	GroupsGroupFullSectionTopics GroupsGroupFullSection = 2
	GroupsGroupFullSectionAudios GroupsGroupFullSection = 3
	GroupsGroupFullSectionVideos GroupsGroupFullSection = 4
	GroupsGroupFullSectionMarket GroupsGroupFullSection = 5
	GroupsGroupFullSectionStories GroupsGroupFullSection = 6
	GroupsGroupFullSectionApps GroupsGroupFullSection = 7
	GroupsGroupFullSectionFollowers GroupsGroupFullSection = 8
	GroupsGroupFullSectionLinks GroupsGroupFullSection = 9
	GroupsGroupFullSectionEvents GroupsGroupFullSection = 10
	GroupsGroupFullSectionPlaces GroupsGroupFullSection = 11
	GroupsGroupFullSectionContacts GroupsGroupFullSection = 12
	GroupsGroupFullSectionAppBtns GroupsGroupFullSection = 13
	GroupsGroupFullSectionDocs GroupsGroupFullSection = 14
	GroupsGroupFullSectionEventCounters GroupsGroupFullSection = 15
	GroupsGroupFullSectionGroupMessages GroupsGroupFullSection = 16
	GroupsGroupFullSectionAlbums GroupsGroupFullSection = 24
	GroupsGroupFullSectionCategories GroupsGroupFullSection = 26
	GroupsGroupFullSectionAdminHelp GroupsGroupFullSection = 27
	GroupsGroupFullSectionAppWidget GroupsGroupFullSection = 31
	GroupsGroupFullSectionPublicHelp GroupsGroupFullSection = 32
	GroupsGroupFullSectionHsDonationApp GroupsGroupFullSection = 33
	GroupsGroupFullSectionHsMarketApp GroupsGroupFullSection = 34
	GroupsGroupFullSectionAddresses GroupsGroupFullSection = 35
	GroupsGroupFullSectionArtistPage GroupsGroupFullSection = 36
	GroupsGroupFullSectionPodcast GroupsGroupFullSection = 37
	GroupsGroupFullSectionArticles GroupsGroupFullSection = 39
	GroupsGroupFullSectionAdminTips GroupsGroupFullSection = 40
	GroupsGroupFullSectionMenu GroupsGroupFullSection = 41
	GroupsGroupFullSectionFixedPost GroupsGroupFullSection = 42
	GroupsGroupFullSectionChats GroupsGroupFullSection = 43
	GroupsGroupFullSectionEvergreenNotice GroupsGroupFullSection = 44
	GroupsGroupFullSectionMusicians GroupsGroupFullSection = 45
	GroupsGroupFullSectionNarratives GroupsGroupFullSection = 46
	GroupsGroupFullSectionDonutDonate GroupsGroupFullSection = 47
	GroupsGroupFullSectionClips GroupsGroupFullSection = 48
	GroupsGroupFullSectionMarketCart GroupsGroupFullSection = 49
	GroupsGroupFullSectionCurators GroupsGroupFullSection = 50
	GroupsGroupFullSectionMarketServices GroupsGroupFullSection = 51
	GroupsGroupFullSectionClassifieds GroupsGroupFullSection = 53
	GroupsGroupFullSectionTextlives GroupsGroupFullSection = 54
	GroupsGroupFullSectionDonutForDons GroupsGroupFullSection = 55
	GroupsGroupFullSectionBadges GroupsGroupFullSection = 57
	GroupsGroupFullSectionChatsCreation GroupsGroupFullSection = 58
)

// GroupsGroupIsClosed Information whether community is closed
type GroupsGroupIsClosed int

const (
	GroupsGroupIsClosedOpen GroupsGroupIsClosed = 0
	GroupsGroupIsClosedClosed GroupsGroupIsClosed = 1
	GroupsGroupIsClosedPrivate GroupsGroupIsClosed = 2
)

type GroupsGroupMarketCurrency int

const (
	GroupsGroupMarketCurrencyRussianRubles GroupsGroupMarketCurrency = 643
	GroupsGroupMarketCurrencyUkrainianHryvnia GroupsGroupMarketCurrency = 980
	GroupsGroupMarketCurrencyKazakhTenge GroupsGroupMarketCurrency = 398
	GroupsGroupMarketCurrencyEuro GroupsGroupMarketCurrency = 978
	GroupsGroupMarketCurrencyUsDollars GroupsGroupMarketCurrency = 840
)

type GroupsGroupPhotos int

const (
	GroupsGroupPhotosDisabled GroupsGroupPhotos = 0
	GroupsGroupPhotosOpen GroupsGroupPhotos = 1
	GroupsGroupPhotosLimited GroupsGroupPhotos = 2
)

type GroupsGroupPublicCategoryList struct {
	Id *int `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Subcategories *[]GroupsGroupCategoryType `json:"subcategories,omitempty"`
}

type GroupsGroupRole string

const (
	GroupsGroupRoleModerator GroupsGroupRole = "moderator"
	GroupsGroupRoleEditor GroupsGroupRole = "editor"
	GroupsGroupRoleAdministrator GroupsGroupRole = "administrator"
	GroupsGroupRoleAdvertiser GroupsGroupRole = "advertiser"
)

type GroupsGroupSubject int

const (
	GroupsGroupSubjectAuto GroupsGroupSubject = 1
	GroupsGroupSubjectActivityHolidays GroupsGroupSubject = 2
	GroupsGroupSubjectBusiness GroupsGroupSubject = 3
	GroupsGroupSubjectPets GroupsGroupSubject = 4
	GroupsGroupSubjectHealth GroupsGroupSubject = 5
	GroupsGroupSubjectDatingAndCommunication GroupsGroupSubject = 6
	GroupsGroupSubjectGames GroupsGroupSubject = 7
	GroupsGroupSubjectIt GroupsGroupSubject = 8
	GroupsGroupSubjectCinema GroupsGroupSubject = 9
	GroupsGroupSubjectBeautyAndFashion GroupsGroupSubject = 10
	GroupsGroupSubjectCooking GroupsGroupSubject = 11
	GroupsGroupSubjectArtAndCulture GroupsGroupSubject = 12
	GroupsGroupSubjectLiterature GroupsGroupSubject = 13
	GroupsGroupSubjectMobileServicesAndInternet GroupsGroupSubject = 14
	GroupsGroupSubjectMusic GroupsGroupSubject = 15
	GroupsGroupSubjectScienceAndTechnology GroupsGroupSubject = 16
	GroupsGroupSubjectRealEstate GroupsGroupSubject = 17
	GroupsGroupSubjectNewsAndMedia GroupsGroupSubject = 18
	GroupsGroupSubjectSecurity GroupsGroupSubject = 19
	GroupsGroupSubjectEducation GroupsGroupSubject = 20
	GroupsGroupSubjectHomeAndRenovations GroupsGroupSubject = 21
	GroupsGroupSubjectPolitics GroupsGroupSubject = 22
	GroupsGroupSubjectFood GroupsGroupSubject = 23
	GroupsGroupSubjectIndustry GroupsGroupSubject = 24
	GroupsGroupSubjectTravel GroupsGroupSubject = 25
	GroupsGroupSubjectWork GroupsGroupSubject = 26
	GroupsGroupSubjectEntertainment GroupsGroupSubject = 27
	GroupsGroupSubjectReligion GroupsGroupSubject = 28
	GroupsGroupSubjectFamily GroupsGroupSubject = 29
	GroupsGroupSubjectSports GroupsGroupSubject = 30
	GroupsGroupSubjectInsurance GroupsGroupSubject = 31
	GroupsGroupSubjectTelevision GroupsGroupSubject = 32
	GroupsGroupSubjectGoodsAndServices GroupsGroupSubject = 33
	GroupsGroupSubjectHobbies GroupsGroupSubject = 34
	GroupsGroupSubjectFinance GroupsGroupSubject = 35
	GroupsGroupSubjectPhoto GroupsGroupSubject = 36
	GroupsGroupSubjectEsoterics GroupsGroupSubject = 37
	GroupsGroupSubjectElectronicsAndAppliances GroupsGroupSubject = 38
	GroupsGroupSubjectErotic GroupsGroupSubject = 39
	GroupsGroupSubjectHumor GroupsGroupSubject = 40
	GroupsGroupSubjectSocietyHumanities GroupsGroupSubject = 41
	GroupsGroupSubjectDesignAndGraphics GroupsGroupSubject = 42
)

type GroupsGroupSuggestedPrivacy int

const (
	GroupsGroupSuggestedPrivacyNone GroupsGroupSuggestedPrivacy = 0
	GroupsGroupSuggestedPrivacyAll GroupsGroupSuggestedPrivacy = 1
	GroupsGroupSuggestedPrivacySubscribers GroupsGroupSuggestedPrivacy = 2
)

type GroupsGroupTagColor string

const (
	GroupsGroupTagColor454647 GroupsGroupTagColor = "454647"
	GroupsGroupTagColor45678f GroupsGroupTagColor = "45678f"
	GroupsGroupTagColor4bb34b GroupsGroupTagColor = "4bb34b"
	GroupsGroupTagColor5181b8 GroupsGroupTagColor = "5181b8"
	GroupsGroupTagColor539b9c GroupsGroupTagColor = "539b9c"
	GroupsGroupTagColor5c9ce6 GroupsGroupTagColor = "5c9ce6"
	GroupsGroupTagColor63b9ba GroupsGroupTagColor = "63b9ba"
	GroupsGroupTagColor6bc76b GroupsGroupTagColor = "6bc76b"
	GroupsGroupTagColor76787a GroupsGroupTagColor = "76787a"
	GroupsGroupTagColor792ec0 GroupsGroupTagColor = "792ec0"
	GroupsGroupTagColor7a6c4f GroupsGroupTagColor = "7a6c4f"
	GroupsGroupTagColor7ececf GroupsGroupTagColor = "7ececf"
	GroupsGroupTagColor9e8d6b GroupsGroupTagColor = "9e8d6b"
	GroupsGroupTagColorA162de GroupsGroupTagColor = "a162de"
	GroupsGroupTagColorAaaeb3 GroupsGroupTagColor = "aaaeb3"
	GroupsGroupTagColorBbaa84 GroupsGroupTagColor = "bbaa84"
	GroupsGroupTagColorE64646 GroupsGroupTagColor = "e64646"
	GroupsGroupTagColorFf5c5c GroupsGroupTagColor = "ff5c5c"
	GroupsGroupTagColorFfa000 GroupsGroupTagColor = "ffa000"
	GroupsGroupTagColorFfc107 GroupsGroupTagColor = "ffc107"
)

type GroupsGroupTag struct {
	Color GroupsGroupTagColor`json:"color"`
	Id int `json:"id"`
	Name string `json:"name"`
	Uses *int `json:"uses,omitempty"`
}

type GroupsGroupTopics int

const (
	GroupsGroupTopicsDisabled GroupsGroupTopics = 0
	GroupsGroupTopicsOpen GroupsGroupTopics = 1
	GroupsGroupTopicsLimited GroupsGroupTopics = 2
)

// GroupsGroupType Community type
type GroupsGroupType string

const (
	GroupsGroupTypeGroup GroupsGroupType = "group"
	GroupsGroupTypePage GroupsGroupType = "page"
	GroupsGroupTypeEvent GroupsGroupType = "event"
)

type GroupsGroupVideo int

const (
	GroupsGroupVideoDisabled GroupsGroupVideo = 0
	GroupsGroupVideoOpen GroupsGroupVideo = 1
	GroupsGroupVideoLimited GroupsGroupVideo = 2
)

type GroupsGroupWall int

const (
	GroupsGroupWallDisabled GroupsGroupWall = 0
	GroupsGroupWallOpen GroupsGroupWall = 1
	GroupsGroupWallLimited GroupsGroupWall = 2
	GroupsGroupWallClosed GroupsGroupWall = 3
)

type GroupsGroupWiki int

const (
	GroupsGroupWikiDisabled GroupsGroupWiki = 0
	GroupsGroupWikiOpen GroupsGroupWiki = 1
	GroupsGroupWikiLimited GroupsGroupWiki = 2
)

type GroupsGroupsArray struct {
	// Communities number
	//  Minimum: 0
	Count int `json:"count"`
	//  Format: int64
	Items []int `json:"items"`
}

type GroupsLinksItem struct {
	// Link description
	Desc *string `json:"desc,omitempty"`
	// Information whether the link title can be edited
	EditTitle *BaseBoolInt `json:"edit_title,omitempty"`
	// Link ID
	Id *int `json:"id,omitempty"`
	// Information whether the image on processing
	ImageProcessing *BaseBoolInt `json:"image_processing,omitempty"`
	// Link title
	Name *string `json:"name,omitempty"`
	// URL of square image of the link with 100 pixels in width
	//  Format: uri
	Photo100 *string `json:"photo_100,omitempty"`
	// URL of square image of the link with 50 pixels in width
	//  Format: uri
	Photo50 *string `json:"photo_50,omitempty"`
	// Link URL
	//  Format: uri
	Url *string `json:"url,omitempty"`
}

type GroupsLiveCovers struct {
	// Information whether live covers is enabled
	IsEnabled bool `json:"is_enabled"`
	// Information whether live covers photo scaling is enabled
	IsScalable *bool `json:"is_scalable,omitempty"`
	StoryIds *[]string `json:"story_ids,omitempty"`
}

type GroupsLongPollEvents struct {
	AudioNew BaseBoolInt `json:"audio_new"`
	BoardPostDelete BaseBoolInt `json:"board_post_delete"`
	BoardPostEdit BaseBoolInt `json:"board_post_edit"`
	BoardPostNew BaseBoolInt `json:"board_post_new"`
	BoardPostRestore BaseBoolInt `json:"board_post_restore"`
	DonutMoneyWithdraw BaseBoolInt `json:"donut_money_withdraw"`
	DonutMoneyWithdrawError BaseBoolInt `json:"donut_money_withdraw_error"`
	DonutSubscriptionCancelled BaseBoolInt `json:"donut_subscription_cancelled"`
	DonutSubscriptionCreate BaseBoolInt `json:"donut_subscription_create"`
	DonutSubscriptionExpired BaseBoolInt `json:"donut_subscription_expired"`
	DonutSubscriptionPriceChanged BaseBoolInt `json:"donut_subscription_price_changed"`
	DonutSubscriptionProlonged BaseBoolInt `json:"donut_subscription_prolonged"`
	GroupChangePhoto BaseBoolInt `json:"group_change_photo"`
	GroupChangeSettings BaseBoolInt `json:"group_change_settings"`
	GroupJoin BaseBoolInt `json:"group_join"`
	GroupLeave BaseBoolInt `json:"group_leave"`
	GroupOfficersEdit BaseBoolInt `json:"group_officers_edit"`
	LeadFormsNew *BaseBoolInt `json:"lead_forms_new,omitempty"`
	MarketCommentDelete BaseBoolInt `json:"market_comment_delete"`
	MarketCommentEdit BaseBoolInt `json:"market_comment_edit"`
	MarketCommentNew BaseBoolInt `json:"market_comment_new"`
	MarketCommentRestore BaseBoolInt `json:"market_comment_restore"`
	MarketOrderEdit *BaseBoolInt `json:"market_order_edit,omitempty"`
	MarketOrderNew *BaseBoolInt `json:"market_order_new,omitempty"`
	MessageAllow BaseBoolInt `json:"message_allow"`
	MessageDeny BaseBoolInt `json:"message_deny"`
	MessageEdit BaseBoolInt `json:"message_edit"`
	MessageNew BaseBoolInt `json:"message_new"`
	MessageRead BaseBoolInt `json:"message_read"`
	MessageReply BaseBoolInt `json:"message_reply"`
	MessageTypingState BaseBoolInt `json:"message_typing_state"`
	PhotoCommentDelete BaseBoolInt `json:"photo_comment_delete"`
	PhotoCommentEdit BaseBoolInt `json:"photo_comment_edit"`
	PhotoCommentNew BaseBoolInt `json:"photo_comment_new"`
	PhotoCommentRestore BaseBoolInt `json:"photo_comment_restore"`
	PhotoNew BaseBoolInt `json:"photo_new"`
	PollVoteNew BaseBoolInt `json:"poll_vote_new"`
	UserBlock BaseBoolInt `json:"user_block"`
	UserUnblock BaseBoolInt `json:"user_unblock"`
	VideoCommentDelete BaseBoolInt `json:"video_comment_delete"`
	VideoCommentEdit BaseBoolInt `json:"video_comment_edit"`
	VideoCommentNew BaseBoolInt `json:"video_comment_new"`
	VideoCommentRestore BaseBoolInt `json:"video_comment_restore"`
	VideoNew BaseBoolInt `json:"video_new"`
	WallPostNew BaseBoolInt `json:"wall_post_new"`
	WallReplyDelete BaseBoolInt `json:"wall_reply_delete"`
	WallReplyEdit BaseBoolInt `json:"wall_reply_edit"`
	WallReplyNew BaseBoolInt `json:"wall_reply_new"`
	WallReplyRestore BaseBoolInt `json:"wall_reply_restore"`
	WallRepost BaseBoolInt `json:"wall_repost"`
}

type GroupsLongPollServer struct {
	// Long Poll key
	Key string `json:"key"`
	// Long Poll server address
	Server string `json:"server"`
	// Number of the last event
	Ts string `json:"ts"`
}

type GroupsLongPollSettings struct {
	// API version used for the events
	ApiVersion *string `json:"api_version,omitempty"`
	Events GroupsLongPollEvents `json:"events"`
	// Shows whether Long Poll is enabled
	IsEnabled bool `json:"is_enabled"`
}

type GroupsMarketInfo struct {
	// Contact person ID
	ContactId *int `json:"contact_id,omitempty"`
	Currency *MarketCurrency `json:"currency,omitempty"`
	// Currency name
	CurrencyText *string `json:"currency_text,omitempty"`
	// Information whether the market is enabled
	Enabled *BaseBoolInt `json:"enabled,omitempty"`
	// Main market album ID
	MainAlbumId *int `json:"main_album_id,omitempty"`
	MinOrderPrice *MarketPrice `json:"min_order_price,omitempty"`
	// Maximum price
	PriceMax *string `json:"price_max,omitempty"`
	// Minimum price
	PriceMin *string `json:"price_min,omitempty"`
	// Market type
	Type *string `json:"type,omitempty"`
}

// GroupsMarketState Declares state if market is enabled in group.
type GroupsMarketState string

const (
	GroupsMarketStateNone GroupsMarketState = "none"
	GroupsMarketStateBasic GroupsMarketState = "basic"
	GroupsMarketStateAdvanced GroupsMarketState = "advanced"
)

type GroupsMemberRole struct {
	// User ID
	Id int `json:"id"`
	Permissions *[]GroupsMemberRolePermission `json:"permissions,omitempty"`
	Role *GroupsMemberRoleStatus `json:"role,omitempty"`
}

type GroupsMemberRolePermission string

const (
	GroupsMemberRolePermissionAds GroupsMemberRolePermission = "ads"
)

// GroupsMemberRoleStatus User's credentials as community admin
type GroupsMemberRoleStatus string

const (
	GroupsMemberRoleStatusModerator GroupsMemberRoleStatus = "moderator"
	GroupsMemberRoleStatusEditor GroupsMemberRoleStatus = "editor"
	GroupsMemberRoleStatusAdministrator GroupsMemberRoleStatus = "administrator"
	GroupsMemberRoleStatusCreator GroupsMemberRoleStatus = "creator"
	GroupsMemberRoleStatusAdvertiser GroupsMemberRoleStatus = "advertiser"
)

type GroupsMemberStatus struct {
	// Information whether user is a member of the group
	Member BaseBoolInt `json:"member"`
	// User ID
	//  Format: int64
	//  Minimum: 1
	UserId int `json:"user_id"`
}

type GroupsMemberStatusFull struct {
	// Information whether user can be invited
	CanInvite *BaseBoolInt `json:"can_invite,omitempty"`
	// Information whether user's invite to the group can be recalled
	CanRecall *BaseBoolInt `json:"can_recall,omitempty"`
	// Information whether user has been invited to the group
	Invitation *BaseBoolInt `json:"invitation,omitempty"`
	// Information whether user is a member of the group
	Member BaseBoolInt `json:"member"`
	// Information whether user has send request to the group
	Request *BaseBoolInt `json:"request,omitempty"`
	// User ID
	//  Format: int64
	//  Minimum: 1
	UserId int `json:"user_id"`
}

// GroupsOnlineStatus Online status of group
type GroupsOnlineStatus struct {
	// Estimated time of answer (for status = answer_mark)
	Minutes *int `json:"minutes,omitempty"`
	Status GroupsOnlineStatusType `json:"status"`
}

// GroupsOnlineStatusType Type of online status of group
type GroupsOnlineStatusType string

const (
	GroupsOnlineStatusTypeNone GroupsOnlineStatusType = "none"
	GroupsOnlineStatusTypeOnline GroupsOnlineStatusType = "online"
	GroupsOnlineStatusTypeAnswerMark GroupsOnlineStatusType = "answer_mark"
)

type GroupsOwnerXtrBanInfo struct {
	BanInfo *GroupsBanInfo `json:"ban_info,omitempty"`
	// Information about group if type = group
	Group *GroupsGroup `json:"group,omitempty"`
	// Information about group if type = profile
	Profile *UsersUser `json:"profile,omitempty"`
	Type *GroupsOwnerXtrBanInfoType `json:"type,omitempty"`
}

// GroupsOwnerXtrBanInfoType Owner type
type GroupsOwnerXtrBanInfoType string

const (
	GroupsOwnerXtrBanInfoTypeGroup GroupsOwnerXtrBanInfoType = "group"
	GroupsOwnerXtrBanInfoTypeProfile GroupsOwnerXtrBanInfoType = "profile"
)

type GroupsPhotoSize struct {
	// Image height
	//  Minimum: 0
	Height int `json:"height"`
	// Image width
	//  Minimum: 0
	Width int `json:"width"`
}

// GroupsRoleOptions User's credentials as community admin
type GroupsRoleOptions string

const (
	GroupsRoleOptionsModerator GroupsRoleOptions = "moderator"
	GroupsRoleOptionsEditor GroupsRoleOptions = "editor"
	GroupsRoleOptionsAdministrator GroupsRoleOptions = "administrator"
	GroupsRoleOptionsCreator GroupsRoleOptions = "creator"
)

// GroupsSectionsListItem (index, title) tuples
type GroupsSectionsListItem []string

type GroupsSettingsTwitterStatus string

const (
	GroupsSettingsTwitterStatusLoading GroupsSettingsTwitterStatus = "loading"
	GroupsSettingsTwitterStatusSync GroupsSettingsTwitterStatus = "sync"
)

type GroupsSettingsTwitter struct {
	Name *string `json:"name,omitempty"`
	Status GroupsSettingsTwitterStatus`json:"status"`
}

type GroupsSubjectItem struct {
	// Subject ID
	Id int `json:"id"`
	// Subject title
	Name string `json:"name"`
}

type GroupsTokenPermissionSetting struct {
	Name string `json:"name"`
	//  Minimum: 0
	Setting int `json:"setting"`
}

type GroupsUserXtrRole struct {
	UsersUserFull
	Role *GroupsRoleOptions `json:"role,omitempty"`
}

type GroupsAddAddressResponse struct {
	Response GroupsAddress `json:"response"`
}

type GroupsAddCallbackServerResponse struct {
	Groups struct {
		//  Minimum: 0
		ServerId int `json:"server_id"`
	} `json:"groups"`
}

type GroupsAddLinkResponse struct {
	Response GroupsLinksItem `json:"response"`
}

type GroupsCreateResponse struct {
	Response GroupsGroup `json:"response"`
}

type GroupsEditAddressResponse struct {
	// Result
	Response GroupsAddress `json:"response"`
}

type GroupsGetAddressesResponse struct {
	Groups struct {
		// Total count of addresses
		//  Minimum: 0
		Count int `json:"count"`
		Items []GroupsAddress `json:"items"`
	} `json:"groups"`
}

type GroupsGetBannedResponse struct {
	Groups struct {
		// Total users number
		//  Minimum: 0
		Count int `json:"count"`
		Items []GroupsBannedItem `json:"items"`
	} `json:"groups"`
}

type GroupsGetByIdObjectLegacyResponse struct {
	Response []GroupsGroupFull `json:"response"`
}

type GroupsGetCallbackConfirmationCodeResponse struct {
	Groups struct {
		// Confirmation code
		Code string `json:"code"`
	} `json:"groups"`
}

type GroupsGetCallbackServersResponse struct {
	Groups struct {
		//  Minimum: 0
		Count int `json:"count"`
		Items []GroupsCallbackServer `json:"items"`
	} `json:"groups"`
}

type GroupsGetCallbackSettingsResponse struct {
	Response GroupsCallbackSettings `json:"response"`
}

type GroupsGetCatalogInfoExtendedResponse struct {
	Groups struct {
		Categories *[]GroupsGroupCategoryFull `json:"categories,omitempty"`
		// Information whether catalog is enabled for current user
		Enabled BaseBoolInt `json:"enabled"`
	} `json:"groups"`
}

type GroupsGetCatalogInfoResponse struct {
	Groups struct {
		Categories *[]GroupsGroupCategory `json:"categories,omitempty"`
		// Information whether catalog is enabled for current user
		Enabled BaseBoolInt `json:"enabled"`
	} `json:"groups"`
}

type GroupsGetCatalogResponse struct {
	Groups struct {
		// Total communities number
		//  Minimum: 0
		Count int `json:"count"`
		Items []GroupsGroup `json:"items"`
	} `json:"groups"`
}

type GroupsGetInvitedUsersResponse struct {
	Groups struct {
		// Total communities number
		//  Minimum: 0
		Count int `json:"count"`
		Items []UsersUserFull `json:"items"`
	} `json:"groups"`
}

type GroupsGetInvitesExtendedResponse struct {
	Groups struct {
		// Total communities number
		//  Minimum: 0
		Count int `json:"count"`
		Groups []GroupsGroupFull `json:"groups"`
		Items []GroupsGroupFull `json:"items"`
		Profiles []UsersUserMin `json:"profiles"`
	} `json:"groups"`
}

type GroupsGetInvitesResponse struct {
	Groups struct {
		// Total communities number
		//  Minimum: 0
		Count int `json:"count"`
		Items []GroupsGroupFull `json:"items"`
	} `json:"groups"`
}

type GroupsGetLongPollServerResponse struct {
	Response GroupsLongPollServer `json:"response"`
}

type GroupsGetLongPollSettingsResponse struct {
	Response GroupsLongPollSettings `json:"response"`
}

type GroupsGetMembersFieldsResponse struct {
	Groups struct {
		// Total members number
		//  Minimum: 0
		Count int `json:"count"`
		Items []GroupsUserXtrRole `json:"items"`
	} `json:"groups"`
}

type GroupsGetMembersFilterResponse struct {
	Groups struct {
		// Total members number
		//  Minimum: 0
		Count int `json:"count"`
		Items []GroupsMemberRole `json:"items"`
	} `json:"groups"`
}

type GroupsGetMembersResponse struct {
	Groups struct {
		// Total members number
		//  Minimum: 0
		Count int `json:"count"`
		//  Format: int64
		//  Minimum: 0
		Items []int `json:"items"`
	} `json:"groups"`
}

type GroupsGetRequestsFieldsResponse struct {
	Groups struct {
		// Total communities number
		//  Minimum: 0
		Count int `json:"count"`
		Items []UsersUserFull `json:"items"`
	} `json:"groups"`
}

type GroupsGetRequestsResponse struct {
	Groups struct {
		// Total communities number
		//  Minimum: 0
		Count int `json:"count"`
		//  Format: int64
		//  Minimum: 1
		Items []int `json:"items"`
	} `json:"groups"`
}

type GroupsGetSettingsResponse struct {
	Groups struct {
		// Community access settings
		Access *GroupsGroupAccess `json:"access,omitempty"`
		// Community's page domain
		Address *string `json:"address,omitempty"`
		AgeLimits *GroupsGroupAgeLimits `json:"age_limits,omitempty"`
		// Articles settings
		Articles int `json:"articles"`
		// Audio settings
		Audio GroupsGroupAudio `json:"audio"`
		// City id of group
		CityId int `json:"city_id"`
		// City name of group
		CityName string `json:"city_name"`
		Contacts *BaseBoolInt `json:"contacts,omitempty"`
		// Country id of group
		CountryId int `json:"country_id"`
		// Country name of group
		CountryName string `json:"country_name"`
		// Community description
		Description string `json:"description"`
		// Docs settings
		Docs GroupsGroupDocs `json:"docs"`
		// Community email
		Email *string `json:"email,omitempty"`
		EventGroupId *int `json:"event_group_id,omitempty"`
		Events *BaseBoolInt `json:"events,omitempty"`
		// Finish date in Unix-time format
		FinishDate *int `json:"finish_date,omitempty"`
		Links *BaseBoolInt `json:"links,omitempty"`
		MainSection *GroupsGroupFullSection `json:"main_section,omitempty"`
		// Information whether the obscene filter is enabled
		ObsceneFilter BaseBoolInt `json:"obscene_filter"`
		// Information whether the stop words filter is enabled
		ObsceneStopwords BaseBoolInt `json:"obscene_stopwords"`
		// The list of stop words
		ObsceneWords []string `json:"obscene_words"`
		// Community phone
		Phone *string `json:"phone,omitempty"`
		// Photos settings
		Photos GroupsGroupPhotos `json:"photos"`
		// Information about the group category
		PublicCategory *int `json:"public_category,omitempty"`
		PublicCategoryList *[]GroupsGroupPublicCategoryList `json:"public_category_list,omitempty"`
		PublicDate *string `json:"public_date,omitempty"`
		PublicDateLabel *string `json:"public_date_label,omitempty"`
		// Information about the group subcategory
		PublicSubcategory *int `json:"public_subcategory,omitempty"`
		// Photo suggests setting
		RecognizePhoto *int `json:"recognize_photo,omitempty"`
		// URL of the RSS feed
		//  Format: uri
		Rss *string `json:"rss,omitempty"`
		SecondarySection *GroupsGroupFullSection `json:"secondary_section,omitempty"`
		SectionsList *[]GroupsSectionsListItem `json:"sections_list,omitempty"`
		// Start date
		//  Minimum: 0
		StartDate *int `json:"start_date,omitempty"`
		// Community subject ID
		Subject *int `json:"subject,omitempty"`
		SubjectList *[]GroupsSubjectItem `json:"subject_list,omitempty"`
		SuggestedPrivacy *GroupsGroupSuggestedPrivacy `json:"suggested_privacy,omitempty"`
		// Community title
		Title string `json:"title"`
		// Topics settings
		Topics GroupsGroupTopics `json:"topics"`
		Twitter *GroupsSettingsTwitter `json:"twitter,omitempty"`
		// Video settings
		Video GroupsGroupVideo `json:"video"`
		// Wall settings
		Wall GroupsGroupWall `json:"wall"`
		// Community website
		Website *string `json:"website,omitempty"`
		// Wiki settings
		Wiki GroupsGroupWiki `json:"wiki"`
	} `json:"groups"`
}

type GroupsGetTagListResponse struct {
	Response []GroupsGroupTag `json:"response"`
}

type GroupsGetTokenPermissionsResponse struct {
	Groups struct {
		//  Minimum: 0
		Mask int `json:"mask"`
		Permissions []GroupsTokenPermissionSetting `json:"permissions"`
	} `json:"groups"`
}

type GroupsGetObjectExtendedResponse struct {
	Groups struct {
		// Total communities number
		//  Minimum: 0
		Count int `json:"count"`
		Items []GroupsGroupFull `json:"items"`
	} `json:"groups"`
}

type GroupsGetResponse struct {
	Groups struct {
		// Total communities number
		Count int `json:"count"`
		//  Format: int64
		//  Minimum: 0
		Items []int `json:"items"`
	} `json:"groups"`
}

type GroupsIsMemberExtendedResponse struct {
	Groups struct {
		// Information whether user can be invited
		CanInvite *BaseBoolInt `json:"can_invite,omitempty"`
		// Information whether user's invite to the group can be recalled
		CanRecall *BaseBoolInt `json:"can_recall,omitempty"`
		// Information whether user has been invited to the group
		Invitation *BaseBoolInt `json:"invitation,omitempty"`
		// Information whether user is a member of the group
		Member BaseBoolInt `json:"member"`
		// Information whether user has sent request to the group
		Request *BaseBoolInt `json:"request,omitempty"`
	} `json:"groups"`
}

type GroupsIsMemberResponse struct {
	// Information whether user is a member of the group
	Response BaseBoolInt `json:"response"`
}

type GroupsIsMemberUserIdsExtendedResponse struct {
	Response []GroupsMemberStatusFull `json:"response"`
}

type GroupsIsMemberUserIdsResponse struct {
	Response []GroupsMemberStatus `json:"response"`
}

type GroupsSearchResponse struct {
	Groups struct {
		// Total communities number
		//  Minimum: 0
		Count int `json:"count"`
		Items []GroupsGroup `json:"items"`
	} `json:"groups"`
}

