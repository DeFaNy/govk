// Code generated by https://github.com/defany/govk. DO NOT EDIT.

package models

import (
	"encoding/json"
)

// suppress unused package warning
var _ *json.RawMessage

type AppsApp struct {
	AppsAppMin
	// Application author's URL
	//  Format: uri
	AuthorUrl *string `json:"author_url,omitempty"`
	// URL of the app banner with 1120 px in width
	//  Format: uri
	Banner1120 *string `json:"banner_1120,omitempty"`
	// URL of the app banner with 560 px in width
	//  Format: uri
	Banner560 *string `json:"banner_560,omitempty"`
	// Catalog position
	CatalogPosition *int `json:"catalog_position,omitempty"`
	// Application description
	Description *string `json:"description,omitempty"`
	//  Minimum: 0
	Friends *[]int `json:"friends,omitempty"`
	// Genre name
	Genre *string `json:"genre,omitempty"`
	// Genre ID
	GenreId *int `json:"genre_id,omitempty"`
	// URL of the app icon with 16 px in width
	//  Format: uri
	Icon16 *string `json:"icon_16,omitempty"`
	// Information whether the application is multilanguage
	International *bool `json:"international,omitempty"`
	// Information whether application is in mobile catalog
	IsInCatalog *int `json:"is_in_catalog,omitempty"`
	// Is new flag
	IsNew *BaseBoolInt `json:"is_new,omitempty"`
	LeaderboardType *AppsAppLeaderboardType `json:"leaderboard_type,omitempty"`
	// Members number
	MembersCount *int `json:"members_count,omitempty"`
	// Application ID in store
	PlatformId *string `json:"platform_id,omitempty"`
	// Date when the application has been published in Unixtime
	PublishedDate *int `json:"published_date,omitempty"`
	// Is push enabled
	PushEnabled *BaseBoolInt `json:"push_enabled,omitempty"`
	// Screen name
	ScreenName *string `json:"screen_name,omitempty"`
	// Screen orientation
	ScreenOrientation *int `json:"screen_orientation,omitempty"`
	// Application section name
	Section *string `json:"section,omitempty"`
}

// AppsAppLeaderboardType Leaderboard type
type AppsAppLeaderboardType int

const (
	AppsAppLeaderboardTypeNotSupported AppsAppLeaderboardType = 0
	AppsAppLeaderboardTypeLevels AppsAppLeaderboardType = 1
	AppsAppLeaderboardTypePoints AppsAppLeaderboardType = 2
)

type AppsAppMin struct {
	// Application author's ID
	AuthorOwnerId *int `json:"author_owner_id,omitempty"`
	// Hex color code without hash sign
	BackgroundLoaderColor *string `json:"background_loader_color,omitempty"`
	// URL of the app icon with 139 px in width
	//  Format: uri
	Icon139 *string `json:"icon_139,omitempty"`
	// URL of the app icon with 150 px in width
	//  Format: uri
	Icon150 *string `json:"icon_150,omitempty"`
	// URL of the app icon with 278 px in width
	//  Format: uri
	Icon278 *string `json:"icon_278,omitempty"`
	// URL of the app icon with 576 px in width
	//  Format: uri
	Icon576 *string `json:"icon_576,omitempty"`
	// URL of the app icon with 75 px in width
	//  Format: uri
	Icon75 *string `json:"icon_75,omitempty"`
	// Application ID
	//  Minimum: 0
	Id int `json:"id"`
	// Is application installed
	IsInstalled *bool `json:"is_installed,omitempty"`
	// SVG data
	LoaderIcon *string `json:"loader_icon,omitempty"`
	// Application title
	Title string `json:"title"`
	Type AppsAppType `json:"type"`
}

// AppsAppType Application type
type AppsAppType string

const (
	AppsAppTypeApp AppsAppType = "app"
	AppsAppTypeGame AppsAppType = "game"
	AppsAppTypeSite AppsAppType = "site"
	AppsAppTypeStandalone AppsAppType = "standalone"
	AppsAppTypeVkApp AppsAppType = "vk_app"
	AppsAppTypeCommunityApp AppsAppType = "community_app"
	AppsAppTypeHtml5Game AppsAppType = "html5_game"
	AppsAppTypeMiniApp AppsAppType = "mini_app"
)

type AppsCatalogList struct {
	// Total number
	//  Minimum: 0
	Count int `json:"count"`
	Items []AppsApp `json:"items"`
	Profiles *[]UsersUserMin `json:"profiles,omitempty"`
}

type AppsLeaderboard struct {
	// Level
	Level *int `json:"level,omitempty"`
	// Points number
	Points *int `json:"points,omitempty"`
	// Score number
	Score *int `json:"score,omitempty"`
	// User ID
	//  Format: int64
	UserId int `json:"user_id"`
}

type AppsScopeName string

const (
	AppsScopeNameFriends AppsScopeName = "friends"
	AppsScopeNamePhotos AppsScopeName = "photos"
	AppsScopeNameVideo AppsScopeName = "video"
	AppsScopeNamePages AppsScopeName = "pages"
	AppsScopeNameStatus AppsScopeName = "status"
	AppsScopeNameNotes AppsScopeName = "notes"
	AppsScopeNameWall AppsScopeName = "wall"
	AppsScopeNameDocs AppsScopeName = "docs"
	AppsScopeNameGroups AppsScopeName = "groups"
	AppsScopeNameStats AppsScopeName = "stats"
	AppsScopeNameMarket AppsScopeName = "market"
)

// AppsScope Scope description
type AppsScope struct {
	// Scope name
	Name AppsScopeName`json:"name"`
	// Scope title
	Title *string `json:"title,omitempty"`
}

type AppsGetCatalogResponse struct {
	Response AppsCatalogList `json:"response"`
}

type AppsGetFriendsListExtendedResponse struct {
	Apps struct {
		// Total number
		Count int `json:"count"`
		Items *[]UsersUserFull `json:"items,omitempty"`
	} `json:"apps"`
}

type AppsGetFriendsListResponse struct {
	Apps struct {
		// Total number
		Count int `json:"count"`
		//  Format: int64
		Items *[]int `json:"items,omitempty"`
	} `json:"apps"`
}

type AppsGetLeaderboardExtendedResponse struct {
	Apps struct {
		// Total number
		Count *int `json:"count,omitempty"`
		Items *[]AppsLeaderboard `json:"items,omitempty"`
		Profiles *[]UsersUser `json:"profiles,omitempty"`
	} `json:"apps"`
}

type AppsGetLeaderboardResponse struct {
	Apps struct {
		// Total number
		Count *int `json:"count,omitempty"`
		Items *[]AppsLeaderboard `json:"items,omitempty"`
	} `json:"apps"`
}

type AppsGetMiniAppPoliciesResponse struct {
	Apps struct {
		// URL of the app's privacy policy
		//  Format: uri
		PrivacyPolicy *string `json:"privacy_policy,omitempty"`
		// URL of the app's terms
		//  Format: uri
		Terms *string `json:"terms,omitempty"`
	} `json:"apps"`
}

type AppsGetScopesResponse struct {
	Apps struct {
		// Total number
		Count int `json:"count"`
		Items []AppsScope `json:"items"`
	} `json:"apps"`
}

type AppsGetScoreResponse struct {
	// Score number
	Response int `json:"response"`
}

type AppsGetResponse struct {
	Apps struct {
		// Total number of applications
		//  Minimum: 0
		Count *int `json:"count,omitempty"`
		// List of applications
		Items *[]AppsApp `json:"items,omitempty"`
	} `json:"apps"`
}

type AppsImageUploadResponse struct {
	Apps struct {
		// Uploading hash
		Hash *string `json:"hash,omitempty"`
		// Uploaded photo data
		Image *string `json:"image,omitempty"`
	} `json:"apps"`
}

type AppsSendRequestResponse struct {
	// Request ID
	Response int `json:"response"`
}

