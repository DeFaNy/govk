// Code generated by https://github.com/defany/govk. DO NOT EDIT.

package models

import (
	"encoding/json"
)

// suppress unused package warning
var _ *json.RawMessage

type MessagesAudioMessage struct {
	// Access key for audio message
	AccessKey *string `json:"access_key,omitempty"`
	// Audio message duration in seconds
	//  Minimum: 0
	Duration int `json:"duration"`
	// Audio message ID
	//  Minimum: 0
	Id int `json:"id"`
	// MP3 file URL
	//  Format: uri
	LinkMp3 string `json:"link_mp3"`
	// OGG file URL
	//  Format: uri
	LinkOgg string `json:"link_ogg"`
	// Audio message owner ID
	//  Format: int64
	OwnerId int `json:"owner_id"`
	//  Minimum: 1
	//  Maximum: 11
	TranscriptError *int `json:"transcript_error,omitempty"`
	//  Minimum: 0
	Waveform []int `json:"waveform"`
}

type MessagesChat struct {
	// Chat creator ID
	//  Format: int64
	AdminId int `json:"admin_id"`
	// Chat ID
	Id int `json:"id"`
	// If provided photo is default
	IsDefaultPhoto *bool `json:"is_default_photo,omitempty"`
	// If chat is group channel
	IsGroupChannel *bool `json:"is_group_channel,omitempty"`
	// Shows that user has been kicked from the chat
	Kicked *BaseBoolInt `json:"kicked,omitempty"`
	// Shows that user has been left the chat
	Left *BaseBoolInt `json:"left,omitempty"`
	// Count members in a chat
	MembersCount int `json:"members_count"`
	// URL of the preview image with 100 px in width
	//  Format: uri
	Photo100 *string `json:"photo_100,omitempty"`
	// URL of the preview image with 200 px in width
	//  Format: uri
	Photo200 *string `json:"photo_200,omitempty"`
	// URL of the preview image with 50 px in width
	//  Format: uri
	Photo50 *string `json:"photo_50,omitempty"`
	PushSettings *MessagesChatPushSettings `json:"push_settings,omitempty"`
	// Chat title
	Title *string `json:"title,omitempty"`
	// Chat type
	Type string `json:"type"`
	//  Format: int64
	Users []int `json:"users"`
}

type MessagesChatFull struct {
	// Chat creator ID
	//  Format: int64
	AdminId int `json:"admin_id"`
	// Chat ID
	Id int `json:"id"`
	// Shows that user has been kicked from the chat
	Kicked *BaseBoolInt `json:"kicked,omitempty"`
	// Shows that user has been left the chat
	Left *BaseBoolInt `json:"left,omitempty"`
	// URL of the preview image with 100 px in width
	//  Format: uri
	Photo100 *string `json:"photo_100,omitempty"`
	// URL of the preview image with 200 px in width
	//  Format: uri
	Photo200 *string `json:"photo_200,omitempty"`
	// URL of the preview image with 50 px in width
	//  Format: uri
	Photo50 *string `json:"photo_50,omitempty"`
	PushSettings *MessagesChatPushSettings `json:"push_settings,omitempty"`
	// Chat title
	Title *string `json:"title,omitempty"`
	// Chat type
	Type string `json:"type"`
	Users []MessagesUserXtrInvitedBy `json:"users"`
}

type MessagesChatPreview struct {
	//  Format: int64
	//  Minimum: 0
	AdminId *int `json:"admin_id,omitempty"`
	Button *BaseLinkButton `json:"button,omitempty"`
	IsDon *bool `json:"is_don,omitempty"`
	IsGroupChannel *bool `json:"is_group_channel,omitempty"`
	IsMember *bool `json:"is_member,omitempty"`
	Joined *bool `json:"joined,omitempty"`
	LocalId *int `json:"local_id,omitempty"`
	//  Format: int64
	Members *[]int `json:"members,omitempty"`
	//  Minimum: 0
	MembersCount *int `json:"members_count,omitempty"`
	Photo *MessagesChatSettingsPhoto `json:"photo,omitempty"`
	Title *string `json:"title,omitempty"`
}

type MessagesChatPushSettings struct {
	// Time until that notifications are disabled
	DisabledUntil *int `json:"disabled_until,omitempty"`
	// Information whether the sound is on
	Sound *BaseBoolInt `json:"sound,omitempty"`
}

type MessagesChatRestrictions struct {
	// Only admins can promote users to admins
	AdminsPromoteUsers *bool `json:"admins_promote_users,omitempty"`
	// Only admins can change chat info
	OnlyAdminsEditInfo *bool `json:"only_admins_edit_info,omitempty"`
	// Only admins can edit pinned message
	OnlyAdminsEditPin *bool `json:"only_admins_edit_pin,omitempty"`
	// Only admins can invite users to this chat
	OnlyAdminsInvite *bool `json:"only_admins_invite,omitempty"`
	// Only admins can kick users from this chat
	OnlyAdminsKick *bool `json:"only_admins_kick,omitempty"`
}

type MessagesChatSettings struct {
	Acl MessagesChatSettingsAcl `json:"acl"`
	//  Format: int64
	ActiveIds []int `json:"active_ids"`
	// Ids of chat admins
	//  Format: int64
	AdminIds *[]int `json:"admin_ids,omitempty"`
	DisappearingChatLink *string `json:"disappearing_chat_link,omitempty"`
	FriendsCount *int `json:"friends_count,omitempty"`
	IsDisappearing *bool `json:"is_disappearing,omitempty"`
	IsGroupChannel *bool `json:"is_group_channel,omitempty"`
	IsService *bool `json:"is_service,omitempty"`
	MembersCount *int `json:"members_count,omitempty"`
	//  Format: int64
	OwnerId int `json:"owner_id"`
	Permissions *MessagesChatSettingsPermissions `json:"permissions,omitempty"`
	Photo *MessagesChatSettingsPhoto `json:"photo,omitempty"`
	PinnedMessage *MessagesPinnedMessage `json:"pinned_message,omitempty"`
	State MessagesChatSettingsState `json:"state"`
	Theme *string `json:"theme,omitempty"`
	// Chat title
	Title string `json:"title"`
}

type MessagesChatSettingsAcl struct {
	// Can you init group call in the chat
	CanCall bool `json:"can_call"`
	// Can you change photo, description and name
	CanChangeInfo bool `json:"can_change_info"`
	// Can you change invite link for this chat
	CanChangeInviteLink bool `json:"can_change_invite_link"`
	// Can you pin/unpin message for this chat
	CanChangePin bool `json:"can_change_pin"`
	// Can you change chat service type
	CanChangeServiceType *bool `json:"can_change_service_type,omitempty"`
	// Can you copy chat
	CanCopyChat bool `json:"can_copy_chat"`
	// Can you invite other peers in chat
	CanInvite bool `json:"can_invite"`
	// Can you moderate (delete) other users' messages
	CanModerate bool `json:"can_moderate"`
	// Can you promote simple users to chat admins
	CanPromoteUsers bool `json:"can_promote_users"`
	// Can you see invite link for this chat
	CanSeeInviteLink bool `json:"can_see_invite_link"`
	// Can you use mass mentions
	CanUseMassMentions bool `json:"can_use_mass_mentions"`
}

type MessagesChatSettingsPermissionsCall string

const (
	MessagesChatSettingsPermissionsCallOwner MessagesChatSettingsPermissionsCall = "owner"
	MessagesChatSettingsPermissionsCallOwnerAndAdmins MessagesChatSettingsPermissionsCall = "owner_and_admins"
	MessagesChatSettingsPermissionsCallAll MessagesChatSettingsPermissionsCall = "all"
)

type MessagesChatSettingsPermissionsChangeAdmins string

const (
	MessagesChatSettingsPermissionsChangeAdminsOwner MessagesChatSettingsPermissionsChangeAdmins = "owner"
	MessagesChatSettingsPermissionsChangeAdminsOwnerAndAdmins MessagesChatSettingsPermissionsChangeAdmins = "owner_and_admins"
)

type MessagesChatSettingsPermissionsChangeInfo string

const (
	MessagesChatSettingsPermissionsChangeInfoOwner MessagesChatSettingsPermissionsChangeInfo = "owner"
	MessagesChatSettingsPermissionsChangeInfoOwnerAndAdmins MessagesChatSettingsPermissionsChangeInfo = "owner_and_admins"
	MessagesChatSettingsPermissionsChangeInfoAll MessagesChatSettingsPermissionsChangeInfo = "all"
)

type MessagesChatSettingsPermissionsChangePin string

const (
	MessagesChatSettingsPermissionsChangePinOwner MessagesChatSettingsPermissionsChangePin = "owner"
	MessagesChatSettingsPermissionsChangePinOwnerAndAdmins MessagesChatSettingsPermissionsChangePin = "owner_and_admins"
	MessagesChatSettingsPermissionsChangePinAll MessagesChatSettingsPermissionsChangePin = "all"
)

type MessagesChatSettingsPermissionsInvite string

const (
	MessagesChatSettingsPermissionsInviteOwner MessagesChatSettingsPermissionsInvite = "owner"
	MessagesChatSettingsPermissionsInviteOwnerAndAdmins MessagesChatSettingsPermissionsInvite = "owner_and_admins"
	MessagesChatSettingsPermissionsInviteAll MessagesChatSettingsPermissionsInvite = "all"
)

type MessagesChatSettingsPermissionsSeeInviteLink string

const (
	MessagesChatSettingsPermissionsSeeInviteLinkOwner MessagesChatSettingsPermissionsSeeInviteLink = "owner"
	MessagesChatSettingsPermissionsSeeInviteLinkOwnerAndAdmins MessagesChatSettingsPermissionsSeeInviteLink = "owner_and_admins"
	MessagesChatSettingsPermissionsSeeInviteLinkAll MessagesChatSettingsPermissionsSeeInviteLink = "all"
)

type MessagesChatSettingsPermissionsUseMassMentions string

const (
	MessagesChatSettingsPermissionsUseMassMentionsOwner MessagesChatSettingsPermissionsUseMassMentions = "owner"
	MessagesChatSettingsPermissionsUseMassMentionsOwnerAndAdmins MessagesChatSettingsPermissionsUseMassMentions = "owner_and_admins"
	MessagesChatSettingsPermissionsUseMassMentionsAll MessagesChatSettingsPermissionsUseMassMentions = "all"
)

type MessagesChatSettingsPermissions struct {
	// Who can make calls
	Call *MessagesChatSettingsPermissionsCall`json:"call,omitempty"`
	// Who can change admins
	ChangeAdmins *MessagesChatSettingsPermissionsChangeAdmins`json:"change_admins,omitempty"`
	// Who can change chat info
	ChangeInfo *MessagesChatSettingsPermissionsChangeInfo`json:"change_info,omitempty"`
	// Who can change pinned message
	ChangePin *MessagesChatSettingsPermissionsChangePin`json:"change_pin,omitempty"`
	// Who can invite users to chat
	Invite *MessagesChatSettingsPermissionsInvite`json:"invite,omitempty"`
	// Who can see invite link
	SeeInviteLink *MessagesChatSettingsPermissionsSeeInviteLink`json:"see_invite_link,omitempty"`
	// Who can use mass mentions
	UseMassMentions *MessagesChatSettingsPermissionsUseMassMentions`json:"use_mass_mentions,omitempty"`
}

type MessagesChatSettingsPhoto struct {
	// If provided photo is default call photo
	IsDefaultCallPhoto *bool `json:"is_default_call_photo,omitempty"`
	// If provided photo is default
	IsDefaultPhoto *bool `json:"is_default_photo,omitempty"`
	// URL of the preview image with 100px in width
	//  Format: uri
	Photo100 *string `json:"photo_100,omitempty"`
	// URL of the preview image with 200px in width
	//  Format: uri
	Photo200 *string `json:"photo_200,omitempty"`
	// URL of the preview image with 50px in width
	//  Format: uri
	Photo50 *string `json:"photo_50,omitempty"`
}

type MessagesChatSettingsState string

const (
	MessagesChatSettingsStateIn MessagesChatSettingsState = "in"
	MessagesChatSettingsStateKicked MessagesChatSettingsState = "kicked"
	MessagesChatSettingsStateLeft MessagesChatSettingsState = "left"
)

type MessagesConversationSpecialServiceType string

const (
	MessagesConversationSpecialServiceTypeBusinessNotify MessagesConversationSpecialServiceType = "business_notify"
)

type MessagesConversation struct {
	CanWrite *MessagesConversationCanWrite `json:"can_write,omitempty"`
	ChatSettings *MessagesChatSettings `json:"chat_settings,omitempty"`
	CurrentKeyboard *MessagesKeyboard `json:"current_keyboard,omitempty"`
	Important *bool `json:"important,omitempty"`
	// Last message user have read
	//  Minimum: 0
	InRead int `json:"in_read"`
	// Is this conversation uread
	IsMarkedUnread *bool `json:"is_marked_unread,omitempty"`
	// Conversation message ID of the last message in conversation
	//  Minimum: 0
	LastConversationMessageId *int `json:"last_conversation_message_id,omitempty"`
	// ID of the last message in conversation
	//  Minimum: 0
	LastMessageId int `json:"last_message_id"`
	// Ids of messages with mentions
	Mentions *[]int `json:"mentions,omitempty"`
	MessageRequestData *MessagesMessageRequestData `json:"message_request_data,omitempty"`
	// Last outcoming message have been read by the opponent
	//  Minimum: 0
	OutRead int `json:"out_read"`
	OutReadBy *MessagesOutReadBy `json:"out_read_by,omitempty"`
	Peer MessagesConversationPeer `json:"peer"`
	PushSettings *MessagesPushSettings `json:"push_settings,omitempty"`
	SortId *MessagesConversationSortId `json:"sort_id,omitempty"`
	SpecialServiceType *MessagesConversationSpecialServiceType`json:"special_service_type,omitempty"`
	Unanswered *bool `json:"unanswered,omitempty"`
	// Unread messages number
	//  Minimum: 0
	UnreadCount *int `json:"unread_count,omitempty"`
}

type MessagesConversationCanWrite struct {
	Allowed bool `json:"allowed"`
	Reason *int `json:"reason,omitempty"`
}

type MessagesConversationMember struct {
	// Is it possible for user to kick this member
	CanKick *bool `json:"can_kick,omitempty"`
	//  Format: int64
	InvitedBy *int `json:"invited_by,omitempty"`
	IsAdmin *bool `json:"is_admin,omitempty"`
	IsMessageRequest *bool `json:"is_message_request,omitempty"`
	IsOwner *bool `json:"is_owner,omitempty"`
	//  Minimum: 0
	JoinDate *int `json:"join_date,omitempty"`
	//  Format: int64
	MemberId int `json:"member_id"`
	// Message request date
	//  Minimum: 0
	RequestDate *int `json:"request_date,omitempty"`
}

type MessagesConversationPeer struct {
	Id int `json:"id"`
	LocalId *int `json:"local_id,omitempty"`
	Type MessagesConversationPeerType `json:"type"`
}

// MessagesConversationPeerType Peer type
type MessagesConversationPeerType string

const (
	MessagesConversationPeerTypeChat MessagesConversationPeerType = "chat"
	MessagesConversationPeerTypeEmail MessagesConversationPeerType = "email"
	MessagesConversationPeerTypeUser MessagesConversationPeerType = "user"
	MessagesConversationPeerTypeGroup MessagesConversationPeerType = "group"
)

type MessagesConversationSortId struct {
	// Major id for sorting conversations
	//  Minimum: 0
	MajorId int `json:"major_id"`
	// Minor id for sorting conversations
	//  Minimum: 0
	MinorId int `json:"minor_id"`
}

type MessagesConversationWithMessage struct {
	Conversation MessagesConversation `json:"conversation"`
	LastMessage *MessagesMessage `json:"last_message,omitempty"`
}

type MessagesForeignMessage struct {
	Attachments *[]MessagesMessageAttachment `json:"attachments,omitempty"`
	// Conversation message ID
	ConversationMessageId *int `json:"conversation_message_id,omitempty"`
	// Date when the message was created
	Date int `json:"date"`
	// Message author's ID
	//  Format: int64
	FromId int `json:"from_id"`
	FwdMessages *[]MessagesForeignMessage `json:"fwd_messages,omitempty"`
	Geo *BaseGeo `json:"geo,omitempty"`
	// Message ID
	Id *int `json:"id,omitempty"`
	// Additional data sent along with message for developer convenience
	Payload *string `json:"payload,omitempty"`
	// Peer ID
	PeerId *int `json:"peer_id,omitempty"`
	ReplyMessage *MessagesForeignMessage `json:"reply_message,omitempty"`
	// Message text
	Text string `json:"text"`
	// Date when the message has been updated in Unixtime
	UpdateTime *int `json:"update_time,omitempty"`
	// Was the audio message inside already listened by you
	WasListened *bool `json:"was_listened,omitempty"`
}

type MessagesForward struct {
	ConversationMessageIds *[]int `json:"conversation_message_ids,omitempty"`
	// If you need to reply to a message
	IsReply *bool `json:"is_reply,omitempty"`
	MessageIds *[]int `json:"message_ids,omitempty"`
	// Messages owner_id
	//  Format: int64
	OwnerId *int `json:"owner_id,omitempty"`
	// Messages peer_id
	PeerId *int `json:"peer_id,omitempty"`
}

type MessagesGetConversationById struct {
	// Total number
	//  Minimum: 0
	Count int `json:"count"`
	Items []MessagesConversation `json:"items"`
}

type MessagesGetConversationByIdExtended struct {
	MessagesGetConversationById
	Groups *[]GroupsGroupFull `json:"groups,omitempty"`
	Profiles *[]UsersUserFull `json:"profiles,omitempty"`
}

type MessagesGetConversationMembers struct {
	ChatRestrictions *MessagesChatRestrictions `json:"chat_restrictions,omitempty"`
	// Chat members count
	//  Minimum: 0
	Count int `json:"count"`
	Groups *[]GroupsGroupFull `json:"groups,omitempty"`
	Items []MessagesConversationMember `json:"items"`
	Profiles *[]UsersUserFull `json:"profiles,omitempty"`
}

type MessagesGraffiti struct {
	// Access key for graffiti
	AccessKey *string `json:"access_key,omitempty"`
	// Graffiti height
	//  Minimum: 0
	Height int `json:"height"`
	// Graffiti ID
	//  Minimum: 0
	Id int `json:"id"`
	// Graffiti owner ID
	//  Format: int64
	OwnerId int `json:"owner_id"`
	// Graffiti URL
	//  Format: uri
	Url string `json:"url"`
	// Graffiti width
	//  Minimum: 0
	Width int `json:"width"`
}

type MessagesHistoryAttachment struct {
	Attachment MessagesHistoryMessageAttachment `json:"attachment"`
	// Forward level (optional)
	ForwardLevel *int `json:"forward_level,omitempty"`
	// Message author's ID
	//  Format: int64
	FromId int `json:"from_id"`
	// Message ID
	MessageId int `json:"message_id"`
	WasListened *bool `json:"was_listened,omitempty"`
}

type MessagesHistoryMessageAttachment struct {
	Audio *AudioAudio `json:"audio,omitempty"`
	AudioMessage *MessagesAudioMessage `json:"audio_message,omitempty"`
	Doc *DocsDoc `json:"doc,omitempty"`
	Graffiti *MessagesGraffiti `json:"graffiti,omitempty"`
	Link *BaseLink `json:"link,omitempty"`
	Market *MarketMarketItem `json:"market,omitempty"`
	Photo *PhotosPhoto `json:"photo,omitempty"`
	Type MessagesHistoryMessageAttachmentType `json:"type"`
	Video *VideoVideo `json:"video,omitempty"`
	Wall *WallWallpostFull `json:"wall,omitempty"`
}

// MessagesHistoryMessageAttachmentType Attachments type
type MessagesHistoryMessageAttachmentType string

const (
	MessagesHistoryMessageAttachmentTypePhoto MessagesHistoryMessageAttachmentType = "photo"
	MessagesHistoryMessageAttachmentTypeVideo MessagesHistoryMessageAttachmentType = "video"
	MessagesHistoryMessageAttachmentTypeAudio MessagesHistoryMessageAttachmentType = "audio"
	MessagesHistoryMessageAttachmentTypeDoc MessagesHistoryMessageAttachmentType = "doc"
	MessagesHistoryMessageAttachmentTypeLink MessagesHistoryMessageAttachmentType = "link"
	MessagesHistoryMessageAttachmentTypeMarket MessagesHistoryMessageAttachmentType = "market"
	MessagesHistoryMessageAttachmentTypeWall MessagesHistoryMessageAttachmentType = "wall"
	MessagesHistoryMessageAttachmentTypeShare MessagesHistoryMessageAttachmentType = "share"
	MessagesHistoryMessageAttachmentTypeGraffiti MessagesHistoryMessageAttachmentType = "graffiti"
	MessagesHistoryMessageAttachmentTypeAudioMessage MessagesHistoryMessageAttachmentType = "audio_message"
)

type MessagesKeyboard struct {
	// Community or bot, which set this keyboard
	//  Format: int64
	AuthorId *int `json:"author_id,omitempty"`
	Buttons [][]MessagesKeyboardButton `json:"buttons"`
	Inline *bool `json:"inline,omitempty"`
	// Should this keyboard disappear on first use
	OneTime bool `json:"one_time"`
}

type MessagesKeyboardButtonColor string

const (
	MessagesKeyboardButtonColorDefault MessagesKeyboardButtonColor = "default"
	MessagesKeyboardButtonColorPositive MessagesKeyboardButtonColor = "positive"
	MessagesKeyboardButtonColorNegative MessagesKeyboardButtonColor = "negative"
	MessagesKeyboardButtonColorPrimary MessagesKeyboardButtonColor = "primary"
)

type MessagesKeyboardButton struct {
	Action MessagesKeyboardButtonPropertyAction `json:"action"`
	// Button color
	Color *MessagesKeyboardButtonColor`json:"color,omitempty"`
}

type MessagesKeyboardButtonActionCallbackType string

const (
	MessagesKeyboardButtonActionCallbackTypeCallback MessagesKeyboardButtonActionCallbackType = "callback"
)

// MessagesKeyboardButtonActionCallback Description of the action, that should be performed on button click
type MessagesKeyboardButtonActionCallback struct {
	// Label for button
	Label string `json:"label"`
	// Additional data sent along with message for developer convenience
	Payload *string `json:"payload,omitempty"`
	Type MessagesKeyboardButtonActionCallbackType`json:"type"`
}

type MessagesKeyboardButtonActionLocationType string

const (
	MessagesKeyboardButtonActionLocationTypeLocation MessagesKeyboardButtonActionLocationType = "location"
)

// MessagesKeyboardButtonActionLocation Description of the action, that should be performed on button click
type MessagesKeyboardButtonActionLocation struct {
	// Additional data sent along with message for developer convenience
	Payload *string `json:"payload,omitempty"`
	Type MessagesKeyboardButtonActionLocationType`json:"type"`
}

type MessagesKeyboardButtonActionOpenAppType string

const (
	MessagesKeyboardButtonActionOpenAppTypeOpenApp MessagesKeyboardButtonActionOpenAppType = "open_app"
)

// MessagesKeyboardButtonActionOpenApp Description of the action, that should be performed on button click
type MessagesKeyboardButtonActionOpenApp struct {
	// Fragment value in app link like vk.com/app{app_id}_-654321#hash
	AppId int `json:"app_id"`
	// Fragment value in app link like vk.com/app123456_-654321#{hash}
	Hash *string `json:"hash,omitempty"`
	// Label for button
	Label string `json:"label"`
	// Fragment value in app link like vk.com/app123456_{owner_id}#hash
	//  Format: int64
	OwnerId int `json:"owner_id"`
	// Additional data sent along with message for developer convenience
	Payload *string `json:"payload,omitempty"`
	Type MessagesKeyboardButtonActionOpenAppType`json:"type"`
}

type MessagesKeyboardButtonActionOpenLinkType string

const (
	MessagesKeyboardButtonActionOpenLinkTypeOpenLink MessagesKeyboardButtonActionOpenLinkType = "open_link"
)

// MessagesKeyboardButtonActionOpenLink Description of the action, that should be performed on button click
type MessagesKeyboardButtonActionOpenLink struct {
	// Label for button
	Label string `json:"label"`
	// link for button
	Link string `json:"link"`
	// Additional data sent along with message for developer convenience
	Payload *string `json:"payload,omitempty"`
	Type MessagesKeyboardButtonActionOpenLinkType`json:"type"`
}

type MessagesKeyboardButtonActionOpenPhotoType string

const (
	MessagesKeyboardButtonActionOpenPhotoTypeOpenPhoto MessagesKeyboardButtonActionOpenPhotoType = "open_photo"
)

// MessagesKeyboardButtonActionOpenPhoto Description of the action, that should be performed on button click
type MessagesKeyboardButtonActionOpenPhoto struct {
	Type MessagesKeyboardButtonActionOpenPhotoType`json:"type"`
}

type MessagesKeyboardButtonActionTextType string

const (
	MessagesKeyboardButtonActionTextTypeText MessagesKeyboardButtonActionTextType = "text"
)

// MessagesKeyboardButtonActionText Description of the action, that should be performed on button click
type MessagesKeyboardButtonActionText struct {
	// Label for button
	Label string `json:"label"`
	// Additional data sent along with message for developer convenience
	Payload *string `json:"payload,omitempty"`
	Type MessagesKeyboardButtonActionTextType`json:"type"`
}

type MessagesKeyboardButtonActionVkpayType string

const (
	MessagesKeyboardButtonActionVkpayTypeVkpay MessagesKeyboardButtonActionVkpayType = "vkpay"
)

// MessagesKeyboardButtonActionVkpay Description of the action, that should be performed on button click
type MessagesKeyboardButtonActionVkpay struct {
	// Fragment value in app link like vk.com/app123456_-654321#{hash}
	Hash string `json:"hash"`
	// Additional data sent along with message for developer convenience
	Payload *string `json:"payload,omitempty"`
	Type MessagesKeyboardButtonActionVkpayType`json:"type"`
}

//easyjson:skip
type MessagesKeyboardButtonPropertyAction struct{
	Raws []byte
}

func (o *MessagesKeyboardButtonPropertyAction) MarshalJSON() ([]byte, error) {
	return o.Raws, nil
}

func (o *MessagesKeyboardButtonPropertyAction) UnmarshalJSON(body []byte) (err error) {
	o.Raws = body
	return nil
}

func (o MessagesKeyboardButtonPropertyAction) Raw() []byte {
	return o.Raws
}

type MessagesLastActivity struct {
	// Information whether user is online
	Online BaseBoolInt `json:"online"`
	// Time when user was online in Unixtime
	Time int `json:"time"`
}

type MessagesLongpollMessages struct {
	// Total number
	//  Minimum: 0
	Count *int `json:"count,omitempty"`
	Items *[]MessagesMessage `json:"items,omitempty"`
}

type MessagesLongpollParams struct {
	// Key
	Key string `json:"key"`
	// Persistent timestamp
	Pts *int `json:"pts,omitempty"`
	// Server URL
	Server string `json:"server"`
	// Timestamp
	Ts int `json:"ts"`
}

type MessagesMessage struct {
	Action *MessagesMessageAction `json:"action,omitempty"`
	// Only for messages from community. Contains user ID of community admin, who sent this message.
	//  Format: int64
	AdminAuthorId *int `json:"admin_author_id,omitempty"`
	Attachments *[]MessagesMessageAttachment `json:"attachments,omitempty"`
	// Unique auto-incremented number for all messages with this peer
	ConversationMessageId *int `json:"conversation_message_id,omitempty"`
	// Date when the message has been sent in Unixtime
	Date int `json:"date"`
	// Is it an deleted message
	Deleted *BaseBoolInt `json:"deleted,omitempty"`
	// Message author's ID
	//  Format: int64
	FromId int `json:"from_id"`
	// Forwarded messages
	FwdMessages *[]MessagesForeignMessage `json:"fwd_messages,omitempty"`
	Geo *BaseGeo `json:"geo,omitempty"`
	// Message ID
	Id int `json:"id"`
	// Is it an important message
	Important *bool `json:"important,omitempty"`
	// this message is cropped for bot
	IsCropped *bool `json:"is_cropped,omitempty"`
	IsHidden *bool `json:"is_hidden,omitempty"`
	// Is silent message, push without sound
	IsSilent *bool `json:"is_silent,omitempty"`
	Keyboard *MessagesKeyboard `json:"keyboard,omitempty"`
	// Members number
	MembersCount *int `json:"members_count,omitempty"`
	// Information whether the message is outcoming
	Out BaseBoolInt `json:"out"`
	Payload *string `json:"payload,omitempty"`
	// Peer ID
	PeerId int `json:"peer_id"`
	// Date when the message has been pinned in Unixtime
	PinnedAt *int `json:"pinned_at,omitempty"`
	// ID used for sending messages. It returned only for outgoing messages
	RandomId *int `json:"random_id,omitempty"`
	Ref *string `json:"ref,omitempty"`
	RefSource *string `json:"ref_source,omitempty"`
	ReplyMessage *MessagesForeignMessage `json:"reply_message,omitempty"`
	// Message text
	Text string `json:"text"`
	// Date when the message has been updated in Unixtime
	UpdateTime *int `json:"update_time,omitempty"`
	// Was the audio message inside already listened by you
	WasListened *bool `json:"was_listened,omitempty"`
}

type MessagesMessageAction struct {
	// Message ID
	ConversationMessageId *int `json:"conversation_message_id,omitempty"`
	// Email address for chat_invite_user or chat_kick_user actions
	Email *string `json:"email,omitempty"`
	// User or email peer ID
	//  Format: int64
	MemberId *int `json:"member_id,omitempty"`
	// Message body of related message
	Message *string `json:"message,omitempty"`
	Photo *MessagesMessageActionPhoto `json:"photo,omitempty"`
	// New chat title for chat_create and chat_title_update actions
	Text *string `json:"text,omitempty"`
	Type MessagesMessageActionStatus `json:"type"`
}

type MessagesMessageActionPhoto struct {
	// URL of the preview image with 100px in width
	//  Format: uri
	Photo100 string `json:"photo_100"`
	// URL of the preview image with 200px in width
	//  Format: uri
	Photo200 string `json:"photo_200"`
	// URL of the preview image with 50px in width
	//  Format: uri
	Photo50 string `json:"photo_50"`
}

// MessagesMessageActionStatus Action status
type MessagesMessageActionStatus string

const (
	MessagesMessageActionStatusChatPhotoUpdate MessagesMessageActionStatus = "chat_photo_update"
	MessagesMessageActionStatusChatPhotoRemove MessagesMessageActionStatus = "chat_photo_remove"
	MessagesMessageActionStatusChatCreate MessagesMessageActionStatus = "chat_create"
	MessagesMessageActionStatusChatTitleUpdate MessagesMessageActionStatus = "chat_title_update"
	MessagesMessageActionStatusChatInviteUser MessagesMessageActionStatus = "chat_invite_user"
	MessagesMessageActionStatusChatKickUser MessagesMessageActionStatus = "chat_kick_user"
	MessagesMessageActionStatusChatPinMessage MessagesMessageActionStatus = "chat_pin_message"
	MessagesMessageActionStatusChatUnpinMessage MessagesMessageActionStatus = "chat_unpin_message"
	MessagesMessageActionStatusChatInviteUserByLink MessagesMessageActionStatus = "chat_invite_user_by_link"
	MessagesMessageActionStatusChatInviteUserByMessageRequest MessagesMessageActionStatus = "chat_invite_user_by_message_request"
	MessagesMessageActionStatusChatScreenshot MessagesMessageActionStatus = "chat_screenshot"
)

type MessagesMessageAttachment struct {
	Audio *AudioAudio `json:"audio,omitempty"`
	AudioMessage *MessagesAudioMessage `json:"audio_message,omitempty"`
	Call *CallsCall `json:"call,omitempty"`
	Doc *DocsDoc `json:"doc,omitempty"`
	Gift *GiftsLayout `json:"gift,omitempty"`
	Graffiti *MessagesGraffiti `json:"graffiti,omitempty"`
	Market *MarketMarketItem `json:"market,omitempty"`
	MarketMarketAlbum *MarketMarketAlbum `json:"market_market_album,omitempty"`
	Photo *PhotosPhoto `json:"photo,omitempty"`
	Poll *PollsPoll `json:"poll,omitempty"`
	Sticker *BaseSticker `json:"sticker,omitempty"`
	Story *StoriesStory `json:"story,omitempty"`
	Type MessagesMessageAttachmentType `json:"type"`
	Video *VideoVideoFull `json:"video,omitempty"`
	WallReply *WallWallComment `json:"wall_reply,omitempty"`
}

// MessagesMessageAttachmentType Attachment type
type MessagesMessageAttachmentType string

const (
	MessagesMessageAttachmentTypePhoto MessagesMessageAttachmentType = "photo"
	MessagesMessageAttachmentTypeAudio MessagesMessageAttachmentType = "audio"
	MessagesMessageAttachmentTypeVideo MessagesMessageAttachmentType = "video"
	MessagesMessageAttachmentTypeDoc MessagesMessageAttachmentType = "doc"
	MessagesMessageAttachmentTypeLink MessagesMessageAttachmentType = "link"
	MessagesMessageAttachmentTypeMarket MessagesMessageAttachmentType = "market"
	MessagesMessageAttachmentTypeMarketAlbum MessagesMessageAttachmentType = "market_album"
	MessagesMessageAttachmentTypeGift MessagesMessageAttachmentType = "gift"
	MessagesMessageAttachmentTypeSticker MessagesMessageAttachmentType = "sticker"
	MessagesMessageAttachmentTypeWall MessagesMessageAttachmentType = "wall"
	MessagesMessageAttachmentTypeWallReply MessagesMessageAttachmentType = "wall_reply"
	MessagesMessageAttachmentTypeArticle MessagesMessageAttachmentType = "article"
	MessagesMessageAttachmentTypePoll MessagesMessageAttachmentType = "poll"
	MessagesMessageAttachmentTypeCall MessagesMessageAttachmentType = "call"
	MessagesMessageAttachmentTypeGraffiti MessagesMessageAttachmentType = "graffiti"
	MessagesMessageAttachmentTypeAudioMessage MessagesMessageAttachmentType = "audio_message"
)

type MessagesMessageRequestData struct {
	// Message request sender id
	//  Format: int64
	InviterId *int `json:"inviter_id,omitempty"`
	// Message request date
	RequestDate *int `json:"request_date,omitempty"`
	// Status of message request
	Status *string `json:"status,omitempty"`
}

type MessagesMessagesArray struct {
	//  Minimum: 0
	Count *int `json:"count,omitempty"`
	Items *[]MessagesMessage `json:"items,omitempty"`
}

type MessagesOutReadBy struct {
	//  Minimum: 0
	Count *int `json:"count,omitempty"`
	//  Format: int64
	MemberIds *[]int `json:"member_ids,omitempty"`
}

type MessagesPinnedMessage struct {
	Attachments *[]MessagesMessageAttachment `json:"attachments,omitempty"`
	// Unique auto-incremented number for all messages with this peer
	ConversationMessageId *int `json:"conversation_message_id,omitempty"`
	// Date when the message has been sent in Unixtime
	Date int `json:"date"`
	// Message author's ID
	//  Format: int64
	FromId int `json:"from_id"`
	// Forwarded messages
	FwdMessages *[]MessagesForeignMessage `json:"fwd_messages,omitempty"`
	Geo *BaseGeo `json:"geo,omitempty"`
	// Message ID
	Id int `json:"id"`
	Keyboard *MessagesKeyboard `json:"keyboard,omitempty"`
	// Peer ID
	PeerId int `json:"peer_id"`
	ReplyMessage *MessagesForeignMessage `json:"reply_message,omitempty"`
	// Message text
	Text string `json:"text"`
}

type MessagesPushSettings struct {
	// Information whether push notifications are disabled forever
	DisabledForever bool `json:"disabled_forever"`
	// Information whether the mass mentions (like '@all', '@online') are disabled
	DisabledMassMentions *bool `json:"disabled_mass_mentions,omitempty"`
	// Information whether the mentions are disabled
	DisabledMentions *bool `json:"disabled_mentions,omitempty"`
	// Time until what notifications are disabled
	DisabledUntil *int `json:"disabled_until,omitempty"`
	// Information whether the sound is on
	NoSound bool `json:"no_sound"`
}

type MessagesSendUserIdsResponseItem struct {
	//  Minimum: 0
	ConversationMessageId *int `json:"conversation_message_id,omitempty"`
	Error *BaseMessageError `json:"error,omitempty"`
	//  Minimum: 0
	MessageId int `json:"message_id"`
	PeerId int `json:"peer_id"`
}

// MessagesTemplateActionTypeNames Template action type names
type MessagesTemplateActionTypeNames string

const (
	MessagesTemplateActionTypeNamesText MessagesTemplateActionTypeNames = "text"
	MessagesTemplateActionTypeNamesStart MessagesTemplateActionTypeNames = "start"
	MessagesTemplateActionTypeNamesLocation MessagesTemplateActionTypeNames = "location"
	MessagesTemplateActionTypeNamesVkpay MessagesTemplateActionTypeNames = "vkpay"
	MessagesTemplateActionTypeNamesOpenApp MessagesTemplateActionTypeNames = "open_app"
	MessagesTemplateActionTypeNamesOpenPhoto MessagesTemplateActionTypeNames = "open_photo"
	MessagesTemplateActionTypeNamesOpenLink MessagesTemplateActionTypeNames = "open_link"
	MessagesTemplateActionTypeNamesCallback MessagesTemplateActionTypeNames = "callback"
	MessagesTemplateActionTypeNamesIntentSubscribe MessagesTemplateActionTypeNames = "intent_subscribe"
	MessagesTemplateActionTypeNamesIntentUnsubscribe MessagesTemplateActionTypeNames = "intent_unsubscribe"
)

type MessagesUserXtrInvitedBy struct {
	UsersUserXtrType
	// ID of the inviter
	//  Format: int64
	InvitedBy *int `json:"invited_by,omitempty"`
}

type MessagesCreateChatResponse struct {
	// Chat ID
	Response int `json:"response"`
}

type MessagesDeleteChatPhotoResponse struct {
	Messages struct {
		Chat *MessagesChat `json:"chat,omitempty"`
		// Service message ID
		MessageId *int `json:"message_id,omitempty"`
	} `json:"messages"`
}

type MessagesDeleteConversationResponse struct {
	Messages struct {
		// Id of the last message, that was deleted
		//  Minimum: 0
		LastDeletedId int `json:"last_deleted_id"`
	} `json:"messages"`
}

type MessagesDeleteResponse struct {
	Messages map[string]BaseBoolInt `json:"messages"`
}

type MessagesEditResponse struct {
	// Result
	Response BaseBoolInt `json:"response"`
}

type MessagesGetByConversationMessageIdExtendedResponse struct {
	Messages struct {
		// Total number
		Count int `json:"count"`
		Groups *[]GroupsGroupFull `json:"groups,omitempty"`
		Items []MessagesMessage `json:"items"`
		Profiles *[]UsersUserFull `json:"profiles,omitempty"`
	} `json:"messages"`
}

type MessagesGetByConversationMessageIdResponse struct {
	Messages struct {
		// Total number
		Count int `json:"count"`
		Items []MessagesMessage `json:"items"`
	} `json:"messages"`
}

type MessagesGetByIdExtendedResponse struct {
	Messages struct {
		// Total number
		Count int `json:"count"`
		Groups *[]GroupsGroupFull `json:"groups,omitempty"`
		Items []MessagesMessage `json:"items"`
		Profiles []UsersUserFull `json:"profiles"`
	} `json:"messages"`
}

type MessagesGetByIdResponse struct {
	Messages struct {
		// Total number
		Count int `json:"count"`
		Items []MessagesMessage `json:"items"`
	} `json:"messages"`
}

type MessagesGetChatPreviewResponse struct {
	Messages struct {
		Groups *[]GroupsGroupFull `json:"groups,omitempty"`
		Preview *MessagesChatPreview `json:"preview,omitempty"`
		Profiles *[]UsersUserFull `json:"profiles,omitempty"`
	} `json:"messages"`
}

type MessagesGetChatChatIdsFieldsResponse struct {
	Response []MessagesChatFull `json:"response"`
}

type MessagesGetChatChatIdsResponse struct {
	Response []MessagesChat `json:"response"`
}

type MessagesGetChatFieldsResponse struct {
	Response MessagesChatFull `json:"response"`
}

type MessagesGetChatResponse struct {
	Response MessagesChat `json:"response"`
}

type MessagesGetConversationMembersResponse struct {
	Response MessagesGetConversationMembers `json:"response"`
}

type MessagesGetConversationsByIdExtendedResponse struct {
	Response MessagesGetConversationByIdExtended `json:"response"`
}

type MessagesGetConversationsByIdResponse struct {
	Response MessagesGetConversationById `json:"response"`
}

type MessagesGetConversationsResponse struct {
	Messages struct {
		// Total number
		Count int `json:"count"`
		Groups *[]GroupsGroupFull `json:"groups,omitempty"`
		Items []MessagesConversationWithMessage `json:"items"`
		Profiles *[]UsersUserFull `json:"profiles,omitempty"`
		// Unread dialogs number
		UnreadCount *int `json:"unread_count,omitempty"`
	} `json:"messages"`
}

type MessagesGetHistoryAttachmentsResponse struct {
	Messages struct {
		Groups *[]GroupsGroupFull `json:"groups,omitempty"`
		Items *[]MessagesHistoryAttachment `json:"items,omitempty"`
		// Value for pagination
		NextFrom *string `json:"next_from,omitempty"`
		Profiles *[]UsersUserFull `json:"profiles,omitempty"`
	} `json:"messages"`
}

type MessagesGetHistoryExtendedResponse struct {
	Messages struct {
		Conversations *[]MessagesConversation `json:"conversations,omitempty"`
		// Total number
		Count int `json:"count"`
		Groups *[]GroupsGroupFull `json:"groups,omitempty"`
		Items []MessagesMessage `json:"items"`
		Profiles *[]UsersUserFull `json:"profiles,omitempty"`
	} `json:"messages"`
}

type MessagesGetHistoryResponse struct {
	Messages struct {
		// Total number
		Count int `json:"count"`
		Items []MessagesMessage `json:"items"`
	} `json:"messages"`
}

type MessagesGetImportantMessagesExtendedResponse struct {
	Messages struct {
		Conversations *[]MessagesConversation `json:"conversations,omitempty"`
		Groups *[]GroupsGroupFull `json:"groups,omitempty"`
		Messages MessagesMessagesArray `json:"messages"`
		Profiles *[]UsersUserFull `json:"profiles,omitempty"`
	} `json:"messages"`
}

type MessagesGetImportantMessagesResponse struct {
	Messages struct {
		Conversations *[]MessagesConversation `json:"conversations,omitempty"`
		Groups *[]GroupsGroupFull `json:"groups,omitempty"`
		Messages MessagesMessagesArray `json:"messages"`
		Profiles *[]UsersUser `json:"profiles,omitempty"`
	} `json:"messages"`
}

type MessagesGetIntentUsersResponse struct {
	Messages struct {
		//  Minimum: 0
		Count int `json:"count"`
		//  Format: int64
		//  Minimum: 0
		Items []int `json:"items"`
		Profiles *[]UsersUserFull `json:"profiles,omitempty"`
	} `json:"messages"`
}

type MessagesGetInviteLinkResponse struct {
	Messages struct {
		Link *string `json:"link,omitempty"`
	} `json:"messages"`
}

type MessagesGetLastActivityResponse struct {
	Response MessagesLastActivity `json:"response"`
}

type MessagesGetLongPollHistoryResponse struct {
	Messages struct {
		Chats *[]MessagesChat `json:"chats,omitempty"`
		Conversations *[]MessagesConversation `json:"conversations,omitempty"`
		Credentials *MessagesLongpollParams `json:"credentials,omitempty"`
		FromPts *int `json:"from_pts,omitempty"`
		Groups *[]GroupsGroupFull `json:"groups,omitempty"`
		History *[][]int `json:"history,omitempty"`
		Messages *MessagesLongpollMessages `json:"messages,omitempty"`
		// Has more
		More *bool `json:"more,omitempty"`
		// Persistence timestamp
		NewPts *int `json:"new_pts,omitempty"`
		Profiles *[]UsersUserFull `json:"profiles,omitempty"`
	} `json:"messages"`
}

type MessagesGetLongPollServerResponse struct {
	Response MessagesLongpollParams `json:"response"`
}

type MessagesIsMessagesFromGroupAllowedResponse struct {
	Messages struct {
		IsAllowed *BaseBoolInt `json:"is_allowed,omitempty"`
	} `json:"messages"`
}

type MessagesJoinChatByInviteLinkResponse struct {
	Messages struct {
		ChatId *int `json:"chat_id,omitempty"`
	} `json:"messages"`
}

type MessagesMarkAsImportantResponse struct {
	Response []int `json:"response"`
}

type MessagesPinResponse struct {
	Response MessagesPinnedMessage `json:"response"`
}

type MessagesSearchConversationsExtendedResponse struct {
	Messages struct {
		// Total results number
		Count int `json:"count"`
		Groups *[]GroupsGroupFull `json:"groups,omitempty"`
		Items []MessagesConversation `json:"items"`
		Profiles *[]UsersUserFull `json:"profiles,omitempty"`
	} `json:"messages"`
}

type MessagesSearchConversationsResponse struct {
	Messages struct {
		// Total results number
		Count int `json:"count"`
		Items []MessagesConversation `json:"items"`
	} `json:"messages"`
}

type MessagesSearchExtendedResponse struct {
	Messages struct {
		Conversations *[]MessagesConversation `json:"conversations,omitempty"`
		// Total number
		Count int `json:"count"`
		Groups *[]GroupsGroupFull `json:"groups,omitempty"`
		Items []MessagesMessage `json:"items"`
		Profiles *[]UsersUserFull `json:"profiles,omitempty"`
	} `json:"messages"`
}

type MessagesSearchResponse struct {
	Messages struct {
		// Total number
		Count int `json:"count"`
		Items []MessagesMessage `json:"items"`
	} `json:"messages"`
}

type MessagesSendResponse struct {
	// Message ID
	Response int `json:"response"`
}

type MessagesSendUserIdsResponse struct {
	Response []MessagesSendUserIdsResponseItem `json:"response"`
}

type MessagesSetChatPhotoResponse struct {
	Messages struct {
		Chat *MessagesChat `json:"chat,omitempty"`
		// Service message ID
		MessageId *int `json:"message_id,omitempty"`
	} `json:"messages"`
}

