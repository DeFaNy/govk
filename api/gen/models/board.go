// Code generated by https://github.com/defany/govk. DO NOT EDIT.

package models

import (
	"encoding/json"
)

// suppress unused package warning
var _ *json.RawMessage

// BoardDefaultOrder Sort type
type BoardDefaultOrder int

const (
	BoardDefaultOrderDescUpdated BoardDefaultOrder = 1
	BoardDefaultOrderDescCreated BoardDefaultOrder = 2
	BoardDefaultOrderAscUpdated BoardDefaultOrder = -1
	BoardDefaultOrderAscCreated BoardDefaultOrder = -2
)

type BoardTopic struct {
	// Comments number
	Comments *int `json:"comments,omitempty"`
	// Date when the topic has been created in Unixtime
	Created *int `json:"created,omitempty"`
	// Creator ID
	CreatedBy *int `json:"created_by,omitempty"`
	// First comment text
	FirstComment *string `json:"first_comment,omitempty"`
	// Topic ID
	Id *int `json:"id,omitempty"`
	// Information whether the topic is closed
	IsClosed *BaseBoolInt `json:"is_closed,omitempty"`
	// Information whether the topic is fixed
	IsFixed *BaseBoolInt `json:"is_fixed,omitempty"`
	// Last comment text
	LastComment *string `json:"last_comment,omitempty"`
	// Topic title
	Title *string `json:"title,omitempty"`
	// Date when the topic has been updated in Unixtime
	Updated *int `json:"updated,omitempty"`
	// ID of user who updated the topic
	UpdatedBy *int `json:"updated_by,omitempty"`
}

type BoardTopicComment struct {
	Attachments *[]WallCommentAttachment `json:"attachments,omitempty"`
	// Information whether current user can edit the comment
	CanEdit *BaseBoolInt `json:"can_edit,omitempty"`
	// Date when the comment has been added in Unixtime
	//  Minimum: 0
	Date int `json:"date"`
	// Author ID
	FromId int `json:"from_id"`
	// Comment ID
	//  Minimum: 1
	Id int `json:"id"`
	Likes *BaseLikesInfo `json:"likes,omitempty"`
	// Real position of the comment
	RealOffset *int `json:"real_offset,omitempty"`
	// Comment text
	Text string `json:"text"`
}

type BoardAddTopicResponse struct {
	// Topic ID
	Response int `json:"response"`
}

type BoardCreateCommentResponse struct {
	// Comment ID
	Response int `json:"response"`
}

type BoardGetCommentsExtendedResponse struct {
	Board struct {
		// Total number
		Count int `json:"count"`
		Groups []GroupsGroupFull `json:"groups"`
		Items []BoardTopicComment `json:"items"`
		Poll *PollsPoll `json:"poll,omitempty"`
		Profiles []UsersUserFull `json:"profiles"`
		// Offset of comment
		RealOffset *int `json:"real_offset,omitempty"`
	} `json:"board"`
}

type BoardGetCommentsResponse struct {
	Board struct {
		// Total number
		Count int `json:"count"`
		Items []BoardTopicComment `json:"items"`
		Poll *PollsPoll `json:"poll,omitempty"`
		// Offset of comment
		RealOffset *int `json:"real_offset,omitempty"`
	} `json:"board"`
}

type BoardGetTopicsExtendedResponse struct {
	Board struct {
		// Information whether current user can add topic
		CanAddTopics BaseBoolInt `json:"can_add_topics"`
		// Total number
		Count int `json:"count"`
		DefaultOrder BoardDefaultOrder `json:"default_order"`
		Groups []GroupsGroupFull `json:"groups"`
		Items []BoardTopic `json:"items"`
		Profiles []UsersUserFull `json:"profiles"`
	} `json:"board"`
}

type BoardGetTopicsResponse struct {
	Board struct {
		// Information whether current user can add topic
		CanAddTopics BaseBoolInt `json:"can_add_topics"`
		// Total number
		Count int `json:"count"`
		DefaultOrder BoardDefaultOrder `json:"default_order"`
		Items []BoardTopic `json:"items"`
	} `json:"board"`
}

