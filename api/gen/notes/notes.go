// Code generated by https://github.com/defany/govk. DO NOT EDIT.

package requests

import (
	"github.com/defany/govk/api"
	"github.com/defany/govk/api/gen/models"
)

type Notes struct {
	api *api.API
}

func NewNotes(api *api.API) *Notes {
	return &Notes{
		api: api,
	}
}

// NotesAdd Creates a new note for the current user.
type NotesAddRequest api.Params

func NewNotesAddRequest() NotesAddRequest {
	params := make(NotesAddRequest, 5)
	return params
}

func (n NotesAddRequest) WithTitle(n_title string) NotesAddRequest {
	n["title"] = n_title
	return n
}

func (n NotesAddRequest) WithText(n_text string) NotesAddRequest {
	n["text"] = n_text
	return n
}

func (n NotesAddRequest) WithPrivacyView(n_privacy_view []string) NotesAddRequest {
	n["privacy_view"] = n_privacy_view
	return n
}

func (n NotesAddRequest) WithPrivacyComment(n_privacy_comment []string) NotesAddRequest {
	n["privacy_comment"] = n_privacy_comment
	return n
}

func (n NotesAddRequest) Params() api.Params {
	return api.Params(n)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/notes.add
func (n *Notes) NotesAdd(params ...api.MethodParams) (resp models.NotesAddResponse, err error) {
	req := api.NewRequest[models.NotesAddResponse](n.api)

	res, err := req.Execute("notes.add", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// NotesCreateComment Adds a new comment on a note.
type NotesCreateCommentRequest api.Params

func NewNotesCreateCommentRequest() NotesCreateCommentRequest {
	params := make(NotesCreateCommentRequest, 6)
	return params
}

func (n NotesCreateCommentRequest) WithNoteId(n_note_id int) NotesCreateCommentRequest {
	n["note_id"] = n_note_id
	return n
}

func (n NotesCreateCommentRequest) WithOwnerId(n_owner_id int) NotesCreateCommentRequest {
	n["owner_id"] = n_owner_id
	return n
}

func (n NotesCreateCommentRequest) WithReplyTo(n_reply_to int) NotesCreateCommentRequest {
	n["reply_to"] = n_reply_to
	return n
}

func (n NotesCreateCommentRequest) WithMessage(n_message string) NotesCreateCommentRequest {
	n["message"] = n_message
	return n
}

func (n NotesCreateCommentRequest) WithGuid(n_guid string) NotesCreateCommentRequest {
	n["guid"] = n_guid
	return n
}

func (n NotesCreateCommentRequest) Params() api.Params {
	return api.Params(n)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_AccessNote, Error_AccessNoteComment ]
//
// https://dev.vk.com/method/notes.createComment
func (n *Notes) NotesCreateComment(params ...api.MethodParams) (resp models.NotesCreateCommentResponse, err error) {
	req := api.NewRequest[models.NotesCreateCommentResponse](n.api)

	res, err := req.Execute("notes.createComment", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// NotesDelete Deletes a note of the current user.
type NotesDeleteRequest api.Params

func NewNotesDeleteRequest() NotesDeleteRequest {
	params := make(NotesDeleteRequest, 2)
	return params
}

func (n NotesDeleteRequest) WithNoteId(n_note_id int) NotesDeleteRequest {
	n["note_id"] = n_note_id
	return n
}

func (n NotesDeleteRequest) Params() api.Params {
	return api.Params(n)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_ParamNoteId ]
//
// https://dev.vk.com/method/notes.delete
func (n *Notes) NotesDelete(params ...api.MethodParams) (resp models.BaseOkResponse, err error) {
	req := api.NewRequest[models.BaseOkResponse](n.api)

	res, err := req.Execute("notes.delete", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// NotesDeleteComment Deletes a comment on a note.
type NotesDeleteCommentRequest api.Params

func NewNotesDeleteCommentRequest() NotesDeleteCommentRequest {
	params := make(NotesDeleteCommentRequest, 3)
	return params
}

func (n NotesDeleteCommentRequest) WithCommentId(n_comment_id int) NotesDeleteCommentRequest {
	n["comment_id"] = n_comment_id
	return n
}

func (n NotesDeleteCommentRequest) WithOwnerId(n_owner_id int) NotesDeleteCommentRequest {
	n["owner_id"] = n_owner_id
	return n
}

func (n NotesDeleteCommentRequest) Params() api.Params {
	return api.Params(n)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_AccessNote, Error_AccessComment ]
//
// https://dev.vk.com/method/notes.deleteComment
func (n *Notes) NotesDeleteComment(params ...api.MethodParams) (resp models.BaseOkResponse, err error) {
	req := api.NewRequest[models.BaseOkResponse](n.api)

	res, err := req.Execute("notes.deleteComment", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// NotesEdit Edits a note of the current user.
type NotesEditRequest api.Params

func NewNotesEditRequest() NotesEditRequest {
	params := make(NotesEditRequest, 6)
	return params
}

func (n NotesEditRequest) WithNoteId(n_note_id int) NotesEditRequest {
	n["note_id"] = n_note_id
	return n
}

func (n NotesEditRequest) WithTitle(n_title string) NotesEditRequest {
	n["title"] = n_title
	return n
}

func (n NotesEditRequest) WithText(n_text string) NotesEditRequest {
	n["text"] = n_text
	return n
}

func (n NotesEditRequest) WithPrivacyView(n_privacy_view []string) NotesEditRequest {
	n["privacy_view"] = n_privacy_view
	return n
}

func (n NotesEditRequest) WithPrivacyComment(n_privacy_comment []string) NotesEditRequest {
	n["privacy_comment"] = n_privacy_comment
	return n
}

func (n NotesEditRequest) Params() api.Params {
	return api.Params(n)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_ParamNoteId ]
//
// https://dev.vk.com/method/notes.edit
func (n *Notes) NotesEdit(params ...api.MethodParams) (resp models.BaseOkResponse, err error) {
	req := api.NewRequest[models.BaseOkResponse](n.api)

	res, err := req.Execute("notes.edit", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// NotesEditComment Edits a comment on a note.
type NotesEditCommentRequest api.Params

func NewNotesEditCommentRequest() NotesEditCommentRequest {
	params := make(NotesEditCommentRequest, 4)
	return params
}

func (n NotesEditCommentRequest) WithCommentId(n_comment_id int) NotesEditCommentRequest {
	n["comment_id"] = n_comment_id
	return n
}

func (n NotesEditCommentRequest) WithOwnerId(n_owner_id int) NotesEditCommentRequest {
	n["owner_id"] = n_owner_id
	return n
}

func (n NotesEditCommentRequest) WithMessage(n_message string) NotesEditCommentRequest {
	n["message"] = n_message
	return n
}

func (n NotesEditCommentRequest) Params() api.Params {
	return api.Params(n)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_AccessComment ]
//
// https://dev.vk.com/method/notes.editComment
func (n *Notes) NotesEditComment(params ...api.MethodParams) (resp models.BaseOkResponse, err error) {
	req := api.NewRequest[models.BaseOkResponse](n.api)

	res, err := req.Execute("notes.editComment", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// NotesGet Returns a list of notes created by a user.
type NotesGetRequest api.Params

func NewNotesGetRequest() NotesGetRequest {
	params := make(NotesGetRequest, 6)
	return params
}

func (n NotesGetRequest) WithNoteIds(n_note_ids []int) NotesGetRequest {
	n["note_ids"] = n_note_ids
	return n
}

func (n NotesGetRequest) WithUserId(n_user_id int) NotesGetRequest {
	n["user_id"] = n_user_id
	return n
}

func (n NotesGetRequest) WithOffset(n_offset int) NotesGetRequest {
	n["offset"] = n_offset
	return n
}

func (n NotesGetRequest) WithCount(n_count int) NotesGetRequest {
	n["count"] = n_count
	return n
}

func (n NotesGetRequest) WithSort(n_sort int) NotesGetRequest {
	n["sort"] = n_sort
	return n
}

func (n NotesGetRequest) Params() api.Params {
	return api.Params(n)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_ParamNoteId ]
//
// https://dev.vk.com/method/notes.get
func (n *Notes) NotesGet(params ...api.MethodParams) (resp models.NotesGetResponse, err error) {
	req := api.NewRequest[models.NotesGetResponse](n.api)

	res, err := req.Execute("notes.get", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// NotesGetById Returns a note by its ID.
type NotesGetByIdRequest api.Params

func NewNotesGetByIdRequest() NotesGetByIdRequest {
	params := make(NotesGetByIdRequest, 4)
	return params
}

func (n NotesGetByIdRequest) WithNoteId(n_note_id int) NotesGetByIdRequest {
	n["note_id"] = n_note_id
	return n
}

func (n NotesGetByIdRequest) WithOwnerId(n_owner_id int) NotesGetByIdRequest {
	n["owner_id"] = n_owner_id
	return n
}

func (n NotesGetByIdRequest) WithNeedWiki(n_need_wiki bool) NotesGetByIdRequest {
	n["need_wiki"] = n_need_wiki
	return n
}

func (n NotesGetByIdRequest) Params() api.Params {
	return api.Params(n)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_AccessNote, Error_ParamNoteId ]
//
// https://dev.vk.com/method/notes.getById
func (n *Notes) NotesGetById(params ...api.MethodParams) (resp models.NotesGetByIdResponse, err error) {
	req := api.NewRequest[models.NotesGetByIdResponse](n.api)

	res, err := req.Execute("notes.getById", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// NotesGetComments Returns a list of comments on a note.
type NotesGetCommentsRequest api.Params

func NewNotesGetCommentsRequest() NotesGetCommentsRequest {
	params := make(NotesGetCommentsRequest, 6)
	return params
}

func (n NotesGetCommentsRequest) WithNoteId(n_note_id int) NotesGetCommentsRequest {
	n["note_id"] = n_note_id
	return n
}

func (n NotesGetCommentsRequest) WithOwnerId(n_owner_id int) NotesGetCommentsRequest {
	n["owner_id"] = n_owner_id
	return n
}

func (n NotesGetCommentsRequest) WithSort(n_sort int) NotesGetCommentsRequest {
	n["sort"] = n_sort
	return n
}

func (n NotesGetCommentsRequest) WithOffset(n_offset int) NotesGetCommentsRequest {
	n["offset"] = n_offset
	return n
}

func (n NotesGetCommentsRequest) WithCount(n_count int) NotesGetCommentsRequest {
	n["count"] = n_count
	return n
}

func (n NotesGetCommentsRequest) Params() api.Params {
	return api.Params(n)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_AccessNote ]
//
// https://dev.vk.com/method/notes.getComments
func (n *Notes) NotesGetComments(params ...api.MethodParams) (resp models.NotesGetCommentsResponse, err error) {
	req := api.NewRequest[models.NotesGetCommentsResponse](n.api)

	res, err := req.Execute("notes.getComments", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// NotesRestoreComment Restores a deleted comment on a note.
type NotesRestoreCommentRequest api.Params

func NewNotesRestoreCommentRequest() NotesRestoreCommentRequest {
	params := make(NotesRestoreCommentRequest, 3)
	return params
}

func (n NotesRestoreCommentRequest) WithCommentId(n_comment_id int) NotesRestoreCommentRequest {
	n["comment_id"] = n_comment_id
	return n
}

func (n NotesRestoreCommentRequest) WithOwnerId(n_owner_id int) NotesRestoreCommentRequest {
	n["owner_id"] = n_owner_id
	return n
}

func (n NotesRestoreCommentRequest) Params() api.Params {
	return api.Params(n)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_AccessComment ]
//
// https://dev.vk.com/method/notes.restoreComment
func (n *Notes) NotesRestoreComment(params ...api.MethodParams) (resp models.BaseOkResponse, err error) {
	req := api.NewRequest[models.BaseOkResponse](n.api)

	res, err := req.Execute("notes.restoreComment", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}
