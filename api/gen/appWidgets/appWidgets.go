// Code generated by https://github.com/defany/govk. DO NOT EDIT.

package requests

import (
	"github.com/defany/govk/api"
	"github.com/defany/govk/api/gen/models"
)

type AppWidgets struct {
	api *api.API
}

func NewAppWidgets(api *api.API) *AppWidgets {
	return &AppWidgets{
		api: api,
	}
}

// AppWidgetsGetAppImageUploadServer Returns a URL for uploading a photo to the community collection for community app widgets
type AppWidgetsGetAppImageUploadServerRequest api.Params

func NewAppWidgetsGetAppImageUploadServerRequest() AppWidgetsGetAppImageUploadServerRequest {
	params := make(AppWidgetsGetAppImageUploadServerRequest, 2)
	return params
}

func (a AppWidgetsGetAppImageUploadServerRequest) WithImageType(a_image_type string) AppWidgetsGetAppImageUploadServerRequest {
	a["image_type"] = a_image_type
	return a
}

func (a AppWidgetsGetAppImageUploadServerRequest) Params() api.Params {
	return api.Params(a)
}

// May execute with listed access token types:
//
//	[ service ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/appWidgets.getAppImageUploadServer
func (a *AppWidgets) AppWidgetsGetAppImageUploadServer(params ...api.MethodParams) (resp models.AppWidgetsGetAppImageUploadServerResponse, err error) {
	req := api.NewRequest[models.AppWidgetsGetAppImageUploadServerResponse](a.api)

	res, err := req.Execute("appWidgets.getAppImageUploadServer", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// AppWidgetsGetAppImages Returns an app collection of images for community app widgets
type AppWidgetsGetAppImagesRequest api.Params

func NewAppWidgetsGetAppImagesRequest() AppWidgetsGetAppImagesRequest {
	params := make(AppWidgetsGetAppImagesRequest, 4)
	return params
}

func (a AppWidgetsGetAppImagesRequest) WithOffset(a_offset int) AppWidgetsGetAppImagesRequest {
	a["offset"] = a_offset
	return a
}

func (a AppWidgetsGetAppImagesRequest) WithCount(a_count int) AppWidgetsGetAppImagesRequest {
	a["count"] = a_count
	return a
}

func (a AppWidgetsGetAppImagesRequest) WithImageType(a_image_type string) AppWidgetsGetAppImagesRequest {
	a["image_type"] = a_image_type
	return a
}

func (a AppWidgetsGetAppImagesRequest) Params() api.Params {
	return api.Params(a)
}

// May execute with listed access token types:
//
//	[ user, group, service ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/appWidgets.getAppImages
func (a *AppWidgets) AppWidgetsGetAppImages(params ...api.MethodParams) (resp models.AppWidgetsGetAppImagesResponse, err error) {
	req := api.NewRequest[models.AppWidgetsGetAppImagesResponse](a.api)

	res, err := req.Execute("appWidgets.getAppImages", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// AppWidgetsGetGroupImageUploadServer Returns a URL for uploading a photo to the community collection for community app widgets
type AppWidgetsGetGroupImageUploadServerRequest api.Params

func NewAppWidgetsGetGroupImageUploadServerRequest() AppWidgetsGetGroupImageUploadServerRequest {
	params := make(AppWidgetsGetGroupImageUploadServerRequest, 2)
	return params
}

func (a AppWidgetsGetGroupImageUploadServerRequest) WithImageType(a_image_type string) AppWidgetsGetGroupImageUploadServerRequest {
	a["image_type"] = a_image_type
	return a
}

func (a AppWidgetsGetGroupImageUploadServerRequest) Params() api.Params {
	return api.Params(a)
}

// May execute with listed access token types:
//
//	[ group ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/appWidgets.getGroupImageUploadServer
func (a *AppWidgets) AppWidgetsGetGroupImageUploadServer(params ...api.MethodParams) (resp models.AppWidgetsGetGroupImageUploadServerResponse, err error) {
	req := api.NewRequest[models.AppWidgetsGetGroupImageUploadServerResponse](a.api)

	res, err := req.Execute("appWidgets.getGroupImageUploadServer", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// AppWidgetsGetGroupImages Returns a community collection of images for community app widgets
type AppWidgetsGetGroupImagesRequest api.Params

func NewAppWidgetsGetGroupImagesRequest() AppWidgetsGetGroupImagesRequest {
	params := make(AppWidgetsGetGroupImagesRequest, 4)
	return params
}

func (a AppWidgetsGetGroupImagesRequest) WithOffset(a_offset int) AppWidgetsGetGroupImagesRequest {
	a["offset"] = a_offset
	return a
}

func (a AppWidgetsGetGroupImagesRequest) WithCount(a_count int) AppWidgetsGetGroupImagesRequest {
	a["count"] = a_count
	return a
}

func (a AppWidgetsGetGroupImagesRequest) WithImageType(a_image_type string) AppWidgetsGetGroupImagesRequest {
	a["image_type"] = a_image_type
	return a
}

func (a AppWidgetsGetGroupImagesRequest) Params() api.Params {
	return api.Params(a)
}

// May execute with listed access token types:
//
//	[ group ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/appWidgets.getGroupImages
func (a *AppWidgets) AppWidgetsGetGroupImages(params ...api.MethodParams) (resp models.AppWidgetsGetGroupImagesResponse, err error) {
	req := api.NewRequest[models.AppWidgetsGetGroupImagesResponse](a.api)

	res, err := req.Execute("appWidgets.getGroupImages", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// AppWidgetsGetImagesById Returns an image for community app widgets by its ID
type AppWidgetsGetImagesByIdRequest api.Params

func NewAppWidgetsGetImagesByIdRequest() AppWidgetsGetImagesByIdRequest {
	params := make(AppWidgetsGetImagesByIdRequest, 2)
	return params
}

func (a AppWidgetsGetImagesByIdRequest) WithImages(a_images []string) AppWidgetsGetImagesByIdRequest {
	a["images"] = a_images
	return a
}

func (a AppWidgetsGetImagesByIdRequest) Params() api.Params {
	return api.Params(a)
}

// May execute with listed access token types:
//
//	[ user, group, service ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/appWidgets.getImagesById
func (a *AppWidgets) AppWidgetsGetImagesById(params ...api.MethodParams) (resp models.AppWidgetsGetImagesByIdResponse, err error) {
	req := api.NewRequest[models.AppWidgetsGetImagesByIdResponse](a.api)

	res, err := req.Execute("appWidgets.getImagesById", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// AppWidgetsSaveAppImage Allows to save image into app collection for community app widgets
type AppWidgetsSaveAppImageRequest api.Params

func NewAppWidgetsSaveAppImageRequest() AppWidgetsSaveAppImageRequest {
	params := make(AppWidgetsSaveAppImageRequest, 3)
	return params
}

func (a AppWidgetsSaveAppImageRequest) WithHash(a_hash string) AppWidgetsSaveAppImageRequest {
	a["hash"] = a_hash
	return a
}

func (a AppWidgetsSaveAppImageRequest) WithImage(a_image string) AppWidgetsSaveAppImageRequest {
	a["image"] = a_image
	return a
}

func (a AppWidgetsSaveAppImageRequest) Params() api.Params {
	return api.Params(a)
}

// May execute with listed access token types:
//
//	[ service ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_ParamPhoto ]
//
// https://dev.vk.com/method/appWidgets.saveAppImage
func (a *AppWidgets) AppWidgetsSaveAppImage(params ...api.MethodParams) (resp models.AppWidgetsSaveAppImageResponse, err error) {
	req := api.NewRequest[models.AppWidgetsSaveAppImageResponse](a.api)

	res, err := req.Execute("appWidgets.saveAppImage", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// AppWidgetsSaveGroupImage Allows to save image into community collection for community app widgets
type AppWidgetsSaveGroupImageRequest api.Params

func NewAppWidgetsSaveGroupImageRequest() AppWidgetsSaveGroupImageRequest {
	params := make(AppWidgetsSaveGroupImageRequest, 3)
	return params
}

func (a AppWidgetsSaveGroupImageRequest) WithHash(a_hash string) AppWidgetsSaveGroupImageRequest {
	a["hash"] = a_hash
	return a
}

func (a AppWidgetsSaveGroupImageRequest) WithImage(a_image string) AppWidgetsSaveGroupImageRequest {
	a["image"] = a_image
	return a
}

func (a AppWidgetsSaveGroupImageRequest) Params() api.Params {
	return api.Params(a)
}

// May execute with listed access token types:
//
//	[ group ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_ParamPhoto ]
//
// https://dev.vk.com/method/appWidgets.saveGroupImage
func (a *AppWidgets) AppWidgetsSaveGroupImage(params ...api.MethodParams) (resp models.AppWidgetsSaveGroupImageResponse, err error) {
	req := api.NewRequest[models.AppWidgetsSaveGroupImageResponse](a.api)

	res, err := req.Execute("appWidgets.saveGroupImage", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// AppWidgetsUpdate Allows to update community app widget
type AppWidgetsUpdateRequest api.Params

func NewAppWidgetsUpdateRequest() AppWidgetsUpdateRequest {
	params := make(AppWidgetsUpdateRequest, 3)
	return params
}

func (a AppWidgetsUpdateRequest) WithCode(a_code string) AppWidgetsUpdateRequest {
	a["code"] = a_code
	return a
}

func (a AppWidgetsUpdateRequest) WithType(a_type string) AppWidgetsUpdateRequest {
	a["type"] = a_type
	return a
}

func (a AppWidgetsUpdateRequest) Params() api.Params {
	return api.Params(a)
}

// May execute with listed access token types:
//
//	[ group ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_Compile, Error_Runtime, Error_Blocked, Error_WallAccessPost, Error_WallAccessReplies, Error_ParamGroupId ]
//
// https://dev.vk.com/method/appWidgets.update
func (a *AppWidgets) AppWidgetsUpdate(params ...api.MethodParams) (resp models.BaseOkResponse, err error) {
	req := api.NewRequest[models.BaseOkResponse](a.api)

	res, err := req.Execute("appWidgets.update", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}
