// Code generated by https://github.com/defany/govk. DO NOT EDIT.

package requests

import (
	"github.com/defany/govk/api"
	"github.com/defany/govk/api/gen/models"
)

// StoriesGetPhotoUploadServer Returns URL for uploading a story with photo.
type StoriesGetPhotoUploadServerRequest api.Params

func NewStoriesGetPhotoUploadServerRequest() StoriesGetPhotoUploadServerRequest {
	params := make(StoriesGetPhotoUploadServerRequest, 8)
	return params
}

func (s StoriesGetPhotoUploadServerRequest) WithAddToNews(s_add_to_news bool) StoriesGetPhotoUploadServerRequest{
	s["add_to_news"] = s_add_to_news
	return s
}

func (s StoriesGetPhotoUploadServerRequest) WithUserIds(s_user_ids []int) StoriesGetPhotoUploadServerRequest{
	s["user_ids"] = s_user_ids
	return s
}

func (s StoriesGetPhotoUploadServerRequest) WithReplyToStory(s_reply_to_story string) StoriesGetPhotoUploadServerRequest{
	s["reply_to_story"] = s_reply_to_story
	return s
}

func (s StoriesGetPhotoUploadServerRequest) WithLinkText(s_link_text models.StoriesUploadLinkText) StoriesGetPhotoUploadServerRequest{
	s["link_text"] = s_link_text
	return s
}

func (s StoriesGetPhotoUploadServerRequest) WithLinkUrl(s_link_url string) StoriesGetPhotoUploadServerRequest{
	s["link_url"] = s_link_url
	return s
}

func (s StoriesGetPhotoUploadServerRequest) WithGroupId(s_group_id int) StoriesGetPhotoUploadServerRequest{
	s["group_id"] = s_group_id
	return s
}

func (s StoriesGetPhotoUploadServerRequest) WithClickableStickers(s_clickable_stickers string) StoriesGetPhotoUploadServerRequest{
	s["clickable_stickers"] = s_clickable_stickers
	return s
}

func (s StoriesGetPhotoUploadServerRequest) Params() api.Params {
	return api.Params(s)
}

// May execute with listed access token types:
//    [ user, group ]
// When executing method, may return one of global or with listed codes API errors:
//    [ Error_MessagesUserBlocked, Error_StoryIncorrectReplyPrivacy, Error_Blocked ]
//
// https://dev.vk.com/method/stories.getPhotoUploadServer
func (s *Stories) StoriesGetPhotoUploadServer(params ...api.MethodParams) (resp models.StoriesGetPhotoUploadServerResponse, err error) {
	req := api.NewRequest[models.StoriesGetPhotoUploadServerResponse](s.api)

	res, err := req.Execute("stories.getPhotoUploadServer", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

