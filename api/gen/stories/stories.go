// Code generated by https://github.com/defany/govk. DO NOT EDIT.

package requests

import (
	"github.com/defany/govk/api"
	"github.com/defany/govk/api/gen/models"
)

type Stories struct {
	api *api.API
}

func NewStories(api *api.API) *Stories {
	return &Stories{
		api: api,
	}
}

// StoriesBanOwner Allows to hide stories from chosen sources from current user's feed.
type StoriesBanOwnerRequest api.Params

func NewStoriesBanOwnerRequest() StoriesBanOwnerRequest {
	params := make(StoriesBanOwnerRequest, 2)
	return params
}

func (s StoriesBanOwnerRequest) WithOwnersIds(s_owners_ids []int) StoriesBanOwnerRequest {
	s["owners_ids"] = s_owners_ids
	return s
}

func (s StoriesBanOwnerRequest) Params() api.Params {
	return api.Params(s)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/stories.banOwner
func (s *Stories) StoriesBanOwner(params ...api.MethodParams) (resp models.BaseOkResponse, err error) {
	req := api.NewRequest[models.BaseOkResponse](s.api)

	res, err := req.Execute("stories.banOwner", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// StoriesDelete Allows to delete story.
type StoriesDeleteRequest api.Params

func NewStoriesDeleteRequest() StoriesDeleteRequest {
	params := make(StoriesDeleteRequest, 4)
	return params
}

func (s StoriesDeleteRequest) WithOwnerId(s_owner_id int) StoriesDeleteRequest {
	s["owner_id"] = s_owner_id
	return s
}

func (s StoriesDeleteRequest) WithStoryId(s_story_id int) StoriesDeleteRequest {
	s["story_id"] = s_story_id
	return s
}

func (s StoriesDeleteRequest) WithStories(s_stories []string) StoriesDeleteRequest {
	s["stories"] = s_stories
	return s
}

func (s StoriesDeleteRequest) Params() api.Params {
	return api.Params(s)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/stories.delete
func (s *Stories) StoriesDelete(params ...api.MethodParams) (resp models.BaseOkResponse, err error) {
	req := api.NewRequest[models.BaseOkResponse](s.api)

	res, err := req.Execute("stories.delete", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// StoriesGet Returns stories available for current user.
type StoriesGetRequest api.Params

func NewStoriesGetRequest() StoriesGetRequest {
	params := make(StoriesGetRequest, 4)
	return params
}

func (s StoriesGetRequest) WithOwnerId(s_owner_id int) StoriesGetRequest {
	s["owner_id"] = s_owner_id
	return s
}

func (s StoriesGetRequest) WithExtended(s_extended bool) StoriesGetRequest {
	s["extended"] = s_extended
	return s
}

func (s StoriesGetRequest) WithFields(s_fields []models.BaseUserGroupFields) StoriesGetRequest {
	s["fields"] = s_fields
	return s
}

func (s StoriesGetRequest) Params() api.Params {
	return api.Params(s)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/stories.get
func (s *Stories) StoriesGet(params ...api.MethodParams) (resp models.StoriesGetV5113Response, err error) {
	req := api.NewRequest[models.StoriesGetV5113Response](s.api)

	res, err := req.Execute("stories.get", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// StoriesGetBanned Returns list of sources hidden from current user's feed.
type StoriesGetBannedRequest api.Params

func NewStoriesGetBannedRequest() StoriesGetBannedRequest {
	params := make(StoriesGetBannedRequest, 4)
	return params
}

func (s StoriesGetBannedRequest) WithExtended(s_extended bool) StoriesGetBannedRequest {
	s["extended"] = s_extended
	return s
}

func (s StoriesGetBannedRequest) WithFields(s_fields []models.BaseUserGroupFields) StoriesGetBannedRequest {
	s["fields"] = s_fields
	return s
}

func (s StoriesGetBannedRequest) Params() api.Params {
	return api.Params(s)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/stories.getBanned
func (s *Stories) StoriesGetBanned(params ...api.MethodParams) (resp models.StoriesGetBannedResponse, err error) {
	req := api.NewRequest[models.StoriesGetBannedResponse](s.api)

	res, err := req.Execute("stories.getBanned", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// StoriesGetBannedExtended Returns list of sources hidden from current user's feed.
// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/stories.getBanned
func (s *Stories) StoriesGetBannedExtended(params ...api.MethodParams) (resp models.StoriesGetBannedExtendedResponse, err error) {
	req := api.NewRequest[models.StoriesGetBannedExtendedResponse](s.api)

	res, err := req.Execute("stories.getBanned", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// StoriesGetById Returns story by its ID.
type StoriesGetByIdRequest api.Params

func NewStoriesGetByIdRequest() StoriesGetByIdRequest {
	params := make(StoriesGetByIdRequest, 4)
	return params
}

func (s StoriesGetByIdRequest) WithStories(s_stories []string) StoriesGetByIdRequest {
	s["stories"] = s_stories
	return s
}

func (s StoriesGetByIdRequest) WithExtended(s_extended bool) StoriesGetByIdRequest {
	s["extended"] = s_extended
	return s
}

func (s StoriesGetByIdRequest) WithFields(s_fields []models.BaseUserGroupFields) StoriesGetByIdRequest {
	s["fields"] = s_fields
	return s
}

func (s StoriesGetByIdRequest) Params() api.Params {
	return api.Params(s)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_StoryExpired ]
//
// https://dev.vk.com/method/stories.getById
func (s *Stories) StoriesGetById(params ...api.MethodParams) (resp models.StoriesGetByIdExtendedResponse, err error) {
	req := api.NewRequest[models.StoriesGetByIdExtendedResponse](s.api)

	res, err := req.Execute("stories.getById", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// StoriesGetPhotoUploadServer Returns URL for uploading a story with photo.
type StoriesGetPhotoUploadServerRequest api.Params

func NewStoriesGetPhotoUploadServerRequest() StoriesGetPhotoUploadServerRequest {
	params := make(StoriesGetPhotoUploadServerRequest, 8)
	return params
}

func (s StoriesGetPhotoUploadServerRequest) WithAddToNews(s_add_to_news bool) StoriesGetPhotoUploadServerRequest {
	s["add_to_news"] = s_add_to_news
	return s
}

func (s StoriesGetPhotoUploadServerRequest) WithUserIds(s_user_ids []int) StoriesGetPhotoUploadServerRequest {
	s["user_ids"] = s_user_ids
	return s
}

func (s StoriesGetPhotoUploadServerRequest) WithReplyToStory(s_reply_to_story string) StoriesGetPhotoUploadServerRequest {
	s["reply_to_story"] = s_reply_to_story
	return s
}

func (s StoriesGetPhotoUploadServerRequest) WithLinkText(s_link_text models.StoriesUploadLinkText) StoriesGetPhotoUploadServerRequest {
	s["link_text"] = s_link_text
	return s
}

func (s StoriesGetPhotoUploadServerRequest) WithLinkUrl(s_link_url string) StoriesGetPhotoUploadServerRequest {
	s["link_url"] = s_link_url
	return s
}

func (s StoriesGetPhotoUploadServerRequest) WithGroupId(s_group_id int) StoriesGetPhotoUploadServerRequest {
	s["group_id"] = s_group_id
	return s
}

func (s StoriesGetPhotoUploadServerRequest) WithClickableStickers(s_clickable_stickers string) StoriesGetPhotoUploadServerRequest {
	s["clickable_stickers"] = s_clickable_stickers
	return s
}

func (s StoriesGetPhotoUploadServerRequest) Params() api.Params {
	return api.Params(s)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_MessagesUserBlocked, Error_StoryIncorrectReplyPrivacy, Error_Blocked ]
//
// https://dev.vk.com/method/stories.getPhotoUploadServer
func (s *Stories) StoriesGetPhotoUploadServer(params ...api.MethodParams) (resp models.StoriesGetPhotoUploadServerResponse, err error) {
	req := api.NewRequest[models.StoriesGetPhotoUploadServerResponse](s.api)

	res, err := req.Execute("stories.getPhotoUploadServer", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// StoriesGetReplies Returns replies to the story.
type StoriesGetRepliesRequest api.Params

func NewStoriesGetRepliesRequest() StoriesGetRepliesRequest {
	params := make(StoriesGetRepliesRequest, 6)
	return params
}

func (s StoriesGetRepliesRequest) WithOwnerId(s_owner_id int) StoriesGetRepliesRequest {
	s["owner_id"] = s_owner_id
	return s
}

func (s StoriesGetRepliesRequest) WithStoryId(s_story_id int) StoriesGetRepliesRequest {
	s["story_id"] = s_story_id
	return s
}

func (s StoriesGetRepliesRequest) WithAccessKey(s_access_key string) StoriesGetRepliesRequest {
	s["access_key"] = s_access_key
	return s
}

func (s StoriesGetRepliesRequest) WithExtended(s_extended bool) StoriesGetRepliesRequest {
	s["extended"] = s_extended
	return s
}

func (s StoriesGetRepliesRequest) WithFields(s_fields []models.BaseUserGroupFields) StoriesGetRepliesRequest {
	s["fields"] = s_fields
	return s
}

func (s StoriesGetRepliesRequest) Params() api.Params {
	return api.Params(s)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/stories.getReplies
func (s *Stories) StoriesGetReplies(params ...api.MethodParams) (resp models.StoriesGetV5113Response, err error) {
	req := api.NewRequest[models.StoriesGetV5113Response](s.api)

	res, err := req.Execute("stories.getReplies", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// StoriesGetStats Returns stories available for current user.
type StoriesGetStatsRequest api.Params

func NewStoriesGetStatsRequest() StoriesGetStatsRequest {
	params := make(StoriesGetStatsRequest, 3)
	return params
}

func (s StoriesGetStatsRequest) WithOwnerId(s_owner_id int) StoriesGetStatsRequest {
	s["owner_id"] = s_owner_id
	return s
}

func (s StoriesGetStatsRequest) WithStoryId(s_story_id int) StoriesGetStatsRequest {
	s["story_id"] = s_story_id
	return s
}

func (s StoriesGetStatsRequest) Params() api.Params {
	return api.Params(s)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/stories.getStats
func (s *Stories) StoriesGetStats(params ...api.MethodParams) (resp models.StoriesGetStatsResponse, err error) {
	req := api.NewRequest[models.StoriesGetStatsResponse](s.api)

	res, err := req.Execute("stories.getStats", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// StoriesGetVideoUploadServer Allows to receive URL for uploading story with video.
type StoriesGetVideoUploadServerRequest api.Params

func NewStoriesGetVideoUploadServerRequest() StoriesGetVideoUploadServerRequest {
	params := make(StoriesGetVideoUploadServerRequest, 8)
	return params
}

func (s StoriesGetVideoUploadServerRequest) WithAddToNews(s_add_to_news bool) StoriesGetVideoUploadServerRequest {
	s["add_to_news"] = s_add_to_news
	return s
}

func (s StoriesGetVideoUploadServerRequest) WithUserIds(s_user_ids []int) StoriesGetVideoUploadServerRequest {
	s["user_ids"] = s_user_ids
	return s
}

func (s StoriesGetVideoUploadServerRequest) WithReplyToStory(s_reply_to_story string) StoriesGetVideoUploadServerRequest {
	s["reply_to_story"] = s_reply_to_story
	return s
}

func (s StoriesGetVideoUploadServerRequest) WithLinkText(s_link_text models.StoriesUploadLinkText) StoriesGetVideoUploadServerRequest {
	s["link_text"] = s_link_text
	return s
}

func (s StoriesGetVideoUploadServerRequest) WithLinkUrl(s_link_url string) StoriesGetVideoUploadServerRequest {
	s["link_url"] = s_link_url
	return s
}

func (s StoriesGetVideoUploadServerRequest) WithGroupId(s_group_id int) StoriesGetVideoUploadServerRequest {
	s["group_id"] = s_group_id
	return s
}

func (s StoriesGetVideoUploadServerRequest) WithClickableStickers(s_clickable_stickers string) StoriesGetVideoUploadServerRequest {
	s["clickable_stickers"] = s_clickable_stickers
	return s
}

func (s StoriesGetVideoUploadServerRequest) Params() api.Params {
	return api.Params(s)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_MessagesUserBlocked, Error_StoryIncorrectReplyPrivacy, Error_Blocked ]
//
// https://dev.vk.com/method/stories.getVideoUploadServer
func (s *Stories) StoriesGetVideoUploadServer(params ...api.MethodParams) (resp models.StoriesGetVideoUploadServerResponse, err error) {
	req := api.NewRequest[models.StoriesGetVideoUploadServerResponse](s.api)

	res, err := req.Execute("stories.getVideoUploadServer", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// StoriesGetViewers Returns a list of story viewers.
type StoriesGetViewersRequest api.Params

func NewStoriesGetViewersRequest() StoriesGetViewersRequest {
	params := make(StoriesGetViewersRequest, 8)
	return params
}

func (s StoriesGetViewersRequest) WithOwnerId(s_owner_id int) StoriesGetViewersRequest {
	s["owner_id"] = s_owner_id
	return s
}

func (s StoriesGetViewersRequest) WithStoryId(s_story_id int) StoriesGetViewersRequest {
	s["story_id"] = s_story_id
	return s
}

func (s StoriesGetViewersRequest) WithCount(s_count int) StoriesGetViewersRequest {
	s["count"] = s_count
	return s
}

func (s StoriesGetViewersRequest) WithOffset(s_offset int) StoriesGetViewersRequest {
	s["offset"] = s_offset
	return s
}

func (s StoriesGetViewersRequest) WithExtended(s_extended bool) StoriesGetViewersRequest {
	s["extended"] = s_extended
	return s
}

func (s StoriesGetViewersRequest) WithFields(s_fields []models.BaseUserGroupFields) StoriesGetViewersRequest {
	s["fields"] = s_fields
	return s
}

func (s StoriesGetViewersRequest) Params() api.Params {
	return api.Params(s)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_StoryExpired ]
//
// https://dev.vk.com/method/stories.getViewers
func (s *Stories) StoriesGetViewers(params ...api.MethodParams) (resp models.StoriesGetViewersExtendedV5115Response, err error) {
	req := api.NewRequest[models.StoriesGetViewersExtendedV5115Response](s.api)

	res, err := req.Execute("stories.getViewers", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// StoriesGetViewersExtended Returns a list of story viewers.
// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global or with listed codes API errors:
//
//	[ Error_StoryExpired ]
//
// https://dev.vk.com/method/stories.getViewers
func (s *Stories) StoriesGetViewersExtended(params ...api.MethodParams) (resp models.StoriesGetViewersExtendedV5115Response, err error) {
	req := api.NewRequest[models.StoriesGetViewersExtendedV5115Response](s.api)

	res, err := req.Execute("stories.getViewers", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// StoriesHideAllReplies Hides all replies in the last 24 hours from the user to current user's stories.
type StoriesHideAllRepliesRequest api.Params

func NewStoriesHideAllRepliesRequest() StoriesHideAllRepliesRequest {
	params := make(StoriesHideAllRepliesRequest, 3)
	return params
}

func (s StoriesHideAllRepliesRequest) WithOwnerId(s_owner_id int) StoriesHideAllRepliesRequest {
	s["owner_id"] = s_owner_id
	return s
}

func (s StoriesHideAllRepliesRequest) WithGroupId(s_group_id int) StoriesHideAllRepliesRequest {
	s["group_id"] = s_group_id
	return s
}

func (s StoriesHideAllRepliesRequest) Params() api.Params {
	return api.Params(s)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/stories.hideAllReplies
func (s *Stories) StoriesHideAllReplies(params ...api.MethodParams) (resp models.BaseOkResponse, err error) {
	req := api.NewRequest[models.BaseOkResponse](s.api)

	res, err := req.Execute("stories.hideAllReplies", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// StoriesHideReply Hides the reply to the current user's story.
type StoriesHideReplyRequest api.Params

func NewStoriesHideReplyRequest() StoriesHideReplyRequest {
	params := make(StoriesHideReplyRequest, 3)
	return params
}

func (s StoriesHideReplyRequest) WithOwnerId(s_owner_id int) StoriesHideReplyRequest {
	s["owner_id"] = s_owner_id
	return s
}

func (s StoriesHideReplyRequest) WithStoryId(s_story_id int) StoriesHideReplyRequest {
	s["story_id"] = s_story_id
	return s
}

func (s StoriesHideReplyRequest) Params() api.Params {
	return api.Params(s)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/stories.hideReply
func (s *Stories) StoriesHideReply(params ...api.MethodParams) (resp models.BaseOkResponse, err error) {
	req := api.NewRequest[models.BaseOkResponse](s.api)

	res, err := req.Execute("stories.hideReply", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// StoriesSave ...
type StoriesSaveRequest api.Params

func NewStoriesSaveRequest() StoriesSaveRequest {
	params := make(StoriesSaveRequest, 4)
	return params
}

func (s StoriesSaveRequest) WithUploadResults(s_upload_results []string) StoriesSaveRequest {
	s["upload_results"] = s_upload_results
	return s
}

func (s StoriesSaveRequest) WithExtended(s_extended bool) StoriesSaveRequest {
	s["extended"] = s_extended
	return s
}

func (s StoriesSaveRequest) WithFields(s_fields []models.BaseUserGroupFields) StoriesSaveRequest {
	s["fields"] = s_fields
	return s
}

func (s StoriesSaveRequest) Params() api.Params {
	return api.Params(s)
}

// May execute with listed access token types:
//
//	[ user, group ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/stories.save
func (s *Stories) StoriesSave(params ...api.MethodParams) (resp models.StoriesSaveResponse, err error) {
	req := api.NewRequest[models.StoriesSaveResponse](s.api)

	res, err := req.Execute("stories.save", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// StoriesSearch ...
type StoriesSearchRequest api.Params

func NewStoriesSearchRequest() StoriesSearchRequest {
	params := make(StoriesSearchRequest, 10)
	return params
}

func (s StoriesSearchRequest) WithQ(s_q string) StoriesSearchRequest {
	s["q"] = s_q
	return s
}

func (s StoriesSearchRequest) WithPlaceId(s_place_id int) StoriesSearchRequest {
	s["place_id"] = s_place_id
	return s
}

func (s StoriesSearchRequest) WithLatitude(s_latitude float64) StoriesSearchRequest {
	s["latitude"] = s_latitude
	return s
}

func (s StoriesSearchRequest) WithLongitude(s_longitude float64) StoriesSearchRequest {
	s["longitude"] = s_longitude
	return s
}

func (s StoriesSearchRequest) WithRadius(s_radius int) StoriesSearchRequest {
	s["radius"] = s_radius
	return s
}

func (s StoriesSearchRequest) WithMentionedId(s_mentioned_id int) StoriesSearchRequest {
	s["mentioned_id"] = s_mentioned_id
	return s
}

func (s StoriesSearchRequest) WithCount(s_count int) StoriesSearchRequest {
	s["count"] = s_count
	return s
}

func (s StoriesSearchRequest) WithExtended(s_extended bool) StoriesSearchRequest {
	s["extended"] = s_extended
	return s
}

func (s StoriesSearchRequest) WithFields(s_fields []models.BaseUserGroupFields) StoriesSearchRequest {
	s["fields"] = s_fields
	return s
}

func (s StoriesSearchRequest) Params() api.Params {
	return api.Params(s)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/stories.search
func (s *Stories) StoriesSearch(params ...api.MethodParams) (resp models.StoriesGetV5113Response, err error) {
	req := api.NewRequest[models.StoriesGetV5113Response](s.api)

	res, err := req.Execute("stories.search", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// StoriesSendInteraction ...
type StoriesSendInteractionRequest api.Params

func NewStoriesSendInteractionRequest() StoriesSendInteractionRequest {
	params := make(StoriesSendInteractionRequest, 6)
	return params
}

func (s StoriesSendInteractionRequest) WithAccessKey(s_access_key string) StoriesSendInteractionRequest {
	s["access_key"] = s_access_key
	return s
}

func (s StoriesSendInteractionRequest) WithMessage(s_message string) StoriesSendInteractionRequest {
	s["message"] = s_message
	return s
}

func (s StoriesSendInteractionRequest) WithIsBroadcast(s_is_broadcast bool) StoriesSendInteractionRequest {
	s["is_broadcast"] = s_is_broadcast
	return s
}

func (s StoriesSendInteractionRequest) WithIsAnonymous(s_is_anonymous bool) StoriesSendInteractionRequest {
	s["is_anonymous"] = s_is_anonymous
	return s
}

func (s StoriesSendInteractionRequest) WithUnseenMarker(s_unseen_marker bool) StoriesSendInteractionRequest {
	s["unseen_marker"] = s_unseen_marker
	return s
}

func (s StoriesSendInteractionRequest) Params() api.Params {
	return api.Params(s)
}

// May execute with listed access token types:
//
//	[ service ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/stories.sendInteraction
func (s *Stories) StoriesSendInteraction(params ...api.MethodParams) (resp models.BaseOkResponse, err error) {
	req := api.NewRequest[models.BaseOkResponse](s.api)

	res, err := req.Execute("stories.sendInteraction", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}

// StoriesUnbanOwner Allows to show stories from hidden sources in current user's feed.
type StoriesUnbanOwnerRequest api.Params

func NewStoriesUnbanOwnerRequest() StoriesUnbanOwnerRequest {
	params := make(StoriesUnbanOwnerRequest, 2)
	return params
}

func (s StoriesUnbanOwnerRequest) WithOwnersIds(s_owners_ids []int) StoriesUnbanOwnerRequest {
	s["owners_ids"] = s_owners_ids
	return s
}

func (s StoriesUnbanOwnerRequest) Params() api.Params {
	return api.Params(s)
}

// May execute with listed access token types:
//
//	[ user ]
//
// When executing method, may return one of global API errors.
//
// https://dev.vk.com/method/stories.unbanOwner
func (s *Stories) StoriesUnbanOwner(params ...api.MethodParams) (resp models.BaseOkResponse, err error) {
	req := api.NewRequest[models.BaseOkResponse](s.api)

	res, err := req.Execute("stories.unbanOwner", api.ParamsOrNil(params))
	if err != nil {
		return res, err
	}

	return res, nil
}
